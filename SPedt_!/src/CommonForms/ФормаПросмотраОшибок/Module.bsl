
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Результат") Тогда
		Результат			= Параметры.Результат;
	КонецЕсли;
	Если Параметры.Свойство("Заголовок") Тогда
		ЭтаФорма.Заголовок	= Параметры.Заголовок;
	КонецЕсли;
	
	
	Если Параметры.Свойство("АдресРасшифровки") Тогда
		АдресРасшифровки    = Параметры.АдресРасшифровки;
	КонецЕсли;
	
	Если Параметры.Свойство("АдресСКД") Тогда
		АдресХранилищаСКД    = Параметры.АдресСКД;
	КонецЕсли;

	//Если Параметры.Супергруппа Тогда
	//	структураСверки = Документы.РазборКоробки.ПолучитьСверкуСупергруппы(Параметры);
	//	Результат		= структураСверки.Результат;
	//Иначе	
	//	структураСверки = Документы.РазборКоробки.ПолучитьСверкуКоробок(Параметры);
	//	Результат		= структураСверки.Результат;
	//КонецЕсли;	
КонецПроцедуры

#Область РасшифровкаОтчета
  &НаКлиенте
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	СтандартнаяОбработка = Ложь;
	ПараметрВыполненогоДействия	=  Неопределено;	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСКД);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресРасшифровки, ИсточникДоступныхНастроек);
	
	
		
	выпДействие		= ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет;	
		
	ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
	
	ДополнительныеПункты	= новый СписокЗначений();
	
	
	Оповещение = Новый ОписаниеОповещения("РезультатОбработкаРасшифровки_Продолжение", ЭтаФорма, Расшифровка,
											"РезультатОбработкаРасшифровки_Ошибка",ЭтаФорма);
	ОбработкаРасшифровки.ПоказатьВыборДействия(Оповещение, Расшифровка, ДоступныеДействия, , Истина);
	
	//ОбработкаРасшифровки.ВыбратьДействие(Расшифровка, выпДействие ,ПараметрВыполненогоДействия,ДоступныеДействия,ДополнительныеПункты);
	//
	//Если выпДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
	//	
	//ИначеЕсли выпДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда	
	//	ОткрытьЗначение(ПараметрВыполненогоДействия);
	//КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки_Продолжение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
    Если ПараметрВыполненногоДействия <> Неопределено Тогда
        
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			//ОткрытьЗначение(ПараметрВыполненногоДействия);
            ПоказатьЗначение(,ПараметрВыполненногоДействия);
        КонецЕсли;
        
    КонецЕсли;        
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки_Ошибка(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	                                 
КонецПроцедуры

#КонецОбласти


#Область НеИспользуется


//&НаКлиенте
//Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
//      ПараметрВыполненогоДействия	=  Неопределено;
//      СтруктураДанных = Новый Структура;
//      СтруктураДанных.Вставить("Организатор", "Организатор");
//	  //СтруктураДанных.Вставить("Менеджер", "Контрагент.ОсновнойМенеджерПокупателя");
//	  //СтруктураДанных.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");

//      ЗначенияРасшифровки = ПолучитьДанныеРасшифровки(Расшифровка, СтруктураДанных);
//      Если ЗначенияРасшифровки = неопределено Тогда Возврат; КонецЕсли;
//      СтандартнаяОбработка = Ложь;
//      обрРасшифровки	= новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ПараметрВыполненогоДействия);
//      
//      выпДействие		= ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет;
//	  
//	  
//	  
//	  ДоступныеДействия	= Новый Массив;      
//      ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
//      ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
//      ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
//      ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
//      ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
//      ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
//      
//      ДополнительныеПункты	= новый СписокЗначений();
//   //   ДополнительныеПункты.Добавить("РасшифровкаПоЗаказам", 		"Расшифровка по заказам");
//  
//      обрРасшифровки.ВыбратьДействие(Расшифровка, выпДействие ,ПараметрВыполненогоДействия,ДоступныеДействия,ДополнительныеПункты);

//	 Если выпДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
//	 	
//	 ИначеЕсли выпДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда	
//	 	ОткрытьЗначение(ПараметрВыполненогоДействия);
////	 ИначеЕсли выпДействие = "РасшифровкаПоЗаказам" Тогда	
////	 	
////
////	 	табДокРасшифровки =	ПолучитьРасшифровкуПоОрганизатору(ЗначенияРасшифровки.Организатор);
////	 			 									
////		ОткрытьФорму("Общаяформа.ФормаПросмотраТабличногоДокумента",
////						Новый Структура("Результат", табДокРасшифровки),
////						ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
////		//	СтоСП_Печать_Клиент.ЧекНЗРасходная(ЗначенияРасшифровки.участник,Истина);
////	 ИначеЕсли выпДействие = "Движение" Тогда	
////	 	ПараметрДаты	=	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(новый ПараметрКомпоновкиДанных("НаДату"));
////		ПараметрыЗаполнения= Новый Структура();
////		ПараметрыЗаполнения.Вставить("ДатаОтчета", 		ПараметрДаты.Значение);
//////		ПараметрыЗаполнения.Вставить("ДнейХранения", 	новый структура("ПравоеЗначение, Использование, ВидСравнения",14, Истина, ВидСравненияКомпоновкиДанных.Больше) );
////		ПараметрыЗаполнения.Вставить("Участник", 		новый структура("ПравоеЗначение, Использование",ЗначенияРасшифровки.участник, Истина) );
////	
////    	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОткрытияДвижения",ЭтаФорма);
////	
////		ОткрытьФорму("Документ.Движение.ФормаОбъекта",Новый структура("ПараметрыЗаполнения",ПараметрыЗаполнения) ,ЭтаФорма,,,,ОписаниеОповещения  );
////			


//	 КонецЕсли;	
//      

////	  Если ЗначениеЗаполнено(ЗначенияРасшифровки.участник) Тогда
////		  СтандартнаяОбработка = Ложь;
////			СтоСП_Печать_Клиент.ЧекНЗРасходная(ЗначенияРасшифровки.участник);	  
////	  КонецЕсли;	
//	    
//	    
//	    
//	    
//КонецПроцедуры


//&НаСервере
//Функция ПолучитьДанныеРасшифровки(Расшифровка, СтруктураДанных)

//      Данные_Расшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);

//      Если Данные_Расшифровки <> Неопределено Тогда
//            Для каждого ЭлементДанных Из СтруктураДанных Цикл
//                  Родитель = Данные_Расшифровки.Элементы[Расшифровка];
//                  Пока Истина Цикл
//                        МассивРодителей = Родитель.ПолучитьРодителей();
//                        Если МассивРодителей.Количество() = 0 Тогда
//                              Прервать;
//                        КонецЕсли;
//                        Родитель = Родитель.ПолучитьРодителей()[0];
//                        Если ТипЗнч(Родитель) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
//                              Поле = Родитель.ПолучитьПоля().Найти(ЭлементДанных.Значение);
//                              Если Поле <> Неопределено Тогда
//                                    СтруктураДанных.Вставить(ЭлементДанных.Ключ, Поле.Значение);
//                                    Прервать;
//                              КонецЕсли;
//                        КонецЕсли;
//                  КонецЦикла;
//            КонецЦикла;
//      КонецЕсли;

//      Возврат СтруктураДанных;

//  КонецФункции 


#КонецОбласти
