&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ClientID=    "458896637484-tnm2pjka593bnn13gdkrtapidk36hj4e.apps.googleusercontent.com";
	RedirectURIs="urn:ietf:wg:oauth:2.0:oob";
	

	ClientSecret = "5B_1DYDCeMUYH-zVMVJRMZ3S";

КонецПроцедуры



&НаКлиенте
Процедура Авторизоваться(Команда)
	
	access_token = "";
	Endpoint = "https://accounts.google.com/o/oauth2/auth";
	
	Parameter = "response_type=code";
	
	Parameter = Parameter + "&" + "client_id=" + ClientID;
	Parameter = Parameter + "&" + "redirect_uri=" + RedirectURIs;	
	Parameter = Parameter + "&" + "scope=https://www.googleapis.com/auth/drive.metadata";
	Parameter = Parameter + "+" + 		"https://www.googleapis.com/auth/drive";
	Parameter = Parameter + "+" + 		"https://www.googleapis.com/auth/drive.file";
	Parameter = Parameter + "+" + 		"https://www.googleapis.com/auth/drive.appdata";
	
	Parameter = Parameter + "&" + "include_granted_scopes=true";
		
	Элементы.Браузер.Документ.URL = (Endpoint+"?"+Parameter);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокФайлов(Команда)
	ПолучитьСписокФайловНаСервере();
КонецПроцедуры


Процедура ПолучитьСписокФайловНаСервере()
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Bearer " + access_token);
	
	ИмяСервера="content.googleapis.com";
	
	ПутьКФайлуНаСервере="/drive/v3/files";
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);		
	
	Соединение = Новый HTTPСоединение(ИмяСервера, ,,, , ,SSL ); //"test1cgd@gmail.com", "45625879"
	
	HTTPЗапрос = Новый HTTPЗапрос(ПутьКФайлуНаСервере, Заголовки);
	HTTPЗапрос.Заголовки.Вставить("Accept-Charset", "utf-8");
	
	HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Стр = HTTPОтвет.ПолучитьТелоКакСтроку();
	Сообщить(Стр);
	
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Стр);
	
	пространствоИмен="https://www.googleapis.com";
	Тип_fileList=ФабрикаXDTO.Тип(пространствоИмен, "fileList");
	Фабрика		=ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,Тип_fileList);
	ЧтениеJSON.Закрыть();
	
	Если Фабрика.files<>Неопределено Тогда
		реквизиты_Дата=Новый Массив;
		//реквизиты_Дата.Добавить("updated");
		тзФайлыПолучили=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Фабрика.files.file,реквизиты_Дата);
	КонецЕсли;
	РазместитьТЗ_НаФорме(тзФайлыПолучили,"тзФайлы",Элементы.Группа_тзФайлы);
    Элементы.тзФайлы.УстановитьДействие("Выбор","тзФайлыВыбор");
КонецПроцедуры


Процедура ПолучитьСписокЛистовНаСервере(spreadsheetId)
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Bearer " + access_token);
	
	ИмяСервера="sheets.googleapis.com";
	
	ПутьКФайлуНаСервере="/v4/spreadsheets/"+spreadsheetId+"?&fields=sheets.properties";
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);		
	
	Соединение = Новый HTTPСоединение(ИмяСервера, ,,, , ,SSL ); //"test1cgd@gmail.com", "45625879"
	
	HTTPЗапрос = Новый HTTPЗапрос(ПутьКФайлуНаСервере, Заголовки);
	HTTPЗапрос.Заголовки.Вставить("Accept-Charset", "utf-8");
	
	HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Стр = HTTPОтвет.ПолучитьТелоКакСтроку();
	Сообщить(Стр);
	
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Стр);
	
	пространствоИмен="https://www.googleapis.com";
	Тип_sheetsList	= ФабрикаXDTO.Тип(пространствоИмен, "sheetsList");
	Тип_sheets		= ФабрикаXDTO.Тип(пространствоИмен, "sheetsList.sheets");
	Фабрика			= ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,Тип_sheetsList);
	ЧтениеJSON.Закрыть();
	
	Если Фабрика.sheets<>Неопределено Тогда
		тзЛистыПолучили=Получить_ТЗ_Листов(Фабрика.sheets.sheet);
	КонецЕсли;
	РазместитьТЗ_НаФорме(тзЛистыПолучили,"тзЛисты",Элементы.Группа_Листы);
//	Элементы.тзФайлы.УстановитьДействие("ПриАктивизацииСтроки","тзФайлыПриАктивизацииСтроки");
КонецПроцедуры

Функция Получить_ТЗ_Листов(СписокXDTO)
	тз=Новый ТаблицаЗначений;
	тз.Колонки.Добавить("title",		новый ОписаниеТипов("Строка"));
	тз.Колонки.Добавить("sheetId",		новый ОписаниеТипов("Строка"));
	тз.Колонки.Добавить("index",		новый ОписаниеТипов("Строка"));
	тз.Колонки.Добавить("columnCount",	новый ОписаниеТипов("Строка"));
	тз.Колонки.Добавить("rowCount",		новый ОписаниеТипов("Строка"));
	Для каждого элем из СписокXDTO Цикл
		стр_тз=тз.Добавить();
		ЗаполнитьЗначенияСвойств(стр_тз,элем.properties);
		ЗаполнитьЗначенияСвойств(стр_тз,элем.properties.gridProperties);
		//стр_тз.name=элем.properties.title;
	КонецЦикла;

	возврат тз;
КонецФункции




&НаКлиенте
Процедура тзФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ПолучитьСписокЛистовНаСервере(Элемент.ТекущиеДанные.id);
	//Элемент.ТекущиеДанные.id
	//Элемент.ТекущиеДанные.kind
	//Элемент.ТекущиеДанные.mimeType
	//Элемент.ТекущиеДанные.name
КонецПроцедуры



Процедура РазместитьТЗ_НаФорме(тз,имяТЗ,Родитель=Неопределено)
   ТЗ_рез = РеквизитФормыВЗначение(имяТЗ);
    
    МассивРеквизитов = Новый Массив;
    
    //Удалим ранее созданные колонки в ТЗ    
    Для Каждого Колонка Из ТЗ_рез.Колонки Цикл
        МассивРеквизитов.Добавить(имяТЗ+"." + Колонка.Имя);        
    КонецЦикла;
    ИзменитьРеквизиты(,МассивРеквизитов);
    
    //Удалим отображение таблицы на форме и создадим новую
    ЭлементТаблица = Элементы.Найти(имяТЗ);
    Если ЭлементТаблица <> Неопределено Тогда
        Элементы.Удалить(ЭлементТаблица);        
    КонецЕсли;     
    
        ЭлементТаблица=Элементы.Добавить(имяТЗ,Тип("ТаблицаФормы"),Родитель);
        ЭлементТаблица.ПутьКДанным = имяТЗ;
        ЭлементТаблица.Отображение = ОтображениеТаблицы.Список;	
	
	ТЗ_рез=тз;
	
	МассивРеквизитов.Очистить();

	Для Каждого Колонка Из ТЗ_рез.Колонки Цикл
    	МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,имяТЗ));
	КонецЦикла;

	ИзменитьРеквизиты(МассивРеквизитов); 
	
	ЗначениеВРеквизитФормы(ТЗ_рез,имяТЗ);
	
    ЭлементТЗ = Элементы[имяТЗ];
    Для Каждого Колонка ИЗ ТЗ_рез.Колонки Цикл
        НовыйЭлементФормы = Элементы.Добавить(имяТЗ+Колонка.Имя, Тип("ПолеФормы"), ЭлементТЗ);
        НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
        НовыйЭлементФормы.ПутьКДанным = имяТЗ+"." + Колонка.Имя;
    КонецЦикла;	

	
КонецПроцедуры	


#Область Авторизация

&НаКлиенте
Процедура HTMLДокументСформирован(Элемент)
	ОтключитьОбработчикОжидания("ОбработатьОтветСервера");
	Если  access_token = "" Тогда
		ОбработатьОтветСервера();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветСервера()
	Перем ЗаголовокОкна;
	Перем Стр;
	Перем Поз;

    УРЛ = Элементы.Браузер.Документ.nameProp;
	Результат = ОбработкаОтветаСервераЧерезУРЛ(УРЛ);
	Если Результат Тогда
		//ПоказатьОповещениеПользователя("Выполнена авторизация", , , ); 
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Функция ОбработкаОтветаСервераЧерезУРЛ(Знач ТекущийУРЛ)
	
	Ключ = "code=";//Нрег(ДопРеквизитыФормы.CallbackURL);
	УРЛ  = Нрег(ТекущийУРЛ);
	
	Если Найти(УРЛ, Ключ) = 0 Тогда
		// Обход проблемы обновления УРЛ:
		ПодключитьОбработчикОжидания("ОбработатьОтветСервера", 1, Истина);
		Возврат Ложь; // Это не редирект
	КонецЕсли;
	
	Сообщить("УРЛ="+УРЛ);

	////////////////////////
	Стр = "code=";
	Поз = Найти(ТекущийУРЛ, Стр);	
	Если Поз <> 0 Тогда
		Code = Сред(ТекущийУРЛ, Поз+СтрДлина(Стр));//,45
		ВторойЭтапДоступа(Code);
		Возврат Истина;
	КонецЕсли; 
	////////////////////////
	
	// Получаем значения из УРЛ
	ЕстьСтрокаКода   = Найти(УРЛ, "verification_code") > 0;
	Токен            = ПолучитьЗначениеСвойства(УРЛ, "access_token");//РаботаСRESTКлиент.ПолучитьЗначениеПараметраИзURL(УРЛ, "access_token");
			
	// Обход проблемы обновления УРЛ: перед получением ответа с токеном браузер получает строку с uid 
	//	и только после обновления страницы возвращается токен
	Если Токен = Неопределено И ЕстьСтрокаКода Тогда
		
		ПодключитьОбработчикОжидания("ОбработатьОтветСервера", 0.2, Истина);
		ЭтаФорма.Обновить();
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Токен = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно прочитать ключ авторизации!'");
	КонецЕсли;
	
	ВторойЭтапДоступа(Токен);
	
	Возврат Истина;	
	
КонецФункции


Процедура ВторойЭтапДоступа(КодДоступа)

	Сообщить("КодДоступа=" + КодДоступа);
	
	Parameter = "";
	
	Parameter = Parameter + "&" + "client_id=" + ClientID;
	Parameter = Parameter + "&" + "code=" + КодДоступа;
	Parameter = Parameter + "&" + "client_secret=" + ClientSecret;
	Parameter = Parameter + "&" + "redirect_uri=" + RedirectURIs;
	Parameter = Parameter + "&" + "grant_type=authorization_code";
	
	Host = "www.googleapis.com";
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);		
	Соединение = Новый HTTPСоединение(Host, , , , ,,SSL);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
    Заголовки.Вставить("Content-Charset", "utf-8");		
	
	HTTPЗапрос = Новый HTTPЗапрос("/oauth2/v3/token", Заголовки);//oauth2/v3/token		
	HTTPЗапрос.УстановитьТелоИзСтроки(Parameter, КодировкаТекста.UTF8);
	
	HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	Стр = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	access_token = ПолучитьЗначениеСвойства(Стр, "access_token");
	
	code		 = ПолучитьЗначениеСвойства(Стр, "code");
	Сообщить(""+Стр);
	
КонецПроцедуры

Функция ПолучитьЗначениеСвойства(Стр, Маркер)
	Перем Стр1;

	_Маркер = ""+Маркер+"";
	Поз = Найти(Стр, _Маркер);
	Если Поз <> 0 Тогда
		Стр1 = Сред(Стр, Поз+СтрДлина(_Маркер)+2);
		Стр1 = СокрЛП(Стр1);
		Если Лев(Стр1, 1) = """" Тогда
			Стр1 = Сред(Стр1, 2);
		КонецЕсли; 
		Стр1 = Сред(Стр1, 1, Найти(Стр1, """"));
		Стр1 = СокрЛП(Стр1);
		Если Прав(Стр1, 1) = """" Тогда
			Стр1 = Сред(Стр1, 1, СтрДлина(Стр1)-1);
		КонецЕсли; 		
	Иначе
		Сообщить(""+Стр);

		Сообщить("Нет свойства '"+Маркер+"'", СтатусСообщения.Внимание);
	КонецЕсли; 

	Возврат Стр1;
	
КонецФункции



#КонецОбласти
