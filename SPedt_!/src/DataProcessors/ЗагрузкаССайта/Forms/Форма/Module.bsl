
#Область ШтрихКоды
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если 	Источник 			= "ПодключаемоеОборудование" 	И 
			ИмяСобытия 			= "ScanData"					и
			ВводДоступен() 												Тогда
			ШК = СтоСП_Клиент.ПолучитьШКизПараметров(Параметр);
			ОбработатьШКнаКлиенте(ШК);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура 	ОбработатьШКнаКлиенте(ШК)
	ДанныеШК    = СП_Штрихкоды.ПолучитьДанныеПоШК(ШК);
	Если 		ДанныеШК.Свойство("Покупка")		Тогда
		новаяСтрока				= СписокПокупок.Добавить();
		новаяСтрока.purchase	= Формат(ДанныеШК.Покупка.Код, "ЧГ=0");
	Иначеесли 	ДанныеШК.Свойство("Участник")		Тогда
		новаяСтрока				= СписокУчастников.Добавить();
		новаяСтрока.user		= Формат(ДанныеШК.Участник.Код, "ЧГ=0");
	Иначеесли 	ДанныеШК.Свойство("КартаУчастника")		Тогда
		новаяСтрока				= СписокКарт.Добавить();
		новаяСтрока.card		= Формат(ДанныеШК.КартаУчастника.Код, "ЧГ=0");
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура 	ДобавитьПоШК(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаВводаШК",,ЭтотОбъект,,,,Новый ОписаниеОповещения("ВвестиШтрихКодВручную_Завершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура 	ВвестиШтрихКодВручную_Завершение(ШК, ДополнительныеПараметры) Экспорт
	ОбработатьШКнаКлиенте(ШК);
КонецПроцедуры	



#КонецОбласти

#Область ОбщаяЗагрузка
&НаКлиенте
Процедура 	ЗагрузкаNew(Команда)
	ЗапуститьЗагрузку("аСППрив.ВыполнитьЗагрузкуССайта");
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЗагрузку(ИмяПроцедуры, Параметры = неопределено) 
	ЗапуститьЗагрузкуВФоне(ИмяПроцедуры, Параметры);
	ПодключитьОбработчикОжидания("ОбновлениеСостояния", 1);
КонецПроцедуры	

Процедура 	ЗапуститьЗагрузкуВФоне(ИмяПроцедуры, Параметры)
	фЗ = ФоновыеЗадания.Выполнить(ИмяПроцедуры, Параметры,новый УникальныйИдентификатор,"Общая загрузка с сайта").УникальныйИдентификатор;
КонецПроцедуры

&НаКлиенте
Процедура 	ОбновлениеСостояния() Экспорт
   ТекЗнач = Прогресс; // текущий прогресс
   // проверка 
   СостояниеФЗ	= ПолучитьСостояниеФЗ(ТекЗнач);
   Если СостояниеФЗ.Результат тогда
	   ОтключитьОбработчикОжидания("ОбновлениеСостояния");
	   //Результат = ПолучитьИзВременногоХранилища(
	   //					АдресВозвращаемыхДанных);
	   ПоказатьПредупреждение(,"Процесс загрузки завершен",,"Импорт данных 100sp.ru");
   ИначеЕсли СостояниеФЗ.Описание <> "" Тогда
	   Прогресс 	= СостояниеФЗ.Процент;
	   ТекЗнач 		= Прогресс;
	   ТекОписание	= СостояниеФЗ.Описание;	
	   Состояние(СостояниеФЗ.Описание, Прогресс);
   ИначеЕсли СостояниеФЗ.Описание = "" Тогда
	   Состояние(ТекОписание, ТекЗнач);
   КонецЕсли;
КонецПроцедуры

&НаСервере
Функция 	ПолучитьСостояниеФЗ(ТекЗнач)
	сотсояниеФЗ = новый Структура("Описание, Процент, Результат");
	_фз = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФЗ);
	// читать сообщения от фонового задания
	Сообщения = _фз.ПолучитьСообщенияПользователю(Истина);
	Если Сообщения.Количество() > 0 тогда		
		// ожидаем что сообщение - это число-процент
		Попытка
			сотсояниеФЗ.Описание 	= Сообщения[Сообщения.ВГраница()].Текст;
			Счетчик					= Число(Сообщения[Сообщения.ВГраница()].Поле);
			ВсегоЭлементов			= Число(Сообщения[Сообщения.ВГраница()].ПутьКДанным);
			сотсояниеФЗ.Процент	 	= ?(ВсегоЭлементов = 0,100, Окр(100*счетчик/ВсегоЭлементов));
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщения[Сообщения.ВГраница()].Текст);
			сотсояниеФЗ.Описание 	= Сообщения[Сообщения.ВГраница()].Текст;
			сотсояниеФЗ.Процент  	= ТекЗнач;
		КонецПопытки;	
		//Попытка
		//	Счетчик					= Число(Сообщения[Сообщения.ВГраница()].Поле);
		//	ВсегоЭлементов			= Число(Сообщения[Сообщения.ВГраница()].ПутьКДанным);
		//	сотсояниеФЗ.Процент	 	= ?(ВсегоЭлементов = 0,100, Окр(100*счетчик/ВсегоЭлементов));
		//Исключение
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Число(Сообщения[Сообщения.ВГраница()].Поле));
		//	сотсояниеФЗ.Описание = Число(Сообщения[Сообщения.ВГраница()].Поле);
		//	сотсояниеФЗ.Процент  = ТекЗнач;
		//КонецПопытки;		
	Иначе
		сотсояниеФЗ.Описание = "";
		сотсояниеФЗ.Процент  = ТекЗнач;
	КонецЕсли;
			
	Если 	_фз.Состояние <> СостояниеФоновогоЗадания.Активно  и 
			_фз.Состояние <> СостояниеФоновогоЗадания.Завершено 
			тогда
			// описание ошибки
			Сообщить(_фз.ИнформацияОбОшибке.Описание);			
	КонецЕсли;
	// возвращаем истина если процесс завершен
	сотсояниеФЗ.Результат	= (_фз.Состояние <> СостояниеФоновогоЗадания.Активно);
	Возврат сотсояниеФЗ;
КонецФункции


#КонецОбласти


&НаКлиенте
Процедура ЗагрузкаПоЗапросу(Команда)
	ВыполнитьЗагрузкуПоЗапросу();
 КонецПроцедуры
 
Процедура ВыполнитьЗагрузкуПоЗапросу()
	
	сзУчастники	= новый СписокЗначений;
	сзПокупки	= новый СписокЗначений;
	сзКарты		= новый СписокЗначений;
	сзУчастники.ЗагрузитьЗначения(	ДанныеФормыВЗначение(СписокУчастников,Тип("ТаблицаЗначений")).ВыгрузитьКолонку("user"));
	сзПокупки.ЗагрузитьЗначения(	ДанныеФормыВЗначение(СписокПокупок,Тип("ТаблицаЗначений")).ВыгрузитьКолонку("purchase")) ;
	сзКарты.ЗагрузитьЗначения(		ДанныеФормыВЗначение(СписокКарт,Тип("ТаблицаЗначений")).ВыгрузитьКолонку("card")) ;
	аспПроцедурыОбменаДанными.ПолучитьУчастниковПоКодам(сзУчастники);
	аспПроцедурыОбменаДанными.ПолучитьПокупкиПоКодам(сзПокупки);
	аспПроцедурыОбменаДанными.ПолучитьЗапросомКарты(сзКарты);
	
КонецПроцедуры	

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НачалоЗагрузкиТранзитов		= Справочники.ПараметрыОбмена.ПокупкиВПутиОтчет.ДатаЗагрузки;
	НачалоЗагрузкиСупергрупп 	= Справочники.ПараметрыОбмена.Супергруппы.ДатаЗагрузки;;
	НачалоЗагрузкиГруппДоставки	= Справочники.ПараметрыОбмена.ГруппыДоставки.ДатаЗагрузки;
	НачалоЗагрузкиПосылок	 	= Справочники.ПараметрыОбмена.Посылки.ДатаЗагрузки;
	НачалоЗагрузкиУчастников	= Справочники.ПараметрыОбмена.Участники.ДатаЗагрузки;;
	НачалоЗагрузкиПокупок		= Справочники.ПараметрыОбмена.Покупки.ДатаЗагрузки;
	НачалоЗагрузкиВозвратов		= Справочники.ПараметрыОбмена.Возвраты.ДатаЗагрузки;
	НачалоЗагрузкиПраздников	= Справочники.ПараметрыОбмена.ГрафикиРаботы.ДатаЗагрузки;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Сканер штрихкода
   СтоСП_Клиент.ПодключитьСканерШК(УникальныйИдентификатор);
КонецПроцедуры


#КонецОбласти


#Область ЗагрузкаПоЧастям



&НаКлиенте
Процедура ДогрузитьКоробки(Команда)
	СтоСПОбмен_Коробки.Загрузить_КоробкиСПризнакомДогрузить();
КонецПроцедуры

&НаКлиенте
Процедура ДогрузитьГруппыДоставки(Команда)
	ДогрузитьГруппыДоставкиНаСервере()
КонецПроцедуры

Процедура ДогрузитьГруппыДоставкиНаСервере()
	аСППрив.ЗагрузкаГруппДоставки(НачалоЗагрузкиГруппДоставки);
	НачалоЗагрузкиГруппДоставки	= Справочники.ПараметрыОбмена.ГруппыДоставки.ДатаЗагрузки;
КонецПроцедуры



&НаКлиенте
Процедура ЗагрузитьТранзиты(Команда)
	//СП_ПокупкиВПути.ЗагрузитьВыехавшиеТранзиты(НачалоЗагрузкиТранзитов);
	СтоСПОбмен_ПокупкиВПути.Получить(НачалоЗагрузкиТранзитов);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУчастников(Команда)
	аспПроцедурыОбменаДанными.ПолучитьУчастниковПоДате(НачалоЗагрузкиУчастников);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПокупки(Команда)
	//параметрыПроцедуры = новый Массив;
	//параметрыПроцедуры.Добавить(НачалоЗагрузкиПокупок);
	//ЗапуститьЗагрузку("аспПроцедурыОбменаДанными.ПолучитьПокупкиПоДате",параметрыПроцедуры); 
	
	СтоСПОбмен_Покупки.Догрузить();
	
	//аспПроцедурыОбменаДанными.ПолучитьПокупкиПоДате(НачалоЗагрузкиПокупок);
КонецПроцедуры

&НаСервере
Процедура ДогрузитьПосылкиНаСервере() 		
	СтоСПОбмен_Посылки.Загрузить_СоставПосылки_ПоПризнакуДогрузить();
	СтоСПОбмен_Посылки.Загрузить_ПосылкиПоДате(НачалоЗагрузкиПосылок);	
КонецПроцедуры

&НаКлиенте
Процедура ДогрузитьПосылки(Команда)
	ДогрузитьПосылкиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДогрузитьВозвратыНаСервере() 		
	
	СтоСПОбмен_Возвраты.Загрузить_ВозвратыПоДате(НачалоЗагрузкиВозвратов);	
КонецПроцедуры

&НаКлиенте
Процедура ДогрузитьВозвраты(Команда)
	ДогрузитьВозвратыНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузкаСуперГрупп(Команда)
	ЗагрузкаСуперГруппНаСервере()
КонецПроцедуры

Процедура ЗагрузкаСуперГруппНаСервере()
	стрОтвета = СтоСПОбмен_СупперГруппы.Загрузить_СуперГруппыПоДате(НачалоЗагрузкиСупергрупп);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПраздники(Команда)
	ЗагрузитьПраздникиНаСервере();
КонецПроцедуры

Процедура ЗагрузитьПраздникиНаСервере()
	СтоСПОбмен_ГрафикРаботы.ЗагрузитьПраздничныеДни(НачалоЗагрузкиПраздников);
КонецПроцедуры

&НаКлиенте
Процедура ДогрузитьСправочники(Команда)
	аспПроцедурыОбменаДанными.ДогрузитьСправочникиССайта();
КонецПроцедуры


#КонецОбласти

