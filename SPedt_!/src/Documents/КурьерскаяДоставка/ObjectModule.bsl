Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	#Область ПравильноеПроведение
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.КурьерскаяДоставка.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("ОстаткиТоваров", 		ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("Транзит", 			ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("СобранныеЗаказы", 	ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("Обмен100СПрн_Ошибки", ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("НеВыгруженноНаСайт", 	ДополнительныеСвойства, Движения, Отказ);
	
	СП_РаботаСоСправочниками.ОбновитьСобранныйЗаказ(СобранныйЗаказ,Новый Структура("ДокументЗаказа", Ссылка));
	#КонецОбласти
	

КонецПроцедуры


Процедура ЗаполнитьОстатками() экспорт
	Если ЗаказыСПосылками.Количество() = 0 Тогда
		ОбновитьГруппуДоставки();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
				"ВЫБРАТЬ
				|	ОстаткиТоваровОстатки.Покупка КАК Посылка,
				|	ОстаткиТоваровОстатки.МестоХранения КАК МестоХранения,
				|	ОстаткиТоваровОстатки.Габарит КАК Габарит,
				|	ОстаткиТоваровОстатки.Партия КАК Партия,
				|	СвояТочка.Значение КАК ПунктВыдачи
				|ПОМЕСТИТЬ Остатки
				|ИЗ
				|	РегистрНакопления.ОстаткиТоваров.Остатки(
				|			,
				|			Участник = &Участник
				|				И ТИПЗНАЧЕНИЯ(Покупка) = ТИП(Справочник.Посылки)) КАК ОстаткиТоваровОстатки,
				|	Константа.СвояТочка КАК СвояТочка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ТранзитОстатки.ПокупкаСсылка,
				|	ТранзитОстатки.МестоХранения,
				|	ТранзитОстатки.Габарит,
				|	ТранзитОстатки.Партия,
				|	ТранзитОстатки.Точка
				|ИЗ
				|	РегистрНакопления.Транзит.Остатки(
				|			,
				|			Участник = &Участник
				|				И ТИПЗНАЧЕНИЯ(ПокупкаСсылка) = ТИП(Справочник.Посылки)) КАК ТранзитОстатки
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ОстаткиТоваров.Покупка,
				|	ОстаткиТоваров.МестоХранения,
				|	ОстаткиТоваров.Габарит,
				|	ОстаткиТоваров.Партия,
				|	СвояТочка.Значение
				|ИЗ
				|	РегистрНакопления.ОстаткиТоваров КАК ОстаткиТоваров,
				|	Константа.СвояТочка КАК СвояТочка
				|ГДЕ
				|	ОстаткиТоваров.Регистратор = &Регистратор
				|	И ОстаткиТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Транзит.ПокупкаСсылка,
				|	Транзит.МестоХранения,
				|	Транзит.Габарит,
				|	Транзит.Партия,
				|	Транзит.Точка
				|ИЗ
				|	РегистрНакопления.Транзит КАК Транзит
				|ГДЕ
				|	Транзит.Регистратор = &Регистратор
				|	И Транзит.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Остатки.Посылка КАК Посылка,
				|	Остатки.МестоХранения КАК МестоХранения,
				|	Остатки.Габарит КАК Габарит,
				|	Остатки.Партия КАК Партия,
				|	Остатки.ПунктВыдачи КАК ПунктВыдачи,
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПраздничныеДни.Дата) КАК ПраздничныхДней,
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендарныеГрафики.ДатаГрафика) КАК РабочихДней,
				//|	МАКСИМУМ(ЕСТЬNULL(НегабаритЗначения.Вес, 0)) КАК Вес,
				//|	МАКСИМУМ(ЕСТЬNULL(НегабаритЗначения.объем, 0)) КАК Объем,
				|	ВЫРАЗИТЬ(МАКСИМУМ(Мегаордера.Ссылка) КАК Справочник.Мегаордера) КАК ШК
				|ПОМЕСТИТЬ втГабаритыШК
				|ИЗ
				|	Остатки КАК Остатки
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПраздничныеДни КАК ПраздничныеДни
				|		ПО (ПраздничныеДни.Дата > Остатки.Партия.Дата)
				|			И (ПраздничныеДни.Дата < &Период)
				|			И (ПраздничныеДни.ИсключатьИзРасчета)
				|			И (НЕ ПраздничныеДни.ПометкаУдаления)
				//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НегабаритЗначения КАК НегабаритЗначения
				//|		ПО Остатки.Партия = НегабаритЗначения.Регистратор
				//|			И Остатки.Посылка = НегабаритЗначения.Покупка
				//|			И Остатки.Габарит = НегабаритЗначения.Габарит
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Мегаордера КАК Мегаордера
				|		ПО Остатки.Посылка = Мегаордера.Покупка
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
				|		ПО Остатки.Партия.Дата < КалендарныеГрафики.ДатаГрафика
				|			И (&Период >= КалендарныеГрафики.ДатаГрафика)
				|			И (КалендарныеГрафики.Календарь = &ГрафикРаботы)
				|			И (КалендарныеГрафики.ДеньВключенВГрафик)
				|
				|СГРУППИРОВАТЬ ПО
				|	Остатки.МестоХранения,
				|	Остатки.Габарит,
				|	Остатки.ПунктВыдачи,
				|	Остатки.Партия,
				|	Остатки.Посылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втГабаритыШК.Посылка КАК Посылка,
				|	втГабаритыШК.МестоХранения КАК МестоХранения,
				|	втГабаритыШК.Габарит КАК Габарит,
				|	втГабаритыШК.Партия КАК Партия,
				|	втГабаритыШК.ПунктВыдачи КАК ПунктВыдачи,
				|	втГабаритыШК.ПраздничныхДней КАК ПраздничныхДней,
				|	втГабаритыШК.РабочихДней КАК РабочихДней,
				
		
		|	ЕСТЬNULL(ДанныеЗаказов.Вес, 0) 						КАК Вес,
		|	ЕСТЬNULL(ДанныеЗаказов.объем, 0) 					КАК Объем,
		|	ЕСТЬNULL(ДанныеЗаказовСайт.БесплатнаяВыдача, Ложь) 	КАК БесплатнаяВыдача,
		|	ДанныеЗаказовСайт.ПерваяТочка 						КАК ПерваяТочка,
		|	ЕСТЬNULL(ДанныеЗаказовСайт.НадбавкаЗаОбработку, 0) 	КАК Надбавка,
		
				
				
				//|	втГабаритыШК.Вес КАК Вес,
				//|	втГабаритыШК.Объем КАК Объем,
				|	втГабаритыШК.ШК КАК ШК,
				|	ЕСТЬNULL(ТарифыСрезПоследних.ЦенаХранения, 0) КАК ЦенаХранения,
				|	ЕСТЬNULL(ТарифыСрезПоследних.СрокХранения, 0) КАК СрокХранения,
				|	ЕСТЬNULL(ТарифыСрезПоследних.Заморозка, ЛОЖЬ) КАК Заморозка,
				|	ЕСТЬNULL(ТарифыСрезПоследних.Штраф, 0) КАК Штраф,
				|	ЕСТЬNULL(ТарифыСрезПоследних.Негабарит, ЛОЖЬ) КАК Негабарит,
				|	ЕСТЬNULL(ТарифыСрезПоследних.ЦенаЗаКГ, 0) КАК ЦенаЗаКГ,
				|	ЕСТЬNULL(ТарифыСрезПоследних.ЦенаЗаКуб, 0) КАК ЦенаЗаКуб,
				|	ВЫБОР
				|		КОГДА ТарифыСрезПоследних.ЦенаХранения ЕСТЬ NULL
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК ТарифУстановлен
				|ПОМЕСТИТЬ пред
				|ИЗ
				|	втГабаритыШК КАК втГабаритыШК
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Тарифы.СрезПоследних КАК ТарифыСрезПоследних
				|		ПО втГабаритыШК.Габарит = ТарифыСрезПоследних.Габарит
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗаказов КАК ДанныеЗаказов
		|		ПО втГабаритыШК.Посылка = ДанныеЗаказов.Заказ
		|			И втГабаритыШК.Партия = ДанныеЗаказов.Партия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗаказовСайт КАК ДанныеЗаказовСайт
		|		ПО втГабаритыШК.Посылка = ДанныеЗаказовСайт.Заказ
		|			И втГабаритыШК.Партия = ДанныеЗаказовСайт.Партия
				
			//	|			И (НЕ ТарифыСрезПоследних.Отменен)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	пред.Посылка КАК Посылка,
				|	пред.МестоХранения КАК МестоХранения,
				|	пред.Габарит КАК Габарит,
				|	пред.Партия КАК Партия,
				|	пред.ПунктВыдачи КАК ПунктВыдачи,
				|	ЕСТЬNULL(пред.РабочихДней, 0) - ЕСТЬNULL(пред.ПраздничныхДней, 0) КАК РабочихДней,
				|	РАЗНОСТЬДАТ(пред.Партия.Дата, &Период, ДЕНЬ) - ЕСТЬNULL(пред.ПраздничныхДней, 0) КАК КалендарныхДней,
				
				|	пред.Вес КАК Вес,
				|	пред.Объем КАК Объем,
				|	пред.БесплатнаяВыдача КАК БесплатнаяВыдача,
				|	пред.ПерваяТочка КАК ПерваяТочка,
				|	пред.Надбавка КАК Надбавка,
				
				|	ЕСТЬNULL(пред.ПраздничныхДней, 0) КАК ПраздничныхДней,
				|	ЕСТЬNULL(ТарифыПоНаправлениямСрезПоследних.Стоимость, 0) КАК СтоимостьДоставки,
				|	ВЫБОР
				|		КОГДА пред.Заморозка
				|			ТОГДА РАЗНОСТЬДАТ(пред.Партия.Дата, &Период, ДЕНЬ)- ЕСТЬNULL(пред.ПраздничныхДней, 0)
				|		ИНАЧЕ ЕСТЬNULL(пред.РабочихДней, 0)  - ЕСТЬNULL(пред.ПраздничныхДней, 0)
				|	КОНЕЦ КАК ВремяХранения,
				|	пред.ШК КАК ШК,
				|	пред.ЦенаХранения КАК ЦенаХранения,
				|	пред.СрокХранения КАК СрокХранения,
				|	пред.Заморозка КАК Заморозка,
				|	пред.Штраф КАК Штраф,
				|	пред.Негабарит КАК Негабарит,
				|	пред.ЦенаЗаКГ КАК ЦенаЗаКГ,
				|	пред.ЦенаЗаКуб КАК ЦенаЗаКуб,
				|	пред.ТарифУстановлен КАК ТарифУстановлен,
				|	1 КАК Количество,
				|	Истина как Подбор
				|ИЗ
				|	пред КАК пред
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыПоНаправлениям.СрезПоследних(&Период, ) КАК ТарифыПоНаправлениямСрезПоследних
				|		ПО (ТарифыПоНаправлениямСрезПоследних.Куда = &СвойГород)
				|			И пред.Габарит = ТарифыПоНаправлениямСрезПоследних.Габарит
				|			И пред.ПерваяТочка.ГородСП = ТарифыПоНаправлениямСрезПоследних.Откуда";
	
	Запрос.УстановитьПараметр("Участник", 		Участник);
	Запрос.УстановитьПараметр("Регистратор", 	Ссылка);
	Запрос.УстановитьПараметр("Период", 		?(ЗначениеЗаполнено(Дата), Дата -1,КонецДня(Дата)));
	Запрос.УстановитьПараметр("СвойГород", 		Константы.СвояТочка.Получить().ГородСП);
	Запрос.Параметры.Вставить("ГрафикРаботы", 	Константы.ГрафикРаботыПунктаВыдачи.Получить());
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	тз = результатЗапроса.Выгрузить();
	СП_РаботаСДокументами.РасчитатьСтоимостьХранения(тз);
	ЗаказыНаСкладе.Загрузить(тз);
	
	
	//Для каждого элем из ЗаказыНаСкладе Цикл
	//	
	//	элем.Подбор	= истина;//(ЗаказыСПосылками.НайтиСтроки(новый Структура("Посылка", элем.Посылка)).Количество()>0);
	//	ПараметрыРасчета  			= Новый структура("Габарит, ВремяХранения, СтоимостьДоставки, БесплатнаяВыдача, вес,Объем");
	//	ЗаполнитьЗначенияСвойств(ПараметрыРасчета, элем);			
	//	ПараметрыРасчета.БесплатнаяВыдача = Ложь;
	//	структураРассчета 			= СП_РаботаСДокументами.ПолучитьСтоимостьХранения_сУчетомБВ(ПараметрыРасчета);
	//	
	//	элем.СтоимостьИтого			= структураРассчета.СтоимостьИтого;
	//	элем.ОплачиваетОрганизатор  = структураРассчета.ОплачиваетОрганизатор;
	//	элем.ОплачиваетУчастник		= структураРассчета.ОплачиваетУчастник;
	//	элем.СтоимостьХранения		= структураРассчета.СтоимостьХранения;
	//КонецЦикла;
	
	Если не Константы.КурьерскаяДоставкаДополнятьЗаказамиНаОстатках.Получить() Тогда
		СтрокиКУдалению = ЗаказыНаСкладе.НайтиСтроки(новый структура("Подбор", Ложь));
		Для Каждого элем из СтрокиКУдалению Цикл
			ЗаказыНаСкладе.Удалить(элем);
		КонецЦикла;
	КонецЕсли;	
	
	СтоимостьОплачиваетОрганизатор 	= 0;
	СтоимостьХранения				= 0;
	СтоимостьИтого					= 0;
	помеченныеСтроки = ЗаказыНаСкладе.НайтиСтроки(новый структура("Подбор", Истина));
	Для каждого элем из помеченныеСтроки Цикл
		СтоимостьОплачиваетОрганизатор 	= СтоимостьОплачиваетОрганизатор + элем.ОплачиваетОрганизатор;
		СтоимостьХранения 				= СтоимостьХранения + элем.СтоимостьИтого;
	КонецЦикла;	
	СтоимостьИтого					= СтоимостьХранения + СтоимостьДоставки;
	//	СтоимостьОплачиваетОрганизатор 	= ЗаказыНаСкладе.Итог("ОплачиваетОрганизатор");
	//	СтоимостьХранения 				= ЗаказыНаСкладе.Итог("СтоимостьИтого");//Доставка до ПВ
	//	СтоимостьИтого					= СтоимостьХранения + СтоимостьДоставки; //Курьерская доставка
	ПометитьЗаказыКУдалениюИзГруппы();
КонецПроцедуры



Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	КоличествоЗаказовВДоставке	= ЗаказыНаСкладе.НайтиСтроки(новый Структура("Подбор",Истина )).Количество();
	Если КоличествоЗаказовВДоставке=0 Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("МестоХранения"));
	КонецЕсли;	
КонецПроцедуры






Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если не  ЗначениеЗаполнено(СобранныйЗаказ) и ЗначениеЗаполнено(Ссылка) Тогда 
		СобранныйЗаказ 		= СП_РаботаСоСправочниками.ПолучитьСобранныйЗаказПо_Коду(Номер);
		параметрыЗаказа 	= Новый Структура("ДокументЗаказ", Ссылка);
		СП_РаботаСоСправочниками.ОбновитьСобранныйЗаказ(СобранныйЗаказ, параметрыЗаказа);
		ПараметрыШК		= Новый Структура("Покупка, СобранныйЗаказ, ПунктВыдачи", 
											СобранныйЗаказ,СобранныйЗаказ,Константы.ПунктВыдачиКурьерскойДоставки.Получить());
		СП_РаботаСоСправочниками.ОбновитьМегаордер(СобранныйЗаказ.ШК, ПараметрыШК)
	КонецЕсли;	
	
	Если Адрес = "" Тогда
		ПолучитьАдресДоставки_Api();
	КонецЕсли;	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И  
		 СтатусДоставки = Перечисления.СтатусыДоставки.ОжидаетСборки	Тогда
		Если ЗаказыНаСкладе.НайтиСтроки(Новый Структура("Подбор",Истина)).Количество()>0  Тогда
			СтатусДоставки = Перечисления.СтатусыДоставки.Собран;
		Иначе
			СтатусДоставки = Перечисления.СтатусыДоставки.Отменен;
		КонецЕсли	
	КонецЕсли;	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
		ПометитьЗаказыКУдалениюИзГруппы();
		//ВыгрузитьНаСайт();
	КонецЕсли;
	
//	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И не СчетВыставлен Тогда
//		ВыставитьСчет_Api();
//	КонецЕсли;
		
		
КонецПроцедуры

#Область Обмен
Функция   	ВыгрузитьНаСайт() Экспорт
	СП_КурьерскаяДоставка.УдалитьЗаказыИзГруппы(ЭтотОбъект);
	СП_КурьерскаяДоставка.Отправить_ВыдачуЗаказов(ЭтотОбъект);
КонецФункции

#КонецОбласти


Процедура ПометитьЗаказыКУдалениюИзГруппы() Экспорт
	тзВыбранныеЗаказы	= ЗаказыНаСкладе.Выгрузить(Новый Структура("Подбор", Истина));
	тзВыбранныеЗаказы.Колонки.Добавить("Покупка");
	
	
	Для каждого элем из тзВыбранныеЗаказы Цикл
		элем.Покупка	= элем.Посылка.Покупка;
	КонецЦикла;	
	Для каждого элем из Заказы Цикл
		элем.ДоставкаОтменена	= (тзВыбранныеЗаказы.НайтиСтроки(новый Структура("Покупка",элем.Покупка)).Количество()=0);
	КонецЦикла
КонецПроцедуры	



Процедура ВыставитьСчет_Api() Экспорт
	Отправили 	= СП_КурьерскаяДоставка.ТекстЗапроса_Счет_Api(ЭтотОбъект);
	Получили 	= ОтправитьНаСайт(Отправили);
	Если Получили.Результат Тогда
		сз = новый СписокЗначений();
		сз.Добавить(номер);
		результат = СП_КурьерскаяДоставка.Загрузить_ПоКодам(сз, истина);	
		СП_КурьерскаяДоставка.ДокументКурьерскойДоставки_из_Api(результат.deliveryGroups[0],ЭтотОбъект);
		СчетВыставлен = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьГруппуДоставки() Экспорт
		сз = новый СписокЗначений();
		сз.Добавить(номер);
		результат = СП_КурьерскаяДоставка.Загрузить_ПоКодам(сз, истина);	
		результат.deliveryGroups.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.КурьерскаяДоставка") );
		СП_КурьерскаяДоставка.ДокументКурьерскойДоставки_из_Api(результат.deliveryGroups[0],ЭтотОбъект);
КонецПроцедуры


Функция ПолучитьАдресДоставки_Api() Экспорт
	Если Заказы.Количество()>0 Тогда
		результат = СП_АдресаДоставки.выполнитьЗапрос(Заказы[0].КодЗаказа,Ссылка );
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.СтруктураАдреса);
	КонецЕсли;
КонецФункции


Функция ОтправитьНаСайт(Отправили) 
	СтрокаПротокола						= 	новый Структура ("ДатаНачала, ДатаОкончания,Отправили, Результат, ПолученныеДанные");
	СтрокаПротокола.Отправили			= 	Отправили;
	СтрокаПротокола.ДатаНачала			=	ТекущаяДата();
	
	АдресСкрипта 		= Константы.АдресВыгрузкиНасайт.Получить();
	Параметры    		= новый Структура;
	Параметры.Вставить("token",	Константы.Токен.Получить());
	Параметры.Вставить("xml", 	Отправили);
	
	ПолученныйФайл		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры,АдресСкрипта);
	
	Если ПолученныйФайл	= Неопределено Тогда 		
		СтрокаПротокола.Результат		= Ложь; 
		СтрокаПротокола.ДатаОкончания	= ТекущаяДата();
		Возврат СтрокаПротокола;	
	КонецЕсли; 
	Если аспПроцедурыОбменаДанными.АвторизацияВыполнена(ПолученныйФайл) Тогда
		СтрокаПротокола.Результат= Истина;
		СтрокаПротокола.ПолученныеДанные	=  СтоСПОбмен_Общий.ФайлВСтроку(ПолученныйФайл);
	Иначе
		СтрокаПротокола.ПолученныеДанные	= "Авторизация не выполнена" + СтоСПОбмен_Общий.ФайлВСтроку(ПолученныйФайл);
	КонецЕсли;	
	СтрокаПротокола.ДатаОкончания			= ТекущаяДата();
	СтоСПОбмен_Выгрузка100сп.СохранитьПротоколОбмена(СтрокаПротокола,Ссылка);
	Возврат СтрокаПротокола;
КонецФункции