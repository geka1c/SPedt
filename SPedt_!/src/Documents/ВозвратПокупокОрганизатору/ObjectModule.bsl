
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	#Область ПравильноеПроведение
	ПроведениеСерверСП.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ВозвратПокупокОрганизатору.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	ПроведениеСерверСП.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСерверСП.ОтразитьДвиженияПоТаблице(ДополнительныеСвойства, Движения, "Обмен100СПрн", Отказ);
	ПроведениеСерверСП.ОтразитьДвиженияПоТаблице(ДополнительныеСвойства, Движения, "Возвраты", Отказ);
	ПроведениеСерверСП.ОтразитьДвиженияПоТаблице(ДополнительныеСвойства, Движения, "Транзит", Отказ);
	ПроведениеСерверСП.ОтразитьДвиженияПоТаблице(ДополнительныеСвойства, Движения, "Расход", Отказ);
	ПроведениеСерверСП.ОтразитьДвиженияПоТаблице(ДополнительныеСвойства, Движения, "Обмен100СПрн_Ошибки", Отказ);

	#КонецОбласти
	
	Если ЗначениеЗаполнено(Основание) и ТипЗнч(Основание) = Тип("ДокументСсылка.ОтправлениеТранзита") Тогда
		объект_ГруппаДоставки = Основание.Коробка.ПолучитьОбъект();
		Для каждого элем из объект_ГруппаДоставки.Состав Цикл
			элем.Удалить = истина;
			элем.СообщениеУдаления = "Возврат группы организатору";
		КонецЦикла;	
		Попытка
			объект_ГруппаДоставки.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось удалить заказы в группе: "+Основание.Коробка,,,,Отказ);
		КонецПопытки;
	Конецесли;
КонецПроцедуры	
	
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если Константы.ПроверятьОтветственногоПриРасходе.Получить() Тогда
		ПроверяемыеРеквизиты.Добавить("Ответственный");	
	КонецЕсли;	
	если ВидОперации=Перечисления.ВидыВозвратов.ОтУчастника и ЗначениеЗаполнено(Участник) Тогда
		индексПУ=ПроверяемыеРеквизиты.найти("Покупки.Участник");
		Если индексПУ<>Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(индексПУ);
		КонецЕсли;
	КонецЕсли;	
	
	если ВидОперации=Перечисления.ВидыВозвратов.ОтПунктаВыдачи или ВидОперации=Перечисления.ВидыВозвратов.ОтУчастников Тогда
		индексПУ=ПроверяемыеРеквизиты.найти("Участник");
		Если индексПУ<>Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(индексПУ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если не ЗначениеЗаполнено(Участник) Тогда
		Если Покупки.Количество()>0 Тогда
			Участник = Покупки[0].Участник;
		КонецЕсли;	
		Если Возвраты.Количество()>0 Тогда
			Участник = Возвраты[0].Участник;
		КонецЕсли;	

	Конецесли;		

	Если не ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации=Перечисления.ВидыВозвратов.ОтУчастника;
	КонецЕсли;
	СписокНеДогруженныхПосылок = новый СписокЗначений;
	Для каждого элем из  Покупки Цикл
		если ТипЗнч(элем.Покупка) = Тип("СправочникСсылка.Посылки") и
			 элем.Покупка.Догрузить	Тогда
			СписокНеДогруженныхПосылок.Добавить(элем.Покупка);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокНеДогруженныхПосылок.Количество()>0 Тогда
		СтоСПОбмен_Посылки.Загрузить_СоставПосылкиПоКодам(СписокНеДогруженныхПосылок);
	КонецЕсли;;
	
	
	
	Документы.ВозвратПокупокОрганизатору.ЗаполнитьПустыеШКвТабЧасти(ЭтотОбъект);
КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтправлениеТранзита") тогда
		Дата			= ТекущаяДата();
		ВидОперации 	= Перечисления.ВидыВозвратов.ОтПунктаВыдачи;
		Основание 		= ДанныеЗаполнения;
		ТаблицаДвижений = РегистрыНакопления.Транзит.ПолучитьДвиженияТранзит_Документа(Основание);
		ТаблицаВозврата = ТаблицаДвижений.Скопировать(новый Структура("ВидДвижения",ВидДвиженияНакопления.Расход));
		ТаблицаВозврата.Колонки.ПокупкаСсылка.Имя = "Покупка"; 
		Покупки.Загрузить(ТаблицаВозврата);
		Для каждого элем из Покупки Цикл
			элем.Организатор = СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(элем.Покупка.Организатор.Код);
		КонецЦикла
	КонецЕсли;
	Документы.ВозвратПокупокОрганизатору.ЗаполнитьПустыеШКвТабЧасти(ЭтотОбъект);
КонецПроцедуры

Процедура ЗаполнитьПустыеШКвТабЧасти(ОбъектВозврата)
	строки_безШК=ОбъектВозврата.Покупки.НайтиСтроки(новый Структура("ШК",Справочники.Мегаордера.ПустаяСсылка()));	
	Для каждого стр из строки_безШК Цикл
		стр_Участник = ?(ЗначениеЗаполнено(стр.Участник),стр.Участник,Участник);
		стр_Покупка  = ?(ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Посылки"),стр.Покупка.Покупка,стр.Покупка);
		стр.ШК=СП_Штрихкоды.ПолучитьМегаордер(стр_Покупка,стр_Участник);
		Если не ЗначениеЗаполнено(стр.ШК.Участник) Тогда
			об=стр.ШК.ПолучитьОбъект();
			об.Участник=Справочники.Участники.нулевой   ;
			об.Записать();
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	


Функция ДобавитьПокупку(мегаордер,МестоХранения, КодыТоваров = Неопределено) Экспорт
	Если ВидОперации<>Перечисления.ВидыВозвратов.ОтПунктаВыдачи и (ТипЗнч(мегаордер.Покупка)=Тип("СправочникСсылка.Коробки")) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Коробки могут приниматься только от Пункта выдачи!");
		Возврат ложь;
	КонецЕсли;	

	
	стр_Покупка					= Покупки.Добавить();
	стр_Покупка.ШК 				= мегаордер;
	стр_Покупка.МестоХранения	= МестоХранения;
	Если КодыТоваров <> Неопределено Тогда
		стр_Покупка.КодыТоваров = КодыТоваров;
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(стр_Покупка,мегаордер);
	
	Если не ЗначениеЗаполнено(стр_Покупка.Организатор) Тогда
		Если	ТипЗнч(мегаордер.Покупка)=Тип("СправочникСсылка.Заказы") Тогда
			стр_Покупка.Организатор = СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(мегаордер.Покупка.Организатор.Код); 
		ИначеЕсли	ТипЗнч(мегаордер.Покупка)=Тип("СправочникСсылка.Покупки") Тогда
			стр_Покупка.Организатор = СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(мегаордер.Покупка.Владелец.Код); 
		ИначеЕсли	ТипЗнч(мегаордер.Покупка)=Тип("СправочникСсылка.Посылки") Тогда	
			списоккодов=новый СписокЗначений;
			списоккодов.Добавить(мегаордер.Покупка.Код);
			СтоСПОбмен_Посылки.Загрузить_СоставПосылкиПоКодам(списоккодов);
			Если мегаордер.Покупка.Состав.Количество()>0 Тогда
				стр_Покупка.Организатор = СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(мегаордер.Покупка.Состав[0].Покупка.Владелец.Код);
				
			//	стр_Покупка.Покупка = мегаордер.Покупка.Состав[0].Покупка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если не ЗначениеЗаполнено(стр_Покупка.Участник) и ТипЗнч(мегаордер.Покупка)=Тип("СправочникСсылка.Коробки") Тогда
		стр_Покупка.Участник=Справочники.Участники.нулевой;
	КОнецесли;	
	Если ТипЗнч(мегаордер.Покупка)=Тип("СправочникСсылка.Посылки") и мегаордер.Покупка.Состав.Количество()>0 Тогда
		стр_Покупка.Участник = мегаордер.Покупка.Состав[0].Участник;
		стр_Покупка.ШК		 = СП_Штрихкоды.ПолучитьМегаордер(стр_Покупка.Покупка,стр_Покупка.Участник, мегаордер.ПунктВыдачи);
	КонецЕсли;
	Если ВидОперации=Перечисления.ВидыВозвратов.ОтУчастника Тогда
		Если Покупки.Количество()=0 Тогда
			Участник=стр_Покупка.ШК.Участник;
		ИначеЕсли ЗначениеЗаполнено(Участник) и Участник<>стр_Покупка.ШК.Участник Тогда
		    ВидОперации=Перечисления.ВидыВозвратов.ОтУчастников;
		КонецЕсли;
	Конецесли;	
	
	Возврат истина;
КонецФункции	

Функция ЗаполнитьПосылкамиИзменившимиПВ(МестоХранения) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Обмен100СПрн_ОшибкиОстатки.Мегаордер.Покупка КАК Посылка,
		|	Обмен100СПрн_ОшибкиОстатки.КоличествоНеИсправленныхОстаток КАК КоличествоНеИсправленныхОстаток,
		|	Обмен100СПрн_ОшибкиОстатки.Мегаордер.Покупка.Покупка КАК Покупка,
		|	Обмен100СПрн_ОшибкиОстатки.Мегаордер.Покупка.Участник КАК Участник,
		|	Обмен100СПрн_ОшибкиОстатки.Мегаордер.Покупка.Организатор КАК Организатор,
		|	&МестоХранения КАК МестоХранения
		|ИЗ
		|	РегистрНакопления.Обмен100СПрн_Ошибки.Остатки(
		|			,
		|			типОбмена = Значение(Перечисление.ТипыОбменов100сп.ЗагрузкаПосылок)
		|				И СообщениеОшибки = ""Изменился пункт назначения посылки!"") КАК Обмен100СПрн_ОшибкиОстатки
		|ГДЕ
		|	Обмен100СПрн_ОшибкиОстатки.КоличествоНеИсправленныхОстаток > 0";
	
	Запрос.Параметры.Вставить("МестоХранения",МестоХранения);
	Результат = Запрос.Выполнить();
	тз_посылок=Результат.Выгрузить();
	СписокПосылок =новый СписокЗначений;
	СписокПосылок.ЗагрузитьЗначения(тз_посылок.ВыгрузитьКолонку("Посылка"));
	СтоСПОбмен_Посылки.Загрузить_СоставПосылкиПоКодам(СписокПосылок);
	
	
	Покупки.Очистить();
	
	Для Каждого стр из тз_посылок Цикл
		стр_покупки=Покупки.Добавить();
		стр_покупки.Участник 	= стр.Посылка.Участник;
		стр_покупки.Покупка 	= стр.Посылка.Покупка;
		стр_покупки.Организатор = стр.Посылка.Организатор;
		стр_покупки.МестоХранения = МестоХранения;
		стр_покупки.ШК = СП_Штрихкоды.ПолучитьМегаордер(стр_покупки.Покупка,стр_покупки.Участник,стр.Посылка.ПунктВыдачи);
	КонецЦикла;
КонецФункции	



Функция   	ПривязатьСтикеры() Экспорт
	//
	СтрокаПротокола				= новый Структура ("ДатаНачала, ДатаОкончания,Результат, ПолученныеДанные");
	СтрокаПротокола.ДатаНачала	= ТекущаяДата();
	//
	хмл_отправили	= СтоСПОбмен_Запрос.ПривязатьСтикерВозврата(Ссылка);
	стр_Ответа 		= СтоСПОбмен_Выгрузка100сп.Выгрузить(хмл_отправили);
	//
	СтрокаПротокола.ДатаОкончания	= ТекущаяДата();
	СтрокаПротокола.ПолученныеДанные= стр_Ответа.Получили;
	//
	Если не стр_Ответа.Свойство("Разбор") Тогда
		СтрокаПротокола.Результат=Ложь;
	Иначе	
		СтрокаПротокола.Результат = стр_Ответа.Разбор.авторизацияВыполнена;
	КонецЕсли;
	СтоСПОбмен_Выгрузка100сп.СохранитьПротоколОбмена(СтрокаПротокола,Ссылка);
	Если не СтрокаПротокола.Результат Тогда Возврат Ложь; Конецесли;
	//
	//
	Если не стр_Ответа.Разбор.авторизацияВыполнена Тогда 
		Возврат ложь; 
	Иначе
		Отправлено = Истина;
	КонецЕсли;
	//
	Статус	= Перечисления.СтатусОтпавкиНаСайт.Отправлен;
	тз		= Неопределено;
	Если стр_Ответа.Разбор.Свойство("returns",тз) Тогда
		returns_ОтразитьРезультатВыгрузки(тз);
		Записать();
	КонецЕсли;	
	Возврат Истина;
КонецФункции   

Процедура 	returns_ОтразитьРезультатВыгрузки(тз) 
	Если тз<>неопределено Тогда  
		Для каждого стр из Возвраты Цикл                                                  
			мас_НайденоВОтвете=ТЗ.НайтиСтроки(Новый Структура("orderId",Формат(стр.КодЗаказа,"ЧГ=0")));
			Если мас_НайденоВОтвете.Количество()>0 тогда
				стр_ответа=мас_НайденоВОтвете[0];
				Если стр_ответа.result="ok" или стр_ответа.result="ap" Тогда
					стр.Отправлено					= Истина;
					стр.СообщениеОшибки				= "";
					
	//				Если ПечатаемСтикер Тогда
	//					Посылка = СП_РаботаСоСправочниками.ПолучитьПосылкуПо_Коду(стр_ответа.newStickerId)
	//				Иначе	
						Посылка = стр.ШК.Покупка;
	//				КонецЕсли;	
					СтоСПОбмен_Посылки.Загрузить_СоставПосылкиПоКодам(Посылка);
	//				
					//ПараметрыПосылки = Новый Структура();
					//ПараметрыПосылки.Вставить("Участник", 		стр.Участник);
	//				ПараметрыПосылки.Вставить("ПунктВыдачи", 	СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(стр_ответа.destinationDistributorCode));
	//				ПараметрыПосылки.Вставить("ПерваяТочка", 	СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(стр_ответа.firstIncomeCode));
	//				ПараметрыПосылки.Вставить("secureCode", 	стр_ответа.secureCode);
					//ПараметрыПосылки.Вставить("Покупка", 		Посылка);
					//ПараметрыПосылки.Вставить("Посылка", 		Посылка);
	//				
	//				Если ПечатаемСтикер Тогда
	//					ШК = СП_Штрихкоды.ПолучитьМегаордер(Посылка,ПараметрыПосылки.Участник ,ПараметрыПосылки.ПунктВыдачи );
	//				Иначе	
	//					ШК 	= стр.ШК;
	//				КонецЕсли;	
	//				
	//				СП_РаботаСоСправочниками.ОбновитьМегаордер(шк,ПараметрыПосылки);
					//ПараметрыПосылки.Вставить("ШК", 	ШК);
	//				
	//				СП_РаботаСоСправочниками.ОбновитьПосылку(Посылка,ПараметрыПосылки);
	//				
	//				
					//обПристрой 						= стр[ТипЗаказа].ПолучитьОбъект();
	//				обПристрой.ШК					= ШК;
	//				обПристрой.ПоступлениеПристроя	= ?(Проведен,Ссылка,Документы.ПоступлениеПристроя.ПустаяСсылка());;
	//				Попытка
	//					обПристрой.Записать();
	//				Исключение
	//				КонецПопытки;
	//				стр.ШК = ШК;
				Иначе	
					ТекстОшибки = "Не удалось привязать стикер к Возврату." + Символы.ПС + 
										стр_ответа.message;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;	
				стр.СообщениеОшибки	= стр_ответа.message;
			Иначе	
				стр.СообщениеОшибки	= "Не найдено в ответе";
			КонецЕсли;	
	
		КонецЦикла;
	КонецЕсли;		
КонецПроцедуры     


