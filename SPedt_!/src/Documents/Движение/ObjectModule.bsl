перем  мОстанавливатьПриходПриОшибке экспорт;

Процедура ОбработкаПроведения(Отказ, Режим)
	#Область ПравильноеПроведение
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, Режим);
	Документы.Движение.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	
СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("Обмен100СПрн",	ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("Транзит",		ДополнительныеСвойства, 	Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("Возвраты",	ДополнительныеСвойства, 	Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("ОстаткиТоваров",ДополнительныеСвойства, 	Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("Расход",		ДополнительныеСвойства, 	Движения, Отказ);
	#КонецОбласти	
	
	
	 
КонецПроцедуры





Процедура ЗаполнитьПоОтборуТовары(Параметры) Экспорт
	
	Схема	= ПолучитьМакет("СКДОтборТовары");
	КомпоновщикНастроек		= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	КомпоновщикНастроек.ЗагрузитьНастройки(Схема.ВариантыНастроек["Основной"].Настройки);
	
	настройки=КомпоновщикНастроек.Настройки;
	
	Для Каждого Элем из Параметры Цикл
		Если ТипЗнч(элем.Значение) 	<> Тип("Структура") Тогда Продолжить; КонецЕсли;
		полеОтбора		= КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти(Элем.Ключ);
		Если ПолеОтбора = Неопределено Тогда Продолжить; КонецЕсли;
		
		НовыйОтбор 					= настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение	= полеОтбора.Поле;
		ЗаполнитьЗначенияСвойств(НовыйОтбор, элем.Значение);
	КонецЦикла;
	
	
	параметрПериод					= настройки.ПараметрыДанных.НайтиЗначениеПараметра(новый ПараметрКомпоновкиДанных("ДатаОтчета"));
	параметрПериод.Значение			= КонецДня(Параметры.ДатаОтчета);
	параметрПериод.Использование	= Истина;
	
	КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(настройки);
	
	КомпановщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет	=	КомпановщикМакета.Выполнить(Схема,КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки= новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорВывода=новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ=новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	//Если   ВидОперации  =Перечисления.ВидыОпераций_ДвижениеСклад.СписаниеТранзита  или
	//	   ВидОперации  =Перечисления.ВидыОпераций_ДвижениеСклад.СТранзитаНаВозврат или
	//	   ВидОперации  =Перечисления.ВидыОпераций_ДвижениеСклад.СТранзитаНаОстатки Тогда
	//	ПокупкиТранзит.Загрузить(ТЗ);
	//Иначе
		Покупки.Загрузить(ТЗ);
	//КонецЕсли		
КонецПроцедуры	

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = Перечисления.ВидыОпераций_ДвижениеСклад.Перемещение и
		 ПроверяемыеРеквизиты.Найти("МестоХранения") = Неопределено Тогда
		//ПроверяемыеРеквизиты.Добавить("МестоХранения");
	КонецЕсли;
	Если  ВидОперации=Перечисления.ВидыОпераций_ДвижениеСклад.Передача и 
		  ПроверяемыеРеквизиты.Найти("Организатор") = Неопределено Тогда	
		ПроверяемыеРеквизиты.Добавить("Организтор");
	КонецЕсли;	
	
	Если  ВидОперации=Перечисления.ВидыОпераций_ДвижениеСклад.ПередачаНаТранзит и 
		  ПроверяемыеРеквизиты.Найти("ТочкаНазначения") = Неопределено Тогда	
		ПроверяемыеРеквизиты.Добавить("ТочкаНазначения");
	КонецЕсли;	
	
КонецПроцедуры


