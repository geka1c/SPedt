
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
    КомандаПечати 					= КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 	= "Документ.Движение";
    КомандаПечати.Идентификатор 	= "ЧекДвижениеТовара";
	КомандаПечати.Картинка 			= БиблиотекаКартинок.Печать;
    КомандаПечати.Представление 	= НСтр("ru = 'Движение товара (чек)'");
	
    КомандаПечати 					= КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 	= "Документ.Движение";
    КомандаПечати.Идентификатор 	= "ВедомостьСписание";
	КомандаПечати.Картинка 			= БиблиотекаКартинок.Печать;
    КомандаПечати.Представление 	= НСтр("ru = 'Списание товара (ведомость)'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  – Массив    – ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати – Структура – дополнительные настройки печати;
//  КоллекцияПечатныхФорм – ТаблицаЗначений – сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         – СписокЗначений  – значение – ссылка на объект;
//                                            представление – имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       – Структура       – дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	#Если Сервер Тогда 
	ИмяМакета = "ЧекДвижениеТовара";	
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета);
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        ИмяМакета,          
        НСтр("ru = 'Движение товара (чек)'"),
        Печать_ЧекДвижениеТовара(МассивОбъектов, ОбъектыПечати),
        ,
        "Документ.Движение.ПФ_MXL_ЧекДвижениеТовара");
	КонецЕсли;
	
	
	ИмяМакета = "ВедомостьСписание";	
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета);
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        ИмяМакета,          
        НСтр("ru = 'Списание товара (ведомость)'"),
        Печать_ВедомостьСписание(МассивОбъектов, ОбъектыПечати),
        ,
        "Документ.Движение.ПФ_MXL_ВедамостьСписание");
	КонецЕсли;
	
	
#КонецЕсли 	
КонецПроцедуры



Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;

	СтоСПОбмен_Общий.Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Транзит(Запрос, 			ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Возвраты(Запрос, 			ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_ОстаткиТоваров(Запрос, 	ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Расход(Запрос, 			ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
	
КонецПроцедуры


Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.УстановитьПараметр("Период",                        ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("Номер",                         ДокументСсылка.Номер);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("Комментарий",                   ДокументСсылка.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",               ДокументСсылка.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                      ДокументСсылка.Проведен);
	
КонецПроцедуры






Функция Печать_ЧекДвижениеТовара(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент				= Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб	= Истина;
	ТабличныйДокумент.ПолеСлева		= 0;
	ТабличныйДокумент.ПолеСправа	= 0;	 
	
	
	
	Макет 					= Документы.Движение.ПолучитьМакет("ПФ_MXL_ЧекДвижениеТовара");
	
	ОбластьШтрихКод			= Макет.ПолучитьОбласть("ШтрихКод"); 
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	Шапка 					= Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупкиШапка 	= Макет.ПолучитьОбласть("ПокупкиШапка");
	ОбластьПокупки 			= Макет.ПолучитьОбласть("Покупки");
	ОбластьПокупкаГруппа 	= Макет.ПолучитьОбласть("ПокупкаГруппа");
	ОбластьШтрихКодСтрока	= Макет.ПолучитьОбласть("ШтрихКодСтрока"); 

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Движение.Номер КАК Номер,
		|	Движение.Дата КАК Дата,
		|	Движение.Покупки.(
		|		Покупка.Организатор КАК Организатор,
		|		Участник КАК Участник,
		|		МестоХранения КАК МестоХранения,
		|		Покупка КАК Покупка
		|	) КАК Покупки,
		|	Движение.ПокупкиТранзит.(
		|		Покупка.Организатор КАК Организатор,
		|		Участник КАК Участник,
		|		МестоХранения КАК МестоХранения,
		|		Покупка КАК Покупка
		|	) КАК ПокупкиТранзит,
		|	Движение.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Движение КАК Движение
		|ГДЕ
		|	Движение.Ссылка В(&МассивОбъектов)";
	Запрос.Параметры.Вставить("МассивОбъектов",МассивОбъектов);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка			 = РезультатЗапроса.Выбрать();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		Шапка.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(Шапка);
		
		ШтрихКодДокумента = СП_Штрихкоды.ШКДокумента(Выборка.Ссылка);
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина", 450);
		ПараметрыШтрихкода.Вставить("Высота", 120);
		ПараметрыШтрихкода.Вставить("Штрихкод", ШтрихКодДокумента);
		ПараметрыШтрихкода.Вставить("ТипКода", 4);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
		ПараметрыШтрихкода.Вставить("РазмерШрифта", 10);
		ПараметрыШтрихкода.Вставить("УголПоворота", 0); //Одно из следующих значений: 0, 90, 180, 270.
		ПараметрыШтрихкода.Вставить("ПрозрачныйФон", Истина);
		ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0); //Одно из следующих значений: //0, 1, 2, 3. Соответствует: L, M, Q, H.
		РисунокШтрихкод 				= ОбластьШтрихКод.Рисунки.РисунокШтрихкод;
		РисунокШтрихкод.Картинка 		= МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		РисунокШтрихкод.РазмерКартинки 	= РазмерКартинки.Пропорционально; 
		РисунокШтрихкод.Расположить(ОбластьШтрихКод.Области.ШтрихКод);
		ТабличныйДокумент.Вывести(ОбластьШтрихКод, Выборка.Уровень());
		
		ОбластьШтрихКодСтрока.Параметры.ШтрихКодСтрока = ШтрихКодДокумента;
		ТабличныйДокумент.Вывести(ОбластьШтрихКодСтрока, Выборка.Уровень());
		
		ВыборкаПокупки = Выборка.Покупки.Выбрать();
		Пока ВыборкаПокупки.Следующий() Цикл
			ОбластьПокупки.Параметры.Заполнить(ВыборкаПокупки);
			ТабличныйДокумент.Вывести(ОбластьПокупки);
		
		КонецЦикла;
		ВыборкаПокупкиТранзит = Выборка.ПокупкиТранзит.Выбрать();
		Пока ВыборкаПокупкиТранзит.Следующий() Цикл
			ОбластьПокупки.Параметры.Заполнить(ВыборкаПокупкиТранзит);
			ТабличныйДокумент.Вывести(ОбластьПокупки);
		КонецЦикла;
		
		
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;	
КонецФункции

Функция Печать_ВедомостьСписание(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент				= Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб	= Истина;
	ТабличныйДокумент.ПолеСлева		= 0;
	ТабличныйДокумент.ПолеСправа	= 0;
	
	Макет 				= Документы.Движение.ПолучитьМакет("ПФ_MXL_ВедамостьСписание");
	
	ОбластьЗаголовок 	= Макет.ПолучитьОбласть("Заголовок");
	Шапка 				= Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупкиШапка = Макет.ПолучитьОбласть("ПокупкиШапка");
	ОбластьПокупки 		= Макет.ПолучитьОбласть("Покупки");
	
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	=
	"ВЫБРАТЬ
	|	Движение.Дата КАК Дата,
	|	Движение.Номер КАК Номер,
	|	Движение.Покупки.(
	|		НомерСтроки 	КАК НомерСтроки,
	|		Покупка 		КАК Покупка,
	|		МестоХранения 	КАК МестоХранения,
	|		Габарит 		КАК Габарит,
	|		Участник 		КАК Участник,
	|		Партия			КАК Партия
	|	) КАК Покупки,
	|	Движение.ПокупкиТранзит.(
	|		НомерСтроки 	КАК НомерСтроки,
	|		Покупка 		КАК Покупка,
	|		МестоХранения 	КАК МестоХранения,
	|		Габарит 		КАК Габарит,
	|		Участник 		КАК Участник,
	|		Партия 			КАК Партия
	|	) КАК ПокупкиТранзит
	
	|ИЗ
	|	Документ.Движение КАК Движение
	|ГДЕ
	|	Движение.Ссылка В(&МассивОбъектов)";
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();

	

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		Шапка.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(Шапка, Выборка.Уровень());

		ТабличныйДокумент.Вывести(ОбластьПокупкиШапка);
		ВыборкаПокупки = Выборка.Покупки.Выбрать();
		Пока ВыборкаПокупки.Следующий() Цикл
			ОбластьПокупки.Параметры.Заполнить(ВыборкаПокупки);
			ТабличныйДокумент.Вывести(ОбластьПокупки, ВыборкаПокупки.Уровень());
		КонецЦикла;
		ВыборкаПокупкиТранзит = Выборка.ПокупкиТранзит.Выбрать();
		Пока ВыборкаПокупкиТранзит.Следующий() Цикл
			ОбластьПокупки.Параметры.Заполнить(ВыборкаПокупкиТранзит);
			ТабличныйДокумент.Вывести(ОбластьПокупки, ВыборкаПокупкиТранзит.Уровень());
		КонецЦикла;

		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	Возврат ТабличныйДокумент;
КонецФункции




Функция Получить_ТекстЗапроса_ОстаткиТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ОстаткиТоваров";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	

		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Дата 				КАК Период,
		|	ТаблицаДокумента.Покупка 					КАК Покупка,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 		КАК ВидДвижения,
		|	ТаблицаДокумента.МестоХранения			 	КАК МестоХранения,
		|	ТаблицаДокумента.Габарит					КАК Габарит,
		|	Истина										КАК Оплачен,
		|	ТаблицаДокумента.Участник 					КАК Участник,
		|	ТаблицаДокумента.Партия 					КАК Партия,
		|	ТаблицаДокумента.Количество 				КАК Количество
		|ИЗ
		|	Документ.Движение.Покупки КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Дата 				КАК Период,
		|	ТаблицаДокумента.Покупка 					КАК Покупка,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 		КАК ВидДвижения,
		|	Выбор когда ТаблицаДокумента.Ссылка.МестоХранения 	<> Значение(Справочник.МестаХранения.ПустаяСсылка) 	Тогда ТаблицаДокумента.Ссылка.МестоХранения иначе ТаблицаДокумента.МестоХранения Конец ,
		|	Выбор когда ТаблицаДокумента.Ссылка.Габарит 		<> Значение(Справочник.Габариты.ПустаяСсылка) 		Тогда ТаблицаДокумента.Ссылка.Габарит иначе ТаблицаДокумента.Габарит Конец ,
		|	Истина										КАК Оплачен,
		|	ТаблицаДокумента.Участник 					КАК Участник,
		|	ТаблицаДокумента.Партия 					КАК Партия,
		|	ТаблицаДокумента.Количество 				КАК Количество
		|ИЗ
		|	Документ.Движение.Покупки КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка и
		| 	ТаблицаДокумента.Ссылка.ВидОперации = Значение(Перечисление.ВидыОпераций_ДвижениеСклад.Перемещение)
		|
		|";
	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Транзит(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Транзит";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	

		ТекстЗапроса = "ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Дата 			КАК Период,
		|	ТаблицаДокумента.Покупка 				КАК ПокупкаСсылка,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 	КАК ВидДвижения,
		|	Выбор когда ТаблицаДокумента.Ссылка.МестоХранения <> Значение(Справочник.МестаХранения.ПустаяСсылка) Тогда ТаблицаДокумента.Ссылка.МестоХранения иначе ТаблицаДокумента.МестоХранения Конец Как МестоХранения ,
		|	Выбор когда ТаблицаДокумента.Ссылка.Габарит 	  <> Значение(Справочник.Габариты.ПустаяСсылка) Тогда ТаблицаДокумента.Ссылка.Габарит иначе ТаблицаДокумента.Габарит Конец Как Габарит,
		|	ТаблицаДокумента.Участник 				КАК Участник,
		|	ТаблицаДокумента.Ссылка.ТочкаНазначения КАК Точка,
		|	ТаблицаДокумента.Партия 				КАК Партия,
		|	ТаблицаДокумента.Количество 			КАК Количество
		|ИЗ
		|	Документ.Движение.Покупки КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	и ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОпераций_ДвижениеСклад.ПередачаНаТранзит)";
	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Возвраты(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Возвраты";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	

		ТекстЗапроса = "ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Дата 			КАК Период,
		|	ТаблицаДокумента.Покупка 				КАК Покупка,
		|	ТаблицаДокумента.Покупка.Организатор	КАК Организатор,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 	КАК ВидДвижения,
		|	Выбор когда ТаблицаДокумента.Ссылка.МестоХранения <> Значение(Справочник.МестаХранения.ПустаяСсылка) Тогда ТаблицаДокумента.Ссылка.МестоХранения иначе ТаблицаДокумента.МестоХранения Конец Как МестоХранения ,
		|	ТаблицаДокумента.Участник 				КАК Участник,
		|	ТаблицаДокумента.Партия 				КАК Партия,
		|	ТаблицаДокумента.Количество 			КАК Количество
		|ИЗ
		|	Документ.Движение.Покупки КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	и ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОпераций_ДвижениеСклад.Возврат)";
	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции



Функция Получить_ТекстЗапроса_Расход(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Расход";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	

		ТекстЗапроса = "ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Дата	КАК Период,
		|	ТаблицаДокумента.Покупка   		КАК Покупка,
		|	ТаблицаДокумента.Участник 		КАК Участник,
		|	ТаблицаДокумента.Габарит 		КАК Габарит,
		|	ТаблицаДокумента.МестоХранения 	КАК МестоХранения,
		|	Истина							КАК Списано,
		|	ТаблицаДокумента.Количество 	КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.ТипРасхода.Списано) КАК ТипРасхода,
		|	0								КАК Сумма,
		|	ложь 							КАК БесплатнаяВыдача
		|ИЗ
		|	Документ.Движение.Покупки КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка и
		| 	ТаблицаДокумента.Ссылка.ВидОперации = Значение(Перечисление.ВидыОпераций_ДвижениеСклад.Списание)";
	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолноеИмяОбъекта()
	Возврат "Документ.Движение";
КонецФункции



Функция ПолучитьТэг_Income(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвижениеПокупки.Оплачен КАК Оплачен,
		|	ДвижениеПокупки.Ссылка.Дата КАК ДатаПриема,
		|	ДвижениеПокупки.Ссылка.МестоХранения КАК МестоХранения,
		|	ДвижениеПокупки.Ссылка.Габарит КАК Габарит,
		|	ВЫБОР
		|		КОГДА ДвижениеПокупки.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОпераций_ДвижениеСклад.ПередачаНаТранзит)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Транзит,
		|	ДвижениеПокупки.Ссылка.Дата КАК Дата,
		|	ДвижениеПокупки.Покупка.ШК КАК ШК,
		|	ЛОЖЬ КАК ОтдельнымМестом,
		|	ЛОЖЬ КАК ОргСбор,
		|	ДвижениеПокупки.Ссылка.Номер КАК Номер,
		|	ТарифыСрезПоследних.кодТарифа КАК кодТарифа,
		|	ТарифыСрезПоследних.Негабарит КАК Негабарит,
		|	ДвижениеПокупки.Партия.Номер КАК ПартияНомер
		|ИЗ
		|	Документ.Движение.Покупки КАК ДвижениеПокупки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Тарифы.СрезПоследних КАК ТарифыСрезПоследних
		|		ПО (ВЫБОР
		|				КОГДА ДвижениеПокупки.Ссылка.Габарит = ЗНАЧЕНИЕ(Справочник.Габариты.ПустаяСсылка)
		|					ТОГДА ДвижениеПокупки.Габарит = ТарифыСрезПоследних.Габарит
		|				ИНАЧЕ ДвижениеПокупки.Ссылка.Габарит = ТарифыСрезПоследних.Габарит
		|			КОНЕЦ)
		|			И (НЕ ТарифыСрезПоследних.Отменен)

		|ГДЕ
		|	ДвижениеПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И ДвижениеПокупки.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("income");
		СтоСП.Вставить_Тэг(ЗаписьXML,"paid"	,				?(Выборка.Оплачен,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				?(ЗначениеЗаполнено(Выборка.ДатаПриема),Выборка.ДатаПриема,Выборка.Дата));
		СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.ШК.Участник.Код),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(Выборка.ШК.Организатор.Код),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"sizedCategoryName",     Выборка.МестоХранения.Наименование);
		СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber",         Прав(Выборка.ПартияНомер,(СтрДлина(Выборка.ПартияНомер)-3)));
		СтоСП.Вставить_Тэг(ЗаписьXML, "innerId", 			  Прав(Выборка.ПартияНомер,(СтрДлина(Выборка.ПартияНомер)-3)));
		СтоСП.Вставить_Тэг(ЗаписьXML,"sizedCategoryNumber",   СтоСП.ПолучитьПредставлениеГабарита(Выборка.Габарит));
		СтоСП.Вставить_Тэг(ЗаписьXML,"transit",               ?(Выборка.Транзит,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"isBig",                 ?(Выборка.Габарит.НеГабарит,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"tariffId",             Выборка.кодТарифа);
		СтоСП.Вставить_Тэг(ЗаписьXML,"isFree",                ?(Выборка.ОтдельнымМестом,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"DistributorFee",        ?(Выборка.ОргСбор,1,0));
		СтоСПОбмен_Общий.ЗаполнитьТэгиЗаказаПо_ШК(Выборка.ШК,ЗаписьXML);	
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
КонецФункции


Функция ПолучитьТэг_discard(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвижениеПокупки.Ссылка.Дата КАК Дата,
		|	ДвижениеПокупки.Ссылка.Номер КАК Номер,
		|	ДвижениеПокупки.Покупка КАК Покупка,
		|	ДвижениеПокупки.Участник КАК Участник,
		|	ДвижениеПокупки.Покупка.ШК КАК ШК
		|ИЗ
		|	Документ.Движение.Покупки КАК ДвижениеПокупки
		|ГДЕ                                                              
		|	ТИПЗНАЧЕНИЯ(ДвижениеПокупки.Покупка) = ТИП(Справочник.Посылки)  и
		|	ДвижениеПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И ДвижениеПокупки.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		//Если ТипЗнч(Выборка.ШК.Покупка)=Тип("СправочникСсылка.Посылки") и Выборка.ШК.Покупка.Состав.Количество()=0 Тогда Продолжить; КонецЕсли;
//		Если ТипЗнч(Выборка.ШК.Покупка)=Тип("СправочникСсылка.Посылки") Тогда
//			ШК = Выборка.ШК.Покупка.Покупка.Состав[0].ШК;
//		Иначе
//			ШК= Выборка.ШК;
//		Конецесли;
		
		ШК= Выборка.ШК;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("discard");
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				Выборка.Дата);
//		Если Выборка.ШК.типМегаордера = Перечисления.типМегаордера.Посылка Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"packageId",           Формат(Выборка.ШК.Посылка.Код,"ЧГ=0"));
//			СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.Участник.Код),"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber",        Прав(Выборка.Номер,(СтрДлина(Выборка.Номер)-3)));
			СтоСП.Вставить_Тэг(ЗаписьXML, "innerId", 			Формат(Число(Прав(Выборка.Номер, (СтрДлина(Выборка.Номер)- 3))),"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",           "package");
		//	СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(?(ЗначениеЗаполнено(ШК.Посылка.Организатор),ШК.Посылка.Организатор.Код,0)),"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"discardType"	,		"distributorDiscard");			
		//Иначе
		//	СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.ШК.Участник.Код),"ЧГ=0"));
		//	СтоСПОбмен_Общий.ЗаполнитьТэгиЗаказаПо_ШК(ШК,ЗаписьXML);		
		//	СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(?(ЗначениеЗаполнено(ШК.Организатор),ШК.Организатор.Код,ШК.Покупка.Организатор.Код)),"ЧГ=0"));
		//КонецЕсли;		
			
			
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
КонецФункции
