#Область ШтрихКоды

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	    
	Если 	ИмяСобытия 	= "ScanData" и
			Источник 	= "ПодключаемоеОборудование" и
			ВводДоступен()									Тогда
			
			ШК = СтоСП_Клиент.ПолучитьШКизПараметров(Параметр);
			ОбработатьШКнаКлиенте(ШК);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОбработатьШКнаКлиенте(ШК)
	ДанныеШК    = СП_Штрихкоды.ПолучитьДанныеПоШК(ШК);
	Если Строка(ДанныеШК.Тип) = "Посылка (12)" 					Тогда
		Если Элементы.ГруппаТабЧасти.ТекущаяСтраница=Элементы.ГруппаТабЧасти.ПодчиненныеЭлементы.тчСклад Тогда
			ВыборкаОстатков(,ДанныеШК.заказ);
		КонецЕсли;		
	//ИначеЕсли Строка(ДанныеШК.Тип) = "Покупка (11)" или 
	//		  Строка(ДанныеШК.Тип) = "Заказ100маркета (33)"      Тогда   //11043940487532000904	
	//	Если Элементы.ГруппаТабЧасти.ТекущаяСтраница=Элементы.ГруппаТабЧасти.ПодчиненныеЭлементы.тчСклад Тогда
	//		ВыборкаОстатков(ДанныеШК.Участник,ДанныеШК.заказ);
	//	КонецЕсли;		
	Иначеесли Строка(ДанныеШК.Тип) = "Сотрудник (55)" 			Тогда	
		Если СП_РаботаСДокументами_Клиент.ЗаписатьДокумент(этотОбъект,,ДанныеШК.Сотрудник) Тогда
			Закрыть();
		КонецЕсли;	
	КонецЕсли;
	Модифицированность			= Истина;
	УстановитьВидимость();
КонецПроцедуры	


&НаКлиенте
Процедура ВвестиШтрихКодВручную(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаВводаШК",,ЭтотОбъект,,,,Новый ОписаниеОповещения("ВвестиШтрихКодВручную_Завершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ВвестиШтрихКодВручную_Завершение(ШК, ДополнительныеПараметры) Экспорт
	ОбработатьШКнаКлиенте(ШК);
КонецПроцедуры	


#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоОтбору(Команда)
	ОткрытьФорму("Документ.Движение.Форма.ФормаОтбора",новый Структура("имяСхемы","СКДОтборТовары"),ЭтотОбъект,,,,Новый ОписаниеОповещения("ЗаполнитьПоОтбору_Завершение", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры


&НаКлиенте
Процедура 	ЗаполнитьПоОтбору_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	ЗаполнитьПоОтбору_Завершение_НаСервере(ВыбранноеЗначение);
	//ОбновитьДанныеКолонкиОрганизитор();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОтбору_Завершение_НаСервере(ВыбранноеЗначение)
	КомпоновщикНастроек		= ВыбранноеЗначение.КомпоновщикНастроек;
	Схема					= ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСхемы);
	
	настройки						= КомпоновщикНастроек.Настройки;
	параметрПериод					= настройки.ПараметрыДанных.НайтиЗначениеПараметра(новый ПараметрКомпоновкиДанных("ДатаОтчета"));
	параметрПериод.Значение			= КонецДня(Объект.Дата);
	параметрПериод.Использование	= Истина;
	
	КомпановщикМакета				= Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет							= КомпановщикМакета.Выполнить(Схема,КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки				= новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	
	ПроцессорВывода					= новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ								= новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	Объект.Покупки.Загрузить(ТЗ);

КонецПроцедуры





&НаКлиенте
Процедура ЗаполнитьТранзитПоОтбору(Команда)
	фрм=ПолучитьФорму("Документ.Движение.Форма.ФормаОтбора",новый Структура("имяСхемы","СКДОтборТранзиты"),ЭтаФорма);
	фрм.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
		Если Строка(фМестоХранения)= "" тогда
#Если не ВебКлиент Тогда			
		Сигнал();
#КонецЕсли		
		
		Сообщить("Зачем добавлять пустую строку?");
		Возврат;
	конецЕсли;	
	Если ПроверкаСписка(фМестоХранения) Тогда
#Если не ВебКлиент Тогда		
		Сигнал();
#КонецЕсли
		
		Сообщить("Этот элемент уже присутствует в списке!!!");
		Возврат;
	
	КонецЕсли;
	фМестаХранения.Добавить(фМестоХранения);
	// Вставить содержимое обработчика.

	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

#Область СтарыйОтбор
&НаКлиенте
Процедура Заполнить(Команда)
	Объект.Покупки.Очистить();
	ВыборкаОстатков();	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаСписка(МестоХранения)
    Для н=0 По фМестаХранения.Количество()-1 Цикл
		Если фМестаХранения.Получить(н).Значение=МестоХранения Тогда
			Возврат Истина
		КонецЕсли
	КонецЦикла;
	Возврат Ложь

КонецФункции // ПроверкаСписка()

&НаСервере
Процедура ВыборкаОстатков(Участник = Неопределено, Заказ = неопределено)
	
	ПервоеУсловие	= Истина;
	ТекстУсловия	= "";
	
	Если ЗначениеЗаполнено(фОрганизатор) Тогда
		ТекстУсловия	= ТекстУсловия + " и (Партия.Организатор = &Организатор) ";
	КонецЕсли;
	Если ЗначениеЗаполнено(фМестаХранения) Тогда
		ТекстУсловия	= ТекстУсловия + " и (МестоХранения В (&МестаХранения)) ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Участник) или ЗначениеЗаполнено(фУчастник) Тогда
		ТекстУсловия	= ТекстУсловия + " и (Участник = &Участник) ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Заказ) или ЗначениеЗаполнено(фПокупка) Тогда
		ТекстУсловия	= ТекстУсловия + " и (Покупка = &Покупка) ";
	КонецЕсли;
	Если ЗначениеЗаполнено(фПартия) Тогда
		ТекстУсловия	= ТекстУсловия + " и (Партия = &Партия) ";
	КонецЕсли;
	
	Если СтрНачинаетсяС(ТекстУсловия, " и ") Тогда
		ТекстУсловия = Сред(ТекстУсловия,3,СтрДлина(ТекстУсловия)-2);
	КонецЕсли;
	
    ДатаЕ=КонецДня(Объект.Дата);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиТоваровОстатки.Габарит,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиТоваровОстатки.Габарит),
		|	ОстаткиТоваровОстатки.Участник КАК Участник,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиТоваровОстатки.Участник),
		|	ОстаткиТоваровОстатки.МестоХранения КАК МестоХранения,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиТоваровОстатки.МестоХранения),
		|	ОстаткиТоваровОстатки.Покупка КАК Покупка,
		|	ОстаткиТоваровОстатки.Партия,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиТоваровОстатки.Партия),
		|	ОстаткиТоваровОстатки.Оплачен,
		|	ОстаткиТоваровОстатки.КоличествоОстаток КАК количество,
		|	ОстаткиТоваровОстатки.Покупка.Организатор КАК Организатор
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваров.Остатки(
		|			,
		| "+ТекстУсловия+" ) КАК ОстаткиТоваровОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	МестоХранения,
		|	Участник,
		|	Покупка";
  //  Запрос.УстановитьПараметр("ДатаЕ", ДатаЕ);
	Запрос.УстановитьПараметр("МестаХранения", 	фМестаХранения);  
	Запрос.УстановитьПараметр("Организатор",	фОрганизатор) ;
	Запрос.УстановитьПараметр("Партия", 		фПартия);
	Запрос.УстановитьПараметр("Покупка", 		?(ЗначениеЗаполнено(Заказ), 	Заказ, 		фПокупка));
	Запрос.УстановитьПараметр("Участник", 		?(ЗначениеЗаполнено(Участник), 	Участник, 	фУчастник));

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
			строкТЧ					= Объект.Покупки.Добавить();
		    строкТЧ.Покупка			= Выборка.Покупка;
			//Если ТипЗнч(строкТЧ.Покупка)= Тип("СправочникСсылка.Покупки") Тогда
			//	Объект.Организатор = СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(строкТЧ.Покупка.Владелец.Код);
			//ИначеЕсли ТипЗнч(строкТЧ.Покупка) = Тип("СправочникСсылка.Заказы") Тогда
			//	Объект.Организатор = строкТЧ.Покупка.Организатор;
			//Иначе
			//	Объект.Организатор = Справочники.Организаторы.ПустаяСсылка();
			//КонецЕсли;
			строкТЧ.Организатор		= Выборка.Организатор;
			
			строкТЧ.Оплачен			= Выборка.Оплачен;
			строкТЧ.МестоХранения	= Выборка.МестоХранения;
			строкТЧ.Габарит			= Выборка.Габарит;
			строкТЧ.Количество      = Выборка.Количество;
			строкТЧ.Партия  		= Выборка.Партия;
			строкТЧ.Участник  		= Выборка.Участник;
		
	КонецЦикла;


	//ОбновитьДанныеКолонкиОрганизитор();
	
	
КонецПроцедуры // Печать()


Процедура ЗаполнитьПросроченнымиНаСервере(ПараметрыЗаполнения = Неопределено)
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения= Новый Структура;
		ПараметрыЗаполнения.Вставить("ДатаОтчета", Объект.Дата);
		ПараметрыЗаполнения.Вставить("ДнейХранения", Новый структура("ПравоеЗначение, Использование, ВидСравнения",
			ДнейПросрочки, Истина, ВидСравненияКомпоновкиДанных.Больше));
		Если фИспользоватьМХ Тогда
			ПараметрыЗаполнения.Вставить("МестоХранения", Новый структура("ПравоеЗначение, Использование",
				фМестоХранения, Истина));
		КонецЕсли;
	КонецЕсли;	
	ДокЗначение	= ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.Движение"));
	ДокЗначение.ЗаполнитьПоОтборуТовары(ПараметрыЗаполнения);
	ЗначениеВДанныеФормы(ДокЗначение, Объект);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьПросроченными(Команда)
	ЗаполнитьПросроченнымиНаСервере();
	ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура фИспользоватьМХПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	 // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	//ОбновитьДанныеКолонкиОрганизитор();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СП_РаботаСДокументами.ПриСозданииНаСервере(ЭтотОбъект);	
	
 	Если Параметры.Свойство("ПараметрыЗаполнения") Тогда
 		ЗаполнитьПросроченнымиНаСервере(Параметры.ПараметрыЗаполнения);
 	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	
	//Сканер штрихкода
   СтоСП_Клиент.ПодключитьСканерШК(УникальныйИдентификатор);
	УстановитьВидимость();
КонецПроцедуры

/////////////////////

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	КомпоновщикНастроек=ВыбранноеЗначение.КомпоновщикНастроек;
	Схема=ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСхемы);
	
	настройки=КомпоновщикНастроек.Настройки;
	параметрПериод=настройки.ПараметрыДанных.НайтиЗначениеПараметра(новый ПараметрКомпоновкиДанных("ДатаОтчета"));
	параметрПериод.Значение=КонецДня(Объект.Дата);
	параметрПериод.Использование=Истина;
	
	КомпановщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет=КомпановщикМакета.Выполнить(Схема,КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки= новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорВывода=новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ=новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	//Если   Объект.ВидОперации  =Перечисления.ВидыОпераций_ДвижениеСклад.СписаниеТранзита  или
	//	   Объект.ВидОперации  =Перечисления.ВидыОпераций_ДвижениеСклад.СТранзитаНаВозврат или
	//	   Объект.ВидОперации  =Перечисления.ВидыОпераций_ДвижениеСклад.СТранзитаНаОстатки Тогда
	//	Объект.ПокупкиТранзит.Загрузить(ТЗ);
	//Иначе
		Объект.Покупки.Загрузить(ТЗ);
	//КонецЕсли	
КонецПроцедуры


&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	УстановитьВидимость();		
КонецПроцедуры

#КонецОбласти


Процедура УстановитьВидимость()
	Элементы.ГруппаНазначение.Видимость=Истина;
	Если Объект.ВидОперации  = Перечисления.ВидыОпераций_ДвижениеСклад.Перемещение  Тогда
    	Элементы.ТочкаНазначения.Видимость	= Ложь;
		Элементы.Организатор.Видимость		= Ложь;
		Элементы.МестоХранения.Видимость	= Истина;
		Элементы.Габарит.Видимость			= Истина;
	ИначеЕсли Объект.ВидОперации  = Перечисления.ВидыОпераций_ДвижениеСклад.Возврат Тогда
		Элементы.ТочкаНазначения.Видимость	= Ложь;
		Элементы.Организатор.Видимость		= Ложь;
		Элементы.МестоХранения.Видимость	= Истина;
		Элементы.Габарит.Видимость			= Ложь;
	ИначеЕсли   Объект.ВидОперации  = Перечисления.ВидыОпераций_ДвижениеСклад.ПередачаНаТранзит Тогда
		Элементы.ТочкаНазначения.Видимость	= Истина;
		Элементы.Организатор.Видимость		= Ложь;
		Элементы.МестоХранения.Видимость	= Истина;
		Элементы.Габарит.Видимость			= Истина;
	ИначеЕсли   Объект.ВидОперации  = Перечисления.ВидыОпераций_ДвижениеСклад.Передача Тогда	
		Элементы.ТочкаНазначения.Видимость	= Ложь;
		Элементы.Организатор.Видимость		= Истина;
		Элементы.МестоХранения.Видимость	= Ложь;
		Элементы.Габарит.Видимость			= Ложь;

	Иначе	
		Элементы.ТочкаНазначения.Видимость	= Ложь;
		Элементы.Организатор.Видимость		= Ложь;
		Элементы.МестоХранения.Видимость	= Ложь;
		Элементы.Габарит.Видимость			= Ложь;
		
	КонецЕсли;
	Элементы.фМестоХранения1.Видимость= фИспользоватьМХ;
	
	//Если   Объект.ВидОперации  =Перечисления.ВидыОпераций_ДвижениеСклад.СписаниеТранзита или
	//	   Объект.ВидОперации  =Перечисления.ВидыОпераций_ДвижениеСклад.СТранзитаНаВозврат или
	//	   Объект.ВидОперации  =Перечисления.ВидыОпераций_ДвижениеСклад.СТранзитаНаОстатки Тогда
	//	   
	//	Элементы.ГруппаТабЧасти.ТекущаяСтраница=Элементы.ГруппаТабЧасти.ПодчиненныеЭлементы.тчТранзит;
	//Иначе
		Элементы.ГруппаТабЧасти.ТекущаяСтраница=Элементы.ГруппаТабЧасти.ПодчиненныеЭлементы.тчСклад;
	//КонецЕсли;	
	//ОбновитьДанныеКолонкиОрганизитор();
КонецПроцедуры	




// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды



// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
    Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
        РезультатВыполнения = Неопределено;
        ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
        ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
    КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки



// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
    ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура ГабаритПриИзменении(Элемент)
	ГабвритПараметры =  СП_РаботаСДокументами.ГабаритПараметры(Объект.Габарит);
	Если ГабвритПараметры = Неопределено Тогда
		Объект.Габарит =Неопределено;
	ИначеЕсли ГабвритПараметры.Отменен Тогда	
		Объект.Габарит =Неопределено;
	ИначеЕсли ГабвритПараметры.ЛимитПревышен Тогда
		ТекстСообщения = "Принято максимальное количество заказов по габариту "+ Объект.Габарит +" , "+ГабвритПараметры.Лимит +"шт";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Объект.Габарит =Неопределено;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПокупкиГабаритПриИзменении(Элемент)
	ГабвритПараметры =  СП_РаботаСДокументами.ГабаритПараметры(Элементы.Покупки.ТекущиеДанные.Габарит);
	Если ГабвритПараметры = Неопределено Тогда
		Элементы.Покупки.ТекущиеДанные.Габарит =Неопределено;
	ИначеЕсли ГабвритПараметры.Отменен Тогда	
		Элементы.Покупки.ТекущиеДанные.Габарит =Неопределено;
			ИначеЕсли ГабвритПараметры.ЛимитПревышен Тогда
		ТекстСообщения = "Принято максимальное количество заказов по габариту "+ Элементы.Покупки.ТекущиеДанные.Габарит +" , "+ГабвритПараметры.Лимит +"шт";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Элементы.Покупки.ТекущиеДанные.Габарит =Неопределено;

	КонецЕсли;	
КонецПроцедуры



//&НаСервере
//Функция ЗначениеРеквизита(Объект,ИмяРеквизита);
//    Возврат Объект[ИмяРеквизита];
//КонецФункции

//&НаКлиенте
//Процедура ПокупкиПокупкаПриИзменении(Элемент)
//	ТекДанные = Элементы.Покупки.ТекущиеДанные;
//	ТекДанные.Организитор = ЗначениеРеквизита(ТекДанные.Покупка,"Организатор");
//КонецПроцедуры

//&НаСервере
//Процедура ОбновитьДанныеКолонкиОрганизитор()
//    Запрос = Новый Запрос(
//    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//    |    Покупки.Ссылка КАК Покупка,
//    |    Покупки.Организатор
//    |ИЗ
//    |    Справочник.Посылки КАК Покупки
//    |ГДЕ
//    |    Покупки.Ссылка В(&СписокПокупок)"
//    );
//    Запрос.УстановитьПараметр("СписокПокупок",Объект.Покупки.Выгрузить().ВыгрузитьКолонку("Покупка"));
//    тзОрганизаторы = Запрос.Выполнить().Выгрузить();
//	Для Каждого Стр Из Объект.Покупки Цикл
//		масс = тзОрганизаторы.НайтиСтроки(новый структура("Покупка", Стр.Покупка));
//        Если масс.Количество()>0 Тогда
//            Стр.Организатор = масс[0].Организатор;
//        Иначе
//           // Стр.Организатор = "";
//        КонецЕсли;
//    КонецЦикла;
//КонецПроцедуры


//&НаСервере
//Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
//	ОбновитьДанныеКолонкиОрганизитор();
//КонецПроцедуры

