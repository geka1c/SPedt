
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	ЗаполнитьПисьмоСчеком();
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	СП_РаботаСДокументами.ПриСозданииНаСервере(ЭтотОбъект);	
	 
	Если Не ЗначениеЗаполнено(Объект.ВидОперации)  Тогда
		объект.ВидОперации	= Перечисления.ВидыОперацийВыдачаТранзита.НаОднуТочку;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ОграничениеВыдачи) Тогда
		Объект.ОграничениеВыдачи = СоединитьДатуИВремя(ТекущаяДатаСеанса(), Константы.ОграничениеВыдачиТранзита.Получить());
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(объект.ТочкаТранзита) Тогда
		объект.ТочкаТранзита	= Константы.ПВТранзита.Получить();
	КонецЕсли;
	Объект.ОшибочныеЗаказы = Параметры.ОшибочныеЗаказы;
	
	Если ЗначениеЗаполнено(Параметры.ТочкаНазначения) Тогда
		ЗаполнитьПоТочекНазначенияНаСервере(Параметры.ТочкаНазначения,Параметры.Заморозка);
	КонецЕсли;

	ПодсветкаСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СтоСП_Клиент.ПодключитьСканерШК(УникальныйИдентификатор);
	Элементы.ПокупкиГруппаРассчетСтоимости.Видимость = Ложь;
	Элементы.ПокупкиОписание.Видимость 				 = Ложь;
	
	
	УстановитьВидимость();
	ПосчитатьВесОтправлений() 
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СП_РаботаСДокументами_Клиент.ПроверитьОтветственного(ЭтотОбъект,Отказ);
	УстановитьКоличествоПомеченныхСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ПровелиВыдачуТранзита",истина);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере()

	Если Константы.ВыгружатьТранзитПриЗаписи.Получить()  Тогда
		аспПроцедурыОбменаДанными.УдалитьДокументИзОтправленных(Объект.Ссылка);
		аспПроцедурыОбменаДанными.СформироватИОтправитьПакет(Объект.Ссылка);
	Иначе	
		аспПроцедурыОбменаДанными.УдалитьДокументИзОтправленных(Объект.Ссылка);
	КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Оповестить("ОбновитьВсеЗаявки");
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если 	ИмяСобытия 	= "ScanData" и
			Источник 	= "ПодключаемоеОборудование" и
			ВводДоступен()									Тогда
			
			ШКод = СтоСП_Клиент.ПолучитьШКизПараметров(Параметр);
			ОбработатьШКнаКлиенте(ШКод);
	ИначеЕсли ИмяСобытия="ПерепровестиДокумент" и Параметр=Объект.Ссылка Тогда
		Записать(новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
	ИначеЕсли ИмяСобытия="ОбновитьФорму" Тогда	
        ОбновитьСупергруппу();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТочкаНазначенияПриИзменении(Элемент)
	Объект.ТочкаТранзита = Объект.ТочкаНазначения;
	УстановитьВидимость();	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры


&НаКлиенте
Процедура ТочкаТранзитаПриИзменении(Элемент)
	ТочкаТранзитаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтбиратьПоЗаявкамПриИзменении(Элемент)
	ОтобратьПоЗаявке();
КонецПроцедуры


&НаКлиенте
Процедура КонтролироватьСупергруппыПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПокупки

&НаКлиенте
Процедура ПокупкиПриИзменении(Элемент)
	УстановитьКоличествоПомеченныхСтрок();
КонецПроцедуры


&НаКлиенте
Процедура ПокупкиГабаритПриИзменении(Элемент)
	ПересчитатьСтоимостьПостроке();
КонецПроцедуры

&НаКлиенте
Процедура ПокупкиКоличествоПриИзменении(Элемент)
	ПересчитатьСтоимостьПостроке();
КонецПроцедуры

&НаКлиенте
Процедура ПокупкиСтоимостьХраненияПриИзменении(Элемент)
	ПересчитатьСтоимостьПостроке();
КонецПроцедуры

&НаКлиенте
Процедура ПокупкиСтоимостьДоставкиПриИзменении(Элемент)
	ПересчитатьСтоимостьПостроке();
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаявкиВТК
&НаКлиенте
Процедура ЗаявкиВТКПриАктивизацииСтроки(Элемент)
	ОтобратьПоЗаявке();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ЧекНЗ(Команда)
	ТабДок = Новый ТабличныйДокумент;
	ЗаполнитьЧек(ТабДок,"Покупки", Объект.ТочкаНазначения);
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.АвтоМасштаб=Истина;
	ТабДок.ПолеСлева=0;
	ТабДок.ПолеСправа=0;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	//ТабДок.Показать();
	ТабДок.Напечатать();
КонецПроцедуры

&НаКлиенте
Процедура ЧекСжатый(Команда)
	Если не ЗначениеЗаполнено(Объект.Ссылка) или Модифицированность Тогда
		Записать();
	КонецЕсли;
	МассОбъектов = новый Массив;
	массОбъектов.Добавить(Объект.Ссылка);
	
//	ТабДок = Новый ТабличныйДокумент;
	ТабДок = ПолучитьТабДокСжатогочека(массОбъектов);
	
	
//	ЗаполнитьСжатыйЧек(ТабДок);
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.АвтоМасштаб=Истина;
	ТабДок.ПолеСлева=0;
	ТабДок.ПолеСправа=0;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
//	ТабДок.Показать();
	ТабДок.Напечатать();

КонецПроцедуры



&НаКлиенте
Процедура ВвестиШтрихКодВручную(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаВводаШК",,ЭтотОбъект,,,,Новый ОписаниеОповещения("ВвестиШтрихКодВручную_Завершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтоимостьОтправлений(Команда)
	Если не ЗначениеЗаполнено(объект.Ссылка) Тогда
		Записать();		
	КонецЕсли;	
	ПолучитьСтоимостьОтправленийНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьРасчетСтоимости(Команда)
	Элементы.ПокупкиГруппаРассчетСтоимости.Видимость = не Элементы.ПокупкиГруппаРассчетСтоимости.Видимость;
	Элементы.ПокупкиОписание.Видимость 				 = не Элементы.ПокупкиОписание.Видимость;
КонецПроцедуры


&НаКлиенте
Процедура ИсторияДоставки(Команда)
//	ИсторияЗаказов	= ИсторияДоставкиНаСервере(Элементы.Покупки.ТекущиеДанные.ШК);
	ОткрытьФорму(	"Отчет.ИсторияЗаказов.Форма.ФормаОтчета",
					новый структура("мегаордер, СформироватьПриОткрытии",Элементы.Покупки.ТекущиеДанные.ШК, истина),
					ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
	
КонецПроцедуры


&НаКлиенте
Процедура ПометитьВсе(Команда)
	Если Элементы.Покупки.ТолькоПросмотр Тогда Возврат; КонецЕсли;
	Для каждого стр из Объект.Покупки Цикл
		стр.Подбор=Истина;
	КонецЦикла;	
	УстановитьКоличествоПомеченныхСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ПометитьУпакованные(Команда)
	Если Элементы.Покупки.ТолькоПросмотр Тогда Возврат; КонецЕсли;
	Для каждого стр из Объект.Покупки Цикл
		Если стр.Упакован Тогда
			стр.Подбор=Истина;
		КонецЕсли;	
	КонецЦикла;	
	УстановитьКоличествоПомеченныхСтрок();
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеВсе(Команда)
	Если Элементы.Покупки.ТолькоПросмотр Тогда Возврат; КонецЕсли;
	Для каждого стр из Объект.Покупки Цикл
		стр.Подбор=Ложь;
	КонецЦикла;
	УстановитьКоличествоПомеченныхСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьВыделение(Команда)
	Если Элементы.Покупки.ТолькоПросмотр Тогда Возврат; КонецЕсли;
	Для каждого стр из Объект.Покупки Цикл
		стр.Подбор=не стр.Подбор;
	КонецЦикла;
	УстановитьКоличествоПомеченныхСтрок();
КонецПроцедуры


&НаКлиенте
Процедура ДоЗаполнитьОстатками(Команда)
	Если не Объект.Проведен Тогда
		ТекстВопроса = "Документ будет проведен и дополнен остатками. Продолжить?";
		Оповещение =  Новый ОписаниеОповещения("ДоЗаполнитьОстаткамиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса ,РежимДиалогаВопрос.ДаНет );
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю("Чтобы дополнить остатками, документ должен быть не проведен");
	КонецЕсли;	

КонецПроцедуры


&НаКлиенте
Процедура СоздатьПартиюПочтаРоссии(Команда)
	Если не ТолькоПросмотр Тогда
		ТекстВопроса = "После Создания Партии документ невозможно будет изменить!"+Символы.ПС+ "ПРОДОЛЖИТЬ? ";
		Оповещение = Новый ОписаниеОповещения("СоздатьПартиюПочтаРоссииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение,ТекстВопроса ,РежимДиалогаВопрос.ДаНет );
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не доступен для изменения");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПакетДокументов_ПР(Команда)
	МассивРезультатаов=ПакетДокументов_ПРНаСервере();
	Для каждого стр из МассивРезультатаов Цикл
		массПартий=Объект.ПартииТК.НайтиСтроки(новый Структура("НомерПартии",стр.ОтправленныеДанные));
		ДопИмя=Строка(Объект.ТочкаНазначения)+"_"+Строка(массПартий[0].НомерПартии)+"_"+Строка(массПартий[0].Комментарий)+".zip";
		ДопИмя=СтрЗаменить(ДопИмя," ","_");
		ИмяФ=КаталогВременныхФайлов()+ДопИмя;
		//ИмяФ=ПолучитьИмяВременногоФайла("zip");
		Если стр.Успешно Тогда
			ПолучитьФайл(стр.Адрес,ИмяФ);
		Конецесли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ПерезаполнитьУчастников(Команда)
	ПерезаполнитьУчастниковНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОграничениеВыдачи(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаОжиданиеВводаШтрихкода",,ЭтотОбъект,,,,Новый ОписаниеОповещения("ВвестиШтрихКодАдминистратора_Завершение", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтоимость(Команда)
	ПересчитатьСтоимостьНаСервере();
	УстановитьКоличествоПомеченныхСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧек(Команда)
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтправитьЧекЗавершение",ЭтотОбъект);
	
	ПараметрыСообщения = спПочтовыеСообщения.ПараметыЧекаТранзита(Объект.Ссылка);
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыСообщения,оповещениеОЗакрытии);
	
	//спПочтовыеСообщения.ОтправитьЧекТранзита(объект.Ссылка);
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСтатусыЗаказов(Команда)
	ПолеТД = ПроверитьСтатусыЗаказовНаСервере();
	Если полеТД <> неопределено Тогда
		ОткрытьФорму("Общаяформа.ФормаПросмотраТабличногоДокумента",новый структура("Результат",полеТД),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСупергруппу(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьСупергруппу_Завершение", ЭтотОбъект),
					"Документ будет записан. Продолжить?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьКоленоМаршрута(Команда)
	//НомерКолена=Элементы.МаршрутСупергруппы.ТекущиеДанные.НомерСтроки;
	Структура_Параметров=Новый Структура();
	
	Структура_Супергруппа=Новый Структура();
	структура_Супергруппа.Вставить("Супергруппа"		,Объект.Супергруппа);
	структура_Супергруппа.Вставить("НомерКолена"		,Элементы.МаршрутСупергруппы.ТекущиеДанные.НомерСтроки);
	структура_Супергруппа.Вставить("ТК"					,Элементы.МаршрутСупергруппы.ТекущиеДанные.ТранспортнаяКомпания);
	структура_Супергруппа.Вставить("ДатаДоставкиПлан"	,Элементы.МаршрутСупергруппы.ТекущиеДанные.ДатаДоставкиПлан);
	структура_Супергруппа.Вставить("ДатаДоставкиФакт"	,Элементы.МаршрутСупергруппы.ТекущиеДанные.ДатаДоставкиФакт);
	структура_Супергруппа.Вставить("ТрэкНомер"			,Элементы.МаршрутСупергруппы.ТекущиеДанные.ТрэкНомер);
	структура_Супергруппа.Вставить("Комментарий"		,Элементы.МаршрутСупергруппы.ТекущиеДанные.Комментарий);
	структура_Параметров.Вставить("Супергруппа",структура_Супергруппа);

	ОткрытьФорму("Документ.ЗаполнитьКоленоМаршрута.Форма.ФормаДокумента",структура_Параметров,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//	Форма_ЗаполнитьКоленоМаршрута=ПолучитьФорму("Документ.ЗаполнитьКоленоМаршрута.Форма.ФормаДокумента",структура_Параметров,ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно);
//	Форма_ЗаполнитьКоленоМаршрута.Открыть();
//	ЭтаФорма.Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВедомостьКурьерскойДоставки(Команда)
	Если не ЗначениеЗаполнено(Объект.Ссылка) тогда
		Записать( Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;

	ОтправитьВедомостьКурьерскойДоставкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Форма_Ф103_ПР(Команда)

	Если элементы.ПартииТК.ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите партию почты россии");
		Возврат;	
	КонецЕсли;	
	НомерПартии =	Элементы.ПартииТК.ТекущиеДанные.НомерПартии;
	Стр=Форма_Ф103_ПРНаСервере(НомерПартии);
	//ИмяФ=ПолучитьИмяВременногоФайла("pdf");
	Если стр.Успешно Тогда
		ПолучитьФайл(стр.Адрес,СтрШаблон("ф103_%1.pdf",НомерПартии),Истина);
	Конецесли;

КонецПроцедуры

&НаКлиенте
Процедура КвитанцияПР(Команда)
	СписокРезультатаов=КвитанцияПРНаСервере();
	Для каждого стр из СписокРезультатаов Цикл
		Если стр.Значение.Успешно Тогда
			ПолучитьФайл(стр.Значение.Адрес,СтрШаблон("Квитанция_%1.pdf",стр.Ключ),Истина);
		Конецесли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПочтаРоссииВызватьКурьера(Команда)
	
	Если элементы.ПартииТК.ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана партия для вызова курьера");
		Возврат;	
	КонецЕсли;
	Если ЗначениеЗаполнено(элементы.ПартииТК.ТекущиеДанные.Курьер) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Курьер уже вызван");
		Возврат;	
	КонецЕсли;		
		
	НомерПартии = элементы.ПартииТК.ТекущиеДанные.НомерПартии;
	Оповещение = Новый ОписаниеОповещения("ВыборАдресаЗавершение",ЭтотОбъект );
	ОткрытьФорму("Справочник.ТранспортныеКомпании.Форма.ВыборАдресаДляВызоваКурьераПочтаРосси",
					новый Структура("ПунктВыдачи,НомерПартии,ДокументОтправления", Объект.Ссылка,НомерПартии,Объект.Ссылка) 
					,ЭтотОбъект , , , ,Оповещение , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца );
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

				
&НаКлиенте
Процедура ВыборАдресаЗавершение(Результат, ДопПараметры) Экспорт
	строкаПартии = Элементы.ПартииТК.ТекущиеДанные;
	Если Результат.errors.Количество() = 0 Тогда
		строкаПартии.Курьер = Результат.ДатаВызоваКурьера + ", "+Результат.ВремяВызоваКурьера +
								", ордер:"+ Результат.ordernumber +
		
								". "+Символы.ПС+Результат.Адрес
	Иначе
		строкаПартии.Сообщение=Результат.errors[0].error; 	
	КонецЕсли;	
	Модифицированность = Истина;
КонецПроцедуры	



&НаСервере
Процедура ПосчитатьВесОтправлений() 
	Для каждого элем из объект.Покупки Цикл
		Если ТипЗнч(элем.партия) = Тип("ДокументСсылка.ОтправлениеТранзита") Тогда
			Вес = Вес + элем.партия.Вес
		КонецЕсли;	
		Если ТипЗнч(элем.Партия) = Тип("ДокументСсылка.ОтправлениеТранзита") Тогда
			Для каждого стр из элем.партия.ТрекНомера Цикл
				Вес = Вес + Стр.Вес;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШКнаКлиенте(ШКод)
	ДанныеШК    = СП_Штрихкоды.ПолучитьДанныеПоШК(ШКод);
	
	Если 	Строка(ДанныеШК.Тип) = "Посылка (12)" 			или
			Строка(ДанныеШК.Тип) = "Покупка (11)" 			или 
			Строка(ДанныеШК.Тип) = "Заказ100маркета (33)" 	или
			Строка(ДанныеШК.Тип) = "Коробка (44)"				Тогда
		
		ПометитьПокупку(ДанныеШК);
	Иначеесли Строка(ДанныеШК.Тип) = "Сотрудник (55)" 			Тогда	
		Если СП_РаботаСДокументами_Клиент.ЗаписатьДокумент(этотОбъект,,ДанныеШК.Сотрудник) Тогда
			//Закрыть();
		КонецЕсли;		
	КонецЕсли;
	Модифицированность			= Истина;
	УстановитьВидимость();
КонецПроцедуры	

&НаКлиенте
Процедура ВвестиШтрихКодВручную_Завершение(ШКод, ДополнительныеПараметры) Экспорт
	ОбработатьШКнаКлиенте(ШКод);
КонецПроцедуры	

&НаКлиенте
Процедура ПометитьПокупку(ДанныеШК)

	Строка 		 	= Новый Структура;
	ЕстьУчастник 	= ДанныеШК.Свойство("Участник");
	Если ЕстьУчастник Тогда
		строка.Вставить("Участник",	ДанныеШК.Участник);
	КонецЕсли;
	строка.Вставить("Покупка", ДанныеШК.Заказ);
	
	МассивСтрок	= Объект.Покупки.НайтиСтроки(строка);
	
	Если МассивСтрок.Количество()	= 0 Тогда
		ТекстСообщения="Не найдено в документе: "+Символы.ПС+
						?(ЕстьУчастник, "участник: "+ДанныеШК.Участник,"")+" ,"+"покупка:  "+ДанныеШК.Заказ+".";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли МассивСтрок[0].Подбор	= Истина Тогда
		ТекстСообщения="Строка №"+МассивСтрок[0].НомерСтроки+" уже помечена: "+Символы.ПС+
						?(ЕстьУчастник, "участник: "+ДанныеШК.Участник,"")+" ,"+"покупка:  "+ДанныеШК.Заказ+".";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Покупки["+(МассивСтрок[0].НомерСтроки-1)+"].Покупка");
		Возврат;
	Иначе
		МассивСтрок[0].Подбор	= Истина;
	КонецЕсли;	
	УстановитьКоличествоПомеченныхСтрок();
#Если НЕ ВебКлиент Тогда
	сигнал();
#КонецЕсли
КонецПроцедуры

&НаСервере
Функция СоединитьДатуИВремя(Дата, Время) 
 
  ДатаСтрока  = Формат(Дата, "ДФ=""ггггММдд""");
  ВремяСтрока = Формат(Время, "ДФ=""ЧЧммсс""");
  Результат  = Дата(ДатаСтрока + ВремяСтрока);
 
  Возврат Результат;
 
КонецФункции


&НаСервере
Процедура ТочкаТранзитаПриИзмененииНаСервере()
	Если 	ЗначениеЗаполнено(Объект.Супергруппа) и 
			Объект.ТочкаТранзита <> Объект.Супергруппа.ПунктВыдачи Тогда
			
		ОбСупергруппа				= Объект.Супергруппа.ПолучитьОбъект();
		обСупергруппа.ПунктВыдачи	= Объект.ТочкаТранзита;
		
		Попытка
			обСупергруппа.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ОтправитьВедомостьКурьерскойДоставкиНаСервере()
	Док = РеквизитФормыВЗначение("Объект");
	док.ОтправитьВедомостьКурьерскойДоставки();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСтатусыЗаказовНаСервере()
	ПартииЗаказов = новый Массив();
	Для каждого элем из объект.Покупки Цикл
		Если ТипЗнч(элем.Партия) = Тип("ДокументСсылка.ОтправлениеТранзита") Тогда
			ПартииЗаказов.Добавить(элем.Партия);
		КонецЕсли;	
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ 
		|	ОтправлениеТранзита.Коробка КАК Заказ,
		|	ОтправлениеТранзита.Ссылка КАК Партия,
		|	ОтправлениеТранзита.НомерЗаказа КАК НомерЗаказа,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК СтатусЗаказа,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК ДатаСтатуса,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК Получатель
		|ИЗ
		|	Документ.ОтправлениеТранзита КАК ОтправлениеТранзита
		|ГДЕ
		|	ОтправлениеТранзита.Ссылка В(&СписокЗаказов)";
	
	Запрос.УстановитьПараметр("СписокЗаказов", ПартииЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТабСтатусов		=	РезультатЗапроса.Выгрузить();
//	МассивЗаказов	=	тзСтатусов.ВыгрузитьКолонку("НомерЗаказа");
		
	Если 	Объект.ТочкаНазначения = Справочники.ТочкиРаздачи.НайтиПоКоду("0083") или
			Объект.ТочкаНазначения = Справочники.ТочкиРаздачи.НайтиПоКоду("0092") Тогда //СДЭК
			 
		Для каждого элем из ТабСтатусов ЦИкл	
			ПротоколОбмена = Интеграция_СДЭК_в20.СтатусЗаказа(элем.номерзаказа); 
			Если ПротоколОбмена.Свойство("ПоследнийСтатусЗаказа") Тогда
					элем.статусЗаказа	=	ПротоколОбмена.ПоследнийСтатусЗаказа.name;
					элем.ДатаСтатуса	=	XMLЗначение(Тип("Дата"), лев(ПротоколОбмена.ПоследнийСтатусЗаказа.date_time,20)+"10:00");
					элем.Получатель		=	ПротоколОбмена.ПоследнийСтатусЗаказа.Получатель;                
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	ПолеТД = ПолучитьОтчетСтатусыЗаказов(ТабСтатусов);
	Возврат полеТД;

КонецФункции

&НаСервере
Функция ПолучитьОтчетСтатусыЗаказов(ТабЗн) 
	Результат	= Новый ТабличныйДокумент;

	СхемаКомпоновкиДанных 	= Документы.ВыдачаТранзита.ПолучитьМакет("скд_СтатусыЗаказовТК");
	КомпоновщикНастроек		= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Вариант = "Основной";
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек[Вариант].Настройки);

	Настройки 			= КомпоновщикНастроек.Настройки;
	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;

	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , , Тип(
		"ГенераторМакетаКомпоновкиДанных"));
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("тз", ТабЗн);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, );
	Результат.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПересчитатьСтоимостьПостроке()
	
	ПараметрыСтоимости = новый Структура;
	ПараметрыСтоимости.Вставить("Партия",		Элементы.Покупки.ТекущиеДанные.Партия);
	ПараметрыСтоимости.Вставить("Покупка",		Элементы.Покупки.ТекущиеДанные.Покупка);
	ПараметрыСтоимости.Вставить("Габарит",		Элементы.Покупки.ТекущиеДанные.Габарит);
	ПараметрыСтоимости.Вставить("Вес",			0);
	ПараметрыСтоимости.Вставить("Объем",		0);
	ПараметрыСтоимости.Вставить("Количество",	Элементы.Покупки.ТекущиеДанные.Количество);
	ПараметрыСтоимости.Вставить("Период",		?(не ЗначениеЗаполнено(Объект.Дата),ОбщегоНазначенияКлиент.ДатаСеанса(),Объект.Дата));
	ПараметрыСтоимости.Вставить("ПерваяТочка",	Элементы.Покупки.ТекущиеДанные.ПерваяТочка);
	
	СтруктураСтоимости = СП_РаботаСДокументами.ПолучитьСтоимостьХранения(ПараметрыСтоимости, ПараметрыСтоимости.Период);
	Стоимость_Доставки = СП_РаботаСДокументами.ПолучитьСтоимостьДоставки(ПараметрыСтоимости);
	
	Элементы.Покупки.ТекущиеДанные.ВремяХранения 	  = структураСтоимости.ВремяХранения;
	Элементы.Покупки.ТекущиеДанные.СтоимостьХранения  = структураСтоимости.СтоимостьХранения;
	Элементы.Покупки.ТекущиеДанные.СтоимостьДоставки  = Стоимость_Доставки;
	Элементы.Покупки.ТекущиеДанные.СтоимостьИтого	  = структураСтоимости.СтоимостьХранения + Стоимость_Доставки;
	
КонецПроцедуры	

&НаСервере
Процедура ПересчитатьСтоимостьНаСервере()
	Для каждого СтрПокупки из Объект.Покупки Цикл
		Если ТипЗнч(СтрПокупки.Покупка) = Тип("СправочникСсылка.Мегаордера") и
				СтрПокупки.Покупка.типМегаордера = Перечисления.типМегаордера.Супергруппа Тогда
				СтрПокупки.СтоимостьИтого		= (СтрПокупки.СтоимостьХранения + СтрПокупки.СтоимостьДоставки) ;
		Иначе		
				СтрПокупки.СтоимостьИтого		= (СтрПокупки.СтоимостьХранения + СтрПокупки.СтоимостьДоставки) * СтрПокупки.Количество;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧекЗавершение(Результат, ДополнительныеПараметры)  Экспорт
	ОтправитьЧекНаСервере();	
КонецПроцедуры	

&НаСервере
Процедура ОтправитьЧекНаСервере() 
	
	ЗаполнитьПисьмоСчеком();
	
   ИмяМетода = Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем.ИмяМетода;
   Отбор = Новый Структура;
   Отбор.Вставить("ИмяМетода", ИмяМетода);
   Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
   ФоновыеЗаданияОчистки = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
   Если ФоновыеЗаданияОчистки.Количество() = 0 Тогда
      НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru = 'Запуск вручную: %1'"), Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем.Синоним);
      ФоновыеЗадания.Выполнить(ИмяМетода,,, НаименованиеФоновогоЗадания);
   КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПисьмоСчеком()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПредметыПапкиВзаимодействий.Взаимодействие КАК Взаимодействие
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.Предмет = &ВыдачаТранзита
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПредметыПапкиВзаимодействий.Взаимодействие.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ВыдачаТранзита", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПисьмоСЧеком = 	ВыборкаДетальныеЗаписи.Взаимодействие;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтоимостьОтправленийНаСервере()
	СписокОтрпавлений = новый СписокЗначений;
	СписокОтрпавлений.ЗагрузитьЗначения(объект.Покупки.Выгрузить(,"Покупка").ВыгрузитьКолонку("Покупка"));;
	
			
	
	СтрокаПротокола = СтоСПОбмен_СтоимостьОтправлений.Получить(СписокОтрпавлений, объект.Ссылка);
	Если СтрокаПротокола.Результат Тогда
		Для каждого элем из Объект.Покупки Цикл
			Если ТипЗнч(элем.Покупка) = Тип("СправочникСсылка.Посылки") Тогда
				ТипЗаказа = "package";				
			ИначеЕсли ТипЗнч(элем.Покупка) = Тип("СправочникСсылка.Коробки") и элем.Покупка.ВидСтикера = Перечисления.ВидыСтикеров.ГС Тогда
				ТипЗаказа = "group";
			Иначе 
				Продолжить;
			КонецЕсли;	                                     
						
			
			
			отбор = новый Структура("id, type", Формат(Элем.покупка.код,"ЧГ=0"),ТипЗаказа);
			
			массивстрок = СтрокаПротокола.таблицаРезультат.НАйтиСтроки(отбор);
			Если массивстрок[0].result = "error" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("при загрузки стоимостьи "+Элем.Покупка+" возникла ошибка: "+массивстрок[0].message );	
				Продолжить;	
			Конецесли;
			элем.ОбъявленнаяСтоимость = Число(массивстрок[0].price);
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры



#КонецОбласти




#Область Команды
&НаКлиенте
Процедура ДоЗаполнитьОстаткамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Попытка
		Записать(новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());		
		Возврат;
	КонецПопытки;
	ДополнитьОстаткамиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДополнитьОстаткамиНаСервере()
	Док=РеквизитФормыВЗначение("Объект");
	Док.ЗаполнитьПоТочкеНазначения(Ложь, Объект.ТочкаНазначения);
	ЗначениеВДанныеФормы(Док,Объект);	
КонецПроцедуры	



&НаСервере
Процедура ПерезаполнитьУчастниковНаСервере()
	Для каждого стр из Объект.Покупки Цикл
		Если ТипЗнч(стр.Партия)=Тип("ДокументСсылка.ОтправлениеТранзита") Тогда
			стр.участник=стр.партия.Участник ;
		КонецЕсли;
	КонецЦикла	
КонецПроцедуры



&НаКлиенте
Процедура ВвестиШтрихКодАдминистратора_Завершение(ШКод, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ШКод) =  Тип("Структура") и
		 ШКод.Свойство("Администратор")	и
		 ШКод.Администратор         Тогда
		ПараметрыВыбораДатыИВремени = Новый Структура("Сообщение", "Документ будет перезаполнен заказами, с учетом  введенного ограничения!");
		ОткрытьФорму("ОбщаяФорма.ВыборДатыИВремени",ПараметрыВыбораДатыИВремени ,ЭтотОбъект,,,,Новый ОписаниеОповещения("ВыборДатыИВремени_Завершение", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	 
	КонецЕсли;	 
КонецПроцедуры	

&НаКлиенте
Процедура ВыборДатыИВремени_Завершение(ШКод, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ШКод) =  Тип("Дата") и
		 ЗначениеЗаполнено(ШКод)          Тогда
		Объект.ОграничениеВыдачи = ШКод;
		ЗаполнитьПоТочекНазначенияНаСервере(Объект.ТочкаНазначения);
	КонецЕсли;	 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоТочекНазначенияНаСервере(ПунктВыдачи = Неопределено,ЭтоЗаморозка = Ложь)
	
	Объект_ВыдачаТранзита					= РеквизитФормыВЗначение("Объект");
	объект_ВыдачаТранзита.ЗаполнитьПоТочкеНазначения(,ПунктВыдачи,ЭтоЗаморозка);		
	ЗначениеВДанныеФормы(объект_ВыдачаТранзита,Объект);	
КонецПроцедуры		

#КонецОбласти

#Область Вспомогательные

&НаСервере
Процедура УстановитьВидимость()
	
	
	этоDPD	= (Объект.ТочкаНазначения = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0048"));
	ЭтоEMS	= (Объект.ТочкаНазначения = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0021")); 

   Элементы.ПокупкиГабарит.Видимость			= не Объект.ПоОбмену;
   Элементы.ПокупкиМестоХранения.Видимость		= не Объект.ПоОбмену;
   Элементы.НомерОтправителя.Видимость			= Объект.ПоОбмену;
   Элементы.ПокупкиНомерОтправителя.Видимость 	= Объект.ПоОбмену;
   Элементы.ТочкаОтправитель.Видимость			= Объект.ПоОбмену;
   УстановитьКоличествоПомеченныхСтрок();
   
   НаНесколькоТочек							= (Объект.ВидОперации=Перечисления.ВидыОперацийВыдачаТранзита.НаНесколькоТочек);
   //Элементы.ТочкаНазначения.Видимость		= не НаНесколькоТочек и ТипЗнч(ТочкаНа;
   Элементы.Покупки.ПодчиненныеЭлементы.ПокупкиТочкаНазначения.Видимость=НаНесколькоТочек;	
   Элементы.ГруппаЗаявкиВТК.Видимость		= ПолучитьВидимостьЗаявок();
   
   Элементы.ТК.Видимость					= Объект.КонтролироватьСупергруппы;
   
   #Область ПартияТК
   Элементы.бб.Видимость					= Ложь;   
   Элементы.ПР.Видимость					= Ложь;
   Элементы.ПартияТК.Видимость				= Ложь;
   Элементы.ГруппаТК.ОтображениеСтраниц		= ОтображениеСтраницФормы.Нет;
   

   Элементы.ГруппаDPD.Видимость				= этоDPD;   
   Элементы.ПартияТК.Видимость				= этоDPD;
   Если этоDPD Тогда
	   Элементы.ГруппаТК.ТекущаяСтраница=Элементы.ГруппаDPD;
   КонецЕсли;   
   Элементы.ПокупкиПолучитьСтоимостьОтправлений.Видимость = Константы.ПолучатьСтоимостьТранзитныхОтправлений.Получить();
   
   Если (Объект.ТочкаНазначения = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0098")) Тогда
	   Элементы.ГруппаТК.ТекущаяСтраница	= Элементы.бб;
	   Элементы.бб.Видимость				= Истина;   
	   Элементы.ПартияТК.Видимость			= Истина;
	   ТолькоПросмотр=ЗначениеЗаполнено(Объект.АктТК) и не РольДоступна("ПолныеПрава");
   ИначеЕсли 	Объект.ТочкаНазначения = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0020") или
	   			Объект.ТочкаНазначения = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0021") или
				Объект.ТочкаНазначения = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0201")
				Тогда	
	   Элементы.ГруппаТК.ТекущаяСтраница	= Элементы.ПР;
	   Элементы.ПР.Видимость				= Истина;
	   Элементы.ПартияТК.Видимость			= Истина;
	   ТолькоПросмотр						= Объект.ПартииТК.Количество()>0  и не РольДоступна("ПолныеПрава");
   КонецЕсли;
   #КонецОбласти 
   
   #Область Супергруппы
   Если не ЗначениеЗаполнено(Объект.Супергруппа) Тогда
	   Элементы.СформироватьСупергруппу.Заголовок	= "Сформировать супергруппу";
   Иначе
	   Элементы.СформироватьСупергруппу.Заголовок	= "Изменить супергруппу";
   КонецЕсли;
   ОбновитьСупергруппу();
   #КонецОбласти 
   ТолькоПросмотр=ТолькоПросмотр Или Объект.ПоОбмену;
КонецПроцедуры // УстановитьВидимость()()

&НаСервере
Процедура УстановитьКоличествоПомеченныхСтрок()
	Масс						= Объект.Покупки.НайтиСтроки(новый Структура("Подбор",Истина));	
	КоличествоПомеченныхСтрок	= масс.Количество();
	Объект.СтоимостьХранения	= 0;
	Объект.СтоимостьДоставки	= 0;
	Объект.СтоимостьИтого		= 0;
	Объект.КоличествоИтого		= 0;
	Для каждого стр из Масс Цикл
		Объект.СтоимостьХранения	= Объект.СтоимостьХранения+Стр.СтоимостьХранения;
		Объект.СтоимостьДоставки	= Объект.СтоимостьДоставки+Стр.СтоимостьДоставки;
		Объект.СтоимостьИтого		= Объект.СтоимостьИтого+Стр.СтоимостьИтого;
		Объект.КоличествоИтого		= Объект.КоличествоИтого+Стр.Количество;
	КонецЦикла;
КонецПроцедуры	

&НаСервере
Процедура ПодсветкаСтрок()
    УсловноеОформление.Элементы.Очистить();
	ЭлементУсловногоОформления 		= УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Покупки");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Покупки.Подбор");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение 	= истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);	
	
	ЭлементУсловногоОформления 		= УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Покупки");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Покупки.Предупреждение");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение 	= Перечисления.ПредупрежденияПрихода.ЧерныйСписок;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);	
	
КонецПроцедуры

#КонецОбласти

#Область Заявки

&НаСервере
Функция ПолучитьВидимостьЗаявок()
	Если объект.ЗаявкиВТК.Количество()=0 
		или (объект.ЗаявкиВТК.Количество()=1 и не ЗначениеЗаполнено(объект.ЗаявкиВТК[0].Заявка)) 
		или объект.ПоОбмену Тогда 
		возврат Ложь;
	Иначе
		Возврат истина;
	КонецЕсли;
КонецФункции	


&НаКлиенте
Процедура ОтобратьПоЗаявке()
	Если ОтбиратьПоЗаявкам Тогда
		Элементы.Покупки.ОтборСтрок=Новый ФиксированнаяСтруктура("Заявка",Элементы.ЗаявкиВТК.ТекущиеДанные.Заявка);
	Иначе
		Элементы.Покупки.ОтборСтрок=неопределено;
	КонецЕсли;
КонецПроцедуры	


#КонецОбласти


#Область Печать


&НаСервере
Процедура ЗаполнитьЧек(ТабДок,Покупки, ТочкаНазначения)
	Макет = Документы.ВыдачаТранзита.ПолучитьМакет("Чек");
//	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
//	ОбластьПокупкиШапка = Макет.ПолучитьОбласть("ПокупкиШапка");
	ОбластьПокупки = Макет.ПолучитьОбласть("Покупки");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ТабДок.Очистить();
//	ВставлятьРазделительСтраниц = Ложь;
	Итого=0;

    	Шапка.Параметры.Дата=ТекущаяДатаСеанса();
		Шапка.Параметры.Номер="Не записан";
		
		Шапка.Параметры.НазваниеОрганизации=Константы.НазваниеОрганизации.Получить();
		Шапка.Параметры.ТочкаНазначения=ТочкаНазначения;

		ТабДок.Вывести(Шапка);
	
	
	
	Для каждого ЭлемПокупки из Объект[Покупки] Цикл
		Если не ЭлемПокупки.Подбор Тогда Продолжить; КонецЕсли;	
		Если ТипЗнч(ЭлемПокупки.Покупка)=Тип("СправочникСсылка.Покупки") Тогда
			ОбластьПокупки.Параметры.Организатор=ЭлемПокупки.Покупка.Владелец.Наименование;
		Иначе
			ОбластьПокупки.Параметры.Организатор=ЭлемПокупки.Покупка.Организатор;
		Конецесли;	
		ОбластьПокупки.Параметры.Покупка=ЭлемПокупки.Покупка.Код;
		ОбластьПокупки.Параметры.ПокупкаСпр=ЭлемПокупки.Покупка.Наименование;
		ОбластьПокупки.Параметры.МестоХранения=ЭлемПокупки.МестоХранения;
		ОбластьПокупки.Параметры.Габарит        =ЭлемПокупки.Габарит;
		ОбластьПокупки.Параметры.ВремяХранения  =ЭлемПокупки.ВремяХранения;
		ОбластьПокупки.Параметры.СтоимостьХранения  =ЭлемПокупки.СтоимостьХранения;
		ТабДок.Вывести(ОбластьПокупки);
		Итого= Итого+ЭлемПокупки.СтоимостьХранения;

	КонецЦикла;
	ОбластьПодвал.Параметры.ТочкаНазначения=ТочкаНазначения;
		ОбластьПодвал.Параметры.Итого=Итого;
		ТабДок.Вывести(ОбластьПодвал);
КонецПроцедуры // ПолучитМакетЧека()


//
//&НаСервере
//Процедура ЗаполнитьСжатыйЧек(ТабДок)
//
//	Макет = Документы.ВыдачаТранзита.ПолучитьМакет("Макет");
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ВыдачаТранзитаПокупки.Покупка.Владелец.Наименование КАК Организатор,
//		|	ВыдачаТранзитаПокупки.Покупка.Наименование КАК Покупка,
//		|	СУММА(ВыдачаТранзитаПокупки.ВремяХранения) КАК ВремяХранения,
//		|	СУММА(ВыдачаТранзитаПокупки.СтоимостьХранения) КАК СтоимостьХранения,
//		|	ВыдачаТранзитаПокупки.Габарит.Наименование КАК Габарит,
//		|	СУММА(ВыдачаТранзитаПокупки.Количество) КАК Количество,
//		|	ВыдачаТранзитаПокупки.Участник.Наименование КАК Участник
//		|ИЗ
//		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
//		|ГДЕ
//		|	ВыдачаТранзитаПокупки.Ссылка = &Ссылка
//		|	И ВыдачаТранзитаПокупки.Подбор
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВыдачаТранзитаПокупки.Покупка.Владелец.Наименование,
//		|	ВыдачаТранзитаПокупки.Покупка.Наименование,
//		|	ВыдачаТранзитаПокупки.Габарит.Наименование,
//		|	ВыдачаТранзитаПокупки.Участник,
//		|	ВыдачаТранзитаПокупки.Участник.Наименование
//		|ИТОГИ
//		|	СУММА(СтоимостьХранения),
//		|	СУММА(Количество)
//		|ПО
//		|	ОБЩИЕ,
//		|	Организатор,
//		|	Габарит,
//		|	Покупка
//		|АВТОУПОРЯДОЧИВАНИЕ";
//
//	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
//
//	Результат = Запрос.Выполнить();
//
//	Шапка = Макет.ПолучитьОбласть("Заголовок");
//	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
//	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
//	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
//	ОбластьОбщийИтог = Макет.ПолучитьОбласть("ОбщиеИтоги");
//	ОбластьОрганизатор = Макет.ПолучитьОбласть("Организатор");
////	ОбластьГабарит = Макет.ПолучитьОбласть("Габарит");
//	ОбластьПокупка = Макет.ПолучитьОбласть("Покупка");
//	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
//
//	ТабДок.Очистить();
//	
//	
//    	Шапка.Параметры.Дата=Объект.Дата;
//		Шапка.Параметры.Номер=Объект.Номер;
//		
//		Шапка.Параметры.НазваниеОрганизации=Константы.НазваниеОрганизации.Получить();
//		Шапка.Параметры.ТочкаНазначения=Объект.ТочкаНазначения;
//
//		ТабДок.Вывести(Шапка);
//	ТабДок.Вывести(ОбластьШапкаТаблицы);
//	ТабДок.НачатьАвтогруппировкуСтрок();
//
//	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//
//	ВыборкаОбщийИтог.Следующий();		// Общий итог
//	ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
//	ТабДок.Вывести(ОбластьОбщийИтог, ВыборкаОбщийИтог.Уровень());
//
//	ВыборкаОрганизатор = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//
//	Пока ВыборкаОрганизатор.Следующий() Цикл
//		ОбластьОрганизатор.Параметры.Заполнить(ВыборкаОрганизатор);
//		ТабДок.Вывести(ОбластьОрганизатор, ВыборкаОрганизатор.Уровень());
//
//		ВыборкаГабарит = ВыборкаОрганизатор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//
//		Пока ВыборкаГабарит.Следующий() Цикл
//		//	ОбластьГабарит.Параметры.Заполнить(ВыборкаГабарит);
//		//	ТабДок.Вывести(ОбластьГабарит, ВыборкаГабарит.Уровень());
//
//			ВыборкаПокупка = ВыборкаГабарит.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//
//			Пока ВыборкаПокупка.Следующий() Цикл
//				ОбластьПокупка.Параметры.Заполнить(ВыборкаПокупка);
//				ТабДок.Вывести(ОбластьПокупка, ВыборкаПокупка.Уровень());
//
//				ВыборкаДетальныеЗаписи = ВыборкаПокупка.Выбрать();
//
//				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//					ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
//					ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
//				КонецЦикла;
//			КонецЦикла;
//		КонецЦикла;
//	КонецЦикла;
//
//	ТабДок.ЗакончитьАвтогруппировкуСтрок();
//	ТабДок.Вывести(ОбластьПодвалТаблицы);
//	ТабДок.Вывести(ОбластьПодвал);
//	
//КонецПроцедуры

&НаСервере
Функция ПолучитьТабДокСжатогочека(МассОбъектов)
	возврат Документы.ВыдачаТранзита.ПечатьСжатогоЧека(массОбъектов, неопределено);
КонецФункции

#КонецОбласти


#Область ТранспортныеКомпании
//Боксбери
//&НаСервере
//Функция АктСверкиНаСервере()
//	Результат=Новый Структура("Форма1, Форма2");
//	Если Объект.ТочкаТранзита = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0098") Тогда
//		ТрекНомера="";
//		Для каждого стр из Объект.Покупки Цикл
//			Если не стр.Подбор Тогда продолжить КонецЕсли;
//			Если ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Коробки") Тогда
//				ТрекНомера=ТрекНомера+","+стр.Покупка.НомерЗаказа;
//			КонецЕсли;
//		КонецЦикла;	
//		ТрекНомера=Прав(ТрекНомера,СтрДлина(ТрекНомера)-1);
//
//		Ответ=Интеграция_BoxBerry.ПечатьАктПередачи(ТрекНомера);
//		
//		Если Ответ.Успех Тогда
//			Результат.Форма1=Ответ.Результат.result[0].sticker;
//			Результат.Форма2=Ответ.Результат.result[0].label;
//			Если не ЗначениеЗаполнено(Объект.АктТК) Тогда
//				Объект.АктТК=Ответ.Результат.result[0].id;
//				Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
//			КонецЕсли;
//		КонецЕсли;
//		Возврат Результат;
//	КонецЕсли	
//КонецФункции
//
//&НаКлиенте
//Процедура АктСверки(Команда)
//	Если не ТолькоПросмотр Тогда
//		Режим = РежимДиалогаВопрос.ДаНет;
//		Ответ = Вопрос("После печати Акта документ невозможно будет изменить!"+Символы.ПС+ "ПРОДОЛЖИТЬ? ", Режим, 0);
//		Если Ответ = КодВозвратаДиалога.Нет Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;	
//	Результат=АктСверкиНаСервере();
//	УстановитьВидимость();
//	Попытка
//		ЗапуститьПриложение(Результат.Форма1);
//		ЗапуститьПриложение(Результат.Форма2);
//	Исключение
//		
//	КонецПопытки;
//КонецПроцедуры
//
////ПочтаРоссии



&НаКлиенте
Процедура СоздатьПартиюПочтаРоссииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СоздатьПартиюПРНаСервере();
	УстановитьВидимость();
	Прочитать();
КонецПроцедуры

//&НаСервере
//Функция  ПолучитьПакетДокументовНаСервере(НомерПартии)
//	СтрОтвета=Интеграция_ПочтаРоссии.ПолучитьПакетДокументов(НомерПартии,ЭтоEMS);
//	Возврат  стрОтвета;
//КонецФункции


&НаСервере
Процедура СоздатьПартиюПРНаСервере()
	Если Объект.ПартииТК.Количество()=0 Тогда 
		МассЗаказов=новый Массив;
		Для каждого стр из Объект.Покупки Цикл
			ДокОтправления = стр.Партия;
			Если ЗначениеЗаполнено(ДокОтправления.ВнутреннийНомерЗаказаТК) Тогда
				массЗаказов.Добавить(стр.Партия.ВнутреннийНомерЗаказаТК);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ДокОтправления.ИдентификаторЗаказаВТК) Тогда
				массЗаказов.Добавить(стр.Партия.ИдентификаторЗаказаВТК);
			КонецЕсли;	
			Для каждого отправление из ДокОтправления.ТрекНомера Цикл
				массЗаказов.Добавить(отправление.ВнутреннийНомер);
			КонецЦикла;	
		КонецЦикла;	
		Если массЗаказов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("в документах отправленя ТК не найдено заказов почты россии");
			Возврат;
		КонецЕсли;
		
		СтрОтвета	= Интеграция_ПочтаРоссии.СформироватьПартию(массЗаказов,Объект.ДатаСдачиВТК,ЭтоEMS);
		
		Если стрОтвета.Свойство("batches")  Тогда
			//		Если стрОтвета.batches.Количество()>1 Тогда
			Для каждого стр из стрОтвета.batches Цикл
				стрПартии=Объект.ПартииТК.Добавить();
				стрПартии.НомерПартии=Формат(стр.batchname,"ЧГ=0");
				стрПартии.Комментарий=стр.mailcategorytext;
				//				ЗаказыВПартии=стрОтвета.resultids;
			КонецЦикла;	
			//		Иначе	
			//			Объект.АктТК=Формат(стрОтвета.batches[0].batchname,"ЧГ=0");
			//			ЗаказыВПартии=стрОтвета.resultids;
			//		КонецЕсли;
			Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		КонецЕсли;
		Если стрОтвета.Свойство("errors") Тогда
			Для каждого стр из стрОтвета.errors Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В позиции №"+стр.position+1 +" - "+стр.errordescription);
			КонецЦикла
		КонецЕсли;
	КонецЕсли;
	ОтправкаФормы_Ф103();
КонецПроцедуры

&НаСервере
Процедура ОтправкаФормы_Ф103()
	Для каждого стр из Объект.ПартииТК Цикл
		стрОтвета	= Интеграция_ПочтаРоссии.ПодготовкаОтправкаФормы_Ф103(стр.НомерПартии,ЭтоEMS);
	КонецЦикла;
	Если стрОтвета=Неопределено Тогда Возврат КонецЕсли;
	Если стрОтвета.Свойство("errors") Тогда
		Для каждого стр из стрОтвета.errors Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В позиции №"+стр.position +" - "+стр.errordetails);
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция КвитанцияПРНаСервере()
	
	СписокГрупп=Новый СписокЗначений;
	Для каждого стр из Объект.Покупки Цикл
		СписокГрупп.Добавить(стр.Покупка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказыТранскортныхКомпаний.ТрекНомер,
		|	ЗаказыТранскортныхКомпаний.ВнутреннийНомер
		|ИЗ
		|	РегистрСведений.ЗаказыТранскортныхКомпаний КАК ЗаказыТранскортныхКомпаний
		|ГДЕ
		|	ЗаказыТранскортныхКомпаний.ГруппаДоставки В (&СписокГрупп)";
	
	Запрос.УстановитьПараметр("СписокГрупп", СписокГрупп);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	СписокРезультатаов = Новый Соответствие();;
	Пока Выборка.Следующий() Цикл
		СписокРезультатаов.Вставить(Выборка.ТрекНомер,Интеграция_ПочтаРоссии.ПолучитьКвитанцию_Ф7П(Выборка.ВнутреннийНомер,ЭтоEMS));	
	КонецЦикла;
	
	Возврат СписокРезультатаов;
КонецФункции



&НаСервере
Функция Форма_Ф103_ПРНаСервере(НомерПартии)
	Интеграция_ПочтаРоссии.ПодготовкаОтправкаФормы_Ф103(НомерПартии,ЭтоEMS);
	Возврат Интеграция_ПочтаРоссии.ПолучитьКвитанцию_Ф103(НомерПартии,ЭтоEMS);
КонецФункции


&НаСервере
Функция ПакетДокументов_ПРНаСервере()
	МассивРезультатаов	= Новый Массив;
	Для каждого стр из Элементы.ПартииТК.ВыделенныеСтроки Цикл
		НомерПартии	= Объект.ПартииТК.НайтиПоИдентификатору(стр).НомерПартии;
		МассивРезультатаов.Добавить(Интеграция_ПочтаРоссии.ПолучитьПакетДокументов(НомерПартии,ЭтоEMS));
	КонецЦикла;
	Возврат МассивРезультатаов;
КонецФункции


//
//&НаКлиенте
//Процедура ПечатьНаклеекdpd(Команда)
//	
//#Если не ВебКлиент Тогда	
//
//	СписокОтправлений = новый СписокЗначений;
//	Для каждого элем Из Объект.Покупки Цикл
//		СписокОтправлений.Добавить(Элем.Партия);
//	КонецЦикла;
//	Протокол = Интеграция_ТранспортныеКомпании_Общий.ПолучитьНаклейки(СписокОтправлений);
//	Если Протокол.Результат = "ok"  и Протокол.ТипФайла = "Хранилище" Тогда
//		ИмяФ	= ПолучитьИмяВременногоФайла("pdf");
//		ПолучитьФайл(Протокол.Файл,ИмяФ);
//		ЗапуститьПриложение(ИмяФ)
//	КонецЕсли;	
//	Если Протокол.ТекстОшибки<>"" Тогда
//		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Протокол.ТекстОшибки);
//	КонецЕсли;
//	
//#КонецЕсли
//
//КонецПроцедуры



#КонецОбласти


#Область Супергруппы

&НаСервере
Функция  СормироватьСупергруппуНаСервере()
	Результат	= новый структура("ТранспортнаяКомпания, ВыбранКурьер, МаршрутПустой");
	Если не ЗначениеЗаполнено(Объект.Супергруппа) Тогда 
		Объект.Супергруппа	= СП_РаботаСоСправочниками.ПолучитьСупергруппуПоНакладной(Объект.Ссылка);	
	КонецЕсли;
	
	результат.ТранспортнаяКомпания	= Объект.Супергруппа.ПунктВыдачи.ТранспортнаяКомпания;
	результат.ВыбранКурьер			= ЗначениеЗаполнено(Объект.Супергруппа.ПунктВыдачи.Курьер);
	результат.МаршрутПустой			= (Объект.Супергруппа.Маршрут.Количество() = 0);
	возврат результат;
КонецФункции

&НаКлиенте
Процедура СформироватьСупергруппу_Завершение(РезультатЗапроса, ДоаполнительныеПараметры)  Экспорт
	Если РезультатЗапроса 	= КодВозвратаДиалога.Нет Тогда Возврат; КонецЕсли;
	Записать();
	Результат	= СормироватьСупергруппуНаСервере();
	
	УстановитьВидимость();
	Если 		результат.ТранспортнаяКомпания 	или 
			 не результат.ВыбранКурьер 			или
			 не результат.МаршрутПустой				 Тогда
		ОткрытьФорму("Документ.ЗаполнитьСупергруппу.Форма.ФормаДокумента",новый Структура("Супергруппа",Объект.Супергруппа),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ЗаполнитьМаршрутСупергруппы(Объект.Супергруппа);
	КонецЕсли;
	ОбновитьСупергруппу();
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьМаршрутСупергруппы(Супергруппа)
	ДокументЗаполнения						= Документы.ЗаполнитьСупергруппу.СоздатьДокумент();
	документЗаполнения.Супергруппа			= Супергруппа;
	документЗаполнения.Дата 				= ТекущаяДатаСеанса();
	документЗаполнения.ДокументОснование 	= Супергруппа.Накладная;
	документЗаполнения.ТочкаНазначения		= Супергруппа.ПунктВыдачи;
	документЗаполнения.Комментарий			= "Записан автоматически при создании супергруппы";
	строкаМаршрута							= документЗаполнения.Маршрут.Добавить();
	строкаМаршрута.ДатаДоставкиПлан			= ТекущаяДатаСеанса();
	строкаМаршрута.ДатаДоставкифакт			= ТекущаяДатаСеанса();
	строкаМаршрута.ТранспортнаяКомпания		= Супергруппа.ПунктВыдачи.Курьер;
	строкаМаршрута.ТрэкНомер				= Супергруппа.Код;
	Попытка
	    документЗаполнения.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось заполнить супергруппу: "+Супергруппа+". "+ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСупергруппу()
	Если ЗначениеЗаполнено(Объект.Супергруппа) Тогда	
		МаршрутСупергруппы.Загрузить(Объект.Супергруппа.Маршрут.Выгрузить());
	КОнецЕсли;	
КонецПроцедуры	


#КонецОбласти

#Область СтандартныеПодсистемцыПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВедомостьКурьерскойДоставки_Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОтправитьВедомостьКурьерскойДоставкиНаСервере();
	КонецЕсли;	
КонецПроцедуры	

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
#КонецОбласти
