#Область ПрограммныйИнтерфейс

// Заполнить параметры обработки.
// Возвращает структуру для формирования картинки штрихкода
// 
// Параметры:
//  Код - Строка - Штрихкод 
// 
// Возвращаемое значение:
//  Структура - Структура параметров для формирования картинки штрихкода:
// * Ширина - Число - 
// * Высота - Число - 
// * ТипКода - Число - 
// * ОтображатьТекст - Булево - 
// * РазмерШрифта - Число - 
// * Штрихкод - Строка 
Функция ЗаполнитьПараметрыОбработки(Код)  экспорт
	ПараметрыШтрихкода			= новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",			450);
	ПараметрыШтрихкода.Вставить("Высота",			120);
	ПараметрыШтрихкода.Вставить("ТипКода",			4);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст",	истина);
	ПараметрыШтрихкода.Вставить("РазмерШрифта",		14);
	ПараметрыШтрихкода.Вставить("Штрихкод",			Код);
	
	Возврат ПараметрыШтрихкода;	
КонецФункции

Процедура ПроверитьНаличие(Объект,Отказ)      Экспорт
	Если Не Константы.КонтралироватьОстаткиПриРасходе.Получить() или Объект.ПоОбмену
		Тогда  Возврат; КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Покупки.Упакован,
		|	Покупки.НомерСтроки,
		|	Покупки.Габарит,
		|	Покупки.КоличествоМест КАК Количество,
		|	Покупки.МестоХранения,
		|	Покупки.Партия,
		|	Покупки.Покупка КАК ПокупкаСсылка,
		|	Покупки.Участник,
		|	Покупки.ТочкаНазначения КАК Точка
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Покупки КАК Покупки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ.НомерСтроки) КАК НомерСтроки,
		|	ВТ.Упакован,
		|	ВТ.Габарит,
		|	СУММА(ВТ.Количество) КАК Количество,
		|	ВТ.МестоХранения,
		|	ВТ.Партия,
		|	ВТ.ПокупкаСсылка,
		|	ВТ.Участник,
		|	ВТ.Точка
		|ПОМЕСТИТЬ ВТГруппа
		|ИЗ
		|	ВТ КАК ВТ
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Точка,
		|	ВТ.Упакован,
		|	ВТ.Участник,
		|	ВТ.Габарит,
		|	ВТ.МестоХранения,
		|	ВТ.Партия,
		|	ВТ.ПокупкаСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТГруппа.НомерСтроки,
		|	ВТГруппа.Упакован,
		|	ВТГруппа.Габарит,
		|	ВТГруппа.Количество,
		|	ВТГруппа.МестоХранения,
		|	ВТГруппа.Партия,
		|	ВТГруппа.ПокупкаСсылка,
		|	ВТГруппа.Участник,
		|	ВТГруппа.Точка,
		|	ЕСТЬNULL(ТранзитОстатки.КоличествоОстаток, 0) КАК КоличествоНаСкладе,
		|	ЕСТЬNULL(УпакованныеЗаказы.КоличествоОстаток, 0) КАК КоличествоУпакованно,
		|	ЕСТЬNULL(СобранныеЗаказыОстатки.КоличествоОстаток, 0) КАК СобранныеЗаказы
		|ПОМЕСТИТЬ СОстатками
		|ИЗ
		|	ВТГруппа КАК ВТГруппа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Транзит.Остатки(&НаДату,) КАК ТранзитОстатки
		|		ПО ВТГруппа.Участник = ТранзитОстатки.Участник
		|		И ВТГруппа.ПокупкаСсылка = ТранзитОстатки.ПокупкаСсылка
		|		И ВТГруппа.МестоХранения = ТранзитОстатки.МестоХранения
		|		И ВТГруппа.Габарит = ТранзитОстатки.Габарит
		|		И ВТГруппа.Партия = ТранзитОстатки.Партия
		|		И ВТГруппа.Точка = ТранзитОстатки.Точка
		|		И
		|		НЕ ВТГруппа.Упакован
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УпакованныеЗаказы.Остатки(&НаДату,) КАК УпакованныеЗаказы
		|		ПО ВТГруппа.Участник = УпакованныеЗаказы.Участник
		|		И ВТГруппа.ПокупкаСсылка = УпакованныеЗаказы.Покупка
		|		И ВТГруппа.МестоХранения = УпакованныеЗаказы.МестоХранения
		|		И ВТГруппа.Габарит = УпакованныеЗаказы.Габарит
		|		И ВТГруппа.Партия = УпакованныеЗаказы.Партия
		|		И ВТГруппа.Точка = УпакованныеЗаказы.Точка
		|		И ВТГруппа.Упакован
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СобранныеЗаказы.Остатки КАК СобранныеЗаказыОстатки
		|		ПО ВТГруппа.ПокупкаСсылка = СобранныеЗаказыОстатки.Заказ
		|		И ВТГруппа.МестоХранения = СобранныеЗаказыОстатки.МестоХранения
		|		И ВТГруппа.Партия = СобранныеЗаказыОстатки.Партия
		|		И ВТГруппа.Точка = СобранныеЗаказыОстатки.ПунктВыдачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СОстатками.Габарит,
		|	СОстатками.Упакован,
		|	СОстатками.Количество,
		|	СОстатками.МестоХранения,
		|	СОстатками.Партия,
		|	СОстатками.ПокупкаСсылка,
		|	СОстатками.Участник,
		|	СОстатками.Точка,
		|	СОстатками.КоличествоНаСкладе + СОстатками.КоличествоУпакованно + СОстатками.СобранныеЗаказы КАК КоличествоНаОстатках,
		|	СОстатками.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	СОстатками КАК СОстатками
		|ГДЕ
		|	СОстатками.Количество > СОстатками.КоличествоНаСкладе + КоличествоУпакованно + СобранныеЗаказы
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	ТаблицаПокупокДокумента=Объект.Покупки.Выгрузить();
	Если Объект.ВидОперации<>Перечисления.ВидыОперацийВыдачаТранзита.НаНесколькоТочек Тогда
		ТаблицаПокупокДокумента.ЗаполнитьЗначения(Объект.ТочкаНазначения,"ТочкаНазначения");
	КонецЕсли;	
	Запрос.УстановитьПараметр("Покупки",ТаблицаПокупокДокумента);
	Запрос.УстановитьПараметр("НаДату",Объект.Дата);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Ошибки=неопределено;
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,"Объект.Покупки["+(Выборка.НомерСтроки-1)+"].Количество",
		"В строке: "+Выборка.НомерСтроки+". На складе: "+Выборка.КоличествоНаОстатках+" шт. из требуемых: "+Выборка.Количество,,Выборка.НомерСтроки-1);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки,Отказ);
	
КонецПроцедуры


Функция ПолучитьТэг_preTransfer(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаТранзитаПокупки.Покупка КАК Покупка,
	|	ВыдачаТранзитаПокупки.Ссылка КАК Ссылка,
	|	ВыдачаТранзитаПокупки.Участник КАК Участник,
	|	ВыдачаТранзитаПокупки.ТочкаНазначения КАК ТочкаНазначения,
	|	ВыдачаТранзитаПокупки.СтоимостьХранения КАК СтоимостьХранения,
	|	ВыдачаТранзитаПокупки.Партия КАК Партия
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
	|ГДЕ
	|	ВыдачаТранзитаПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
	|	И ВыдачаТранзитаПокупки.НомерСтроки "+ОтборПоСтроке+" ")+"
	|	И ТипЗначения(ВыдачаТранзитаПокупки.Партия) = Тип(Документ.ЗаказыДляТранзита)
	|	И ВыдачаТранзитаПокупки.Подбор;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Ссылка) = ТИП(Документ.УпаковатьЗаказы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Ссылка.ТочкаТранзита) = ТИП(Справочник.СегментыПунктовВыдачи)
	|				ИЛИ ВыдачаТранзитаПокупки.Ссылка.ТочкаТранзита = ЗНАЧЕНИЕ(Справочник.ТочкиРаздачи.ПустаяСсылка)
	|			ТОГДА ВыдачаТранзитаПокупки.ТочкаНазначения.Код
	|		ИНАЧЕ ВыдачаТранзитаПокупки.Ссылка.ТочкаТранзита.Код
	|	КОНЕЦ КАК distributorCode,
	|	ВыдачаТранзитаПокупки.Участник.Код КАК uid,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК pid,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Посылки)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК packageId,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Заказы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Пристрой)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК orderId,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК groupCode,
	|	ВыдачаТранзитаПокупки.СтоимостьХранения КАК paidSum,
	|	ВыдачаТранзитаПокупки.Ссылка.Дата КАК date,
	|	ПОДСТРОКА(ВыдачаТранзитаПокупки.Ссылка.Номер, 4, 9) КАК arrivalNumber,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА ""sp""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Заказы)
	|			ТОГДА ""shop""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Пристрой)
	|			ТОГДА ""bulletin""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
	|			ТОГДА ""group""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Посылки)
	|			ТОГДА ""package""
	|	КОНЕЦ КАК orderType,
	|	"""" КАК trackingNumber
	|ИЗ
	|	Заказы КАК ВыдачаТранзитаПокупки";

	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("preTransfer");
		
		СтоСП.Вставить_Тэг(ЗаписьXML,"distributorCode"	, 	Выборка.distributorCode);
		СтоСП.Вставить_Тэг(ЗаписьXML,"groupCode", 			Выборка.groupCode);
		СтоСП.Вставить_Тэг(ЗаписьXML,"paidSum"	, 			Выборка.paidSum);
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	, 				Выборка.date);
		СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber"	, 	Выборка.arrivalNumber);
		СтоСП.Вставить_Тэг(ЗаписьXML,"orderType"	, 		Выборка.orderType);
		Если Выборка.orderType = "package" Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"packageId", 		Формат(Выборка.packageId,"ЧГ=0"));
		КонецЕсли;	
		СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 			?(Выборка.uid = null,"",Формат(Число(Выборка.uid),"ЧГ=0")));



		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    ЗаписьXML.ЗаписатьКонецЭлемента();
	Рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;





КонецФункции

Функция ПолучитьТэг_transfer(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	#Область Свернуть
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыдачаТранзитаПокупки.Ссылка КАК Ссылка,
		|	ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.ШК.Покупка) = ТИП(Справочник.Коробки)
		|		И (ВыдачаТранзитаПокупки.ШК.Покупка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ЗаказТК)
		|			ИЛИ ВыдачаТранзитаПокупки.ШК.Покупка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)) КАК ЭтоЗаказТК,
		|	ВыдачаТранзитаПокупки.ШК КАК ШК,
		|	ВыдачаТранзитаПокупки.СтоимостьХранения КАК paidSum,
		|	ВыдачаТранзитаПокупки.Подбор КАК Подбор,
		|	ВЫБОР
		|		КОГДА ВыдачаТранзитаПокупки.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВыдачаТранзита.НаНесколькоТочек)
		|			ТОГДА ВыдачаТранзитаПокупки.ТочкаНазначения.Код
		|		ИНАЧЕ ВыдачаТранзитаПокупки.Ссылка.ТочкаНазначения.Код
		|	КОНЕЦ КАК distributorCode,
		|	ПОДСТРОКА(ВыдачаТранзитаПокупки.Ссылка.Номер, 4, 9) КАК arrivalNumber
		|ПОМЕСТИТЬ ВсеТранзиты
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|ГДЕ
		|	ВыдачаТранзитаПокупки.Подбор  
		//|	И ВыдачаТранзитаПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		//|	И ВыдачаТранзитаПокупки.НомерСтроки "+ОтборПоСтроке+" ")+"		
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеТранзиты.distributorCode 	КАК distributorCode,
		|	ВсеТранзиты.Ссылка.Дата 		КАК date,
		|	ВсеТранзиты.paidSum 			КАК paidSum,
		|	ВсеТранзиты.arrivalNumber 		КАК arrivalNumber,
		|	"""" 							КАК trackingNumber,
		|	ВсеТранзиты.ШК.Покупка 			КАК Покупка,
		|	ВсеТранзиты.ШК.Участник 		КАК Участник,
		|	ВсеТранзиты.ЭтоЗаказТК 			КАК ЭтоЗаказТК,
		|	ВсеТранзиты.ШК 					КАК ШК
		|ИЗ
		|	ВсеТранзиты КАК ВсеТранзиты
		|ГДЕ
		|	НЕ ВсеТранзиты.ЭтоЗаказТК
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.distributorCode,
		|	ВложенныйЗапрос.Ссылка.Дата,
		|	ВложенныйЗапрос.paidSum,
		|	ВложенныйЗапрос.arrivalNumber,
		|	ВложенныйЗапрос.ШК.Покупка.НомерЗаказа,
		|	КоробкиСостав.Покупка,
		|	КоробкиСостав.Участник,
		|	КоробкиСостав.КодЗаказа,
		|	ВложенныйЗапрос.ЭтоЗаказТК,
		|	ЗНАЧЕНИЕ(Справочник.Мегаордера.ПУстаяСсылка)
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВсеТранзиты.Ссылка КАК Ссылка,
		|		ВсеТранзиты.ШК КАК ШК,
		|		ВсеТранзиты.paidSum КАК paidSum,
		|		ВсеТранзиты.Подбор КАК Подбор,
		|		ВсеТранзиты.distributorCode КАК distributorCode,
		|		ВсеТранзиты.arrivalNumber КАК arrivalNumber,
		|		ВсеТранзиты.ЭтоЗаказТК КАК ЭтоЗаказТК
		|	ИЗ
		|		ВсеТранзиты КАК ВсеТранзиты
		|	ГДЕ
		|		ВсеТранзиты.ЭтоЗаказТК) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Коробки.Состав КАК КоробкиСостав
		|		ПО ВложенныйЗапрос.ШК.Покупка = КоробкиСостав.Ссылка
		|ГДЕ
		|	НЕ КоробкиСостав.Исключить
		|	И НЕ КоробкиСостав.Удалить";
	
	#КонецОбласти	
	
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ВыдачаТранзитаПокупки.Партия КАК Партия
	|ПОМЕСТИТЬ втДокКурьерскойДоставки
	|ИЗ
	|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
	|ГДЕ
	|	ВыдачаТранзитаПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
	|	И ВыдачаТранзитаПокупки.НомерСтроки "+ОтборПоСтроке+" ")+"
	|	И ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Партия) = ТИП(Документ.курьерскаяДоставка)
	|	И НЕ ВыдачаТранзитаПокупки.Партия.СвойКурьер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыдачаТранзитаПокупки.Покупка 			КАК Покупка,
	|	ВыдачаТранзитаПокупки.Ссылка		 	КАК Ссылка,
	|	ВыдачаТранзитаПокупки.Участник 			КАК Участник,
	|	ВыдачаТранзитаПокупки.ТочкаНазначения 	КАК ТочкаНазначения,
	|	ВыдачаТранзитаПокупки.СтоимостьХранения КАК СтоимостьХранения,
	|	ВыдачаТранзитаПокупки.Партия 			КАК Партия
	|ПОМЕСТИТЬ ЗаказыТК
	|ИЗ
	|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
	|ГДЕ
	|		ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) 	= ТИП(Справочник.Коробки)
	|	И (			ВыдачаТранзитаПокупки.Покупка.ВидСтикера 	= ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ЗаказТК)
	|			ИЛИ ВыдачаТранзитаПокупки.Покупка.ВидСтикера 	= ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки))
	|	И ВыдачаТранзитаПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
	|	И ВыдачаТранзитаПокупки.НомерСтроки "+ОтборПоСтроке+" ")+"
	|	И ВыдачаТранзитаПокупки.Подбор
	|	И ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) <> ТИП(Справочник.Мегаордера)
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыдачаТранзитаПокупки.Покупка 			КАК Покупка,
	|	ВыдачаТранзитаПокупки.Ссылка 			КАК Ссылка,
	|	ВыдачаТранзитаПокупки.Участник 			КАК Участник,
	|	ВыдачаТранзитаПокупки.ТочкаНазначения 	КАК ТочкаНазначения,
	|	ВыдачаТранзитаПокупки.СтоимостьХранения КАК СтоимостьХранения,
	|	ВыдачаТранзитаПокупки.Партия 			КАК Партия
	|ПОМЕСТИТЬ ЗаказыВключаяСупергруппы
	|ИЗ
	|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
	|ГДЕ
	|	ВыдачаТранзитаПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
	|	И ВыдачаТранзитаПокупки.НомерСтроки "+ОтборПоСтроке+" ")+"
	|	И ВыдачаТранзитаПокупки.Подбор
	|	И ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Партия) <> ТИП(Документ.курьерскаяДоставка)
	|	И ТипЗначения(ВыдачаТранзитаПокупки.Партия) <> Тип(Документ.ЗаказыДляТранзита)
	|	И (ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
	|				И ВыдачаТранзитаПокупки.Покупка.ВидСтикера <> ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ЗаказТК)
	|				И ВыдачаТранзитаПокупки.Покупка.ВидСтикера <> ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) <> ТИП(Справочник.Коробки))
	|	И ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) <> ТИП(Справочник.Мегаордера)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВыдачаТранзитаПокупки.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВыдачаТранзита.НаНесколькоТочек)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Ссылка) = ТИП(Документ.УпаковатьЗаказы)
	| 				ИЛИ ВыдачаТранзитаПокупки.Ссылка.ТочкаТранзита = Значение(Справочник.ТочкиРаздачи.ПустаяСсылка) 
	|			ТОГДА ВыдачаТранзитаПокупки.ТочкаНазначения.Код
	|		ИНАЧЕ ВыдачаТранзитаПокупки.Ссылка.ТочкаТранзита.Код
	|	КОНЕЦ КАК distributorCode,
	|	ВыдачаТранзитаПокупки.Участник.Код КАК uid,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК pid,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Посылки)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК packageId,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Заказы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Пристрой)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК orderId,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК groupCode,
	|	ВыдачаТранзитаПокупки.СтоимостьХранения КАК paidSum,
	|	ВыдачаТранзитаПокупки.Ссылка.Дата КАК date,
	|	ПОДСТРОКА(ВыдачаТранзитаПокупки.Ссылка.Номер, 4, 9) КАК arrivalNumber,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА ""sp""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Заказы)
	|			ТОГДА ""shop""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Пристрой)
	|			ТОГДА ""bulletin""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
	|			ТОГДА ""group""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Посылки)
	|			ТОГДА ""package""
	|	КОНЕЦ КАК orderType,
	|	"""" КАК trackingNumber,
	|	ВыдачаТранзитаПокупки.Покупка как Покупка,
	|	Значение(Справочник.Коробки.ПустаяСсылка) как ГруппаДоставки
	|ИЗ
	|	ЗаказыВключаяСупергруппы КАК ВыдачаТранзитаПокупки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗаказыТК.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВыдачаТранзита.НаНесколькоТочек)
	|				ИЛИ ЗаказыТК.Ссылка.ТочкаТранзита = Значение(Справочник.ТочкиРаздачи.ПустаяСсылка) 
	|			ТОГДА ЗаказыТК.ТочкаНазначения.Код
	|		ИНАЧЕ ЗаказыТК.Ссылка.ТочкаНазначения.Код
	|	КОНЕЦ,
	|	КоробкиСостав.Участник.Код,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА КоробкиСостав.Покупка.Код
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Посылки)
	|			ТОГДА КоробкиСостав.Покупка.Код
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КоробкиСостав.КодЗаказа <> """"
	|			ТОГДА КоробкиСостав.КодЗаказа
	|		КОГДА ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Заказы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Пристрой)
	|			ТОГДА КоробкиСостав.Покупка.Код
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Коробки)
	|			ТОГДА КоробкиСостав.Покупка.Код
	|	КОНЕЦ,
	|	ЗаказыТК.СтоимостьХранения,
	|	ЗаказыТК.Ссылка.Дата,
	|	ПОДСТРОКА(ЗаказыТК.Партия.Номер, 5, 9),
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА ""sp""
	|		КОГДА ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Заказы)
	|			ТОГДА ""shop""
	|		КОГДА ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Пристрой)
	|			ТОГДА ""bulletin""
	|		КОГДА ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Коробки)
	|			ТОГДА ""group""
	|		КОГДА ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Посылки)
	|			ТОГДА ""package""
	|	КОНЕЦ,
	|	ЗаказыТК.Покупка.НомерЗаказа,
	|	КоробкиСостав.Покупка как Покупка,
	|	ЗаказыТК.Покупка как ГруппаДоставки
	|ИЗ
	|	ЗаказыТК КАК ЗаказыТК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Коробки.Состав КАК КоробкиСостав
	|		ПО ЗаказыТК.Покупка = КоробкиСостав.Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""100"",
	|	КурьерскаяДоставкаЗаказыНаСкладе.Ссылка.Участник.Код,
	|	NULL,
	|	КурьерскаяДоставкаЗаказыНаСкладе.Посылка.Код,
	|	NULL,
	|	NULL,
	|	КурьерскаяДоставкаЗаказыНаСкладе.СтоимостьХранения,
	|	КурьерскаяДоставкаЗаказыНаСкладе.Ссылка.Дата,
	|	ПОДСТРОКА(КурьерскаяДоставкаЗаказыНаСкладе.Партия.Номер, 5, 9),
	|	""package"",
	|	"""",
	|	КурьерскаяДоставкаЗаказыНаСкладе.Посылка,
	|	Значение(Справочник.Коробки.ПустаяСсылка) как ГруппаДоставки
	|ИЗ
	|	Документ.КурьерскаяДоставка.ЗаказыНаСкладе КАК КурьерскаяДоставкаЗаказыНаСкладе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокКурьерскойДоставки КАК втДокКурьерскойДоставки
	|		ПО КурьерскаяДоставкаЗаказыНаСкладе.Ссылка = втДокКурьерскойДоставки.Партия
	|ГДЕ
	|	КурьерскаяДоставкаЗаказыНаСкладе.Подбор	";
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("transfer");
		Если Выборка.uid <> null Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 			Формат(Число(Выборка.uid),"ЧГ=0"));
		КонецЕсли;	
		СтоСП.Вставить_Тэг(ЗаписьXML,"distributorCode"	, 	Выборка.distributorCode);
		Если ЗначениеЗаполнено(Выборка.trackingNumber) Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"trackingNumber"	, 	Выборка.trackingNumber);
		КонецЕсли;	
		СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber"	, 	Выборка.arrivalNumber);
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	, 				Выборка.date);
		СтоСП.Вставить_Тэг(ЗаписьXML,"paidSum"	, 			Выборка.paidSum);

		Если ЗначениеЗаполнено(Выборка.orderId) Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"orderId"	, 	Выборка.orderId);
			Если ЗначениеЗаполнено(Выборка.ГруппаДоставки) Тогда
				КодГруппы = Формат(Число(СтрЗаменить(Выборка.ГруппаДоставки.Код,"гд_","")),"ЧГ=0");
				СтоСП.Вставить_Тэг(ЗаписьXML,"groupCode", 	кодГруппы);	
			КонецЕсли;	
			СтоСП.Вставить_Тэг(ЗаписьXML,"orderType", 	"sp");
		Иначе	
			СтрШК=Новый Структура;
			стрШК.Вставить("Покупка",Выборка.Покупка);
			СтоСПОбмен_Общий.ЗаполнитьТэгиЗаказаПо_ШК(стрШК,ЗаписьXML);		
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    ЗаписьXML.ЗаписатьКонецЭлемента();
	Рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
КонецФункции

Функция ПолучитьТэг_superGroup(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыдачаТранзитаПокупки.Ссылка.Дата	КАК Дата,
		|	ВыдачаТранзитаПокупки.Покупка 		КАК Супергруппа,
		|	УпаковатьЗаказыПокупки.Покупка 		КАК Покупка,
		|	УпаковатьЗаказыПокупки.Участник 	КАК Участник,
		|	УпаковатьЗаказыПокупки.Подбор 		КАК Подбор,
		|	УпаковатьЗаказыПокупки.НомерСтроки 	КАК НомерСтроки,
		|	ВыдачаТранзитаПокупки.Ссылка 		КАК Ссылка
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УпаковатьЗаказы.Покупки КАК УпаковатьЗаказыПокупки
		|		ПО ВыдачаТранзитаПокупки.Покупка.Накладная = УпаковатьЗаказыПокупки.Ссылка
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Мегаордера)
		|	И ВыдачаТранзитаПокупки.Покупка.типМегаордера = ЗНАЧЕНИЕ(Перечисление.типМегаордера.Супергруппа)
		|	И ВыдачаТранзитаПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И ВыдачаТранзитаПокупки.НомерСтроки "+ОтборПоСтроке+" ")+"		

		|ИТОГИ ПО
		|	Ссылка,
		|	Супергруппа";
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");	
	Пока ВыборкаСсылка.Следующий() Цикл
		// Вставить обработку выборки ВыборкаСсылка
	
		ВыборкаСупергруппа = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаСупергруппа.Следующий() Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("superGroup");
			СтоСП.Вставить_Тэг(ЗаписьXML,"documentNumber",		ВыборкаСупергруппа.Супергруппа.Код);
			СтоСП.Вставить_Тэг(ЗаписьXML,"nextDistributorCode", Формат(Число(ВыборкаСупергруппа.Супергруппа.ПунктВыдачи.Код)));
			СтоСП.Вставить_Тэг(ЗаписьXML,"processedAt",			ВыборкаСупергруппа.Дата);
			СтоСП.Вставить_Тэг(ЗаписьXML,"deliveryDescription",	"без маршрутов");
			
	
			ВыборкаПокупки = ВыборкаСупергруппа.Выбрать();
	
			ЗаписьXML.ЗаписатьНачалоЭлемента("orders");

			Пока ВыборкаПокупки.Следующий() Цикл
				Если не ВыборкаПокупки.Подбор Тогда Продолжить; КонецЕсли;
				Если ТипЗнч(ВыборкаПокупки.Покупка)=Тип("СправочникСсылка.Покупки") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("order");
					СтоСП.Вставить_Тэг(ЗаписьXML,"pid",               Формат(Число(ВыборкаПокупки.Покупка.Код),"ЧГ=0"));
					СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",         "sp");
					СтоСП.Вставить_Тэг(ЗаписьXML,"uid",				  Формат(Число(ВыборкаПокупки.Участник.Код),"ЧГ=0"));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ИначеЕсли ТипЗнч(ВыборкаПокупки.Покупка)=Тип("СправочникСсылка.Посылки") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("order");
					СтоСП.Вставить_Тэг(ЗаписьXML,"packageId",               Формат(Число(ВыборкаПокупки.Покупка.Код),"ЧГ=0"));
					СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",         "package");
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ИначеЕсли ТипЗнч(ВыборкаПокупки.Покупка)=Тип("СправочникСсылка.Пристрой") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("order");					
					СтоСП.Вставить_Тэг(ЗаписьXML,"orderId",           Формат(Число(ВыборкаПокупки.Покупка.Код),"ЧГ=0"));
					СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",         "bulletin");
					СтоСП.Вставить_Тэг(ЗаписьXML,"stickerId",         Формат(Число(Сред(ВыборкаПокупки.Покупка.Код,3,10)),"ЧГ=0"));
					СтоСП.Вставить_Тэг(ЗаписьXML,"uid",				  Формат(Число(ВыборкаПокупки.Участник.Код),"ЧГ=0"));
					ЗаписьXML.ЗаписатьКонецЭлемента();			
				ИначеЕсли ТипЗнч(ВыборкаПокупки.Покупка)=Тип("СправочникСсылка.Заказы") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("order");					
					СтоСП.Вставить_Тэг(ЗаписьXML,"orderId",           Формат(Число(ВыборкаПокупки.Покупка.Код),"ЧГ=0"));
					СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",         "shop");
					СтоСП.Вставить_Тэг(ЗаписьXML,"uid",				  Формат(Число(ВыборкаПокупки.Участник.Код),"ЧГ=0"));
					ЗаписьXML.ЗаписатьКонецЭлемента();			
				ИначеЕсли ТипЗнч(ВыборкаПокупки.Покупка)=Тип("СправочникСсылка.Коробки") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("order");					
					СтоСП.Вставить_Тэг(ЗаписьXML,"orderId",        	  Формат(Число(ВыборкаПокупки.Покупка.Код),"ЧГ=0"));
					СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",         "group");
					ЗаписьXML.ЗаписатьКонецЭлемента();							
				КонецЕсли;
				
			КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();     //orders
		
		ЗаписьXML.ЗаписатьКонецЭлемента();    //superGroup

		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();    //Служебный
	Рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
	
КонецФункции



#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

//Печать
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати 					= КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 	= "Документ.ВыдачаТранзита";
    КомандаПечати.Идентификатор 	= "ПеремещениеОшибочныхЗаказов";
	КомандаПечати.Картинка 			= БиблиотекаКартинок.Печать;
    КомандаПечати.Представление 	= НСтр("ru = 'Перемещение ошибочных заказов/пристоя'");
	//КомандаПечати.СразуНаПринтер 	= Истина;

	
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 	= "Документ.ВыдачаТранзита";
    КомандаПечати.Идентификатор 	= "ЧекСИтогамиПоГабаритам";
	//КомандаПечати.СразуНаПринтер 	= Истина;
    КомандаПечати.Представление 	= НСтр("ru = 'Чек с итогами (по габаритам)'");
    КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;	
	
	
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати = "Документ.ВыдачаТранзита";
    КомандаПечати.Идентификатор = "СжатыйЧек";
//омандаПечати.СразуНаПринтер 	= Ложь;
    КомандаПечати.Представление = НСтр("ru = 'Сжатый чек'");
    КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;	
	
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати = "Документ.ВыдачаТранзита";
    КомандаПечати.Идентификатор = "ЭкспедиторскаяРасписка";
    КомандаПечати.Представление = НСтр("ru = 'Эскпедиторская расписка'");
    КомандаПечати.ПроверкаПроведенияПередПечатью = Истина; 
	
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати = "Документ.ВыдачаТранзита";
    КомандаПечати.Идентификатор = "Накладная";
    КомандаПечати.Представление = НСтр("ru = 'Накладная'");
    КомандаПечати.ПроверкаПроведенияПередПечатью = Истина; 	

    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати = "Документ.ВыдачаТранзита";
    КомандаПечати.Идентификатор = "НакладнаяХабаровск";
    КомандаПечати.Представление = НСтр("ru = 'Накладная (Хабаровск)'");
    КомандаПечати.ПроверкаПроведенияПередПечатью = Истина; 

	
	
	СтоСП_Печать.ДобавитьКомандыПечатиСупергрупп(КомандыПечати);	
	
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 					= "Документ.ВыдачаТранзита";
    КомандаПечати.Идентификатор 					= "СписокВыдачи";
    КомандаПечати.Представление 					= НСтр("ru = 'СписокВыдачи'");
    КомандаПечати.ПроверкаПроведенияПередПечатью 	= Истина; 
	
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 					= "Документ.ВыдачаТранзита";
    КомандаПечати.Идентификатор 					= "ДоставкаКурьером";
    КомандаПечати.Представление 					= НСтр("ru = 'ДоставкаКурьером'");
    КомандаПечати.ПроверкаПроведенияПередПечатью 	= Истина; 	
	
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	#Если Сервер Тогда 
	ИмяМакета = "ПеремещениеОшибочныхЗаказов";	
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета);
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        ИмяМакета,          
        НСтр("ru = 'Перемещение заказов (чек)'"),
        Печать_ЧекПеремещениеЗаказов(МассивОбъектов, ОбъектыПечати),
        ,
        "Документ.ВыдачаТранзита.ПФ_MXL_ЧекПеремещениеЗаказов");
	КонецЕсли;
		
		
		ИмяМакета = "ЧекСИтогамиПоГабаритам";	
		НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета);
		Если НужноПечататьМакет Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,          
			НСтр("ru = 'Чек с итогами (по габаритам)'"),
			Печать_ЧекСИтогамиПоГабаритам(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ВыдачаТранзита.ПФ_MXL_ЧекСИтогамиПоГабаритам");
		КонецЕсли;
	
	
    НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СжатыйЧек");
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        "СжатыйЧек",
        НСтр("ru = 'СжатыйЧек'"),
        ПечатьСжатогоЧека(МассивОбъектов, ОбъектыПечати),
        ,
        "Документ.ВыдачаТранзита.ПФ_MXL_ЧекСжатый");
	КонецЕсли;		
	
	
    НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная");
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        "Накладная",
        НСтр("ru = 'Накладная'"),
        ПечатьНакладной(МассивОбъектов, ОбъектыПечати),
        ,
        "Документ.ВыдачаТранзита.ПФ_MXL_Накладная");
	КонецЕсли;	

    НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяХабаровск");
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        "НакладнаяХабаровск",
        НСтр("ru = 'Накладная Хабаровск'"),
        ПечатьНакладнойХабаровск(МассивОбъектов, ОбъектыПечати),
        ,
        "Документ.ВыдачаТранзита.ПФ_MXL_НакладнаяХабаровск");
	КонецЕсли;	


	
    НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭкспедиторскаяРасписка");
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        "ЭкспедиторскаяРасписка",
        НСтр("ru = 'Экспедиторская расписка'"),
        ПечатьЭкспедиторскойРасписки(МассивОбъектов, ОбъектыПечати),
        ,
        "Документ.ВыдачаТранзита.ПФ_MXL_ЭкспедиторскаяРасписка");
	КонецЕсли;	
	
	
	
    НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокВыдачи");
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        "СписокВыдачи",
        НСтр("ru = 'СписокВыдачи'"),
        ПечатьСпискаВыдачи(МассивОбъектов, ОбъектыПечати),
        ,
        "Документ.ВыдачаТранзита.ПФ_MXL_СписокВыдачи");
	КонецЕсли;	
	
	
    НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДоставкаКурьером");
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        "ДоставкаКурьером",
        НСтр("ru = 'ДоставкаКурьером'"),
        ПечатьДоставкаКурьером(МассивОбъектов, ОбъектыПечати),
        ,
        "Документ.ВыдачаТранзита.ПФ_MXL_ПечатьДоставкаКурьером");
	КонецЕсли;		
#КонецЕсли 	
КонецПроцедуры

Функция Печать_ЧекПеремещениеЗаказов(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент				= Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб	= Истина;
	ТабличныйДокумент.ПолеСлева		= 0;
	ТабличныйДокумент.ПолеСправа	= 0;	 
	
	Макет 	= ПолучитьМакет("ПФ_MXL_ЧекПеремещениеЗаказов");
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьНазначение		= Макет.ПолучитьОбласть("Назначение");
	ОбластьПокупки 			= Макет.ПолучитьОбласть("Покупки");
//	ОбластьШтрихКод			= Макет.ПолучитьОбласть("ШтрихКод"); 
//	ОбластьШтрихКодСтрока	= Макет.ПолучитьОбласть("ШтрихКодСтрока"); 
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал2 			= Макет.ПолучитьОбласть("Подвал2");
	
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыдачаТранзитаПокупки.Ссылка КАК ссылка,
		|	ВыдачаТранзитаПокупки.Ссылка.Дата КАК Дата,
		|	ВыдачаТранзитаПокупки.Ссылка.Номер КАК Номер,
		|	ВыдачаТранзитаПокупки.Покупка.Организатор КАК организатор,
		|	ВыдачаТранзитаПокупки.Участник КАК Участник,
		|	ВыдачаТранзитаПокупки.Покупка КАК Покупка,
		|	ВыдачаТранзитаПокупки.КоличествоМест КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Партия) = ТИП(Документ.ПоступлениеПристроя)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПристрой,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Партия) = ТИП(Документ.ПоступлениеПристроя)
		|			ТОГДА ""Пристрой""
		|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(справочник.Коробки)
		|			ТОГДА ""Групповые""
		|		ИНАЧЕ ""Одиночные""
		|	КОНЕЦ КАК ТипЗаказа,
		|	ПРЕДСТАВЛЕНИЕ(ВыдачаТранзитаПокупки.ТочкаНазначения) КАК ТочкаНазначенияПредставление
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|ГДЕ
		|	ВыдачаТранзитаПокупки.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	организатор
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	ссылка,
		|	ТипЗаказа";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборкассылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборкассылка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ОбластьШапка.Параметры.Заполнить(Выборкассылка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьНазначение.Параметры.ОткудаКуда = "из "+ Константы.СвояТочка.Получить()+ " в "+Выборкассылка.ссылка.ТочкаНазначения.Наименование;
		ТабличныйДокумент.Вывести(ОбластьНазначение, Выборкассылка.Уровень());

		ТабличныйДокумент.Вывести(ОбластьШапка, Выборкассылка.Уровень());
		

		НомерПП = 1;
		Пристрой = 0;
		Групповых = 0;
		Одиночных = 0;
	
		ВыборкаТипЗаказа = Выборкассылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаТипЗаказа.Следующий() Цикл
			Если выборкаТипЗаказа.ТипЗаказа = "Пристрой" Тогда
				Пристрой = выборкаТипЗаказа.Количество;
			КонецЕсли;	
			Если выборкаТипЗаказа.ТипЗаказа = "Групповые" Тогда
				Групповых = выборкаТипЗаказа.Количество;
			КонецЕсли;	
			Если выборкаТипЗаказа.ТипЗаказа = "Одиночные" Тогда
				Одиночных = выборкаТипЗаказа.Количество;
			КонецЕсли;	
			
			ОбластьНазначение.Параметры.ОткудаКуда = ВыборкаТипЗаказа.ТипЗаказа + ": " +выборкаТипЗаказа.Количество;
			ТабличныйДокумент.Вывести(ОбластьНазначение, ВыборкаТипЗаказа.Уровень());
			
			ВыборкаДетальныеЗаписи = ВыборкаТипЗаказа.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ОбластьПокупки.Параметры.НомерПП = НомерПП;
				ОбластьПокупки.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
				ТабличныйДокумент.Вывести(ОбластьПокупки, ВыборкаДетальныеЗаписи.Уровень());
				НомерПП = НомерПП + 1;
			КонецЦикла;
		КонецЦикла;
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		Если Одиночных>0 Тогда
			ОбластьПодвал2.Параметры.Расшифровка = "Одиночных: "+Одиночных;
			ТабличныйДокумент.Вывести(ОбластьПодвал2);
		КонецЕсли;	
		Если Групповых>0 Тогда
			ОбластьПодвал2.Параметры.Расшифровка = "Групповых: "+Групповых;
			ТабличныйДокумент.Вывести(ОбластьПодвал2);
		КонецЕсли;	
		
		Если Пристрой>0 Тогда
			ОбластьПодвал2.Параметры.Расшифровка = "Пристроя: "+Пристрой;
			ТабличныйДокумент.Вывести(ОбластьПодвал2);
		КонецЕсли;			
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции	

Функция Печать_ЧекСИтогамиПоГабаритам(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок= Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПФ_MXL_ЧекСИтогамиПоГабаритам");

	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
//	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	Область_Итоги 			= Макет.ПолучитьОбласть("Итоги");
	Область_Город			= Макет.ПолучитьОбласть("Город");
	Область_Габарит			= Макет.ПолучитьОбласть("Габарит");
	Область_Покупка			= Макет.ПолучитьОбласть("Покупка");
	Область_Детали			= Макет.ПолучитьОбласть("Детали");
	Область_ОборотнаяТара	= Макет.ПолучитьОбласть("ОборотнаяТара");
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыдачаТранзитаПокупки.Покупка.Организатор.Наименование КАК Организатор,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ""Группы""
		|		ИНАЧЕ ВыдачаТранзитаПокупки.Покупка.Наименование
		|	КОНЕЦ КАК Покупка,
		|	ВыдачаТранзитаПокупки.ВремяХранения КАК ВремяХранения,
		|	ВыдачаТранзитаПокупки.СтоимостьИтого КАК СтоимостьХранения,
		|	ВыдачаТранзитаПокупки.Габарит КАК Габарит,
		|	ВыдачаТранзитаПокупки.КоличествоМест КАК КоличествоМест,
		|	ВыдачаТранзитаПокупки.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ВыдачаТранзитаПокупки.Покупка
		|		ИНАЧЕ ВыдачаТранзитаПокупки.Участник.Наименование
		|	КОНЕЦ КАК Участник,
		|	ВыдачаТранзитаПокупки.Ссылка КАК Ссылка,
		|	ВыдачаТранзитаПокупки.Покупка.ПерваяТочка.ГородСП КАК Город
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|ГДЕ
		|	ВыдачаТранзитаПокупки.Ссылка В(&Ссылка)
		|	И ВыдачаТранзитаПокупки.Подбор
		|ИТОГИ
		|	СУММА(СтоимостьХранения),
		|	СУММА(КоличествоМест),
		|	СУММА(Количество)
		|ПО
		|	ОБЩИЕ,
		|	Ссылка,
		|	Город,
		|	Габарит,
		|	Покупка
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаОбщийИтог.Следующий();		// Общий итог
	ВыборкаСсылка = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВставлятьРазделительСтраниц = Ложь;
	Пока ВыборкаСсылка.Следующий() Цикл
		
		
    	ОбластьЗаголовок.Параметры.Дата					= ВыборкаСсылка.Ссылка.Дата;
		ОбластьЗаголовок.Параметры.Номер				= ВыборкаСсылка.Ссылка.Номер;
		ОбластьЗаголовок.Параметры.НазваниеОрганизации	= Константы.НазваниеОрганизации.Получить();
		ОбластьЗаголовок.Параметры.ТочкаНазначения		= ВыборкаСсылка.Ссылка.ТочкаНазначения;
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ТабДок.Вывести(ОбластьЗаголовок);
		
		Если ВыборкаСсылка.Ссылка.ОборотнаяТара.Количество()>0 Тогда
			КоличетвоТары = 0;
			Разделитель = "";
			СтрокаТара = "";
			Для каждого тара из 	ВыборкаСсылка.Ссылка.ОборотнаяТара Цикл
				СтрокаТара = СтрокаТара+Разделитель+Тара.Тара.Наименование;
				Разделитель = ",";
				количетвоТары = количетвоТары+1;
			КонецЦикла;	
			Область_ОборотнаяТара.Параметры.ОборотнаяТара	= "тара "+ количетвоТары +" шт ("+ СтрокаТара+")";
			ТабДок.Вывести(Область_ОборотнаяТара);
		КонецЕсли;;
		
		
		Область_Итоги.Параметры.Заполнить(ВыборкаСсылка);
		ТабДок.Вывести(Область_Итоги, ВыборкаОбщийИтог.Уровень());
		
		ВыборкаГород = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГород.Следующий() Цикл
			Область_Город.Параметры.Заполнить(ВыборкаГород);
			ТабДок.Вывести(Область_Город, ВыборкаГород.Уровень());
			
			
			ВыборкаГабарит = ВыборкаГород.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаГабарит.Следующий() Цикл
				Область_Габарит.Параметры.Заполнить(ВыборкаГабарит);
				ТабДок.Вывести(Область_Габарит, ВыборкаГабарит.Уровень());
				СворачиватьВЧеке = (ЗначениеЗаполнено(ВыборкаГород.Город) и ВыборкаГород.Город.Наименование = "Владивосток");
				Если СворачиватьВЧеке Тогда Продолжить КонецЕсли;
				
				ВыборкаПокупка = ВыборкаГабарит.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПокупка.Следующий() Цикл
					Область_Покупка.Параметры.Заполнить(ВыборкаПокупка);
					ТабДок.Вывести(Область_Покупка, ВыборкаПокупка.Уровень());
					
					ВыборкаДетальныеЗаписи = ВыборкаПокупка.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Область_Детали.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
						ТабДок.Вывести(Область_Детали, ВыборкаДетальныеЗаписи.Уровень());
					КонецЦикла;
				КонецЦикла;			
			КонецЦикла;
		КонецЦикла;

		ТабДок.Вывести(ОбластьПодвалТаблицы);
		ОбластьПодвал.Параметры.Ответственный = ВыборкаСсылка.Ссылка.Ответственный;
		ТабДок.Вывести(ОбластьПодвал);
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	ТабДок.АвтоМасштаб = Истина;
	Возврат ТабДок;
КонецФункции

Функция ПечатьЭкспедиторскойРасписки(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок					= Новый ТабличныйДокумент;
	Макет 					= ПолучитьМакет("ПФ_MXL_ЭкспедиторскаяРасписка");


	
	ОбластьПодписи 			= Макет.ПолучитьОбласть("Подписи");
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	Область_Итоги 			= Макет.ПолучитьОбласть("Итоги");
	Область_Габарит			= Макет.ПолучитьОбласть("Габарит");
	Область_ТипЗаказа		= Макет.ПолучитьОбласть("ТипЗаказа");
	Область_Детали			= Макет.ПолучитьОбласть("Детали");
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыдачаТранзитаПокупки.Покупка.Организатор.Наименование КАК Организатор,
		|	ВыдачаТранзитаПокупки.Покупка КАК Покупка,
		|	ВыдачаТранзитаПокупки.ВремяХранения КАК ВремяХранения,
		|	ВыдачаТранзитаПокупки.СтоимостьХранения КАК СтоимостьХранения,
		|	ВыдачаТранзитаПокупки.Габарит КАК Габарит,
		|	ВыдачаТранзитаПокупки.КоличествоМест КАК КоличествоМест,
		|	ВыдачаТранзитаПокупки.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ВыдачаТранзитаПокупки.Покупка
		|		ИНАЧЕ ВыдачаТранзитаПокупки.Участник.Наименование
		|	КОНЕЦ КАК Участник,
		|	ВыдачаТранзитаПокупки.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ""Группы""
		|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Посылки)
		|			ТОГДА ""Посылки""
		|		ИНАЧЕ ""Прочее""
		|	КОНЕЦ КАК ТипЗаказа
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|ГДЕ
		|	ВыдачаТранзитаПокупки.Ссылка В(&Ссылка)
		|	И ВыдачаТранзитаПокупки.Подбор
		|ИТОГИ
		|	СУММА(СтоимостьХранения),
		|	СУММА(КоличествоМест),
		|	СУММА(Количество)
		|ПО
		|	ОБЩИЕ,
		|	Ссылка,
		|	Габарит,
		|	ТипЗаказа
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаОбщийИтог.Следующий();		// Общий итог
	ВыборкаСсылка = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВставлятьРазделительСтраниц = Ложь;
	
	Пока ВыборкаСсылка.Следующий() Цикл
		ОбластьШапка.Параметры.Дата									= ВыборкаСсылка.Ссылка.Дата;
		ОбластьШапка.Параметры.Номер								= ВыборкаСсылка.Ссылка.Номер;
		ОбластьШапка.Параметры.НазваниеОрганизации					= Константы.НазваниеОрганизации.Получить();
		ОбластьШапка.Параметры.НаименованиеПунктаОтправления		= ВыборкаСсылка.Ссылка.ТочкаОтправитель;
		ОбластьШапка.Параметры.НаименованиеПунктаНазначения			= ВыборкаСсылка.Ссылка.ТочкаНазначения;
		
		ТабДок.Вывести(ОбластьШапка);
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		Область_Итоги.Параметры.Заполнить(ВыборкаСсылка);
		ТабДок.Вывести(Область_Итоги, ВыборкаОбщийИтог.Уровень());
		
	
		ВыборкаГабарит = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаГабарит.Следующий() Цикл
			Область_Габарит.Параметры.Заполнить(ВыборкаГабарит);
			ТабДок.Вывести(Область_Габарит, ВыборкаГабарит.Уровень());
			Если ВыборкаГабарит.Габарит.СворачиватьВЧеке Тогда Продолжить КонецЕсли;
			
			ВыборкаТипЗаказа = ВыборкаГабарит.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаТипЗаказа.Следующий() Цикл
				Область_ТипЗаказа.Параметры.Заполнить(ВыборкаТипЗаказа);
				ТабДок.Вывести(Область_ТипЗаказа, ВыборкаТипЗаказа.Уровень());
				
				ВыборкаДетальныеЗаписи = ВыборкаТипЗаказа.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Область_Детали.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
					ТабДок.Вывести(Область_Детали, ВыборкаДетальныеЗаписи.Уровень());
				КонецЦикла;
			КонецЦикла;			
		КонецЦикла;

		ОбластьПодписи.Параметры.Ответственный = ВыборкаСсылка.Ссылка.Ответственный;
		ТабДок.Вывести(ОбластьПодписи);
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	ТабДок.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб 			= Истина;
	Возврат ТабДок;

КонецФункции

Функция ПечатьСжатогоЧека(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок= Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПФ_MXL_ЧекСжатый");

	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
//	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьОбщийИтог 		= Макет.ПолучитьОбласть("ОбщиеИтоги");
	ОбластьОрганизатор 		= Макет.ПолучитьОбласть("Организатор");
//	ОбластьГабарит 			= Макет.ПолучитьОбласть("Габарит");
	ОбластьПокупка 			= Макет.ПолучитьОбласть("Покупка");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	Область_ОборотнаяТара	= Макет.ПолучитьОбласть("ОборотнаяТара");

	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыдачаТранзитаПокупки.Покупка.Организатор.Наименование КАК Организатор,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ""Группы""
		|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Мегаордера)
		|			ТОГДА ""Супергруппы""
		|		ИНАЧЕ ВыдачаТранзитаПокупки.Покупка.Наименование
		|	КОНЕЦ КАК Покупка,
		|	ВыдачаТранзитаПокупки.ВремяХранения КАК ВремяХранения,
		|	ВыдачаТранзитаПокупки.СтоимостьИтого КАК СтоимостьХранения,
		|	ВыдачаТранзитаПокупки.Габарит.Наименование КАК Габарит,
		|	ВыдачаТранзитаПокупки.КоличествоМест КАК КоличествоМест,
		|	ВыдачаТранзитаПокупки.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ВыдачаТранзитаПокупки.Покупка
		|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Мегаордера)
		|			ТОГДА ВыдачаТранзитаПокупки.Покупка
		|		ИНАЧЕ ВыдачаТранзитаПокупки.Участник.Наименование
		|	КОНЕЦ КАК Участник,
		|	ВыдачаТранзитаПокупки.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Пред
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|ГДЕ
		|	ВыдачаТранзитаПокупки.Ссылка В(&Ссылка)
		|	И ВыдачаТранзитаПокупки.Подбор
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пред.Организатор КАК Организатор,
		|	Пред.Покупка КАК Покупка,
		|	Пред.ВремяХранения КАК ВремяХранения,
		|	Пред.СтоимостьХранения КАК СтоимостьХранения,
		|	Пред.Габарит КАК Габарит,
		|	Пред.КоличествоМест КАК КоличествоМест,
		|	Пред.Количество КАК Количество,
		|	Пред.Участник КАК Участник,
		|	Пред.Ссылка КАК Ссылка
		|ИЗ
		|	Пред КАК Пред
		|ИТОГИ
		|	СУММА(СтоимостьХранения),
		|	СУММА(КоличествоМест),
		|	СУММА(Количество)
		|ПО
		|	ОБЩИЕ,
		|	Ссылка,
		|	Организатор,
		|	Габарит,
		|	Покупка
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаОбщийИтог.Следующий();		// Общий итог
	
	// Вставить обработку выборки ВыборкаОбщийИтог
	
	ВыборкаСсылка = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВставлятьРазделительСтраниц = Ложь;

	Пока ВыборкаСсылка.Следующий() Цикл
    	ОбластьЗаголовок.Параметры.Дата					= ВыборкаСсылка.Ссылка.Дата;
		ОбластьЗаголовок.Параметры.Номер				= ВыборкаСсылка.Ссылка.Номер;
		ОбластьЗаголовок.Параметры.НазваниеОрганизации	= Константы.НазваниеОрганизации.Получить();
		ОбластьЗаголовок.Параметры.ТочкаНазначения		= ВыборкаСсылка.Ссылка.ТочкаНазначения;
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ТабДок.Вывести(ОбластьЗаголовок);
		
		Если ВыборкаСсылка.Ссылка.ОборотнаяТара.Количество()>0 Тогда
			КоличетвоТары = 0;
			Разделитель = "";
			СтрокаТара = "";
			Для каждого тара из 	ВыборкаСсылка.Ссылка.ОборотнаяТара Цикл
				СтрокаТара = СтрокаТара+Разделитель+Тара.Тара.Наименование;
				Разделитель = ",";
				количетвоТары = количетвоТары+1;
			КонецЦикла;	
			Область_ОборотнаяТара.Параметры.ОборотнаяТара	= "тара "+ количетвоТары +" шт ("+ СтрокаТара+")";
			ТабДок.Вывести(Область_ОборотнаяТара);
		КонецЕсли;;
		
		ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаСсылка);
		ТабДок.Вывести(ОбластьОбщийИтог, ВыборкаОбщийИтог.Уровень());
		

		
		ВыборкаОрганизатор = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаОрганизатор.Следующий() Цикл
			ОбластьОрганизатор.Параметры.Заполнить(ВыборкаОрганизатор);
			ТабДок.Вывести(ОбластьОрганизатор, ВыборкаОрганизатор.Уровень());
	
			ВыборкаГабарит = ВыборкаОрганизатор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
			Пока ВыборкаГабарит.Следующий() Цикл
				// Вставить обработку выборки ВыборкаГабарит
	
				ВыборкаПокупка = ВыборкаГабарит.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
				Пока ВыборкаПокупка.Следующий() Цикл
					ОбластьПокупка.Параметры.Заполнить(ВыборкаПокупка);
					ТабДок.Вывести(ОбластьПокупка, ВыборкаПокупка.Уровень());

	
					ВыборкаДетальныеЗаписи = ВыборкаПокупка.Выбрать();
	
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
						ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());

					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		ТабДок.Вывести(ОбластьПодвалТаблицы);
		ТабДок.Вывести(ОбластьПодвал);
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	ТабДок.АвтоМасштаб = Истина;
	Возврат ТабДок;
КонецФункции

Функция ПечатьНакладной(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок= Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПФ_MXL_Накладная");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыдачаТранзита.Дата,
	|	ВыдачаТранзита.Номер,
	|	ВыдачаТранзита.ТочкаНазначения,
	|	ВыдачаТранзита.Покупки.(
	|		НомерСтроки,
	|		Покупка,
	|		МестоХранения,
	|		Габарит,
	|		Количество,
	|		ВремяХранения,
	|		СтоимостьХранения,
	|		Партия,
	|		Участник,
	|		Покупка.Владелец КАК Организатор
	|	)
	|ИЗ
	|	Документ.ВыдачаТранзита КАК ВыдачаТранзита
	|ГДЕ
	|	ВыдачаТранзита.Ссылка В(&Ссылка)
	|	И ВыдачаТранзита.Покупки.Подбор";
	Запрос.Параметры.Вставить("Ссылка", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупкиШапка = Макет.ПолучитьОбласть("ПокупкиШапка");
	ОбластьПокупки = Макет.ПолучитьОбласть("Покупки");
	ТабДок.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ТабДок.Вывести(ОбластьЗаголовок);

		Шапка.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Шапка, Выборка.Уровень());

		ТабДок.Вывести(ОбластьПокупкиШапка);
		ВыборкаПокупки = Выборка.Покупки.Выбрать();
		Пока ВыборкаПокупки.Следующий() Цикл
			ОбластьПокупки.Параметры.Заполнить(ВыборкаПокупки);
			ТабДок.Вывести(ОбластьПокупки, ВыборкаПокупки.Уровень());
		КонецЦикла;

		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	Возврат ТабДок;
КонецФункции

Функция ПечатьНакладнойХабаровск(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок= Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПФ_MXL_НакладнаяХабаровск");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыдачаТранзита.Дата,
	|	ВыдачаТранзита.Номер,
	|	ВыдачаТранзита.ТочкаНазначения,
	|	ВыдачаТранзита.Покупки.(
	|		НомерСтроки,
	|		Покупка как Заказ,
	|		МестоХранения,
	|		Габарит,
	|		Количество,
	|		ВремяХранения,
	|		СтоимостьХранения,
	|		Партия,
	|		Участник,
	|		Покупка.Организатор КАК Организатор
	|	)
	|ИЗ
	|	Документ.ВыдачаТранзита КАК ВыдачаТранзита
	|ГДЕ
	|	ВыдачаТранзита.Ссылка В(&Ссылка)
	|	И ВыдачаТранзита.Покупки.Подбор";
	Запрос.Параметры.Вставить("Ссылка", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупкиШапка = Макет.ПолучитьОбласть("ПокупкиШапка");
	ОбластьПокупки = Макет.ПолучитьОбласть("Покупки");
	ТабДок.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ТабДок.Вывести(ОбластьЗаголовок);

		Шапка.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Шапка, Выборка.Уровень());

		ТабДок.Вывести(ОбластьПокупкиШапка);
		ВыборкаПокупки = Выборка.Покупки.Выбрать();
		НомерСтроки = 1;
		Пока ВыборкаПокупки.Следующий() Цикл
			Если ТипЗнч(ВыборкаПокупки.Заказ) = Тип("СправочникСсылка.Коробки") Тогда
				Для Каждого элем из ВыборкаПокупки.Заказ.Состав Цикл 				
					ОбластьПокупки.Параметры.Заполнить(элем);
					ОбластьПокупки.Параметры.Заказ		 	= элем.Покупка;
					ОбластьПокупки.Параметры.Организатор 	= элем.Покупка.Организатор;
					ОбластьПокупки.Параметры.Количество		= 1;
					ОбластьПокупки.Параметры.Группа			= ВыборкаПокупки.Заказ;
					ОбластьПокупки.Параметры.НомерСтроки	= НомерСтроки;
					ТабДок.Вывести(ОбластьПокупки, ВыборкаПокупки.Уровень());
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла
			Иначе	
				ОбластьПокупки.Параметры.Заполнить(ВыборкаПокупки);
				ОбластьПокупки.Параметры.Группа			= "-";
				ОбластьПокупки.Параметры.НомерСтроки	= НомерСтроки;
				ТабДок.Вывести(ОбластьПокупки, ВыборкаПокупки.Уровень());
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;

		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	Возврат ТабДок;
КонецФункции

Функция ПечатьДоставкаКурьером(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок= Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПФ_MXL_ПечатьДоставкаКурьером");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыдачаТранзита.Дата КАК Дата,
	|	ВыдачаТранзита.Ссылка КАК Ссылка,
	|	ВыдачаТранзита.Номер КАК Номер,
	|	ВыдачаТранзита.ТочкаНазначения КАК ТочкаНазначения,
	|	ВыдачаТранзита.ТочкаОтправитель КАК ТочкаОтправитель,
	|	ВыдачаТранзита.Покупки.(
	|		Покупка КАК Покупка,
	|		СтоимостьДоставки КАК СтоимостьДоставки,
	|		СтоимостьХранения КАК СтоимостьХранения,
	|		СтоимостьИтого КАК СтоимостьИтого,
	|		Партия КАК Партия) КАК Покупки,
	|	ВыдачаТранзита.СтоимостьХранения КАК СтоимостьХранения,
	|	ВыдачаТранзита.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ВыдачаТранзита.СтоимостьИтого КАК СтоимостьИтого
	|ИЗ
	|	Документ.ВыдачаТранзита КАК ВыдачаТранзита
	|ГДЕ
	|	ВыдачаТранзита.Ссылка В (&Ссылка)
	|	И (ТИПЗНАЧЕНИЯ(ВыдачаТранзита.Покупки.Покупка) = ТИП(Справочник.Коробки)
	|	или ТИПЗНАЧЕНИЯ(ВыдачаТранзита.Покупки.Покупка) = ТИП(Справочник.СобранныеЗаказы))";
	Запрос.Параметры.Вставить("Ссылка", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупкиШапка = Макет.ПолучитьОбласть("ПокупкиШапка");
	ОбластьПокупки = Макет.ПолучитьОбласть("Покупки");
	ТабДок.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ТабДок.Вывести(ОбластьЗаголовок);

		Шапка.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Шапка, Выборка.Уровень());

		ТабДок.Вывести(ОбластьПокупкиШапка);
		ВыборкаПокупки = Выборка.Покупки.Выбрать();
		нпп=1;
		Пока ВыборкаПокупки.Следующий() Цикл

				ОбластьПокупки.Параметры.Группа				= ВыборкаПокупки.Покупка.Код;
				
				Если ТипЗнч(ВыборкаПокупки.Партия) = Тип("ДокументСсылка.ОтправлениеТранзита") Тогда
					ОбластьПокупки.Параметры.КолЗаказов			= ВыборкаПокупки.Партия.Заказы.Количество();	
				ИначеЕсли	ТипЗнч(ВыборкаПокупки.Партия) = Тип("ДокументСсылка.КурьерскаяДоставка") Тогда
					ОбластьПокупки.Параметры.КолЗаказов			= ВыборкаПокупки.Партия.ЗаказыНаСкладе.Количество();
				КонецЕсли;
				
				ОбластьПокупки.Параметры.Адрес					= ВыборкаПокупки.Партия.Адрес;
				Если ТипЗнч(ВыборкаПокупки.Покупка) = Тип("СправочникСсылка.СобранныеЗаказы") Тогда
					ОбластьПокупки.Параметры.КомментарийДоставки	= ВыборкаПокупки.Покупка.ДокументЗаказа.КомментарийДоставки;
				КонецЕсли;
				ОбластьПокупки.Параметры.ФИО					= ВыборкаПокупки.Партия.ФИО;
				ОбластьПокупки.Параметры.Ник					= ВыборкаПокупки.Партия.Участник;
				ОбластьПокупки.Параметры.Телефон				= ВыборкаПокупки.Партия.Телефон;
				ОбластьПокупки.Параметры.СтоимостьХранения		= ВыборкаПокупки.СтоимостьХранения;
				ОбластьПокупки.Параметры.СтоимостьДоставки		= ВыборкаПокупки.СтоимостьДоставки;
				ОбластьПокупки.Параметры.СтоимостьИтого			= ВыборкаПокупки.СтоимостьИтого;

				ОбластьПокупки.Параметры.нпп=нпп;
				нпп=нпп + 1;
				ТабДок.Вывести(ОбластьПокупки, ВыборкаПокупки.Уровень());

		КонецЦикла;

		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	Возврат ТабДок;
КонецФункции

Функция ПечатьПристроя(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок= Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПФ_MXL_ПечатьПристроя");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыдачаТранзита.Дата КАК Дата,
	|	ВыдачаТранзита.Номер КАК Номер,
	|	ВыдачаТранзита.ТочкаНазначения КАК ТочкаНазначения,
	|	ВыдачаТранзита.ТочкаОтправитель КАК ТочкаОтправитель,
	|	ВыдачаТранзита.Покупки.(
	|		Покупка КАК Покупка,
	|		СтоимостьДоставки КАК СтоимостьДоставки,
	|		СтоимостьХранения КАК СтоимостьХранения,
	|		СтоимостьИтого КАК СтоимостьИтого
	|	) КАК Покупки,
	|	ВыдачаТранзита.СтоимостьХранения КАК СтоимостьХранения,
	|	ВыдачаТранзита.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ВыдачаТранзита.СтоимостьИтого КАК СтоимостьИтого
	|ИЗ
	|	Документ.ВыдачаТранзита КАК ВыдачаТранзита
	|ГДЕ
	|	ВыдачаТранзита.Ссылка В(&Ссылка)";
	Запрос.Параметры.Вставить("Ссылка", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупкиШапка = Макет.ПолучитьОбласть("ПокупкиШапка");
	ОбластьПокупки = Макет.ПолучитьОбласть("Покупки");
	ТабДок.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ТабДок.Вывести(ОбластьЗаголовок);

		Шапка.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Шапка, Выборка.Уровень());

		ТабДок.Вывести(ОбластьПокупкиШапка);
		ВыборкаПокупки = Выборка.Покупки.Выбрать();
		нпп=1;
		Пока ВыборкаПокупки.Следующий() Цикл
			Если не (ТипЗнч(ВыборкаПокупки.Покупка)=Тип("СправочникСсылка.Коробки")) Тогда продолжить;   КонецЕсли;
			ОбластьПокупки.Параметры.Группа				= ВыборкаПокупки.Покупка.Код;
			ОбластьПокупки.Параметры.КолЗаказов			= ВыборкаПокупки.Покупка.Состав.Количество();
			ОбластьПокупки.Параметры.Адрес				= ВыборкаПокупки.Покупка.ОтправлениеТранзита.Адрес;
			ОбластьПокупки.Параметры.ФИО				= ВыборкаПокупки.Покупка.ОтправлениеТранзита.ФИО;
			ОбластьПокупки.Параметры.СтоимостьХранения	= ВыборкаПокупки.СтоимостьХранения;
			ОбластьПокупки.Параметры.СтоимостьДоставки	= ВыборкаПокупки.СтоимостьДоставки;
			ОбластьПокупки.Параметры.СтоимостьИтого		= ВыборкаПокупки.СтоимостьИтого;

			ОбластьПокупки.Параметры.нпп=нпп;
			нпп=нпп+1;
			ТабДок.Вывести(ОбластьПокупки, ВыборкаПокупки.Уровень());
		КонецЦикла;

		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	Возврат ТабДок;
КонецФункции

Функция ПечатьСпискаВыдачи(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок= Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПФ_MXL_СписокВыдачи");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыдачаТранзитаПокупки.Ссылка,
	|	ВыдачаТранзитаПокупки.Покупка,
	|	ВыдачаТранзитаПокупки.Участник,
	|	ВыдачаТранзитаПокупки.ТочкаНазначения,
	|	""без ГС"" КАК ГС
	|ПОМЕСТИТЬ Врем
	|ИЗ
	|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) <> ТИП(Справочник.Коробки)
	|	И ВыдачаТранзитаПокупки.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыдачаТранзитаПокупки.Ссылка,
	|	КоробкиСостав.Покупка,
	|	КоробкиСостав.Участник,
	|	ВыдачаТранзитаПокупки.ТочкаНазначения,
	|	ВыдачаТранзитаПокупки.Покупка
	|ИЗ
	|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Коробки.Состав КАК КоробкиСостав
	|		ПО ВыдачаТранзитаПокупки.Покупка = КоробкиСостав.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
	|	И ВыдачаТранзитаПокупки.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Врем.Покупка КАК Покупка,
	|	Врем.Участник КАК Участник,
	|	Врем.ТочкаНазначения КАК ТочкаНазначения,
	|	Врем.Покупка.Организатор КАК Организатор,
	|	Врем.Ссылка КАК Ссылка,
	|	Врем.ГС,
	|	Врем.Ссылка.Номер,
	|	Врем.Ссылка.Дата,
	|	Врем.Участник.Код,
	|	Врем.Покупка.Код,
	|	ТИПЗНАЧЕНИЯ(Врем.Покупка) КАК ТипПокупки
	|ИЗ
	|	Врем КАК Врем
	|
	|УПОРЯДОЧИТЬ ПО
	|	Участник
	|ИТОГИ ПО
	|	Ссылка,
	|	ТочкаНазначения";
	Запрос.Параметры.Вставить("Ссылка", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупкиШапка = Макет.ПолучитьОбласть("ПокупкиШапка");
	ОбластьПокупки = Макет.ПолучитьОбласть("Покупки");
	ТабДок.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		ВыборкаТочки = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТочки.Следующий() Цикл
			
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ТабДок.Вывести(ОбластьЗаголовок);
			
			Шапка.Параметры.Заполнить(ВыборкаТочки);
			ТабДок.Вывести(Шапка, Выборка.Уровень());
			
			ТабДок.Вывести(ОбластьПокупкиШапка);
			ВыборкаПокупки = ВыборкаТочки.Выбрать();
			НомерСтроки=1;
			Пока ВыборкаПокупки.Следующий() Цикл
				ОбластьПокупки.Параметры.Заполнить(ВыборкаПокупки);
				ОбластьПокупки.Параметры.КодПолучения=ПолучитьКодЗаказа(ВыборкаПокупки.Покупка,ВыборкаПокупки.Участник);
				ОбластьПокупки.Параметры.НомерСтроки= НомерСтроки;
				ОбластьПокупки.Параметры.Тел= Прав(ВыборкаПокупки.Участник.Телефон1,4);

				ТабДок.Вывести(ОбластьПокупки, ВыборкаПокупки.Уровень());
				НомерСтроки=НомерСтроки+1;
			КонецЦикла;
		КонецЦикла;
		
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	Возврат ТабДок;
КонецФункции

//Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	ТекстыЗапроса = Новый СписокЗначений;
	//СтоСПОбмен_Общий.Получить_ТекстЗапроса_Обмен100сп (Запрос, ТекстыЗапроса, Регистры);
	//СтоСПОбмен_Общий.Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Транзит(			Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_СобранныеЗаказы(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_УпакованныеЗаказы(Запрос, ТекстыЗапроса, Регистры);	
	Получить_ТекстЗапроса_Расход(			Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_ОборотнаяТараДвижение(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Обмен100СПрн(		Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
	
КонецПроцедуры

Функция Получить_ТекстЗапроса_Транзит(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "Транзит";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ВыдачаТранзита") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ВыдачаТранзитаПокупки.Ссылка.Дата КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ВыдачаТранзитаПокупки.Покупка КАК ПокупкаСсылка,
		|	ВыдачаТранзитаПокупки.МестоХранения КАК МестоХранения,
		|	ВыдачаТранзитаПокупки.Габарит КАК Габарит,
		|	ВыдачаТранзитаПокупки.Участник КАК Участник,
//		|	Выбор когда ВыдачаТранзитаПокупки.Ссылка.ВидОперации=Значение(Перечисление.ВидыОперацийВыдачаТранзита.НаНесколькоТочек) Тогда
		|		ВыдачаТранзитаПокупки.ТочкаНазначения КАК Точка,
//		|	Иначе	
//		|		ВыдачаТранзитаПокупки.Ссылка.ТочкаНазначения	
//		|	Конец КАК Точка,
		|	ВыдачаТранзитаПокупки.Партия КАК Партия,
		|	ВыдачаТранзитаПокупки.КоличествоМест КАК Количество
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|ГДЕ
		|	 ВыдачаТранзитаПокупки.Ссылка = &Ссылка И
		|	 ВыдачаТранзитаПокупки.Подбор И
		|	 НЕ ВыдачаТранзитаПокупки.Упакован И
		|	 НЕ ВыдачаТранзитаПокупки.Ссылка.ПоОбмену
		|и ТипЗначения(ВыдачаТранзитаПокупки.Покупка) <> Тип(Справочник.СобранныеЗаказы) 
		|
		|";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_СобранныеЗаказы(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "СобранныеЗаказы";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
		 ТекстЗапроса = "
		 |
		 |ВЫБРАТЬ
		 |	документДвижения.Ссылка.Дата 			КАК Период,
		 |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
		 |	документДвижения.Покупка		 		КАК Заказ,
		 |	документДвижения.МестоХранения			КАК МестоХранения,
		 |	документДвижения.ТочкаНазначения		КАК ПунктВыдачи,
		 |	документДвижения.Партия 				КАК Партия,
 		 |	документДвижения.СтоимостьХранения		КАК СтоимостьХранения,
 		 |	документДвижения.СтоимостьДоставки		КАК СтоимостьДоставки,
		 |	документДвижения.Количество				КАК Количество
		 |ИЗ
		 |	Документ.ВыдачаТранзита.Покупки 			КАК документДвижения
		 |ГДЕ
		 |	документДвижения.Ссылка = &Ссылка
		 |и ТипЗначения(документДвижения.Покупка) = Тип(Справочник.СобранныеЗаказы)
		 |
		 |";
		

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_УпакованныеЗаказы(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "УпакованныеЗаказы";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ВыдачаТранзита") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ВыдачаТранзитаПокупки.Ссылка.Дата КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ВыдачаТранзитаПокупки.Покупка КАК Покупка,
		|	ВыдачаТранзитаПокупки.МестоХранения КАК МестоХранения,
		|	ВыдачаТранзитаПокупки.Габарит КАК Габарит,
		|	ВыдачаТранзитаПокупки.Участник КАК Участник,
	//	|	Выбор когда ВыдачаТранзитаПокупки.Ссылка.ВидОперации=Значение(Перечисление.ВидыОперацийВыдачаТранзита.НаНесколькоТочек) Тогда
		|		ВыдачаТранзитаПокупки.ТочкаНазначения КАК Точка,
//		|	Иначе	
//		|		ВыдачаТранзитаПокупки.Ссылка.ТочкаНазначения	
//		|	Конец КАК Точка,
		|	ВыдачаТранзитаПокупки.Партия КАК Партия,
		|	1 КАК Количество
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|ГДЕ
		|	 ВыдачаТранзитаПокупки.Ссылка = &Ссылка И
		|	 ВыдачаТранзитаПокупки.Подбор И
		|	 ВыдачаТранзитаПокупки.Упакован И
		|	 НЕ ВыдачаТранзитаПокупки.Ссылка.ПоОбмену 		
		|
		|";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Расход(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "Расход";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ВыдачаТранзита") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ВыдачаТранзитаПокупки.Ссылка.Дата КАК Период,
		               |	ВыдачаТранзитаПокупки.Покупка КАК Покупка,
//		               |	ВЫБОР
//		               |		КОГДА ВыдачаТранзитаПокупки.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВыдачаТранзита.НаНесколькоТочек)
//		               |			ТОГДА 
		               |	ВыдачаТранзитаПокупки.ТочкаНазначения КАК Участник,
//		               |		ИНАЧЕ ВыдачаТранзитаПокупки.Ссылка.ТочкаНазначения
//		               |	КОНЕЦ КАК Участник,
		               |	ВыдачаТранзитаПокупки.Габарит КАК Габарит,
		               |	ВыдачаТранзитаПокупки.МестоХранения КАК МестоХранения,
		               |	ЛОЖЬ КАК Списано,
		               |	ВЫБОР
		               |		КОГДА ВыдачаТранзитаПокупки.Ссылка.ТочкаНазначения.Код = ""0100""
		               |			ТОГДА ВыдачаТранзитаПокупки.Количество
		               |		ИНАЧЕ ВыдачаТранзитаПокупки.КоличествоМест
		               |	КОНЕЦ КАК Количество,
		               |	ВЫБОР
		               |		КОГДА ВыдачаТранзитаПокупки.Ссылка.ОшибочныеЗаказы
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипРасхода.ОшибочныеЗаказы)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипРасхода.Транзит)
		               |	КОНЕЦ КАК ТипРасхода,
		               |	ВЫБОР
		               |		КОГДА ВыдачаТранзитаПокупки.Ссылка.ОшибочныеЗаказы
		               |			ТОГДА 0
		               |		КОГДА &ЭтоКурьер
		               |			ТОГДА ВыдачаТранзитаПокупки.СтоимостьХранения
		               |		ИНАЧЕ ВыдачаТранзитаПокупки.СтоимостьИтого
		               |	КОНЕЦ КАК Сумма,
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Партия) = ТИП(Документ.ПоступлениеПристроя)
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Пристрой,
		               |	ВыдачаТранзитаПокупки.Партия КАК Партия
		               |ИЗ
		               |	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		               |ГДЕ
		               |	ВыдачаТранзитаПокупки.Ссылка = &Ссылка
		               |	И ВыдачаТранзитаПокупки.Подбор
		               |	И НЕ ВыдачаТранзитаПокупки.Ссылка.ПоОбмену"
		
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Обмен100СПрн(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "Обмен100СПрн";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ВыдачаТранзита") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	ВыдачаТранзитаПокупки.Ссылка.Дата КАК Период,
		|	1 КАК КоличествоНеОтправленых,
		|	ВыдачаТранзитаПокупки.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппа) КАК ТипОбмена
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|ГДЕ
		|	ВыдачаТранзитаПокупки.Ссылка = &Ссылка
		|	И ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Мегаордера)
		|	И НЕ ВыдачаТранзитаПокупки.Ссылка.ПоОбмену
		|СГРУППИРОВАТЬ ПО
		|	ВыдачаТранзитаПокупки.Ссылка,
		|	ВыдачаТранзитаПокупки.Ссылка.Дата,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
//		|ВЫБРАТЬ
//		|	ВыдачаТранзита.Ссылка.Дата КАК Период,
//		|	1 КАК КоличествоНеОтправленых,
//		|	ВыдачаТранзита.Ссылка КАК Партия,
//		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Транзит) КАК ТипОбмена
//		|ИЗ
//		|	Документ.ВыдачаТранзита КАК ВыдачаТранзита
//		|ГДЕ
//		|	ВыдачаТранзита.Ссылка = &Ссылка
//		|	И НЕ ВыдачаТранзита.ПоОбмену
//		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыдачаТранзитаПокупки.Ссылка.Дата,
		|	1,
		|	ВыдачаТранзитаПокупки.Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ТРанзит)
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|ГДЕ
		|	ВыдачаТранзитаПокупки.Ссылка = &Ссылка
		|	И НЕ ВыдачаТранзитаПокупки.Ссылка.ПоОбмену
		|	И ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Партия) <> ТИП(Документ.ЗаказыДляТранзита)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыдачаТранзитаПокупки.Ссылка.Дата,
		|	1,
		|	ВыдачаТранзитаПокупки.Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ЗаказыДляТранзита)
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|ГДЕ
		|	ВыдачаТранзитаПокупки.Ссылка = &Ссылка
		|	И НЕ ВыдачаТранзитаПокупки.Ссылка.ПоОбмену
		|	И ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Партия) = ТИП(Документ.ЗаказыДляТранзита)";
		
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_ОборотнаяТараДвижение(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ОборотнаяТараДвижение";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ВыдачаТранзита") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	&Период КАК Период,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		               |	ОборотнаяТараДвижениеОстатки.Тара КАК Тара,
		               |	ОборотнаяТараДвижениеОстатки.ПунктВыдачи КАК ПунктВыдачи,
		               |	0 КАК ВПути,
		               |	ОборотнаяТараДвижениеОстатки.НаСкладеОстаток КАК НаСкладе,
		               |	ОборотнаяТараДвижениеОстатки.Партия КАК Партия
		               |ИЗ
		               |	РегистрНакопления.ОборотнаяТараДвижение.Остатки(
		               |			&НачалоДокумента,
		               |			(Тара, ПунктВыдачи) В
		               |				(ВЫБРАТЬ
		               |					ВыдачаТранзитаОборотнаяТара.Тара КАК Тара,
		               |					ВыдачаТранзитаОборотнаяТара.ПунктВыдачи КАК ПунктВыдачи
		               |				ИЗ
		               |					Документ.ВыдачаТранзита.ОборотнаяТара КАК ВыдачаТранзитаОборотнаяТара
		               |				ГДЕ
		               |					ВыдачаТранзитаОборотнаяТара.Ссылка = &Ссылка)) КАК ОборотнаяТараДвижениеОстатки
		               |ГДЕ
		               |	ОборотнаяТараДвижениеОстатки.НаСкладеОстаток > 0
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	табОборотнаяТара.Ссылка.Дата,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		               |	табОборотнаяТара.Тара,
		               |	табОборотнаяТара.ПунктВыдачи,
		               |	1,
		               |	0,
		               |	&Ссылка
		               |ИЗ
		               |	Документ.ВыдачаТранзита.ОборотнаяТара КАК табОборотнаяТара
		               |ГДЕ
		               |	табОборотнаяТара.Ссылка = &Ссылка";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции



#КонецОбласти




#Область СлужебныеПроцедурыИФункции

// Получить код заказа.
// 
// Параметры:
//  Покупка - СправочникСсылка.Покупки
//  Участник  - СправочникСсылка.Участники
// 
// Возвращаемое значение:
//  Строка - Получить код заказа
Функция ПолучитьКодЗаказа(Покупка,Участник)
	Если ЗначениеЗаполнено(Покупка.secureCode) Тогда
		Хеш=новый ХешированиеДанных(ХешФункция.CRC32);
		Хеш.Добавить(СтрЗаменить(Строка(Покупка.Код)+"_"+Строка(Участник.Код)+"_"+Покупка.secureCode," ",""));
		Возврат Лев(СтрЗаменить(Строка(Хеш.ХешСумма)," ",""),4);
	Иначе 
		Возврат "Нет кода!";
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ВыдачаТранзита КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	        
	Запрос.УстановитьПараметр("НачалоДокумента",               ?(ЗначениеЗаполнено(ДокументСсылка.Дата), новый Граница(ДокументСсылка.Дата,ВидГраницы.Исключая), ТекущаяДата()));
	Запрос.УстановитьПараметр("Период",                        Реквизиты.Период);
	Запрос.УстановитьПараметр("Номер",                         Реквизиты.Номер);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("Комментарий",                   Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",               Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                      Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ЭтоКурьер",                     (ДокументСсылка.ТочкаНазначения = Справочники.ТочкиРаздачи.НайтиПоКоду("100")));
КонецПроцедуры

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ВыдачаТранзита";
КонецФункции

#КонецОбласти



