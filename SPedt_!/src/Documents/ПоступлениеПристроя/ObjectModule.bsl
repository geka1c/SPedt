
Процедура ОбработкаПроведения(Отказ, Режим)
	#Область ПравильноеПроведение
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, Режим);
	Документы.ПоступлениеПристроя.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
//	СтоСПОбмен_Общий.ОтразитьСтоСПОбмен_РН(ДополнительныеСвойства, Движения, Отказ);
	
	СтоСПОбмен_Общий.ОтразитьСтоСПОбмен_РН_Ошибки(ДополнительныеСвойства, Движения, Отказ);	
	СП_ДвиженияСервер.ОтразитьНеВыгруженноНаСайт(ДополнительныеСвойства, Движения, Отказ);	
	
	СП_ДвиженияСервер.ОтразитьОстаткиТоваров(ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьПриход(ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьТранзит(ДополнительныеСвойства, Движения, Отказ);
	

	#КонецОбласти
	//УстановитьПараметрыМегаордера();	
КонецПроцедуры


Процедура ОбработкаУдаленияПроведения(Отказ)
//	УстановитьПараметрыМегаордера(Ложь);
КонецПроцедуры

Процедура ЗаполнитьЗагруженными(ПолученоСсайта, МестоХранения, Габарит) Экспорт
	ТранзитныйПВ 	= Константы.ПВТранзита.Получить();
	ТранзитныйПВ 	=?(ЗначениеЗаполнено(ТранзитныйПВ),ТранзитныйПВ,СвояТочка);
	стоймостьПриема = Константы.ТарифПристроя.Получить();

	
	Для каждого элем из ПолученоСсайта.Пристрой Цикл
		Если Заказы.НайтиСтроки(новый Структура("Пристрой",Элем.Значение)).Количество()>0 Тогда продолжить; КонецЕсли;
		стр_заказ = Заказы.Добавить();
		стр_заказ.Пристрой = Элем.Значение;
		стр_заказ.Сумма	   = стоймостьПриема;
		стр_заказ.ПВТранзита = ?(стр_заказ.Пристрой.ТочкаНазначения = СвояТочка,СвояТочка, ТранзитныйПВ);
		Если ПечатаемСтикер Тогда
			стр_заказ.МестоХранения = МестоХранения;
			стр_заказ.Габарит		= Габарит;
		КонецЕсли;
	КонецЦикла;	
	
	Для каждого элем из ПолученоСсайта.Заявки Цикл
		Если ЗаявкиНаДоставку.НайтиСтроки(новый Структура("Заявка",Элем.Значение)).Количество()>0 Тогда продолжить; КонецЕсли;
		стр_заказ = ЗаявкиНаДоставку.Добавить();
		стр_заказ.Заявка = Элем.Значение;
		стр_заказ.Сумма	   = стоймостьПриема;
		стр_заказ.ПВТранзита = ?(стр_заказ.Заявка.ТочкаНазначения = СвояТочка,СвояТочка, ТранзитныйПВ);
		Если ПечатаемСтикер Тогда
			стр_заказ.МестоХранения = МестоХранения;
			стр_заказ.Габарит		= Габарит;
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры

Процедура ЗаполнитьНеПринятыми() Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТранзитныйПВ 	= Константы.ПВТранзита.Получить();
	ТранзитныйПВ 	=?(ЗначениеЗаполнено(ТранзитныйПВ),ТранзитныйПВ,СвояТочка);
	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пристрой.Ссылка КАК Пристрой,
		|	&стоймостьПриема Как Сумма,
		|	Выбор когда Пристрой.Ссылка.ТочкаНазначения = &СвойПВ Тогда  &СвойПВ Иначе &ПВТранзита КОнец как ПВТранзита
		|ИЗ
		|	Справочник.Пристрой КАК Пристрой
		|ГДЕ
		|	НЕ Пристрой.ПометкаУдаления
		|	И Пристрой.ПоступлениеПристроя = ЗНАЧЕНИЕ(Документ.ПоступлениеПристроя.ПустаяСсылка)
		|	И Пристрой.УчастникОтправитель = &УчастникОтправитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаДоставку.Ссылка КАК Заявка,
		|	&стоймостьПриема Как Сумма,
		|	Выбор когда ЗаявкаНаДоставку.Ссылка.ТочкаНазначения = &СвойПВ Тогда  &СвойПВ Иначе &ПВТранзита КОнец как ПВТранзита
		|ИЗ
		|	Справочник.ЗаявкаНаДоставку КАК ЗаявкаНаДоставку
		|ГДЕ
		|	НЕ ЗаявкаНаДоставку.ПометкаУдаления
		|	И ЗаявкаНаДоставку.ПоступлениеПристроя = ЗНАЧЕНИЕ(Документ.ПоступлениеПристроя.ПустаяСсылка)
		|	И ЗаявкаНаДоставку.УчастникОтправитель = &УчастникОтправитель";
	
	Запрос.УстановитьПараметр("УчастникОтправитель", 	Участник);
	Запрос.УстановитьПараметр("СвойПВ", 				СвояТочка);
	Запрос.УстановитьПараметр("ПВТранзита", 			ТранзитныйПВ);
	Запрос.УстановитьПараметр("стоймостьПриема", 		Константы.ТарифПристроя.Получить());
	
	МассивРезультатов	= Запрос.ВыполнитьПакет();
 	Выборка 			= МассивРезультатов[0].Выбрать();

	Пока Выборка.Следующий() Цикл
		Если Заказы.НайтиСтроки(новый Структура("Пристрой",Выборка.Пристрой)).Количество()>0 Тогда продолжить; КонецЕсли;
		стр_заказ = Заказы.Добавить();
		ЗаполнитьЗначенияСвойств(стр_заказ,Выборка);
	КонецЦикла;
	
	Выборка 			= МассивРезультатов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗаявкиНаДоставку.НайтиСтроки(новый Структура("Заявка",Выборка.Заявка)).Количество()>0 Тогда продолжить; КонецЕсли;
		стр_заказ = ЗаявкиНаДоставку.Добавить();
		ЗаполнитьЗначенияСвойств(стр_заказ,Выборка);
	КонецЦикла;
	
	
КонецПроцедуры	



#Область Обмен

Функция   	ВыгрузитьНаСайт() Экспорт
	
	СтрокаПротокола				= новый Структура ("ДатаНачала, ДатаОкончания,Результат, ПолученныеДанные");
	СтрокаПротокола.ДатаНачала	= ТекущаяДата();
	
	хмл_отправили	= СкомпоноватьДляВыгрузки();
	стр_Ответа 		= СтоСПОбмен_Выгрузка100сп.Выгрузить(хмл_отправили);
	
	СтрокаПротокола.ДатаОкончания	= ТекущаяДата();
	СтрокаПротокола.ПолученныеДанные= стр_Ответа.Получили;
	
	Если не стр_Ответа.Свойство("Разбор") Тогда
		СтрокаПротокола.Результат=Ложь;
	Иначе	
		СтрокаПротокола.Результат = стр_Ответа.Разбор.авторизацияВыполнена;
	КонецЕсли;
	СтоСПОбмен_Выгрузка100сп.СохранитьПротоколОбмена(СтрокаПротокола,Ссылка);
	Если не СтрокаПротокола.Результат Тогда Возврат Ложь; Конецесли;
	
	
	Если не стр_Ответа.Разбор.авторизацияВыполнена Тогда 
		Возврат ложь; 
	Иначе
		Отправлено = Истина;
	КонецЕсли;
	
	Статус	= Перечисления.СтатусОтпавкиНаСайт.Отправлен;
	тз		= Неопределено;
	Если стр_Ответа.Разбор.Свойство("incomes",тз) Тогда
		incomes_ОтразитьРезультатВыгрузки(тз);
		Записать();
	КонецЕсли;	
	Возврат Истина;
КонецФункции

Функция 	СкомпоноватьДляВыгрузки() Экспорт
		
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd","http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьАтрибут("apiVersion","10");
	///////
	ЗаписьXML.ЗаписатьНачалоЭлемента("incomes");	
	хмл_income			= Документы.ПоступлениеПристроя.ПолучитьТэг_Income(Ссылка);
	ЗаписьXML.ЗаписатьБезОбработки(хмл_income);

	ЗаписьXML.ЗаписатьКонецЭлемента();           //incomes
	//////
	ЗаписьXML.ЗаписатьКонецЭлемента();           //distributors
	Возврат ЗаписьXML.Закрыть();
КонецФункции	

Процедура 	incomes_ОтразитьРезультатВыгрузки(тз) 
		
	
	Запрос=новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ТЗ.arrivalNumber КАК arrivalNumber,
	|	ТЗ.firstIncomeCode КАК firstIncomeCode,
	|	ТЗ.userName КАК userName,
	|	ТЗ.message КАК message,
	|	ТЗ.newStickerId КАК newStickerId,
	|	ТЗ.stickerId КАК stickerId,
	|	ТЗ.receiverUid КАК receiverUid,
	|	ТЗ.packageId КАК packageId,
	|	ТЗ.destinationDistributorCode КАК destinationDistributorCode,
	|	ТЗ.orderId КАК orderId,
	|	ТЗ.groupCode КАК groupCode,
	|	ТЗ.orderType КАК orderType,
	|	ТЗ.pid КАК pid,
	|	ТЗ.secureCode КАК secureCode,
	|	ТЗ.result КАК result,
	|	ТЗ.date КАК date,
	|	ТЗ.uid КАК uid
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеПристрояЗаказы.Пристрой КАК Пристрой,
	|	""bulletin"" КАК orderType,
	|	ПоступлениеПристрояЗаказы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ СписокПристроя
	|ИЗ
	|	Документ.ПоступлениеПристроя.Заказы КАК ПоступлениеПристрояЗаказы
	|ГДЕ
	|	ПоступлениеПристрояЗаказы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеПристрояЗаявкиНаДоставку.Заявка,
	|	""external"",
	|	ПоступлениеПристрояЗаявкиНаДоставку.НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеПристроя.ЗаявкиНаДоставку КАК ПоступлениеПристрояЗаявкиНаДоставку
	|ГДЕ
	|	ПоступлениеПристрояЗаявкиНаДоставку.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.firstIncomeCode КАК firstIncomeCode,
	|	ВТ.message КАК message,
	|	ВТ.receiverUid КАК receiverUid,
	|	ВТ.userName КАК userName,
	|	ВТ.newStickerId КАК newStickerId,
	|	ВТ.packageId КАК packageId,
	|	ВТ.orderId КАК orderId,
	|	ВТ.secureCode КАК secureCode,
	|	ВТ.destinationDistributorCode КАК destinationDistributorCode,
	|	ВТ.result КАК result,
	|	ВТ.date КАК date,
	|	СписокПристроя.Пристрой КАК Пристрой
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокПристроя КАК СписокПристроя
	|		ПО ((ВЫРАЗИТЬ(ВТ.orderId КАК СТРОКА(10))) = СписокПристроя.Пристрой.Код)
	|			И  ВЫРАЗИТЬ(ВТ.orderType КАК СТРОКА(10)) = ВЫРАЗИТЬ(СписокПристроя.orderType КАК СТРОКА(10))";
	Запрос.Параметры.Вставить("ТЗ",ТЗ);
	Запрос.Параметры.Вставить("Ссылка",Ссылка);
	Результат=Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	
	//Отражаем результат обмена
	Если тз<>неопределено Тогда  
		Для каждого стр из Заказы Цикл
			ОбработкаЗаявкиПристрояПослеОбмена(Стр, ТЗ,"Пристрой") 	
		КонецЦикла;
		Для каждого стр из ЗаявкиНаДоставку Цикл
			ОбработкаЗаявкиПристрояПослеОбмена(Стр, ТЗ,"Заявка")
		КонецЦикла;
	КонецЕсли;		
КонецПроцедуры

Процедура ОбработкаЗаявкиПристрояПослеОбмена(Стр, ТЗ,ТипЗаказа) 
			мас_НайденоВОтвете=ТЗ.НайтиСтроки(Новый Структура("Пристрой",стр[ТипЗаказа]));
			
			Если мас_НайденоВОтвете.Количество()>0 тогда
				стр_ответа=мас_НайденоВОтвете[0];
				Если стр_ответа.result="ok" или стр_ответа.result="ap" Тогда
					стр.Отправлено					= Истина;
					стр.СообщениеОшибки				= "";
					
					Если ПечатаемСтикер Тогда
						Посылка = СП_РаботаСоСправочниками.ПолучитьПосылкуПо_Коду(стр_ответа.newStickerId)
					Иначе	
						Посылка = стр.ШК.Покупка;
					КонецЕсли;	
					СтоСПОбмен_Посылки.Загрузить_СоставПосылкиПоКодам(Посылка);
					
					ПараметрыПосылки = Новый Структура();
					ПараметрыПосылки.Вставить("Участник", 		СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(стр_ответа.receiverUid, новый Структура("Наименование",стр_ответа.userName)));
					ПараметрыПосылки.Вставить("ПунктВыдачи", 	СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(стр_ответа.destinationDistributorCode));
					ПараметрыПосылки.Вставить("ПерваяТочка", 	СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(стр_ответа.firstIncomeCode));
					ПараметрыПосылки.Вставить("secureCode", 	стр_ответа.secureCode);
					ПараметрыПосылки.Вставить("Покупка", 		Посылка);
					ПараметрыПосылки.Вставить("Посылка", 		Посылка);
					
					Если ПечатаемСтикер Тогда
						ШК = СП_Штрихкоды.ПолучитьМегаордер(Посылка,ПараметрыПосылки.Участник ,ПараметрыПосылки.ПунктВыдачи );
					Иначе	
						ШК 	= стр.ШК;
					КонецЕсли;	
					
					СП_РаботаСоСправочниками.ОбновитьМегаордер(шк,ПараметрыПосылки);
					ПараметрыПосылки.Вставить("ШК", 	ШК);
					
					СП_РаботаСоСправочниками.ОбновитьПосылку(Посылка,ПараметрыПосылки);
					
					
					обПристрой 						= стр[ТипЗаказа].ПолучитьОбъект();
					обПристрой.ШК					= ШК;
					обПристрой.ПоступлениеПристроя	= ?(Проведен,Ссылка,Документы.ПоступлениеПристроя.ПустаяСсылка());;
					Попытка
						обПристрой.Записать();
					Исключение
					КонецПопытки;
					стр.ШК = ШК;
				Иначе	
					ТекстОшибки = "Не удалось привязать стикер к пристрою." + Символы.ПС + 
										стр_ответа.message;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;	
				стр.СообщениеОшибки	= стр_ответа.message;
			Иначе	
				стр.СообщениеОшибки	= "Не найдено в ответе";
			КонецЕсли;	
	
	
	
КонецПроцедуры

Процедура 	ОтвязатьПристройОтПосылки(Пристрой) Экспорт
	Если  СтоСПОбмен_Пристрой.Выгрузить_ОтвязатьПристройОтПосылки(Пристрой, Ссылка) Тогда
		
		Отправлено = Ложь;
		Если ЗначениеЗаполнено(Пристрой.ШК) Тогда
			обМегаордер				= Пристрой.ШК.ПолучитьОбъект();
			обМегаордер.Участник	= Справочники.Участники.ПустаяСсылка();
			обМегаордер.ПунктВыдачи	= Справочники.ТочкиРаздачи.ПустаяСсылка();
			Попытка
				обМегаордер.Записать();
			Исключение
			КонецПопытки;
			
			обПристрой 						= Пристрой.ПолучитьОбъект();
			обПристрой.ШК					= Справочники.Мегаордера.ПустаяСсылка();
			обПристрой.ПоступлениеПристроя	= Документы.ПоступлениеПристроя.ПустаяСсылка();
			Попытка
				обПристрой.Записать();
			Исключение
			КонецПопытки;
			
		КОнецЕсли;
		
		масс_Строк = Заказы.НайтиСтроки(Новый Структура("Пристрой",Пристрой));	
		Для каждого стр из масс_Строк Цикл
			стр.Отправлено 		= Ложь;
			стр.ШК				= Справочники.Мегаордера.ПустаяСсылка();
			стр.СообщениеОшибки = "";
		КонецЦикла;
		масс_Строк = ЗаявкиНаДоставку.НайтиСтроки(Новый Структура("Заявка",Пристрой));	
		Для каждого стр из масс_Строк Цикл
			стр.Отправлено 		= Ложь;
			стр.ШК				= Справочники.Мегаордера.ПустаяСсылка();
			стр.СообщениеОшибки = "";
		КонецЦикла;

	КонецЕсли;	
КонецПроцедуры		

#КонецОбласти






Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	проверяемШК=Заказы.ВыгрузитьКолонку("ШК");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Обмен100спСообщения.Мегаордер КАК Мегаордер,
		|	Обмен100спСообщения.Партия КАК Партия
		|ИЗ
		|	РегистрСведений.Обмен100спСообщения КАК Обмен100спСообщения
		|ГДЕ
		|	Обмен100спСообщения.Мегаордер В(&проверяемШК)
		|	И Обмен100спСообщения.Партия <> &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("проверяемШК", проверяемШК);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекстСообщения="Стикер: "+ВыборкаДетальныеЗаписи.Мегаордер+"Уже оприходован документом: "+ВыборкаДетальныеЗаписи.Партия;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЦикла;
КонецПроцедуры




#Область ГруппыДоставки



Процедура УстановитьПараметрыМегаордера(Проведение=Истина)
	Для каждого стр из Заказы Цикл
		обМегаордер				= стр.ШК.ПолучитьОбъект();
		обМегаордер.Участник	= стр.Пристрой.Участник;
		обМегаордер.ПунктВыдачи	= стр.Пристрой.ТочкаНазначения;
		Попытка
			обМегаордер.Записать();
		Исключение
		КонецПопытки;
		
		обПристрой 						= стр.Пристрой.ПолучитьОбъект();
		обПристрой.ШК					= стр.ШК;
		обПристрой.ПоступлениеПристроя	= ?(Проведение,Ссылка,Документы.ПоступлениеПристроя.ПустаяСсылка());;
		Попытка
			обПристрой.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;	
	Для каждого стр из ЗаявкиНаДоставку Цикл
		обМегаордер				= стр.ШК.ПолучитьОбъект();
		обМегаордер.Участник	= стр.Заявка.Участник;
		обМегаордер.ПунктВыдачи	= стр.Заявка.ТочкаНазначения;
		Попытка
			обМегаордер.Записать();
		Исключение
		КонецПопытки;
		
		обПристрой 						= стр.Заявка.ПолучитьОбъект();
		обПристрой.ШК					= стр.ШК;
		обПристрой.ПоступлениеПристроя	= ?(Проведение,Ссылка,Документы.ПоступлениеПристроя.ПустаяСсылка());;
		Попытка
			обПристрой.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;		
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Для каждого стр из ЗаявкиНаДоставку Цикл

			обПристрой 						= стр.Заявка.ПолучитьОбъект();
			обПристрой.ПоступлениеПристроя	= ?(РежимЗаписи = РежимЗаписиДокумента.Проведение и стр.Отправлено,Ссылка,Документы.ПоступлениеПристроя.ПустаяСсылка());;
			Попытка
				обПристрой.Записать();
			Исключение
			КонецПопытки;
	КонецЦикла;
	Для каждого стр из Заказы Цикл
		
			обПристрой 						= стр.Пристрой.ПолучитьОбъект();
			обПристрой.ПоступлениеПристроя	= ?(РежимЗаписи = РежимЗаписиДокумента.Проведение и стр.Отправлено,Ссылка,Документы.ПоступлениеПристроя.ПустаяСсылка());;
			Попытка
				обПристрой.Записать();
			Исключение
			КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти


#Область Обмен100СП


#КонецОбласти
