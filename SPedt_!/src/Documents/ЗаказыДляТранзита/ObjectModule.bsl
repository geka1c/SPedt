
Процедура ОбработкаПроведения(Отказ, Режим) 
	Движения.НеВыгруженноНаСайт.Записывать = Истина;  
	Движения.Приход.Записывать = Истина;
	Движения.ВзаиморасчетыСОрганизаторами.Записывать = Истина;
	Движения.Транзит.Записывать = Истина; 
	Движения.ДанныеЗаказов.Записывать = Истина;

	ГабаритПередачи = константы.ТарифПередачиЗаказовНаТранзит.Получить();
	ТранзитныйПункт = Константы.ПунктВыдачиТранзита.Получить();     
	СтоимостьЗаказа = константы.СтоимостьПередачиЗаказовНаТранзит.Получить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказыДляТранзитаСписокЗаказов.Посылка КАК Посылка,
		|	ЗаказыДляТранзитаСписокЗаказов.МестоХранения КАК МестоХранения,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыДляТранзитаСписокЗаказов.Посылка) КАК Количество,
		|	ЗаказыДляТранзитаСписокЗаказов.ДатаПриема КАК ДатаПриема
		|ИЗ
		|	Документ.ЗаказыДляТранзита.СписокЗаказов КАК ЗаказыДляТранзитаСписокЗаказов
		|ГДЕ
		|	ЗаказыДляТранзитаСписокЗаказов.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыДляТранзитаСписокЗаказов.МестоХранения,
		|	ЗаказыДляТранзитаСписокЗаказов.Посылка,
		|	ЗаказыДляТранзитаСписокЗаказов.ДатаПриема
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказыДляТранзитаСписокКоробок.Коробка,
		|	ЗаказыДляТранзитаСписокКоробок.МестоХранения,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыДляТранзитаСписокКоробок.Коробка),
		|	ЗаказыДляТранзитаСписокКоробок.ДатаПриема
		|ИЗ
		|	Документ.ЗаказыДляТранзита.СписокКоробок КАК ЗаказыДляТранзитаСписокКоробок
		|ГДЕ
		|	ЗаказыДляТранзитаСписокКоробок.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыДляТранзитаСписокКоробок.МестоХранения,
		|	ЗаказыДляТранзитаСписокКоробок.Коробка,
		|	ЗаказыДляТранзитаСписокКоробок.ДатаПриема";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		//Движение = Движения.Транзит.Добавить();
		//Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		//Движение.Период = Дата;
		//Движение.ПокупкаСсылка = Выборка.Посылка;
		//Движение.МестоХранения = Выборка.МестоХранения;
		//Движение.Габарит = ГабаритПередачи;
		//Движение.Точка = ТранзитныйПункт;
		//Движение.Партия = Ссылка;
		//Движение.Количество = Выборка.Количество;
		Движение = Движения.НеВыгруженноНаСайт.Добавить();
		Движение.Период = Дата;
		Движение.Заказ = Выборка.Посылка;
		Движение.Партия = ссылка;
		Движение.ПунктВыдачи =  ТранзитныйПункт;
		Движение.МестоХранения = выборка.МестоХранения;
		Движение.Количество = 1;
		
		
		
		Движение = Движения.Приход.Добавить();
		Движение.Период = Дата;
		Движение.Габарит = ГабаритПередачи;
		Движение.МестоХранения = Выборка.МестоХранения;
		Движение.Организатор = Организатор;
		Движение.Покупка = Выборка.Посылка;
		Движение.Коробка = Справочники.Коробки.БезКоробки;
		Движение.ТипПрихода = Перечисления.ТипыПриходов.НаТранзитОтОрганизатора;
		Движение.ОтдельнымМестом = Ложь;
		Движение.ПунктВыдачи = ТранзитныйПункт;
		Движение.Количество = 1;
		Движение.Сумма = СтоимостьЗаказа;


		Движение = Движения.ДанныеЗаказов.Добавить();
		Движение.Партия = Ссылка;
		Движение.Заказ = Выборка.Посылка;
		Движение.Габарит = ГабаритПередачи;
		Движение.Количество = 1;
		Движение.ОтдельнымМестом = Ложь;
		Движение.ДатаПриема = Выборка.ДатаПриема;
		Движение.Коробка = 1;
		Движение.НеОплачен = Ложь;
		Движение.МестоХранения = ВЫборка.МестоХранения;
		
		
		
	КонецЦикла;

		
		Движение = Движения.ВзаиморасчетыСОрганизаторами.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Организатор = Организатор;
		Движение.ДокументРасчетов = Ссылка;
		Движение.Сумма = СуммаПоДокументу;
		
		Если Оплачено >0 Тогда
			Движение = Движения.ВзаиморасчетыСОрганизаторами.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Организатор = Организатор;
			Движение.ДокументРасчетов = Ссылка;
			Движение.Сумма = Оплачено;
	    КонецЕсли;

	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр ДанныеЗаказов
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры


Процедура ПосчитатьСумму() Экспорт
	ВсегоЗаказов =  СписокЗаказов.Количество() +СписокКоробок.Количество();
	стоимость = Константы.СтоимостьПередачиЗаказовНаТранзит.Получить();
	СуммаПоДокументу = ВсегоЗаказов * стоимость;
	СуммаПоДокументу = ?(СуммаПоДокументу < 50, 50,СуммаПоДокументу);
КонецПроцедуры	


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ПосчитатьСумму();
КонецПроцедуры
	