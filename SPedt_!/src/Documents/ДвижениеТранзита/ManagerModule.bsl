

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
    КомандаПечати 					= КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 	= "Документ.ДвижениеТранзита";
    КомандаПечати.Идентификатор 	= "ПеремещениеЗаказов";
	КомандаПечати.Картинка 			= БиблиотекаКартинок.Печать;
    КомандаПечати.Представление 	= НСтр("ru = 'Перемещение заказов (чек)'");
	
	
КонецПроцедуры


// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  – Массив    – ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати – Структура – дополнительные настройки печати;
//  КоллекцияПечатныхФорм – ТаблицаЗначений – сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         – СписокЗначений  – значение – ссылка на объект;
//                                            представление – имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       – Структура       – дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	#Если Сервер Тогда 
	ИмяМакета = "ПеремещениеЗаказов";	
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета);
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        ИмяМакета,          
        НСтр("ru = 'Перемещение заказов (чек)'"),
        Печать_ЧекПеремещениеЗаказов(МассивОбъектов, ОбъектыПечати),
        ,
        "Документ.ДвижениеТранзита.ПФ_MXL_ЧекПеремещениеЗаказов");
	КонецЕсли;
#КонецЕсли 	
КонецПроцедуры



Функция Печать_ЧекПеремещениеЗаказов(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент				= Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб	= Истина;
	ТабличныйДокумент.ПолеСлева		= 0;
	ТабличныйДокумент.ПолеСправа	= 0;	 
	
	Макет 	= Документы.ДвижениеТранзита.ПолучитьМакет("ПФ_MXL_ЧекПеремещениеЗаказов");
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупки 			= Макет.ПолучитьОбласть("Покупки");
	ОбластьШтрихКод			= Макет.ПолучитьОбласть("ШтрихКод"); 
	ОбластьШтрихКодСтрока	= Макет.ПолучитьОбласть("ШтрихКодСтрока"); 
	
	Запрос 	= Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДвижениеТранзита.Дата,
	|	ДвижениеТранзита.Номер,
	|	ДвижениеТранзита.ПокупкиТранзит.(
	|		Организатор КАК организатор,
	|		Участник,
	|		Покупка,
	|		Количество
	|	)
	|ИЗ
	|	Документ.ДвижениеТранзита КАК ДвижениеТранзита
	|ГДЕ
	|	ДвижениеТранзита.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДвижениеТранзита.ПокупкиТранзит.Организатор.Наименование";
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();

	ТабличныйДокумент.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ОбластьШапка.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапка, Выборка.Уровень());

		ВыборкаПокупки = Выборка.ПокупкиТранзит.Выбрать();
		Пока ВыборкаПокупки.Следующий() Цикл
			ОбластьПокупки.Параметры.Заполнить(ВыборкаПокупки);
			ТабличныйДокумент.Вывести(ОбластьПокупки, ВыборкаПокупки.Уровень());

			Если ТипЗнч(ВыборкаПокупки.ПОкупка) = Тип("СправочникСсылка.Посылки") Тогда
				ШтрихКод = ВыборкаПокупки.ПОкупка.ШК.Код;
				ПараметрыШтрихкода = Новый Структура;
				ПараметрыШтрихкода.Вставить("Ширина", 450);
				ПараметрыШтрихкода.Вставить("Высота", 120);
				ПараметрыШтрихкода.Вставить("Штрихкод", ШтрихКод);
				ПараметрыШтрихкода.Вставить("ТипКода", 4);
				ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
				ПараметрыШтрихкода.Вставить("РазмерШрифта", 10);
				ПараметрыШтрихкода.Вставить("УголПоворота", 0); //Одно из следующих значений: 0, 90, 180, 270.
				ПараметрыШтрихкода.Вставить("ПрозрачныйФон", Истина);
				ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0); //Одно из следующих значений: //0, 1, 2, 3. Соответствует: L, M, Q, H.
				РисунокШтрихкод = ОбластьШтрихКод.Рисунки.РисунокШтрихкод;
				РисунокШтрихкод.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				РисунокШтрихкод.РазмерКартинки = РазмерКартинки.Пропорционально; 
				РисунокШтрихкод.Расположить(ОбластьШтрихКод.Области.ШтрихКод);
				ТабличныйДокумент.Вывести(ОбластьШтрихКод, Выборка.Уровень());
				
				ОбластьШтрихКодСтрока.Параметры.ШтрихКодСтрока = ШтрихКод;
				ТабличныйДокумент.Вывести(ОбластьШтрихКодСтрока, Выборка.Уровень());
			КонецЕсли
			;
		КонецЦикла;
		
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	Возврат ТабличныйДокумент;
КонецФункции	




Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;

	//СтоСПОбмен_Общий.Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры);

	Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Транзит(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Возвраты(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_ОстаткиТоваров(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
	
КонецПроцедуры


Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.УстановитьПараметр("Период",                        ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("Номер",                         ДокументСсылка.Номер);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("Комментарий",                   ДокументСсылка.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",               ДокументСсылка.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                      ДокументСсылка.Проведен);
	
КонецПроцедуры



Функция Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Обмен100СПрн";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	Если     ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ДвижениеТранзита") 
		Тогда
		 ТекстЗапроса = "ВЫБРАТЬ
		                |	ДокументПоступления.Ссылка.Дата КАК Период,
		                |	1 КАК КоличествоНеОтправленых,
		                |	ДокументПоступления.Ссылка КАК Партия,
		                |	ВЫБОР
		                |		КОГДА ДокументПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОпераций_ДвижениеТранзита.Списание)
		                |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Списание)
						|		КОГДА ДокументПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОпераций_ДвижениеТранзита.ТранзитНаОстатки)
		                |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход)
		                |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Возврат)
		                |	КОНЕЦ КАК ТипОбмена
		                |ИЗ
		                |	Документ.ДвижениеТранзита КАК ДокументПоступления
		                |ГДЕ
		                |	ДокументПоступления.Ссылка = &Ссылка
		                |	И (ДокументПоступления.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОпераций_ДвижениеТранзита.ТранзитНаОстатки)
		                |			ИЛИ ДокументПоступления.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОпераций_ДвижениеТранзита.ТранзитНаВозврат)
						|			ИЛИ ДокументПоступления.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОпераций_ДвижениеТранзита.Списание))";
	 КонецЕсли;		
	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции


Функция Получить_ТекстЗапроса_Транзит(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Транзит";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	

		ТекстЗапроса = "ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Дата КАК Период,
		|	ТаблицаДокумента.Покупка КАК ПокупкаСсылка,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ТаблицаДокумента.МестоХранения КАК МестоХранения,
		|	ТаблицаДокумента.Габарит КАК Габарит,
		|	ТаблицаДокумента.Участник КАК Участник,
		|	ТаблицаДокумента.ПунктВыдачи КАК Точка,
		|	ТаблицаДокумента.Партия КАК Партия,
		|	ТаблицаДокумента.Количество КАК Количество
		|ИЗ
		|	Документ.ДвижениеТранзита.ПокупкиТранзит КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Дата КАК Период,
		|	ТаблицаДокумента.Покупка КАК ПокупкаСсылка,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВЫбор когда ТаблицаДокумента.МестоХраненияНазначение = Значение(Справочник.МестаХранения.ПустаяСсылка) Тогда ТаблицаДокумента.МестоХранения иначе ТаблицаДокумента.МестоХраненияНазначение Конец ,
		|	ВЫбор когда ТаблицаДокумента.ГабаритНазначение = Значение(Справочник.Габариты.ПустаяСсылка) Тогда ТаблицаДокумента.Габарит иначе ТаблицаДокумента.ГабаритНазначение Конец ,
		|	ТаблицаДокумента.Участник КАК Участник,
		|	ВЫбор когда ТаблицаДокумента.ПунктВыдачиНазначение = Значение(Справочник.ТочкиРаздачи.ПустаяСсылка) Тогда ТаблицаДокумента.ПунктВыдачи иначе ТаблицаДокумента.ПунктВыдачиНазначение Конец КАК Точка,
		|	ТаблицаДокумента.Партия КАК Партия,
		|	ТаблицаДокумента.Количество КАК Количество
		|ИЗ
		|	Документ.ДвижениеТранзита.ПокупкиТранзит КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	и ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОпераций_ДвижениеТранзита.ТранзитНаТранзит)";
	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Возвраты(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Возвраты";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	

		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Дата 			КАК Период,
		|	ТаблицаДокумента.Покупка 				КАК Покупка,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 	КАК ВидДвижения,
		|	ТаблицаДокумента.МестоХраненияНазначение	КАК МестоХранения,
		|	ТаблицаДокумента.Организатор			КАК Организатор,
		|	ТаблицаДокумента.Участник 				КАК Участник,
		|	ТаблицаДокумента.Партия 				КАК Партия,
		|	ТаблицаДокумента.Количество 			КАК Количество
		|ИЗ
		|	Документ.ДвижениеТранзита.ПокупкиТранзит КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка и
		| 	ТаблицаДокумента.Ссылка.ВидОперации = Значение(Перечисление.ВидыОпераций_ДвижениеТранзита.ТранзитНаВозврат)
		|
		|";
	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_ОстаткиТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ОстаткиТоваров";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	

		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Дата 			КАК Период,
		|	ТаблицаДокумента.Покупка 				КАК Покупка,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 	КАК ВидДвижения,
		|	ТаблицаДокумента.МестоХраненияНазначение 			КАК МестоХранения,
		|	ТаблицаДокумента.ГабаритНазначение				КАК Габарит,
		|	Истина									КАК Оплачен,
		|	ТаблицаДокумента.Участник 				КАК Участник,
		|	ТаблицаДокумента.Партия 				КАК Партия,
		|	ТаблицаДокумента.Количество 			КАК Количество
		|ИЗ
		|	Документ.ДвижениеТранзита.ПокупкиТранзит КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка и
		| 	ТаблицаДокумента.Ссылка.ВидОперации = Значение(Перечисление.ВидыОпераций_ДвижениеТранзита.ТранзитНаОстатки)
		|
		|";
	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции


Функция ПолучитьТэг_Income(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Истина 										КАК Оплачен,
		|	ПриходнаяПокупки.Ссылка.Дата 				КАК ДатаПриема,
		|	ПриходнаяПокупки.МестоХраненияНазначение 	КАК МестоХранения,
		|	ПриходнаяПокупки.ГабаритНазначение			КАК Габарит,
		|	Ложь										КАК Транзит,
		|	ПриходнаяПокупки.Ссылка.Дата 				КАК Дата,
		|	ПриходнаяПокупки.Покупка.ШК 				КАК ШК,
		|	Ложь										КАК ОтдельнымМестом,
		|	Ложь 										КАК ОргСбор,
		|	ПриходнаяПокупки.Ссылка.Номер 				КАК Номер
		|ИЗ
		|	Документ.ДвижениеТранзита.ПокупкиТранзит КАК ПриходнаяПокупки
		|ГДЕ
		|	ПриходнаяПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И ПриходнаяПокупки.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("income");
		СтоСП.Вставить_Тэг(ЗаписьXML,"paid"	,				?(Выборка.Оплачен,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				?(ЗначениеЗаполнено(Выборка.ДатаПриема),Выборка.ДатаПриема,Выборка.Дата));
		СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.ШК.Участник.Код),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(Выборка.ШК.Организатор.Код),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"sizedCategoryName",     Выборка.МестоХранения.Наименование);
		СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber",         Прав(Выборка.Номер,(СтрДлина(Выборка.Номер)-3)));
		СтоСП.Вставить_Тэг(ЗаписьXML,"sizedCategoryNumber",   СтоСП.ПолучитьПредставлениеГабарита(Выборка.Габарит));
		СтоСП.Вставить_Тэг(ЗаписьXML,"transit",               ?(Выборка.Транзит,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"isBig",                 ?(Выборка.Габарит.НеГабарит,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"isFree",                ?(Выборка.ОтдельнымМестом,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"DistributorFee",        ?(Выборка.ОргСбор,1,0));
		СтоСПОбмен_Общий.ЗаполнитьТэгиЗаказаПо_ШК(Выборка.ШК,ЗаписьXML);	
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
КонецФункции


Функция ПолучитьТэг_return(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Заказы.Ссылка.Дата КАК Дата,
		|	Заказы.Покупка КАК Покупка,
		|	Заказы.Участник КАК Участник,
		|	"""" как  КодыТоваров,
		|	Заказы.Покупка.ШК КАК ШК
		|ИЗ
		|	Документ.ДвижениеТранзита.ПокупкиТранзит КАК Заказы
		|ГДЕ
		|	Заказы.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И Заказы.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		
		ШК= Выборка.ШК;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("return");
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				Выборка.Дата);
		Если ТипЗнч(Выборка.Покупка) = Тип("СправочникСсылка.Посылки") Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"packageId",           Формат(Выборка.Покупка.Код,"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.Участник.Код),"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",           "package");
			СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(?(ЗначениеЗаполнено(Выборка.Покупка.Организатор),Выборка.Покупка.Организатор.Код,0)),"ЧГ=0"));
		ИначеЕсли ТипЗнч(Выборка.Покупка) = Тип("СправочникСсылка.Коробки") Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"groupCode",           Формат(Выборка.Покупка.Код,"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",           "group");
			СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(?(ЗначениеЗаполнено(Выборка.Покупка.Организатор),Выборка.Покупка.Организатор.Код,0)),"ЧГ=0"));
		КонецЕсли;		
		Если Выборка.КодыТоваров <> "" Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML, "ordersIds", Выборка.КодыТоваров);
		КонецЕсли;	
			
			
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
КонецФункции


Функция ПолучитьТэг_discard(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвижениеПокупки.Ссылка.Дата КАК Дата,
		|	ДвижениеПокупки.Ссылка.Номер КАК Номер,
		|	ДвижениеПокупки.Покупка КАК Покупка,
		|	ДвижениеПокупки.Участник КАК Участник,
		|	ДвижениеПокупки.Покупка.ШК КАК ШК
		|ИЗ
		|	Документ.ДвижениеТранзита.ПокупкиТранзит КАК ДвижениеПокупки
		|ГДЕ                                                              
		|	ДвижениеПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И ДвижениеПокупки.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		//Если ТипЗнч(Выборка.ШК.Покупка)=Тип("СправочникСсылка.Посылки") и Выборка.ШК.Покупка.Состав.Количество()=0 Тогда Продолжить; КонецЕсли;
//		Если ТипЗнч(Выборка.ШК.Покупка)=Тип("СправочникСсылка.Посылки") Тогда
//			ШК = Выборка.ШК.Покупка.Покупка.Состав[0].ШК;
//		Иначе
//			ШК= Выборка.ШК;
//		Конецесли;
		
		ШК= Выборка.ШК;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("discard");
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				Выборка.Дата);
		Если Выборка.ШК.типМегаордера = Перечисления.типМегаордера.Посылка Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"packageId",           Формат(Выборка.ШК.Посылка.Код,"ЧГ=0"));  
			СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",           "package");
		ИначеЕсли Выборка.ШК.типМегаордера = Перечисления.типМегаордера.Коробка Тогда	                 
			СтоСП.Вставить_Тэг(ЗаписьXML,"groupCode",           Формат(Число(Выборка.ШК.Покупка.Код),"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",         "group");
			СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(?(ЗначениеЗаполнено(ШК.Организатор),ШК.Организатор.Код,ШК.Покупка.Организатор.Код)),"ЧГ=0"));
	    КонецЕсли;
//			СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.Участник.Код),"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber",        Прав(Выборка.Номер,(СтрДлина(Выборка.Номер)-3)));
			СтоСП.Вставить_Тэг(ЗаписьXML, "innerId", 			Формат(Число(Прав(Выборка.Номер, (СтрДлина(Выборка.Номер)- 3))),"ЧГ=0"));
			
		//	СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(?(ЗначениеЗаполнено(ШК.Посылка.Организатор),ШК.Посылка.Организатор.Код,0)),"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"discardType"	,		"distributorDiscard");			
		//Иначе
		//	СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.ШК.Участник.Код),"ЧГ=0"));
		//	СтоСПОбмен_Общий.ЗаполнитьТэгиЗаказаПо_ШК(ШК,ЗаписьXML);		
			
		//КонецЕсли;		
			
			
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
КонецФункции


Функция ПолноеИмяОбъекта()
	Возврат "Документ.ДвижениеТранзита";
КонецФункции
