
&НаКлиенте
Процедура ИсторияДоставки(Команда)
//	ИсторияЗаказов	= ИсторияДоставкиНаСервере(Элементы.Покупки.ТекущиеДанные.ШК);
	ОткрытьФорму(	"Отчет.ИсторияЗаказов.Форма.ФормаОтчета",
					новый структура("мегаордер, СформироватьПриОткрытии",Элементы.Покупки.ТекущиеДанные.Покупка, истина),
					ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
	
КонецПроцедуры


Функция ЗаполнитьВозвраты(Посылка = Неопределено) 
	КоличествоДобавлено = 0;
	Если Объект.Проведен Тогда
		Сообщить("Нельзя заполнить проведенный документ!!!");	
	Иначе	
		Объект.Покупки.Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратыОстаткиИОбороты.Организатор,
		|	ВозвратыОстаткиИОбороты.Участник,
		|	ВозвратыОстаткиИОбороты.Покупка,
		|	ВозвратыОстаткиИОбороты.МестоХранения,
		|	ВозвратыОстаткиИОбороты.Партия,
		|	СУММА(ВозвратыОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
		|ПОМЕСТИТЬ Перед
		|ИЗ
		|	РегистрНакопления.Возвраты.ОстаткиИОбороты(, &НаДату, Авто, ДвиженияИГраницыПериода, ) КАК ВозвратыОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратыОстаткиИОбороты.Организатор,
		|	ВозвратыОстаткиИОбороты.Партия,
		|	ВозвратыОстаткиИОбороты.Участник,
		|	ВозвратыОстаткиИОбороты.Покупка,
		|	ВозвратыОстаткиИОбороты.МестоХранения
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВозвратыОстаткиИОбороты.КоличествоКонечныйОстаток) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Перед.Организатор КАК Организатор,
		|	Перед.Участник,
		|	Перед.Покупка,
		|	Перед.МестоХранения,
		|	Перед.Партия КАК Партия,
		|	РАЗНОСТЬДАТ(ЕСТЬNULL(Перед.Партия.Дата, ДАТАВРЕМЯ(1, 1, 1)), &НаДату, ДЕНЬ) КАК ДниХранения,
		|	Перед.КоличествоКонечныйОстаток КАК Количество
		|ИЗ
		|	Перед КАК Перед "+
		?(Посылка = Неопределено, "","
		|ГДЕ
		|	Перед.Покупка = &Посылка")+"
		
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организатор,
		|	Партия";
		
		
		
		Запрос.Параметры.Вставить("НаДату",КонецДня(ТекущаяДата()));
		Запрос.Параметры.Вставить("ДнейХранения",Объект.ДниХранения);
		Запрос.Параметры.Вставить("Посылка",Посылка);
		Результат = Запрос.Выполнить();
		тз=Результат.Выгрузить();
		КоличествоДобавлено = тз.Количество();
		Если Посылка = Неопределено Тогда
			Объект.Покупки.Загрузить(тз);
		Иначе	
			Для Каждого элем из тз Цикл
				строкаПокупок = Объект.Покупки.Добавить();
				ЗаполнитьЗначенияСвойств(строкаПокупок,элем);
			КонецЦикла;	
		КонецЕсли	
	КонецЕсли;
	Возврат КоличествоДобавлено;
КонецФункции 


&НаКлиенте
Процедура Заполнить(Команда)
	
	тз=	ЗаполнитьВозвраты();

КонецПроцедуры


&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ДниХранения.Видимость=Объект.Списать;	
	Элементы.ТочкаРаздачи.Видимость= не Объект.Списать;	

КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
Процедура ДниХраненияПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура СписатьПриИзменении(Элемент)
	УстановитьВидимость()

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтбору(Команда)
	фрм=ПолучитьФорму("Документ.ПеремещениеВозврата.Форма.ФормаОтбора",новый Структура("имяСхемы","СКДОтборВозвраты"),ЭтаФорма);
	фрм.Открыть();
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	КомпоновщикНастроек	= ВыбранноеЗначение.КомпоновщикНастроек;
	Схема				= ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСхемы);
	
	настройки						= КомпоновщикНастроек.Настройки;
	параметрПериод					= настройки.ПараметрыДанных.НайтиЗначениеПараметра(новый ПараметрКомпоновкиДанных("НаДату"));
	параметрПериод.Значение			= КонецДня(Объект.Дата);
	параметрПериод.Использование	= Истина;
	
	КомпановщикМакета				= Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет							= КомпановщикМакета.Выполнить(Схема,КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки				= новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорВывода					= новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ								= новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	Объект.Покупки.Загрузить(ТЗ);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

#Область ШтрихКоды

&НаКлиенте
Процедура ВвестиШтрихКодВручную(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаВводаШК",,ЭтотОбъект,,,,Новый ОписаниеОповещения("ВвестиШтрихКодВручную_Завершение", ЭтотОбъект));
КонецПроцедуры


&НаКлиенте
Процедура ВвестиШтрихКодВручную_Завершение(ШК, ДополнительныеПараметры) Экспорт
	ОбработатьШКнаКлиенте(ШК);
КонецПроцедуры	


&НаКлиенте
Процедура ОбработатьШКнаКлиенте(ШК)
	ДанныеШК    = СП_Штрихкоды.ПолучитьДанныеПоШК(ШК);

	Если Строка(ДанныеШК.Тип) = "Посылка (12)"  	//	или
		 //Строка(ДанныеШК.Тип) = "Покупка (11)" 			или 
		 //Строка(ДанныеШК.Тип) = "Заказ100маркета (33)"	или
		 //Строка(ДанныеШК.Тип) = "Заказ КД (45)"	или
		 //Строка(ДанныеШК.Тип) = "Коробка (44)"					
		 Тогда	
		ПсылкаДобавлена = ДобавитьПосылку(ДанныеШК);
		Если ПсылкаДобавлена Тогда
			СтоСП_Клиент.СигналДинамика();
		КонецЕсли;

	иначе	
		
	КонецЕсли;
	Модифицированность			= Истина;
	УстановитьВидимость();
КонецПроцедуры	

Функция ДобавитьПосылку(ПараметрыПосылки)
	
	КоличествоДобавлено = ЗаполнитьВозвраты(ПараметрыПосылки.Посылка); 
	Возврат (КоличествоДобавлено>0);
КонецФункции


#КонецОбласти


#Область Обмен

&НаСервере
Функция  ПросмотрXMLНаСервере()
	
	об=ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.ПеремещениеВозврата"));
	Возврат СтоСПОбмен_Посылки_returnsTransfers.СкомпоноватьДляВыгрузки(об);
КонецФункции

&НаКлиенте
Процедура ПросмотрXML(Команда)
	Если Модифицированность Тогда
		Записать(новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
	КонецЕсли;
	хмл_incomes=ПросмотрXMLНаСервере();
	СтоСП_Клиент.Показать_XML(хмл_incomes);
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрПолученногоXML(Команда)
	хмл_incomes = Элементы.Протокол.ТекущиеДанные.ПолученныеДанные;
	СтоСП_Клиент.Показать_XML(хмл_incomes);
КонецПроцедуры




&НаСервере
Процедура ОтправитьНаСервере()
	об	=	ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.ПеремещениеВозврата"));
	об.ВыгрузитьНаСайт();
	ЗначениеВДанныеФормы(об,Объект);
КонецПроцедуры


&НаКлиенте
Процедура Отправить(Команда)
	Если Модифицированность Тогда
		Записать(новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
	КонецЕсли;	
	ОтправитьНаСервере();
	ГруппаСтраницыПриСменеСтраницыНаСервере();
КонецПроцедуры


#КонецОбласти


#Область СобытияФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СП_РаботаСДокументами.ПриСозданииНаСервере(ЭтотОбъект);	
	Если не ЗначениеЗаполнено(Объект.ТочкаРаздачи) Тогда
		Объект.ТочкаРаздачи = Константы.ПунктВыдачиДляВозвратов.Получить();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ГруппаСтраницыПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ГруппаСтраницыПриСменеСтраницыНаСервере()
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаПротокол Тогда
		парамДок				= Протокол.Параметры.Элементы.Найти("Документ");
		парамДок.Значение		= Объект.Ссылка;
		парамДок.Использование	= Истина;
	Конецесли;	
КонецПроцедуры


// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
