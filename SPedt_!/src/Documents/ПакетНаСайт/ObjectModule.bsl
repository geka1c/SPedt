
Процедура ОбработкаПроведения(Отказ, Режим)
	ДвиженияСпОбмен(Отказ, Режим);
	
	Движения.ОбменССайтом.Записывать = Истина;
	Для Каждого ТекСтрока Из Очередь Цикл
		Движение = Движения.ОбменССайтом.Добавить();
		Движение.Объект = ТекСтрока.Объект;
		Движение.Статус = Статус;
	КонецЦикла;
	Для Каждого ТекСтрока Из Приходные Цикл
		Движение = Движения.ОбменССайтом.Добавить();
		Движение.Объект = ТекСтрока.Объект;
		Движение.Статус = Статус;
	КонецЦикла;
	Для Каждого ТекСтрока Из РазборКоробок Цикл
		Движение = Движения.ОбменССайтом.Добавить();
		Движение.Объект = ТекСтрока.Объект;
		Движение.Статус = Статус;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из Возвраты Цикл
		Движение = Движения.ОбменССайтом.Добавить();
		Движение.Объект = ТекСтрока.Объект;
		Движение.Статус = Статус;
	КонецЦикла;
	Для Каждого ТекСтрока Из Расходные Цикл
		Движение = Движения.ОбменССайтом.Добавить();
		Движение.Объект = ТекСтрока.Объект;
		Движение.Статус = Статус;
	КонецЦикла;
	Для Каждого ТекСтрока Из Карты Цикл
		Движение = Движения.ОбменССайтом.Добавить();
		Движение.Объект = ТекСтрока.Объект;
		Движение.Статус = Статус;
	КонецЦикла;
	Для Каждого ТекСтрока Из Транзиты Цикл
		Движение = Движения.ОбменССайтом.Добавить();
		Движение.Объект = ТекСтрока.Объект;
		Движение.Статус = ?(Статус = Перечисления.СтатусОтпавкиНаСайт.Отправлен и 
							ТекСтрока.Статус = Перечисления.СтатусОтпавкиНаСайт.Отправлен,
							Перечисления.СтатусОтпавкиНаСайт.Отправлен,
							Перечисления.СтатусОтпавкиНаСайт.Подготовка);
	КонецЦикла;
	Для Каждого ТекСтрока Из ФормированиеКоробок Цикл
		Движение = Движения.ОбменССайтом.Добавить();
		Движение.Объект = ТекСтрока.Объект;
		Движение.Статус = Статус;
	КонецЦикла;

	Для Каждого ТекСтрока Из ОтчетОДоставке Цикл
		Движение = Движения.ОбменССайтом.Добавить();
		Движение.Объект = ТекСтрока.Объект;
		Движение.Статус = Статус;
	КонецЦикла;


	
КонецПроцедуры

Процедура ДвиженияСпОбмен(Отказ, Режим)
	Если статус<>Перечисления.СтатусОтпавкиНаСайт.Отправлен Тогда
		Возврат;
	Конецесли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПакетНаСайтДетально.Мегаордер КАК Мегаордер,
		|	ПакетНаСайтДетально.Партия КАК Партия,
		|	ПакетНаСайтДетально.ТипОбмена КАК ТипОбмена,
		|	ВЫБОР
		|		КОГДА ПакетНаСайтДетально.Отправлено
		|				И (ПакетНаСайтДетально.РезультатОбмена = ""ok""
		|					ИЛИ ПакетНаСайтДетально.РезультатОбмена = ""ap"")
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Отправлен)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Ошибка)
		|	КОНЕЦ КАК Статус,
		|	ВЫБОР
		|		КОГДА ПакетНаСайтДетально.Отправлено
		|				И ПакетНаСайтДетально.РезультатОбмена = ""error""
		|			ТОГДА ПакетНаСайтДетально.Ответ
		|		КОГДА НЕ ПакетНаСайтДетально.Отправлено
		|			ТОГДА ""Не найдено в ответе""
		|	КОНЕЦ КАК Ответ,
		|	&Период КАК Период
		|ИЗ
		|	Документ.ПакетНаСайт.Детально КАК ПакетНаСайтДетально
		|ГДЕ
		|	ПакетНаСайтДетально.Ссылка = &Ссылка
		|	И НЕ ПакетНаСайтДетально.Ответ ПОДОБНО ""Не удалось обновить заказ""
		|	И НЕ ПакетНаСайтДетально.ДвижениеУстарело";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", Дата);

	РезультатЗапроса = Запрос.Выполнить();
	


	//
	//
	//
	//таблицаДвижений=Детально.Выгрузить(новый Структура("Отправлено",Истина),"Мегаордер,Партия,ТипОбмена,Ответ");
	//таблицаДвижений.Колонки.Добавить("Период");
	//таблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	//таблицаДвижений.Колонки.Добавить("Статус");

	//таблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусОтпавкиНаСайт.Отправлен,"Статус");

	//таблицаДвиженийОшибка=Детально.Выгрузить(новый Структура("Отправлено",Ложь),"Мегаордер,Партия,ТипОбмена,Ответ");
	//таблицаДвиженийОшибка.Колонки.Добавить("Период");
	//таблицаДвиженийОшибка.ЗаполнитьЗначения(Дата,"Период");
	//таблицаДвиженийОшибка.Колонки.Добавить("Статус");
	//таблицаДвиженийОшибка.ЗаполнитьЗначения(Перечисления.СтатусОтпавкиНаСайт.Ошибка,"Статус");
	//Для Каждого стр из таблицаДвиженийОшибка Цикл
	//	новаястрока = таблицаДвижений.Добавить();
	//	ЗаполнитьЗначенияСвойств(новаястрока,стр);
	//	новаястрока.Сообщение=стр.Ответ;
	//КонецЦикла;
	Движения.Обмен100сп.Записывать = Истина;
	Движения.Обмен100сп.Загрузить(РезультатЗапроса.Выгрузить());
	Для каждого стр из Детально Цикл
		Если стр.ДвижениеУстарело Тогда Продолжить; КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ПерваяТочка) и стр.Мегаордер.ПерваяТочка<>Стр.ПерваяТочка Тогда
			об=стр.Мегаордер.ПолучитьОбъект();
			об.ПерваяТочка=Стр.ПерваяТочка;
			Попытка
			   об.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры




////////////////Обмен данными

//Заполнение таблиц

#Область ЗаполняемНеОтправленное
Функция ПолучитьЗапросПоОбъекту(Объект,ДопУсловие=Неопределено)
	ЗначениеСортировки="";	
	Если Найти(Объект,"Справочник")>0 Тогда
		ЗначениеСортировки="Код";
	ИначеЕсли Найти(Объект,"Документ")>0 Тогда
		ЗначениеСортировки="Номер";
	КонецЕсли;
	Возврат "ВЫБРАТЬ ПЕРВЫЕ 200
	|	ОбъектВыгрузки.Ссылка КАК объект,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбменССайтом.Объект), 0) КАК количество
	|ИЗ
	|	"+Объект+" КАК ОбъектВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбменССайтом КАК ОбменССайтом
	|		ПО (ОбменССайтом.Объект = ОбъектВыгрузки.Ссылка)
	|  
	|СГРУППИРОВАТЬ ПО
	|	ОбъектВыгрузки.Ссылка
	| 
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбменССайтом.Объект), 0) = 0 "+?(ДопУсловие=Неопределено,"",ДопУсловие)+" "+?(ЗначениеСортировки="Документ","ОбъектВыгрузки.Проведен "," ")+
	?(ЗначениеСортировки="","","
	|
	|УПОРЯДОЧИТЬ ПО                              
	|	ОбъектВыгрузки."+ЗначениеСортировки);
КонецФункции		

Функция ПолучитьЗапросПоДетальномуОбмену()
Возврат "ВЫБРАТЬ
        |	Обмен100спСрезПоследних.Статус КАК Статус,
        |	Обмен100спСрезПоследних.Мегаордер КАК Мегаордер,
        |	Обмен100спСрезПоследних.Партия КАК Партия,
        |	Обмен100спСрезПоследних.типОбмена КАК типОбмена
        |ПОМЕСТИТЬ Пред
        |ИЗ
        |	РегистрСведений.Обмен100сп.СрезПоследних(, ) КАК Обмен100спСрезПоследних
        |ГДЕ
        |	Обмен100спСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован)
        |
        |ИНДЕКСИРОВАТЬ ПО
        |	Статус
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	Пред.Мегаордер КАК Мегаордер,
        |	Пред.Партия КАК Партия,
        |	Пред.типОбмена КАК типОбмена,
        |	Обмен100спСообщенияСрезПоследних.Сообщение КАК Сообщение
        |ИЗ
        |	Пред КАК Пред
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Обмен100спСообщения.СрезПоследних КАК Обмен100спСообщенияСрезПоследних
        |		ПО Пред.Мегаордер = Обмен100спСообщенияСрезПоследних.Мегаордер
        |			И Пред.Партия = Обмен100спСообщенияСрезПоследних.Партия
        |			И Пред.типОбмена = Обмен100спСообщенияСрезПоследних.типОбмена";
КонецФункции

Функция ПолучитьДатуПоследнегоУспешногоОбмена()
	
	
	
КонецФункции


Функция  ЗаполнитьТаблицы() Экспорт
	
	//Если Константы.ИспоьзоватьДетальныйОбмен.Получить() Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = ПолучитьЗапросПоДетальномуОбмену();
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Детально.Очистить();
	//	Детально.Загрузить(РезультатЗапроса.Выгрузить());
	//	
	//	
	//Иначе
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = ПолучитьЗапросПоОбъекту("Документ.Приходная");
		//РезультатЗапроса = Запрос.Выполнить();
		//Приходные.Очистить();
		//Приходные.Загрузить(РезультатЗапроса.Выгрузить());
		//
		//Запрос = Новый Запрос;
		//Запрос.Текст = ПолучитьЗапросПоОбъекту("Документ.РазборКоробки");
		//РезультатЗапроса = Запрос.Выполнить();
		//РазборКоробок.Очистить();
		//РазборКоробок.Загрузить(РезультатЗапроса.Выгрузить());		
		//
		//Запрос = Новый Запрос;
		//Запрос.Текст = ПолучитьЗапросПоОбъекту("Документ.ФормированиеКоробки"," и ОбъектВыгрузки.Статус = Значение(Перечисление.СтатусОтпавкиНаСайт.Отправлен) ");
		//РезультатЗапроса = Запрос.Выполнить();
		//ФормированиеКоробок.Очистить();
		//ФормированиеКоробок.Загрузить(РезультатЗапроса.Выгрузить());
		
		
	//КонецЕсли;	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьЗапросПоОбъекту("Документ.ПоступлениеКоробокДляРазбора");
	РезультатЗапроса = Запрос.Выполнить();
	Очередь.Очистить();
	Очередь.Загрузить(РезультатЗапроса.Выгрузить());
	


	//Запрос = Новый Запрос;
	//Запрос.Текст = ПолучитьЗапросПоОбъекту("Документ.ВозвратПокупокОрганизатору");
	//РезультатЗапроса = Запрос.Выполнить();
	//Возвраты.Очистить();
	//Возвраты.Загрузить(РезультатЗапроса.Выгрузить());

	//Запрос = Новый Запрос;
	//Запрос.Текст = ПолучитьЗапросПоОбъекту("Документ.Расходная");
	//РезультатЗапроса = Запрос.Выполнить();
	//Расходные.Очистить();
	//Расходные.Загрузить(РезультатЗапроса.Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьЗапросПоОбъекту("Документ.ОтчетОДоставке");
	РезультатЗапроса = Запрос.Выполнить();
	ОтчетОДоставке.Очистить();
	ОтчетОДоставке.Загрузить(РезультатЗапроса.Выгрузить());
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьЗапросПоОбъекту("Справочник.КартыУчастников"," и ОбъектВыгрузки.Статус = Значение(Перечисление.СтатусКартыУчастника.НеЗарегистрирована)  и ОбъектВыгрузки.Владелец <> Значение(Справочник.Участники.Нулевой)");
	РезультатЗапроса = Запрос.Выполнить();
	Карты.Очистить();
	Карты.Загрузить(РезультатЗапроса.Выгрузить());
	
	

	//Запрос = Новый Запрос;
	//Запрос.Текст = ПолучитьЗапросПоОбъекту("Документ.ОтправлениеТранзита"," и ОбъектВыгрузки.НомерЗаказа <> """" ");
	//РезультатЗапроса = Запрос.Выполнить();
	//ОтправлениеТранзита.Очистить();
	//ОтправлениеТранзита.Загрузить(РезультатЗапроса.Выгрузить());
	
	
//	Запрос = Новый Запрос;
//	Запрос.Текст = ПолучитьЗапросПоОбъекту("Документ.ВыдачаТранзита"," и не ОбъектВыгрузки.ПоОбмену" );
//	РезультатЗапроса = Запрос.Выполнить();
//	тзТранзиты=новый ТаблицаЗначений;
//	тзТранзиты=РезультатЗапроса.Выгрузить();
//	тзТранзиты.Колонки.Добавить("Статус",новый ОписаниеТипов("ПеречислениеСсылка.СтатусОтпавкиНаСайт"));
//	тзТранзиты.ЗаполнитьЗначения(Перечисления.СтатусОтпавкиНаСайт.Сформирован,"Статус");
//	Транзиты.Очистить();
//	Транзиты.Загрузить(тзТранзиты);
	Возврат ФормированиеКоробок.Количество()+Приходные.Количество()+Возвраты.Количество()+Расходные.Количество()+Карты.Количество()+Транзиты.Количество()+РазборКоробок.Количество()+Очередь.Количество()+Детально.Количество()+ОтчетОДоставке.Количество();

	
КонецФункции


#КонецОбласти


#Область ПодготовкаТаблицДляСериализацииВXML
					   

Функция РазобратьПоступлениеКоробокДляРазбора()  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеКоробокДляРазбора.Коробка.Код КАК code,
		|	ПоступлениеКоробокДляРазбора.Ссылка.Номер КАК docNumber,
		|	ПоступлениеКоробокДляРазбора.Ссылка.Дата КАК date
		|ИЗ
		|	Документ.ПоступлениеКоробокДляРазбора.Коробки КАК ПоступлениеКоробокДляРазбора
		|ГДЕ
		|	ПоступлениеКоробокДляРазбора.Ссылка В(&Очередь)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеКоробокДляРазбора.Коробка.Код,
		|	ПоступлениеКоробокДляРазбора.Ссылка.Номер,
		|	ПоступлениеКоробокДляРазбора.Ссылка.Дата";

//	ДатаБ=НачалоДня(Константы.ПоследняяВыгрузка.Получить());
	ДатаЕ=КонецДня(ТекущаяДата());

	Запрос.УстановитьПараметр("Очередь", Очередь.Выгрузить(,"Объект"));
	Результат = Запрос.Выполнить();

	тз=Результат.Выгрузить();
	ТЗ.Колонки.code.Имя  ="codeint";
	ТЗ.Колонки.docNumber.Имя="docNumberint";
	ТЗ.Колонки.Добавить("code", Новый ОписаниеТипов("Строка")); 
	ТЗ.Колонки.Добавить("docNumber", Новый ОписаниеТипов("Строка"));	

	Для каждого стр из тз Цикл
		стр.code	= ?(стр.codeint =null,"",  Формат(Число(стр.codeint),"ЧГ=0"));
		стр.docNumber	= Формат(стр.docNumberint,"ЧГ=0");
	КонецЦикла;	
	тз.Колонки.Удалить("codeint");
	тз.Колонки.Удалить("docNumberint");

    Возврат тз;
	

КонецФункции

					   
					   
Функция РазобратьПриходные()  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(ЧИСЛО)
		|			ТОГДА ВЫРАЗИТЬ(ПриходнаяПокупки.Покупка КАК ЧИСЛО)
		|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(Справочник.Покупки)
		|			ТОГДА ВЫРАЗИТЬ(ПриходнаяПокупки.Покупка.Код КАК ЧИСЛО)
		|	КОНЕЦ КАК pid,
		|	ВЫБОР
		|		КОГДА ПриходнаяПокупки.Оплачен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК paid,
		|	ВЫБОР
		|		КОГДА ПриходнаяПокупки.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ПриходнаяПокупки.Ссылка.Дата
		|		ИНАЧЕ ПриходнаяПокупки.ДатаПриема
		|	КОНЕЦ КАК date,
		|	ПриходнаяПокупки.Участник.Код КАК uid,
		|	ПриходнаяПокупки.Организатор.Код КАК orgid,
		|	ПриходнаяПокупки.Габарит.Наименование КАК sizedCategoryName,
		|	ПриходнаяПокупки.Ссылка.Номер КАК arrivalNumber,
		|	ПриходнаяПокупки.Габарит.Код КАК sizedCategoryNumber,
		|	ВЫБОР
		|		КОГДА ПриходнаяПокупки.Ссылка.Транзит
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК transit,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ПриходнаяПокупки.Покупка.Код
		|	КОНЕЦ КАК groupCode,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(Справочник.Заказы)
		|			ТОГДА ПриходнаяПокупки.Покупка.Код
		|	КОНЕЦ КАК orderId,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(ЧИСЛО)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(Справочник.Покупки)
		|			ТОГДА ""sp""
		|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(Справочник.Заказы)
		|			ТОГДА ""shop""
		|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ""group""
		|	КОНЕЦ КАК orderType,
		|	ВЫБОР
		|		КОГДА ПриходнаяПокупки.Габарит.НеГабарит
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК isBig,
		|	ПриходнаяПокупки.Ссылка КАК Документ,
		|	ПриходнаяПокупки.Покупка КАК Покупка,
		|	ПриходнаяПокупки.ОтдельнымМестом,
		|	ВЫБОР
		|		КОГДА ПриходнаяПокупки.ОргСбор
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК DistributorFee
		|ПОМЕСТИТЬ Пред
		|ИЗ
		|	Документ.Приходная.Покупки КАК ПриходнаяПокупки
		|ГДЕ
		|	ПриходнаяПокупки.Ссылка В(&Приходные)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ФК.Покупка) = ТИП(Справочник.Покупки)
		|			ТОГДА ВЫРАЗИТЬ(ФК.Покупка.Код КАК ЧИСЛО)
		|	КОНЕЦ,
		|	1,
		|	ФК.Ссылка.Дата,
		|	ФК.Участник.Код,
		|	ФК.Ссылка.Коробка.Организатор.Код,
		|	""ФК"",
		|	ФК.Ссылка.Номер,
		|	0,
		|	1,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ФК.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ФК.Покупка.Код
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ФК.Покупка) = ТИП(Справочник.Заказы)
		|			ТОГДА ФК.Покупка.Код
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ФК.Покупка) = ТИП(ЧИСЛО)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ФК.Покупка) = ТИП(Справочник.Покупки)
		|			ТОГДА ""sp""
		|		КОГДА ТИПЗНАЧЕНИЯ(ФК.Покупка) = ТИП(Справочник.Заказы)
		|			ТОГДА ""shop""
		|		КОГДА ТИПЗНАЧЕНИЯ(ФК.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ""group""
		|	КОНЕЦ,
		|	0,
		|	ФК.Ссылка,
		|	ФК.Покупка,
		|	ЛОЖЬ,
		|	ВЫБОР
		|		КОГДА ФК.ОргСбор
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	Документ.ФормированиеКоробки.НовыеПокупки КАК ФК
		|ГДЕ
		|	ФК.Ссылка В(&ФК)
		|	И &ОприходоватьКоробкуПослеФормирования
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РазборКоробкиПокупки.Покупка) = ТИП(Справочник.Покупки)
		|			ТОГДА ВЫРАЗИТЬ(РазборКоробкиПокупки.Покупка.Код КАК ЧИСЛО)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РазборКоробкиПокупки.Оплачен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	РазборКоробкиПокупки.Ссылка.Дата,
		|	РазборКоробкиПокупки.Участник.Код,
		|	РазборКоробкиПокупки.Ссылка.Организатор.Код,
		|	РазборКоробкиПокупки.Габарит.Наименование,
		|	РазборКоробкиПокупки.Ссылка.Номер,
		|	РазборКоробкиПокупки.Габарит.Код,
		|	ВЫБОР
		|		КОГДА РазборКоробкиПокупки.Коробка.КРазбору
		|				И РазборКоробкиПокупки.Ссылка.СвояТочка <> РазборКоробкиПокупки.ПунктВыдачи
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РазборКоробкиПокупки.Коробка <> ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки)
		|			ТОГДА РазборКоробкиПокупки.Коробка.Код
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РазборКоробкиПокупки.Покупка) = ТИП(Справочник.Заказы)
		|			ТОГДА РазборКоробкиПокупки.Покупка.Код
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РазборКоробкиПокупки.Покупка) = ТИП(Справочник.Покупки)
		|			ТОГДА ""sp""
		|		КОГДА ТИПЗНАЧЕНИЯ(РазборКоробкиПокупки.Покупка) = ТИП(Справочник.Заказы)
		|			ТОГДА ""shop""
		|		КОГДА ТИПЗНАЧЕНИЯ(РазборКоробкиПокупки.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ""group""
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РазборКоробкиПокупки.Габарит.НеГабарит
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	РазборКоробкиПокупки.Ссылка,
		|	РазборКоробкиПокупки.Покупка,
		|	РазборКоробкиПокупки.ОтдельнымМестом,
		|	0
		|ИЗ
		|	Документ.РазборКоробки.Покупки КАК РазборКоробкиПокупки
		|ГДЕ
		|	РазборКоробкиПокупки.Ссылка В(&РазборКоробок)
		|	И (НЕ РазборКоробкиПокупки.ПунктВыдачи.КРазбору
		|			ИЛИ РазборКоробкиПокупки.ПунктВыдачи.КРазбору
		|				И РазборКоробкиПокупки.Коробка.КРазбору)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	1,
		|	РазборКоробкиКоробки.Ссылка.Дата,
		|	0,
		|	РазборКоробкиКоробки.Коробка.Организатор.Код,
		|	NULL,
		|	РазборКоробкиКоробки.Ссылка.Номер,
		|	NULL,
		|	ВЫБОР
		|		КОГДА РазборКоробкиКоробки.Коробка.КРазбору
		|				И РазборКоробкиКоробки.Ссылка.СвояТочка <> РазборКоробкиКоробки.Коробка.ТочкаНазначения
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	РазборКоробкиКоробки.Коробка.Код,
		|	NULL,
		|	""group"",
		|	ЛОЖЬ,
		|	РазборКоробкиКоробки.Ссылка,
		|	РазборКоробкиКоробки.Коробка,
		|	ЛОЖЬ,
		|	0
		|ИЗ
		|	Документ.РазборКоробки.Коробки КАК РазборКоробкиКоробки
		|ГДЕ
		|	РазборКоробкиКоробки.Ссылка В(&РазборКоробок)
		|	И РазборКоробкиКоробки.Коробка.ТочкаНазначения.КРазбору
		|	И НЕ РазборКоробкиКоробки.Коробка.КРазбору
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пред.pid,
		|	Пред.paid,
		|	Пред.date,
		|	Пред.uid,
		|	Пред.orgid,
		|	Пред.sizedCategoryName,
		|	ПОДСТРОКА(Пред.arrivalNumber, 4, 9) КАК arrivalNumber,
		|	Пред.sizedCategoryNumber,
		|	Пред.transit,
		|	Пред.groupCode,
		|	Пред.orderId,
		|	Пред.orderType,
		|	Пред.isBig,
		|	ВЫБОР
		|		КОГДА Пред.ОтдельнымМестом
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК isFree,
		|	Пред.DistributorFee
		|ИЗ
		|	Пред КАК Пред";

//	ДатаБ=НачалоДня(Константы.ПоследняяВыгрузка.Получить());
	ДатаЕ=КонецДня(ТекущаяДата());

	Запрос.УстановитьПараметр("ФК", ФормированиеКоробок.Выгрузить(,"Объект"));
	Запрос.УстановитьПараметр("Приходные", Приходные.Выгрузить(,"Объект"));
	Запрос.УстановитьПараметр("РазборКоробок", РазборКоробок.Выгрузить(,"Объект"));   
	Запрос.УстановитьПараметр("ОприходоватьКоробкуПослеФормирования",не Константы.НеСтавитьНаТранзитСформированнуюКоробку.Получить());   

	Результат = Запрос.Выполнить();

	тз=Результат.Выгрузить();
	ТЗ.Колонки.pid.Имя  ="pidint";
	ТЗ.Колонки.orderId.Имя  ="orderIdint";
	ТЗ.Колонки.groupCode.Имя  ="groupCodeint";
	ТЗ.Колонки.paid.Имя ="paidint";
	ТЗ.Колонки.uid.Имя  ="uidint";
	ТЗ.Колонки.orgid.Имя="orgidint";
	ТЗ.Колонки.arrivalNumber.Имя="arrivalNumberint";
	ТЗ.Колонки.Добавить("pid", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("orderId", Новый ОписаниеТипов("Строка")); 
	ТЗ.Колонки.Добавить("groupCode", Новый ОписаниеТипов("Строка")); 
	ТЗ.Колонки.Добавить("paid", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("uid", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("orgid", Новый ОписаниеТипов("Строка")); 
	ТЗ.Колонки.Добавить("arrivalNumber", Новый ОписаниеТипов("Строка"));
	
	Для каждого стр из тз Цикл
		стр.sizedCategoryNumber= Формат(?(стр.sizedCategoryNumber = Null,0, стр.sizedCategoryNumber),"ЧГ=0");
		
		стр.pid		= Формат(стр.pidint,"ЧГ=0");
		стр.orderId	= ?(стр.orderIdint =null,"",  Формат(Число(стр.orderIdint),"ЧГ=0"));
		стр.groupCode	= ?(стр.groupCodeint =null,"",  Формат(Число(стр.groupCodeint),"ЧГ=0"));


		стр.paid	= Формат(стр.paidint,"ЧГ=0");
		стр.uid		= Формат(стр.uidint,"ЧГ=0");
		стр.orgid	= Формат(стр.orgidint,"ЧГ=0");
		стр.arrivalNumber	= Формат(стр.arrivalNumberint,"ЧГ=0");
	КонецЦикла;	
	тз.Колонки.Удалить("pidint");
	тз.Колонки.Удалить("orderIdint");
	тз.Колонки.Удалить("groupCodeint");

	тз.Колонки.Удалить("paidint");
	тз.Колонки.Удалить("uidint");
	тз.Колонки.Удалить("orgidint");
	тз.Колонки.Удалить("arrivalNumberint");
	
    Возврат тз;
	

КонецФункции


Функция РазобратьВозвраты()  
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Возвраты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыВозвратов.ОтУчастников)
		|			ТОГДА Возвраты.Участник.Код
		|		ИНАЧЕ Возвраты.Ссылка.Участник.Код
		|	КОНЕЦ КАК uid,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Возвраты.Покупка) = ТИП(Справочник.Покупки)
		|			ТОГДА Возвраты.Покупка.Код
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК pid,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Возвраты.Покупка) = ТИП(Справочник.Заказы)
		|			ТОГДА Возвраты.Покупка.Код
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК orderId,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Возвраты.Покупка) = ТИП(Справочник.Заказы)
		|			ТОГДА 0
		|		ИНАЧЕ Возвраты.Покупка.Владелец.Код
		|	КОНЕЦ КАК orgid,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Возвраты.Покупка) = ТИП(ЧИСЛО)
		|				ИЛИ ТИПЗНАЧЕНИЯ(Возвраты.Покупка) = ТИП(Справочник.Покупки)
		|			ТОГДА ""sp""
		|		КОГДА ТИПЗНАЧЕНИЯ(Возвраты.Покупка) = ТИП(Справочник.Заказы)
		|			ТОГДА ""shop""
		|		КОГДА ТИПЗНАЧЕНИЯ(Возвраты.Покупка) = ТИП(Справочник.Пристрой)
		|			ТОГДА ""bulletin""
		|	КОНЕЦ КАК orderType,
		|	Возвраты.Ссылка.Дата КАК date
		|ИЗ
		|	Документ.ВозвратПокупокОрганизатору.Покупки КАК Возвраты
		|ГДЕ
		|	Возвраты.Ссылка В(&Возвраты)";

//	НачалоПериода=НачалоДня(Константы.ПоследняяВыгрузка.Получить());
	КонецПериода=КонецДня(ТекущаяДата());

	Запрос.УстановитьПараметр("Возвраты", Возвраты.Выгрузить(,"Объект"));

	Результат = Запрос.Выполнить();
	тз=Результат.Выгрузить();
	ТЗ.Колонки.pid.Имя  ="pidint";
	ТЗ.Колонки.orderId.Имя  ="orderIdint";
	ТЗ.Колонки.uid.Имя  ="uidint";
	ТЗ.Колонки.orgid.Имя="orgidint";
	ТЗ.Колонки.Добавить("pid", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("orderId", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("uid", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("orgid", Новый ОписаниеТипов("Строка"));
	
	Для каждого стр из тз Цикл
		стр.pid		= Формат(стр.pidint,"ЧГ=0");
		стр.orderId	= Формат(Число(стр.orderIdint),"ЧГ=0");
		стр.uid		= Формат(стр.uidint,"ЧГ=0");
		стр.orgid	= Формат(стр.orgidint,"ЧГ=0");
	КонецЦикла;	
	тз.Колонки.Удалить("pidint");
	тз.Колонки.Удалить("orderIdint");
	тз.Колонки.Удалить("uidint");
	тз.Колонки.Удалить("orgidint");
	
    Возврат тз;
КонецФункции


Функция РазобратьРасходы()  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетОДоставкеЗаказы.Груз КАК Груз
	|ПОМЕСТИТЬ ДоставленныеГруппыДоставки
	|ИЗ
	|	Документ.ОтчетОДоставке.Заказы КАК ОтчетОДоставкеЗаказы
	|ГДЕ
	|	ОтчетОДоставкеЗаказы.Ссылка В(&ОтчетыОДоставке)
	|	И ОтчетОДоставкеЗаказы.Груз.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяПокупки.Ссылка.Участник.Код КАК uid,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяПокупки.Покупка) = ТИП(ЧИСЛО)
	|			ТОГДА РасходнаяПокупки.Покупка
	|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяПокупки.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА РасходнаяПокупки.Покупка.Код
	|	КОНЕЦ КАК pid,
	|	РасходнаяПокупки.Покупка.Владелец.Код КАК orgid,
	|	РасходнаяПокупки.СтоимостьХранения КАК paidSum,
	|	РасходнаяПокупки.Ссылка.Дата КАК date,
	|	ПОДСТРОКА(РасходнаяПокупки.Партия.Номер, 4, 9) КАК arrivalNumber,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяПокупки.Покупка) = ТИП(Справочник.Заказы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(РасходнаяПокупки.Покупка) = ТИП(Справочник.Пристрой)
	|			ТОГДА РасходнаяПокупки.Покупка.Код
	|	КОНЕЦ КАК orderId,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяПокупки.Покупка) = ТИП(ЧИСЛО)
	|				ИЛИ ТИПЗНАЧЕНИЯ(РасходнаяПокупки.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА ""sp""
	|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяПокупки.Покупка) = ТИП(Справочник.Заказы)
	|			ТОГДА ""shop""
	|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяПокупки.Покупка) = ТИП(Справочник.Пристрой)
	|			ТОГДА ""bulletin""
	|	КОНЕЦ КАК orderType
	|ИЗ
	|	Документ.Расходная.Покупки КАК РасходнаяПокупки
	|ГДЕ
	|	РасходнаяПокупки.Ссылка В(&Расходные)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КоробкиСостав.Участник.Код,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА КоробкиСостав.Покупка.Код
	|	КОНЕЦ,
	|	КоробкиСостав.Покупка.Организатор.Код,
	|	КоробкиСостав.Ссылка.СтоимостьДоставки,
	|	КоробкиСостав.Ссылка.ОтчетОДоставке.Дата,
	|	ПОДСТРОКА(КоробкиСостав.Ссылка.ОтчетОДоставке.Номер, 4, 9),
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Заказы)
	|			ТОГДА КоробкиСостав.Покупка.Код
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(ЧИСЛО)
	|				ИЛИ ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА ""sp""
	|		КОГДА ТИПЗНАЧЕНИЯ(КоробкиСостав.Покупка) = ТИП(Справочник.Заказы)
	|			ТОГДА ""shop""
	|	КОНЕЦ
	|ИЗ
	|	Справочник.Коробки.Состав КАК КоробкиСостав
	|ГДЕ
	|	КоробкиСостав.Ссылка В
	|			(ВЫБРАТЬ
	|				ДоставленныеГруппыДоставки.Груз КАК Ссылка
	|			ИЗ
	|				ДоставленныеГруппыДоставки КАК ДоставленныеГруппыДоставки)";


	Запрос.УстановитьПараметр("Расходные", Расходные.Выгрузить(,"Объект")); 
	Запрос.УстановитьПараметр("ОтчетыОДоставке", ОтчетОДоставке.Выгрузить(,"Объект")); 
	
	Результат = Запрос.Выполнить();
	тз=Результат.Выгрузить();
	ТЗ.Колонки.pid.Имя  ="pidint";
	ТЗ.Колонки.uid.Имя  ="uidint";
	ТЗ.Колонки.orgid.Имя="orgidint";
	ТЗ.Колонки.orderId.Имя="orderIdint";

	ТЗ.Колонки.Добавить("pid", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("uid", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("orgid", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("orderId", Новый ОписаниеТипов("Строка"));

	Для каждого стр из тз Цикл
		стр.pid		= Формат(стр.pidint,"ЧГ=0");
		стр.uid		= Формат(стр.uidint,"ЧГ=0");
		стр.orgid	= Формат(стр.orgidint,"ЧГ=0");
		стр.orderId	= ?(стр.orderIdint=null ,"",Формат(Число(стр.orderIdint),"ЧГ=0"));
	КонецЦикла;	
	тз.Колонки.Удалить("pidint");
	тз.Колонки.Удалить("uidint");
	тз.Колонки.Удалить("orgidint");
	тз.Колонки.Удалить("orderIdint");

	Возврат тз;

КонецФункции


Функция РазобратьТранзиты()  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаТранзитаПокупки.Партия КАК Партия
	|ПОМЕСТИТЬ втДокКурьерскойДоставки
	|ИЗ
	|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
	|ГДЕ
	|	ВыдачаТранзитаПокупки.Ссылка В (&Транзиты)
	|	И ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Партия) = ТИП(Документ.курьерскаяДоставка)
	|	И НЕ ВыдачаТранзитаПокупки.Партия.СвойКурьер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыдачаТранзитаПокупки.Покупка КАК Покупка,
	|	ВыдачаТранзитаПокупки.Ссылка КАК Ссылка,
	|	ВыдачаТранзитаПокупки.Участник КАК Участник,
	|	ВыдачаТранзитаПокупки.ТочкаНазначения КАК ТочкаНазначения,
	|	ВыдачаТранзитаПокупки.СтоимостьХранения КАК СтоимостьХранения,
	|	ВыдачаТранзитаПокупки.Партия КАК Партия
	|ПОМЕСТИТЬ ЗаказыТК
	|ИЗ
	|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
	|	И (ВыдачаТранзитаПокупки.Покупка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ЗаказТК)
	|	ИЛИ ВыдачаТранзитаПокупки.Покупка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки))
	|	И ВыдачаТранзитаПокупки.Ссылка В (&Транзиты)
	|	И ВыдачаТранзитаПокупки.Подбор
	|	И ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) <> ТИП(Справочник.Мегаордера)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыдачаТранзитаПокупки.Покупка КАК Супергруппа
	|ПОМЕСТИТЬ Супергруппы
	|ИЗ
	|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
	|ГДЕ
	|	ВыдачаТранзитаПокупки.Ссылка В (&Транзиты)
	|	И ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Мегаордера)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыдачаТранзитаПокупки.Покупка КАК Покупка,
	|	ВыдачаТранзитаПокупки.Ссылка КАК Ссылка,
	|	ВыдачаТранзитаПокупки.Участник КАК Участник,
	|	ВыдачаТранзитаПокупки.ТочкаНазначения КАК ТочкаНазначения,
	|	ВыдачаТранзитаПокупки.СтоимостьХранения КАК СтоимостьХранения,
	|	ВыдачаТранзитаПокупки.Партия КАК Партия
	|ПОМЕСТИТЬ ЗаказыВключаяСупергруппы
	|ИЗ
	|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
	|ГДЕ
	|	ВыдачаТранзитаПокупки.Ссылка В (&Транзиты)
	|	И ТипЗначения(ВыдачаТранзитаПокупки.Партия) <> Тип(Документ.ЗаказыДляТранзита)
	|	И ВыдачаТранзитаПокупки.Подбор
	|	И ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Партия) <> ТИП(Документ.курьерскаяДоставка)
	|	И (ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
	|	И ВыдачаТранзитаПокупки.Покупка.ВидСтикера <> ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ЗаказТК)
	|	И ВыдачаТранзитаПокупки.Покупка.ВидСтикера <> ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
	|	ИЛИ ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) <> ТИП(Справочник.Коробки))
	|	И ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) <> ТИП(Справочник.Мегаордера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УпаковатьЗаказыПокупки.Покупка,
	|	УпаковатьЗаказыПокупки.Ссылка,
	|	УпаковатьЗаказыПокупки.Участник,
	|	УпаковатьЗаказыПокупки.Ссылка.ТочкаНазначения,
	|	УпаковатьЗаказыПокупки.СтоимостьХранения,
	|	УпаковатьЗаказыПокупки.Партия
	|ИЗ
	|	Документ.УпаковатьЗаказы.Покупки КАК УпаковатьЗаказыПокупки
	|ГДЕ
	|	УпаковатьЗаказыПокупки.Ссылка.Супергруппа В
	|		(ВЫБРАТЬ
	|			Супергруппы.Супергруппа КАК Супергруппа
	|		ИЗ
	|			Супергруппы КАК Супергруппы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Ссылка) = ТИП(Документ.УпаковатьЗаказы)
	|		ИЛИ ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Ссылка.ТочкаТранзита) = ТИП(Справочник.СегментыПунктовВыдачи)
	|		ИЛИ ВыдачаТранзитаПокупки.Ссылка.ТочкаТранзита = ЗНАЧЕНИЕ(Справочник.ТочкиРаздачи.ПустаяСсылка)
	|			ТОГДА ВыдачаТранзитаПокупки.ТочкаНазначения.Код
	|		ИНАЧЕ ВыдачаТранзитаПокупки.Ссылка.ТочкаТранзита.Код
	|	КОНЕЦ КАК distributorCode,
	|	ВыдачаТранзитаПокупки.Участник.Код КАК uid,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК pid,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Посылки)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК packageId,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Заказы)
	|		ИЛИ ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Пристрой)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК orderId,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК groupCode,
	|	ВыдачаТранзитаПокупки.СтоимостьХранения КАК paidSum,
	|	ВыдачаТранзитаПокупки.Ссылка.Дата КАК date,
	|	ПОДСТРОКА(ВыдачаТранзитаПокупки.Ссылка.Номер, 4, 9) КАК arrivalNumber,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА ""sp""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Заказы)
	|			ТОГДА ""shop""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Пристрой)
	|			ТОГДА ""bulletin""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
	|			ТОГДА ""group""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Посылки)
	|			ТОГДА ""package""
	|	КОНЕЦ КАК orderType,
	|	"""" КАК trackingNumber
	|ИЗ
	|	ЗаказыВключаяСупергруппы КАК ВыдачаТранзитаПокупки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказыСТрекНомерами.Ссылка.ТочкаНазначения.Код КАК distributorCode,
	|	ЗаказыСТрекНомерами.Посылка.Участник.Код КАК uid,
	|	ЗаказыСТрекНомерами.Покупка.Код КАК pid,
	|	ЗаказыСТрекНомерами.Посылка.Код КАК packageId,
	|	ЗаказыСТрекНомерами.КодЗаказа КАК orderId,
	|	ЗаказыСТрекНомерами.Ссылка.Коробка.Код КАК groupCode,
	|	ЗаказыТК.СтоимостьХранения,
	|	ЗаказыТК.Ссылка.Дата,
	|	ПОДСТРОКА(ЗаказыТК.Партия.Номер, 5, 9),
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказыСТрекНомерами.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА ""sp""
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказыСТрекНомерами.Покупка) = ТИП(Справочник.Заказы)
	|			ТОГДА ""shop""
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказыСТрекНомерами.Покупка) = ТИП(Справочник.Пристрой)
	|			ТОГДА ""bulletin""
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказыСТрекНомерами.Покупка) = ТИП(Справочник.Коробки)
	|			ТОГДА ""group""
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказыСТрекНомерами.Покупка) = ТИП(Справочник.Посылки)
	|			ТОГДА ""package""
	|	КОНЕЦ КАК orderType,
	|	Выбор
	|		когда ЗаказыСТрекНомерами.Отправление > 0
	|			Тогда ОтправлениеТранзитаТрекНомера.ТрекНомер
	|		Иначе ЗаказыСТрекНомерами.Ссылка.НомерЗаказа
	|	Конец КАК trackingNumber
	|ИЗ
	|	ЗаказыТК КАК ЗаказыТК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтправлениеТранзита.Заказы КАК ЗаказыСТрекНомерами
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтправлениеТранзита.ТрекНомера КАК ОтправлениеТранзитаТрекНомера
	|			ПО ЗаказыСТрекНомерами.Отправление = ОтправлениеТранзитаТрекНомера.Отправление
	|			И ОтправлениеТранзитаТрекНомера.Ссылка = ЗаказыСТрекНомерами.Ссылка
	|		ПО ЗаказыТК.Партия = ЗаказыСТрекНомерами.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""100"",
	|	КурьерскаяДоставкаЗаказыНаСкладе.Ссылка.Участник.Код,
	|	NULL,
	|	КурьерскаяДоставкаЗаказыНаСкладе.Посылка.Код,
	|	NULL,
	|	NULL,
	|	КурьерскаяДоставкаЗаказыНаСкладе.СтоимостьХранения,
	|	КурьерскаяДоставкаЗаказыНаСкладе.Ссылка.Дата,
	|	ПОДСТРОКА(КурьерскаяДоставкаЗаказыНаСкладе.Партия.Номер, 5, 9),
	|	""package"",
	|	""""
	|ИЗ
	|	Документ.КурьерскаяДоставка.ЗаказыНаСкладе КАК КурьерскаяДоставкаЗаказыНаСкладе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокКурьерскойДоставки КАК втДокКурьерскойДоставки
	|		ПО КурьерскаяДоставкаЗаказыНаСкладе.Ссылка = втДокКурьерскойДоставки.Партия
	|ГДЕ
	|	КурьерскаяДоставкаЗаказыНаСкладе.Подбор";


	Запрос.УстановитьПараметр("Транзиты", Транзиты.Выгрузить(,"Объект"));
	//Запрос.УстановитьПараметр("ОтправлениеТранзита", ОтправлениеТранзита.Выгрузить(,"Объект"));
	
	Результат = Запрос.Выполнить();
	тз=Результат.Выгрузить();
	ТЗ.Колонки.pid.Имя  		="pidint";   
	ТЗ.Колонки.packageId.Имя  	="packageIdint";
	ТЗ.Колонки.uid.Имя  		="uidint";
	ТЗ.Колонки.orderId.Имя		="orderIdint";

	ТЗ.Колонки.Добавить("pid", 			Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("packageId",	Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("uid", 			Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("orderId", 		Новый ОписаниеТипов("Строка"));

	Для каждого стр из тз Цикл
		стр.pid			= Формат(стр.pidint,"ЧГ=0");
		стр.packageId	= Формат(стр.packageIdint,"ЧГ=0");
		стр.uid			= Формат(стр.uidint,"ЧГ=0");
		стр.orderId		= ?(стр.orderIdint=null ,"",Формат(Число(стр.orderIdint),"ЧГ=0"));
	КонецЦикла;	
	тз.Колонки.Удалить("pidint");
	тз.Колонки.Удалить("packageIdint");
	тз.Колонки.Удалить("uidint");
	тз.Колонки.Удалить("orderIdint");

	Возврат тз;

КонецФункции


Функция РазобратьТранзитыОтОрганизатора()  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаТранзитаПокупки.Покупка КАК Покупка,
	|	ВыдачаТранзитаПокупки.Ссылка КАК Ссылка,
	|	ВыдачаТранзитаПокупки.Участник КАК Участник,
	|	ВыдачаТранзитаПокупки.ТочкаНазначения КАК ТочкаНазначения,
	|	ВыдачаТранзитаПокупки.СтоимостьХранения КАК СтоимостьХранения,
	|	ВыдачаТранзитаПокупки.Партия КАК Партия
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
	|ГДЕ
	|	ВыдачаТранзитаПокупки.Ссылка В(&Транзиты) И 
	|	ТипЗначения(ВыдачаТранзитаПокупки.Партия) = Тип(Документ.ЗаказыДляТранзита)
	|	И ВыдачаТранзитаПокупки.Подбор
	|	И (ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
	|				И ВыдачаТранзитаПокупки.Покупка.ВидСтикера <> ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ЗаказТК)
	|				И ВыдачаТранзитаПокупки.Покупка.ВидСтикера <> ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) <> ТИП(Справочник.Коробки))
	|	И ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) <> ТИП(Справочник.Мегаордера);
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Ссылка) = ТИП(Документ.УпаковатьЗаказы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Ссылка.ТочкаТранзита) = ТИП(Справочник.СегментыПунктовВыдачи)
	|				ИЛИ ВыдачаТранзитаПокупки.Ссылка.ТочкаТранзита = ЗНАЧЕНИЕ(Справочник.ТочкиРаздачи.ПустаяСсылка)
	|			ТОГДА ВыдачаТранзитаПокупки.ТочкаНазначения.Код
	|		ИНАЧЕ ВыдачаТранзитаПокупки.Ссылка.ТочкаТранзита.Код
	|	КОНЕЦ КАК distributorCode,
	|	ВыдачаТранзитаПокупки.Участник.Код КАК uid,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК pid,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Посылки)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК packageId,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Заказы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Пристрой)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК orderId,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
	|			ТОГДА ВыдачаТранзитаПокупки.Покупка.Код
	|	КОНЕЦ КАК groupCode,
	|	ВыдачаТранзитаПокупки.СтоимостьХранения КАК paidSum,
	|	ВыдачаТранзитаПокупки.Ссылка.Дата КАК date,
	|	ПОДСТРОКА(ВыдачаТранзитаПокупки.Ссылка.Номер, 4, 9) КАК arrivalNumber,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Покупки)
	|			ТОГДА ""sp""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Заказы)
	|			ТОГДА ""shop""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Пристрой)
	|			ТОГДА ""bulletin""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Коробки)
	|			ТОГДА ""group""
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Посылки)
	|			ТОГДА ""package""
	|	КОНЕЦ КАК orderType,
	|	"""" КАК trackingNumber
	|ИЗ
	|	Заказы КАК ВыдачаТранзитаПокупки";


	Запрос.УстановитьПараметр("Транзиты", Транзиты.Выгрузить(,"Объект"));
	//Запрос.УстановитьПараметр("ОтправлениеТранзита", ОтправлениеТранзита.Выгрузить(,"Объект"));
	
	Результат = Запрос.Выполнить();
	тз=Результат.Выгрузить();
	ТЗ.Колонки.pid.Имя  		="pidint";   
	ТЗ.Колонки.packageId.Имя  	="packageIdint";
	ТЗ.Колонки.uid.Имя  		="uidint";
	ТЗ.Колонки.orderId.Имя		="orderIdint";

	ТЗ.Колонки.Добавить("pid", 			Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("packageId",	Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("uid", 			Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("orderId", 		Новый ОписаниеТипов("Строка"));

	Для каждого стр из тз Цикл
		стр.pid			= Формат(стр.pidint,"ЧГ=0");
		стр.packageId	= Формат(стр.packageIdint,"ЧГ=0");
		стр.uid			= Формат(стр.uidint,"ЧГ=0");
		стр.orderId		= ?(стр.orderIdint=null ,"",Формат(Число(стр.orderIdint),"ЧГ=0"));
	КонецЦикла;	
	тз.Колонки.Удалить("pidint");
	тз.Колонки.Удалить("packageIdint");
	тз.Колонки.Удалить("uidint");
	тз.Колонки.Удалить("orderIdint");

	Возврат тз;

КонецФункции




Функция РазобратьКарты() 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КартыУчастников.Владелец.Код КАК uid,
		|	КартыУчастников.Код КАК id
		|ИЗ
		|	Справочник.КартыУчастников КАК КартыУчастников
		|ГДЕ
		|	КартыУчастников.Ссылка в (&Карты) ";
		
	Запрос.УстановитьПараметр("Карты", Карты.Выгрузить(,"Объект"));

	Результат = Запрос.Выполнить();

	тз = Результат.Выгрузить();
	
	ТЗ.Колонки.id.Имя  ="idint";
	ТЗ.Колонки.uid.Имя ="uidint";
	ТЗ.Колонки.Добавить("id", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("uid", Новый ОписаниеТипов("Строка"));
	Для каждого стр из тз Цикл
		стр.id		= Формат(стр.idint,"ЧГ=0");
		стр.uid	= Формат(стр.uidint,"ЧГ=0");
	КонецЦикла;	
	тз.Колонки.Удалить("idint");
	тз.Колонки.Удалить("uidint");
    Возврат тз;
КонецФункции 

#КонецОбласти
						//Остальное
#Область XML

Процедура  СериолизоватьВХМЛ() Экспорт
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd","http://www.w3.org/2001/XMLSchema");
	//ЗаписьXML.ЗаписатьАтрибут("apiVersion","3");
	
	Если Константы.ИспоьзоватьДетальныйОбмен.Получить() Тогда
		массПриходов=Детально.НайтиСтроки(новый Структура("ТипОбмена",Перечисления.ТипыОбменов100сп.Приход));
		ЗаписьXML.ЗаписатьНачалоЭлемента("incomes");
		Для каждого стр из массПриходов Цикл
			ЗаписьXML.ЗаписатьБезОбработки(стр.Сообщение);
		КонецЦикла;	
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		массПриходов=Детально.НайтиСтроки(новый Структура("ТипОбмена",Перечисления.ТипыОбменов100сп.СуперГруппа));
		ЗаписьXML.ЗаписатьНачалоЭлемента("superGroups");
		Для каждого стр из массПриходов Цикл
			ЗаписьXML.ЗаписатьБезОбработки(стр.Сообщение);
		КонецЦикла;	
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		массПриходов=Детально.НайтиСтроки(новый Структура("ТипОбмена",Перечисления.ТипыОбменов100сп.СуперГруппаРегистрация));
		ЗаписьXML.ЗаписатьНачалоЭлемента("superGroupReceipts");
		Для каждого стр из массПриходов Цикл
			ЗаписьXML.ЗаписатьБезОбработки(стр.Сообщение);
		КонецЦикла;	
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		
		массПриходов=Детально.НайтиСтроки(новый Структура("ТипОбмена",Перечисления.ТипыОбменов100сп.СуперГруппаКолено));
		ЗаписьXML.ЗаписатьНачалоЭлемента("superGroupStages");
		Для каждого стр из массПриходов Цикл
			ЗаписьXML.ЗаписатьБезОбработки(стр.Сообщение);
		КонецЦикла;	
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		
	Иначе
		
		ТЗ=РазобратьПриходные();  
		ДобавитьСписоквХМЛизТЗ(ЗаписьXML,"incomes","income",ТЗ);
	КонецЕсли;
		ТЗ=РазобратьПоступлениеКоробокДляРазбора() ;
		ДобавитьСписоквХМЛизТЗ(ЗаписьXML,"groupsQueue","group",ТЗ);
		
		ТЗ=РазобратьВозвраты();
		ДобавитьСписоквХМЛизТЗ(ЗаписьXML,"returns","return",ТЗ);
		
		ТЗ=РазобратьРасходы();
		ДобавитьСписоквХМЛизТЗ(ЗаписьXML,"deliveries","delivery",ТЗ);
		
		ТЗ=РазобратьТранзиты();
		ДобавитьСписоквХМЛизТЗ(ЗаписьXML,"transfers","transfer",ТЗ);
		
		ТЗ=РазобратьТранзитыОтОрганизатора();                       
		ДобавитьСписоквХМЛизТЗ(ЗаписьXML,"preTransfers","preTransfer",ТЗ);
		
		
		ТЗ=РазобратьКарты();
		ДобавитьСписоквХМЛизТЗ(ЗаписьXML,"cards","card",ТЗ);

		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ОтправленныеДанные= ЗаписьXML.Закрыть();
	Статус=Перечисления.СтатусОтпавкиНаСайт.Сформирован;
КонецПроцедуры


Процедура ДесериализоватьИзХМЛ() Экспорт
	Ошибки="";
	//Поступления
	тз=аспПроцедурыОбменаДанными.ОбработатьIncomesССайта(ПолученныеДанные,Ссылка);
	Если тз<>неопределено Тогда  
		Для каждого стр из тз Цикл
			Если стр.НомерСтроки =null Тогда Продолжить; КонецЕсли;
			Если Стр.arrivalNumber<>Прав(Стр.Партия.Номер,(СтрДлина(Стр.Партия.Номер)-3)) Тогда Продолжить; КонецЕсли;
			
			Детально[стр.НомерСтроки-1].Отправлено			= Истина;
			Детально[стр.НомерСтроки-1].РезультатОбмена		= Стр.result;
			Детально[стр.НомерСтроки-1].ПерваяТочка	= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(Стр.firstIncomeCode);
			Если стр.result="error" Тогда
				Детально[стр.НомерСтроки-1].Ответ =Стр.message;
				Продолжить;
			Конецесли;
		КонецЦикла;
	КонецЕсли;
	
	//Создание Супер групп
	тз=аспПроцедурыОбменаДанными.ОбработатьSuperGroupsССайта(ПолученныеДанные,Ссылка);
	Если тз<>неопределено Тогда  
		Для каждого стр из тз Цикл
			Если стр.НомерСтроки =null Тогда Продолжить; КонецЕсли;
			//Если Стр.arrivalNumber<>Прав(Стр.Партия.Номер,(СтрДлина(Стр.Партия.Номер)-3)) Тогда Продолжить; КонецЕсли;
			
			Детально[стр.НомерСтроки-1].Отправлено=Истина;
			Детально[стр.НомерСтроки-1].РезультатОбмена=Стр.result;
			Если стр.result="error" Тогда
				Детально[стр.НомерСтроки-1].Ответ =Стр.message;
				Продолжить;
			Конецесли;
		КонецЦикла;
	КонецЕсли;
	
	///Регистрация скппер груп
	тз=аспПроцедурыОбменаДанными.ОбработатьSuperGroupsССайта(ПолученныеДанные,Ссылка,Истина);
	Если тз<>неопределено Тогда  
		Для каждого стр из тз Цикл
			Если стр.НомерСтроки =null Тогда Продолжить; КонецЕсли;
			
			Детально[стр.НомерСтроки-1].Отправлено=Истина;
			Детально[стр.НомерСтроки-1].РезультатОбмена=Стр.result;
			Если стр.result="error" Тогда
				Детально[стр.НомерСтроки-1].Ответ =Стр.message;
				Продолжить;
			Конецесли;
		КонецЦикла;
	КонецЕсли;
	
	///Колена скппер груп
	тз=аспПроцедурыОбменаДанными.ОбработатьsuperGroupStageССайта(ПолученныеДанные,Ссылка);
	Если тз<>неопределено Тогда  
		Для каждого стр из тз Цикл
			Если стр.НомерСтроки =null Тогда Продолжить; КонецЕсли;
			
			Детально[стр.НомерСтроки-1].Отправлено=Истина;
			Детально[стр.НомерСтроки-1].РезультатОбмена=Стр.result;
			Если стр.result="error" Тогда
				Детально[стр.НомерСтроки-1].Ответ =Стр.message;
				Продолжить;
			Конецесли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти 


#Область ВыгрузкаНаСайт

Функция ОбменССайтом() 
	Параметры    = новый Структура;
	Параметры.Вставить("token",Константы.Токен.Получить());
	Параметры.Вставить("xml", СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ",""));
	АдресСкрипта = Константы.АдресВыгрузкиНасайт.Получить();
	ПолученныйФайл=СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры,АдресСкрипта);
	Возврат ПолученныйФайл;
	
КонецФункции

Процедура  ОтправитьНаСайт() Экспорт
	НачатьТранзакцию();
	БлокировкаДанных 			= Новый БлокировкаДанных;
	ЭлементБлокировки 			= БлокировкаДанных.Добавить("Константа.ДатаПоследнейВыгрузки");
	ЭлементБлокировки.Режим 	= РежимБлокировкиДанных.Исключительный;
	Попытка
		БлокировкаДанных.Заблокировать();     //Заблокировали
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выгрузка уже запущена в другом сеансе");
	КонецПопытки;

	СтрокаПротокола				= ПротоколыПередач.Добавить();
	СтрокаПротокола.ДатаНачала	= ТекущаяДата();
	АдресСкрипта        		= Константы.АдресОбменаССайтом.Получить();
	ИмяФайлаОтвета				= ОбменССайтом();
	ЗафиксироватьТранзакцию();;        //разблокировали
	Если аспПроцедурыОбменаДанными.АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		Статус=Перечисления.СтатусОтпавкиНаСайт.Отправлен;
		СтрокаПротокола.Результат="Авторизация выполнена";
	Иначе
		СтрокаПротокола.Результат="Авторизация не выполнена";
	КонецЕсли;	 
	Если ЗначениеЗаполнено(ИмяФайлаОтвета) Тогда
		ПолученныеДанные=ФайлВСтроку(ИмяФайлаОтвета);
	Иначе
		СтрокаПротокола.Результат="Нет ответа";
	КонецЕсли;
	///отправляем транзиты
	//Для каждого стрТр из Транзиты Цикл
	//	Если стртр.Статус=Перечисления.СтатусОтпавкиНаСайт.Отправлен Тогда продолжить; КонецЕсли;
	//	телоТр		= СП_ПокупкиВПути.ПолучитьСтрокуВыгрузки(стрТр.Объект);
	//	
	//	Параметры 	= Новый Структура;
	//	Параметры.Вставить("token",	Константы.Токен.Получить());
	//	Параметры.Вставить("to", 	стрТр.Объект.ТочкаТранзита.Код);
	//	Параметры.Вставить("date",	стрТр.Объект.Дата);
	//	Параметры.Вставить("data",	телоТр);
	//	ИмяФайлаОтвета = СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);
	//	
	//	Если аспПроцедурыОбменаДанными.АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
	//		стртр.ПолученныеДанные=ФайлВСтроку(ИмяФайлаОтвета) ;
	//		стртр.Статус=Перечисления.СтатусОтпавкиНаСайт.Отправлен;
	//	Иначе
	//		стртр.ПолученныеДанные="Нет ответа";
	//	КонецЕсли;
	//КонецЦикла;	
	////
	СтрокаПротокола.ДатаОкончания=ТекущаяДата();
КонецПроцедуры

#КонецОбласти


#Область Вспомогательные

Функция ФайлВСтроку(ИмяФайлаОтвета)
		ТекстФайла="";
		Текст=Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаОтвета,КодировкаТекста.UTF8);
		Стр = Текст.ПрочитатьСтроку();
		Пока Стр <> Неопределено Цикл 
			ТекстФайла=ТекстФайла+Стр;
			Стр = Текст.ПрочитатьСтроку();
		КонецЦикла;
		/////
		ТекстФайла=СтрЗаменить(ТекстФайла,"<incomes>","<incomes>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</income>","</income>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"<returns>","<returns>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</return>","</return>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"<deliveries>","<deliveries>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</delivery>","</delivery>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"<cards>","<cards>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</card>","</card>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</transfer>","</transfer>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</transfers>","</transfers>"+Символы.ПС);

		ТекстФайла=СтрЗаменить(ТекстФайла,"</superGroup>","</superGroup>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</superGroups>","</superGroups>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"<distributors","<distributors xmlns=""http://www.100sp.ru""  ");

		
		Возврат ТекстФайла ;
КонецФункции


Процедура ДобавитьСписоквХМЛизТЗ(ЗаписьXML,ИмяСписка,ИмяЭлементаСписка,ТЗ)
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяСписка);
	Для каждого стр из ТЗ Цикл
		Если 	ТЗ.Колонки.Найти("orderid")<> неопределено и
				ЗначениеЗаполнено(стр.orderId) 					Тогда стр.pid = "" КонецЕсли;
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлементаСписка);
		Для каждого стрКолонка из ТЗ.колонки Цикл
			Если стр[стрКолонка.Имя]<>""  Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(стрКолонка.Имя);
				ЗаписьXML.ЗаписатьТекст(Строка(стр[стрКолонка.Имя]));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КОнецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры	


#КонецОбласти 
