// Конвертация sp_ПокупкиВПути от 28.02.2019 13:38:44
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_ВыдачаТранзита_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ВыдачаТранзита_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_ВыдачаТранзита_Отправка
Процедура ДобавитьПОД_Документ_ВыдачаТранзита_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВыдачаТранзита_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВыдачаТранзита_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных           = "ПОД_Документ_ВыдачаТранзита_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыдачаТранзита");
КонецПроцедуры

Процедура ПОД_Документ_ВыдачаТранзита_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	//При обработке
КонецПроцедуры

Функция ПОД_Документ_ВыдачаТранзита_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивДокументов = новый Массив;
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 3
			|	ВыдачаТранзита.Ссылка КАК Ссылка,
			|	ВыдачаТранзита.Номер КАК Номер,
			|	ВыдачаТранзита.Дата КАК Дата,
			|	ВыдачаТранзита.Покупки.(
			|		Покупка КАК Покупка,
			|		МестоХранения КАК МестоХранения,
			|		Габарит КАК Габарит,
			|		Количество КАК Количество,
			|		КоличествоМест КАК КоличествоМест
			|	) КАК Покупки,
			|	ВыдачаТранзита.ТочкаОтправитель КАК ТочкаОтправитель,
			|	ВыдачаТранзита.ТочкаТранзита КАК ТочкаТранзита,
			|	ВыдачаТранзита.ТочкаНазначения КАК ТочкаНазначения
			|ИЗ
			|	Документ.ВыдачаТранзита КАК ВыдачаТранзита
			|ГДЕ
			|	ВыдачаТранзита.Проведен
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата УБЫВ";
		
		//Запрос.Параметры.Вставить("КоличествоДокументов", КомпонентыОбмена.ПараметрыКонвертации.КоличествоДокументов);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекДокумент = новый Структура;
			ТекДокумент.Вставить("Ссылка",				ВыборкаДетальныеЗаписи.Ссылка);
			ТекДокумент.Вставить("Номер",				ВыборкаДетальныеЗаписи.Номер);
			ТекДокумент.Вставить("Дата",				ВыборкаДетальныеЗаписи.Дата);
			ТекДокумент.Вставить("ТочкаОтправитель",	ВыборкаДетальныеЗаписи.ТочкаОтправитель);
			ТекДокумент.Вставить("ТочкаТранзита",		ВыборкаДетальныеЗаписи.ТочкаТранзита);
			ТекДокумент.Вставить("ТочкаНазначения",	ВыборкаДетальныеЗаписи.ТочкаНазначения);
			ТекДокумент.Вставить("Покупки",			ВыборкаДетальныеЗаписи.Покупки.Выгрузить());
	
			МассивДокументов.Добавить(ТекДокумент);
		КонецЦикла;
		
		Возврат МассивДокументов;
КонецФункции
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ВыдачаТранзита_Получение
Процедура ДобавитьПОД_Документ_ВыдачаТранзита_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВыдачаТранзита_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВыдачаТранзита";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыдачаТранзита");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	ДобавитьПКО_Документ_ВыдачаТранзита(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Габариты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Коробки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Посылки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТочкиРаздачи(ПравилаКонвертации);
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область ОтправкаИПолучение
#Область Документ_ВыдачаТранзита
Процедура ДобавитьПКО_Документ_ВыдачаТранзита(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВыдачаТранзита";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВыдачаТранзита;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВыдачаТранзита";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_ВыдачаТранзита_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВыдачаТранзита_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "ТочкаНазначения",  "ТочкаНазначения", , "Справочник_ТочкиРаздачи");
	ДобавитьПКС(СвойстваШапки, "ТочкаОтправитель", "ТочкаОтправитель", , "Справочник_ТочкиРаздачи");
	ДобавитьПКС(СвойстваШапки, "ТочкаТранзита",    "ТочкаТранзита", , "Справочник_ТочкиРаздачи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Покупки", "Покупки");
	ДобавитьПКС(СвойстваТЧ, "Габарит",        "Габарит", 1,"Справочник_Габариты");
	ДобавитьПКС(СвойстваТЧ, "Количество",     "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоМест", "КоличествоМест", 1);
	ДобавитьПКС(СвойстваТЧ, "Покупка",        "Заказ", 1,"Справочник_Посылки");

КонецПроцедуры

Процедура ПКО_Документ_ВыдачаТранзита_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеИБ.Покупки.Колонки.Добавить("Заказ");
			Для каждого элем из ДанныеИБ.Покупки Цикл
				Если ТипЗнч(элем.Покупка) = Тип("СправочникСсылка.Посылки") Тогда
					Заказ_ИмяПКО = "Справочник_Посылки";
				Иначе
					Заказ_ИмяПКО = "Справочник_Коробки";	
				КонецЕсли;
				структура_Заказ = новый Структура("Значение, ИмяПКО",
					элем.Покупка,Заказ_ИмяПКО);
				элем.Заказ = структура_Заказ;
			КонецЦикла;
			ДанныеXDTO.Вставить("Покупки", ДанныеИБ.Покупки);
КонецПроцедуры

Процедура ПКО_Документ_ВыдачаТранзита_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	массивСтрокЗаказов = новый Массив;
	Если ДанныеXDTO.Свойство("Покупки") и ЗначениеЗаполнено("ДанныеXDTO.Покупки") Тогда
		Для каждого элем из ДанныеXDTO.Покупки Цикл
			ТекСтруктураТовары = Новый Структура;
			ТекСтруктураТовары.Вставить("Покупка",элем.Покупка);
			ТекСтруктураТовары.Вставить("Габарит",элем.Габарит);
			ТекСтруктураТовары.Вставить("Количество",элем.Количество);
			ТекСтруктураТовары.Вставить("КоличествоМест",элем.КоличествоМест);
			массивСтрокЗаказов.Добавить(ТекСтруктураТовары);
		КонецЦикла;
	КонецЕсли;
	
	Если массивСтрокЗаказов.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Покупки",массивСтрокЗаказов);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Габариты
Процедура ДобавитьПКО_Справочник_Габариты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Габариты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Габариты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Габариты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Ссылка",       "Ссылка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Коробки
Процедура ДобавитьПКО_Справочник_Коробки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Коробки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Коробки;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Коробки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Коробки_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Коробки_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Ссылка",       "Ссылка");

КонецПроцедуры

Процедура ПКО_Справочник_Коробки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//Коробки
КонецПроцедуры

Процедура ПКО_Справочник_Коробки_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	//Коробки к
КонецПроцедуры
#КонецОбласти
#Область Справочник_Посылки
Процедура ДобавитьПКО_Справочник_Посылки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Посылки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Посылки;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Посылки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Посылки_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Посылки_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Ссылка",       "Ссылка");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_Посылки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//Посылки
КонецПроцедуры

Процедура ПКО_Справочник_Посылки_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	//Посылки п
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТочкиРаздачи
Процедура ДобавитьПКО_Справочник_ТочкиРаздачи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ТочкиРаздачи";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ТочкиРаздачи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ТочкиРаздачи";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Ссылка",       "Ссылка");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
КонецПроцедуры

#КонецОбласти
#Область Алгоритмы



#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("КоличестваДокументов");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ВыдачаТранзита_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВыдачаТранзита_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыдачаТранзита_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВыдачаТранзита_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыдачаТранзита_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВыдачаТранзита_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Коробки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Коробки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Коробки_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Коробки_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Посылки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Посылки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Посылки_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Посылки_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры
// Процедура-обертка, выполняет запуск указанной в параметрах функции модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяФункции - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Функция ВыполнитьФункциюМодуляМенеджера(ИмяФункции, Параметры) Экспорт
	Если ИмяФункции = "ПОД_Документ_ВыдачаТранзита_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВыдачаТранзита_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецФункции

#КонецОбласти
