

Процедура  РасчитатьСтоимостьОтправления(ДокументОтправления) Экспорт
	если Ложь Тогда
		ДокументОтправления = Документы.ОтправлениеТранзита.СоздатьДокумент();
	КонецЕсли;	
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДокументОтправления",	ДокументОтправления);  		
	
	Параметры.Вставить("ДатаДокумента",			ДокументОтправления.Дата);  		
	//Параметры.Вставить("ОбъявленнаяСтоимость",	ДокументОтправления.ОбъявленнаяСтоимость);  		
	Параметры.Вставить("ОбъявленнаяСтоимость",	0);  		
	Параметры.Вставить("Хрупкое",				ДокументОтправления.Хрупкое);
	Параметры.Вставить("ИндексОтправителя", 	ДокументОтправления.ИндексОтправителя);  	
	Параметры.Вставить("ИндексПолучателя", 		ДокументОтправления.Индекс);  	
	
	Параметры.Вставить("Тип", 					ДокументОтправления.тип);
	Параметры.Вставить("Вес", 					ДокументОтправления.вес);
	Параметры.Вставить("Высота", 				ДокументОтправления.Высота);
	Параметры.Вставить("Ширина", 				ДокументОтправления.ширина);
	Параметры.Вставить("Длина", 				ДокументОтправления.Длина);
	Если Параметры.Тип =  "emsPt" Тогда
		Параметры.ОбъявленнаяСтоимость = ДокументОтправления.ОбъявленнаяСтоимость
	КонецЕсли;
	
	Если Параметры.Тип = "postMail" или Параметры.Тип = "ems"  или Параметры.Тип =  "emsPt" Тогда
		Параметры.Вставить("ЭтоEMS", 		   (ДокументОтправления.ТочкаНазначения = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0021")));
		//Параметры.Вставить("КатегорияРПО", 		ДокументОтправления.КатегорияРПО);  	
		//Параметры.Вставить("ВидРПО", 			ДокументОтправления.ВидРПО);  	
		Параметры.Вставить("негабарит",			ДокументОтправления.негабарит);  
		МодульИнтеграции = Интеграция_ПочтаРоссии;
	ИначеЕсли Параметры.Тип = "boxberry" или Параметры.Тип = "boxberryCourier" Тогда
		Параметры.Вставить("КодПС",				ДокументОтправления.ПунктПриема.Код);			//ПунктСдачи	
		Параметры.Вставить("КодПВЗ",			ДокументОтправления.КодПВЗ);					//ПунктПолучения
		
		
		МодульИнтеграции = Интеграция_BoxBerry;
	ИначеЕсли Параметры.Тип = "sdec" или Параметры.Тип = "sdecCourier" или Параметры.Тип = "postamat" Тогда
		Параметры.Вставить("Логин",					ДокументОтправления.ТочкаНазначения.АккаунтДляОбменаСТК);
		Параметры.Вставить("Пароль",				ДокументОтправления.ТочкаНазначения.ПарольДляОбменаСТК);
		Параметры.Вставить("Тариф",					ДокументОтправления.Тариф.КодТарифа);
		Параметры.Вставить("КодГородаОтправителя",	ДокументОтправления.ГородОтправитель.Код);
		Параметры.Вставить("КодГородаПолучателя", 	ДокументОтправления.cityCode);
		Параметры.Вставить("ТяжелыйГруз", 			ДокументОтправления.ТяжелыйГруз);
		Параметры.Вставить("ТочкаНазначения",		ДокументОтправления.ТочкаНазначения);  		
        Параметры.Вставить("ДатаДокумента",			ТекущаяДата());  		
		МодульИнтеграции = Интеграция_СДЭК_в20;//ОбменДаннымиСДЭК;
	ИначеЕсли Параметры.Тип = "dpd" Тогда
		Параметры.Вставить("Город",				ДокументОтправления.Город);
		Параметры.Вставить("КодПВЗ",			ДокументОтправления.КодПВЗ);					//ПунктПолучения
		Параметры.Вставить("УслугаDPD",			ДокументОтправления.УслугаDPD);
		МодульИнтеграции = Интеграция_DPD;
	ИначеЕсли Параметры.Тип = "" Тогда
		
	Конецесли;		
	//Если Параметры.Тип = "sdec" или Параметры.Тип = "sdecCourier" Тогда
	//	ДокументОтправления.РасчетСтоимостиПоВсемТарифам = Истина;
	//	
	//	протокол   			=  МодульИнтеграции.РассчитатьСтоимостьВсеТарифы(Параметры);
	//	строка_Протокола 	=  ДокументОтправления.ПротоколыПередач.Добавить();
	//	ЗаполнитьЗначенияСвойств(строка_Протокола, протокол);
	//	
	//	МассивТарифов 	= протокол.МассивТарифов;
	//	ДокументОтправления.РасчетКалькулятораПочта.Очистить();
	//	
	//	Для Каждого элем Из МассивТарифов Цикл
	//		
	//		расчет = ДокументОтправления.РасчетКалькулятораПочта.Добавить();
	//		ЗаполнитьЗначенияСвойств(расчет, элем);
	//		НетРасчета = Истина;
	//		Если расчет.ТарифТК > 0 Тогда
	//			базаНалПлатеж				= расчет.ТарифТК + ДокументОтправления.ТарифПВнп + ДокументОтправления.ОбъявленнаяСтоимость * ДокументОтправления.ПроцентОС / 100;
	//			базаПредоплата				= расчет.ТарифТК + ДокументОтправления.ТарифПВ 	 + ДокументОтправления.ОбъявленнаяСтоимость * ДокументОтправления.ПроцентОС / 100;
	//			
	//			расчет.СтоимостьНалПлатеж	= Окр(базаНалПлатеж + базаНалПлатеж * ДокументОтправления.Процент / 100, 0);
	//			расчет.СтоимостьПредоплата	= Окр(базаПредоплата, 0);
	//			
	//			расчет.результат = ?(расчет.СтоимостьНалПлатеж<>0 или расчет.СтоимостьПредоплата<>0,"ok","error");
	//			ДокументОтправления.ИтогоСтоимость = 0;
	//			НетРасчета = Ложь;
	//			
	//		КонецЕсли;	
	//		
	//		Если НетРасчета Тогда
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Стоимость не расчитана не по одному тарифу!")
	//		КонецЕсли;	
	//		
	//	КонецЦикла;
	//	
	//Иначе
		ДокументОтправления.РасчетСтоимостиПоВсемТарифам = Ложь;
		Протокол							=  МодульИнтеграции.РассчитатьСтоимость(Параметры);
		ДокументОтправления.СрокДоставки 	= Протокол.СрокДоставки;
		строка_Протокола 					= ДокументОтправления.ПротоколыПередач.Добавить();
		ЗаполнитьЗначенияСвойств(строка_Протокола, Протокол);
		Если Протокол.Результат = "error" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Протокол.ТекстОшибки);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДокументОтправления, Протокол,"ТарифТК, РасчетКалькулятора");
//КонецЕсли
КонецПроцедуры


Функция ПолучитьКвитанцию(Параметры) Экспорт
	
	
КонецФункции	

Функция ПолучитьСтоимостьОтправления(Параметры) Экспорт
	
	Если Параметры.Тип = "postMail" или Параметры.Тип = "ems"  или Параметры.Тип =  "emsPt" Тогда
//		Параметры = Новый Структура();
//		Параметры.Вставить("Тип");
//		Параметры.Вставить("ДокументОтправления");
		
		Параметры.Вставить("ЭтоEMS", 		   (Параметры.ДокументОтправления.ТочкаНазначения = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0021")));
		Параметры.Вставить("ИндексОтправителя",			Параметры.ДокументОтправления.ИндексОтправителя);  
		Параметры.Вставить("ИндексПолучателя",			Параметры.ДокументОтправления.Индекс);
		МодульИнтеграции = Интеграция_ПочтаРоссии;
	ИначеЕсли Параметры.Тип = "sdec" или Параметры.Тип = "sdecCourier" или Параметры.Тип = "postamat" Тогда
		док = Параметры.ДокументОтправления;
	//	Параметры.Вставить("Логин",					док.ТочкаНазначения.АккаунтДляОбменаСТК);
	//	Параметры.Вставить("Пароль",				док.ТочкаНазначения.ПарольДляОбменаСТК);
	//	Параметры.Вставить("Тариф",					док.Тариф.КодТарифа);
		Параметры.Вставить("КодГородаОтправителя",	док.ГородОтправитель.Код);
		Параметры.Вставить("КодГородаПолучателя", 	док.cityCode);
		Параметры.Вставить("ТяжелыйГруз", 			док.ТяжелыйГруз);
	//	Параметры.Вставить("ТочкаНазначения",		док.ТочкаНазначения);  		
        Параметры.Вставить("ДатаДокумента",			ТекущаяДата());  		
		МодульИнтеграции = Интеграция_СДЭК_в20;//ОбменДаннымиСДЭК;
		
	КонецЕсли;
	
	Протокол =  МодульИнтеграции.РассчитатьСтоимость(Параметры);
	
	Возврат Протокол;
КонецФункции	

Функция ПолучитьТрекНомер(Параметры) Экспорт
	Док = Параметры.ДокументОтправления;

	Если Параметры.Тип = "postMail" или Параметры.Тип = "ems"  или Параметры.Тип =  "emsPt" Тогда
		Параметры.Вставить("dimension", 			Новый Структура("height ,length ,width", 
																	Параметры.Высота,Параметры.Длина,Параметры.Ширина)); //Сантиметры
 
		Параметры.Вставить("fragile", 				Параметры.Хрупкое); 			//Осторожно хрупко 
		Параметры.Вставить("mass",					Параметры.Вес);	 			//Масса отправления в граммах 
		
		Параметры.Вставить("НомерГС",				Док.Коробка.Код + "_"+Параметры.Отправление);		//Номер заказа. Внешний идентификатор заказа, который формируется отправителем
//		Параметры.Вставить("payment", 				?(Док.Коробка.МетодОплаты=Перечисления.МетодыОплаты.prepay,0,ИтогоСтоимость)*100);			//Сумма наложенного платежа (копейки) 
 
		Параметры.Вставить("Фамилия", 				Параметры.ФИО.Фамилия);		
		Параметры.Вставить("Имя", 					Параметры.ФИО.Имя);			
		Параметры.Вставить("Отчество", 				Параметры.ФИО.Отчество);	
		Параметры.Вставить("Регион",				Док.Регион);				//Область, регион 	
		Параметры.Вставить("Город",					Док.Город);					//Населенный пункт 
		Параметры.Вставить("ИндексОтправителя",		Док.ИндексОтправителя);		//Индекс места приема 
		Параметры.Вставить("Улица",					Док.Улица);					//Часть адреса: Улица 
		Параметры.Вставить("НомерДома",				Док.Дом);					//Часть адреса: Номер здания 
		Параметры.Вставить("Индекс",				Док.Индекс);   				//Почтовый индекс  
		Параметры.Вставить("Телефон",				Док.Телефон);				//Телефон получателя (может быть обязательным для некоторых типов отправлений) 
		
		Параметры.Вставить("ЭтоEMS", 		   (Параметры.ДокументОтправления.ТочкаНазначения = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0021") или 
												Параметры.ДокументОтправления.ТочкаНазначения = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0201")	));
		МодульИнтеграции = Интеграция_ПочтаРоссии;
	ИначеЕсли Параметры.Тип="sdec"  или Параметры.Тип = "sdecCourier" или Параметры.Тип = "postamat"  Тогда	
		МодульИнтеграции =  Интеграция_СДЭК_в20;	
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Не известный тип заказа %1, трек номер не получен! ", Параметры.Тип));
		Возврат Неопределено;			
	КонецЕсли;
	
	Протоколы = МодульИнтеграции.СозданиеЗаказаНаДоставку(Параметры);	
	Возврат Протоколы;

КонецФункции

Функция СформироватьЗаказ(ДокументОтправления, ПараметрыФИО) Экспорт
	если Ложь Тогда ДокументОтправления = Документы.ОтправлениеТранзита.СоздатьДокумент(); КонецЕсли;
	Параметры = новый Структура;
	Параметры.Вставить("Тип", 					ДокументОтправления.тип);
	Параметры.Вставить("Вес",					ДокументОтправления.Вес);
	Параметры.Вставить("Длина",					ДокументОтправления.Длина);
	Параметры.Вставить("Ширина",				ДокументОтправления.Ширина);
	Параметры.Вставить("Высота",				ДокументОтправления.Высота);
	Параметры.Вставить("Хрупкое",				ДокументОтправления.Хрупкое);
	//Параметры.Вставить("ОбъявленнаяСтоимость",	ДокументОтправления.ОбъявленнаяСтоимость);
	Параметры.Вставить("ОбъявленнаяСтоимость",	0);
	Параметры.Вставить("МетодОплаты",			ДокументОтправления.Коробка.МетодОплаты);
	Параметры.Вставить("ФИО",					ДокументОтправления.ФИО);
	Параметры.Вставить("КодПВЗ",				ДокументОтправления.КодПВЗ);                        //ПунктПолучения
	Параметры.Вставить("Телефон",				ДокументОтправления.Телефон);
	Параметры.Вставить("email",					ДокументОтправления.email);
	Параметры.Вставить("Город",					ДокументОтправления.Город);
	Параметры.Вставить("Индекс",				ДокументОтправления.Индекс);
	Параметры.Вставить("НомерЗаказа",			ДокументОтправления.Номер);							//Наш номер
	Параметры.Вставить("ДокументОтправления",	ДокументОтправления);							//Наш номер


	
	
	Если Параметры.Тип = "dpd" Тогда
		Параметры.Вставить("ДатаПриемаГруза",	ДокументОтправления.ДатаПриемаГруза);
		Параметры.Вставить("УслугаDPD",			ДокументОтправления.УслугаDPD);
		
		МодульИнтеграции = Интеграция_DPD;
	ИначеЕсли Параметры.Тип="boxberry" или Параметры.Тип="boxberryCourier" Тогда	
		Параметры.Вставить("ИтогоСтоимость",	ДокументОтправления.ИтогоСтоимость);			
		Параметры.Вставить("ТарифТК",			ДокументОтправления.ТарифТК);			
		Параметры.Вставить("КодПС",				ДокументОтправления.ПунктПриема.Код);			//ПунктСдачи	
		Параметры.Вставить("СоставЗаказа",		ДокументОтправления.Заказы.Выгрузить(,"НомерСтроки, Покупка, Количество"));
		Параметры.Вставить("Адрес",				ДокументОтправления.Адрес);			
		
		МодульИнтеграции = Интеграция_BoxBerry;
	ИначеЕсли Параметры.Тип="sdec"  или Параметры.Тип = "sdecCourier" или Параметры.Тип = "postamat"  Тогда	
		Параметры.Вставить("ВнутреннийНомер",	ДокументОтправления.ВнутреннийНомерЗаказаТК);			
		Параметры.Вставить("ТрекНомер",			ДокументОтправления.НомерЗаказа);			
		Параметры.Вставить("Отправление",		0);			//ПунктСдачи	
		//Параметры.Вставить("СоставЗаказа",		ДокументОтправления.Заказы.Выгрузить(,"НомерСтроки, Покупка, Количество"));
		
	//	Параметры = ДокументОтправления;
		МодульИнтеграции =  Интеграция_СДЭК_в20;
		
	ИначеЕсли Параметры.Тип = "" Тогда
		
	Конецесли;	
	Протоколы =  МодульИнтеграции.СозданиеЗаказаНаДоставку(Параметры);
//	Если Протокол.Результат = "error" Тогда
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Протокол.ТекстОшибки);
//	КонецЕсли;
//	
//	Если Параметры.Тип="sdec"  или Параметры.Тип = "sdecCourier"  Тогда	
//		
//	Иначе	
//		строка_Протокола = ДокументОтправления.ПротоколыПередач.Добавить();
//		ЗаполнитьЗначенияСвойств(строка_Протокола, Протокол);
//		
//		Если Протокол.Свойство("ТрекНомер")  Тогда
//			ДокументОтправления.НомерЗаказа	=	Протокол.ТрекНомер;
//		КонецЕсли;	
//	КонецЕсли;	
	Возврат Протоколы;
КонецФункции	

Функция  ПолучитьНаклейки(СписокДокументовОтправления) экспорт
	Если ТипЗнч(СписокДокументовОтправления) = Тип("ДокументСсылка.ОтправлениеТранзита") или 
		 ТипЗнч(СписокДокументовОтправления) = Тип("ДокументОбъект.ОтправлениеТранзита")Тогда
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить(СписокДокументовОтправления);
	Иначе 	
		СписокДокументов = СписокДокументовОтправления;
	КонецЕсли;	
	
	тип = СписокДокументов[0].Значение.Тип;
	Если Тип = "dpd" тогда
		Возврат Интеграция_DPD.ПолучитьНаклейкиЗаказа(СписокДокументов);
	конецЕсли;
КонецФункции

Процедура УдалитьЗаказ(ДокументОтправления) Экспорт
	Параметры = новый Структура;
	Параметры.Вставить("Тип", 					ДокументОтправления.тип);

	Параметры.Вставить("НомерЗаказа",			ДокументОтправления.Номер);							//Наш номер
	Параметры.Вставить("НомерДПД",				ДокументОтправления.НомерЗаказа);							//Наш номер
	Если Параметры.Тип = "dpd" Тогда
		МодульИнтеграции = Интеграция_DPD;
	КонецЕсли;	
	Протокол =  МодульИнтеграции.УдалениеЗаказа(Параметры);
	строка_Протокола = ДокументОтправления.ПротоколыПередач.Добавить();
	ЗаполнитьЗначенияСвойств(строка_Протокола, Протокол);
	Если Протокол.Результат = "error" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Протокол.ТекстОшибки);
	Иначе	
		ДокументОтправления.НомерЗаказа	=	"";	
	КонецЕсли;
	
КонецПроцедуры



Функция ПолучитьСтруктуруПротокола(ВидОбмена) Экспорт
	протокол = новый Структура;
	протокол.Вставить("ДатаНачала",	ТекущаяДата());
	протокол.Вставить("Отправление");
	протокол.Вставить("ОтправленныеДанные");
	протокол.Вставить("ПолученныеДанные");
	протокол.Вставить("ВидОбмена",ВидОбмена);
	протокол.Вставить("ДатаОкончания");
	протокол.Вставить("Результат");
	
	Если ВидОбмена = Перечисления.ВидыОбменовСДЭК.СтоимостьПоТарифу Тогда
		протокол.Вставить("ТарифТК");
		протокол.Вставить("СрокДоставки");
		протокол.Вставить("РасчетКалькулятора");
	ИначеЕсли ВидОбмена = Перечисления.ВидыОбменовСДЭК.СозданиеЗаказаНаДоставку Тогда	
		протокол.Вставить("ТрекНомер");
		протокол.Вставить("ВнутреннийНомер");
	КонецЕсли;	

	Возврат протокол;
КонецФункции	

//
//Получаем представление Отправленных данных, когда взаимодействуем через Web servis
//
Функция ПолучитьОтправляемыеДанные(Параметры) экспорт
	Текст = "";
	Если ТипЗнч(Параметры) = тип("СписокЗначений") Тогда
		Для каждого элем из Параметры цикл
			Текст = Текст +"Документ: "+Элем.Значение.Номер+" от "+Элем.Значение.Номер+", трек:"+Элем.Значение.НомерЗаказа+", гуппа:"+Элем.Значение.Коробка+"."+Символы.ПС;
		КонецЦикла;	
	Конецесли;	
	Если ТипЗнч(Параметры) = тип("Структура") Тогда
		Для каждого элем из Параметры цикл
			Текст = Текст + элем.Ключ+ ": "+Элем.Значение+", "+Символы.ПС;
		КонецЦикла;	
	КонецЕсли;
	Возврат Текст;
КонецФункции	

