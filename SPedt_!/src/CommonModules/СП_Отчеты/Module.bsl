Функция ТаблицаОшибкиОбмена(Вариант = "Детальный",СтрокаОшибки = Неопределено) Экспорт
	//ПериодОтчета 			= новый СтандартныйПериод(НачалоМесяца(МесяцОтчета), КонецМесяца(МесяцОтчета));
	
	параметры				= новый Структура();
	СхемаКомпоновкиДанных 	= Отчеты.ОшибкиОбмена100СП.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	
	параметрыОтбора			= новый Структура();
	Если  СтрокаОшибки <> Неопределено Тогда
		параметрыОтбора.Вставить("СообщениеОшибки", СтрокаОшибки.СообщениеОшибки);
		параметрыОтбора.Вставить("ТипОбмена", 		СтрокаОшибки.ТипОбмена);
	КонецЕсли;	
		
	
	Возврат ПолучитьТаблицуОтчета(параметры, СхемаКомпоновкиДанных, Вариант, параметрыОтбора);	
	
КонецФункции




Функция СтатусыГруппы(Группа,ДокументРезультат,УникальныйИдентификатор) Экспорт
	ДокументРезультат.Очистить();
	тзСтатусы = СтоСПОбмен_ГруппыДоставки.ПолучитьСтатусыГруппы(Группа);	
	
	
	
	СхемаКомпоновкиДанных 	= Документы.ОтправлениеТранзита.ПолучитьМакет("СКД_СтатусыГруппыДоставки");
	ДанныеРасшифровки 		= новый ДанныеРасшифровкиКомпоновкиДанных;
	
	
	КомпоновщикНастроек		=Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек["Основной"].Настройки);
	
	
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки 		= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);

	
	ПроцессорКомпоновки 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,новый Структура("Статусы",тзСтатусы) , ДанныеРасшифровки, Истина);

	ПроцессорВывода 		= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	//
	//УниверсальныеМеханизмыПартийИСебестоимости.АктуализироватьПартииДляОтчетов(ДокументРезультат, КомпоновщикНастроек);
	//
	АдресХранилищаСКД 		= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	АдресРасшифровки 		= ПоместитьВоВременноеХранилище(ДанныеРасшифровки,	   УникальныйИдентификатор);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Возврат новый Структура("АдресХранилищаСКД, АдресРасшифровки",АдресХранилищаСКД, АдресРасшифровки);
КонецФункции

Функция СтатусЗаказовГруппы(Группа,ДокументРезультат,УникальныйИдентификатор) Экспорт
	ДокументРезультат.Очистить();
	тзИстория = СтоСПОбмен_ГруппыДоставки.ПолучитьИсториюДоставки(Группа);	
	
	СхемаКомпоновкиДанных = Документы.ОтправлениеТранзита.ПолучитьМакет("СКД_ИсторияГруппыДоставки");
	ДанныеРасшифровки = новый ДанныеРасшифровкиКомпоновкиДанных;
	
	
	КомпоновщикНастроек=Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек["Основной"].Настройки);
	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);

	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,новый Структура("История",тзИстория) , ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	//
	//УниверсальныеМеханизмыПартийИСебестоимости.АктуализироватьПартииДляОтчетов(ДокументРезультат, КомпоновщикНастроек);
	//
	АдресХранилищаСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	АдресРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Возврат новый Структура("АдресХранилищаСКД, АдресРасшифровки",АдресХранилищаСКД, АдресРасшифровки);
КонецФункции	


Функция ТаблицаГруппыДоставкиИстроияОбменов(ГруппаДоставки,УникальныйИдентификаторФормы) Экспорт
		
	Отборы					= новый Структура("ГруппаДоставки", ГруппаДоставки);
	СхемаКомпоновкиДанных 	= Отчеты.ГруппыДоставкиИстроияОбменов.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Вариант					= "ГруппыДоставкиИсторияОбменов";
	Возврат ПолучитьОтчет(, СхемаКомпоновкиДанных, Вариант, Отборы, УникальныйИдентификаторФормы);	
	
КонецФункции


Функция ТаблицаБесплатнойВыдаче(МесяцОтчета) Экспорт
	ПериодОтчета 			= новый СтандартныйПериод(НачалоМесяца(МесяцОтчета), КонецМесяца(МесяцОтчета));
	
	параметры				= новый Структура("ПериодОтчета", ПериодОтчета);
	СхемаКомпоновкиДанных 	= Отчеты.ОтчетПоБесплатнойВыдаче.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Вариант					= "ОтчетПоБесплатнойВыдачеДетальный";
	Возврат ПолучитьТаблицуОтчета(параметры, СхемаКомпоновкиДанных, Вариант);	
	
КонецФункции



Функция ТаблицаВозмещениеЗаРазборНаЕРЦ(МесяцОтчета) Экспорт
	Если КонецМесяца(МесяцОтчета) = КонецМесяца(Дата(2022,03,01)) Тогда
		началоОтсчета = Дата(2022,03,25);
	Иначе	
		началоОтсчета = НачалоМесяца(МесяцОтчета);
	КОнецЕсли;
	ПериодОтчета 			= новый СтандартныйПериод(началоОтсчета, КонецМесяца(МесяцОтчета));
	
	параметры				= новый Структура("ПериодОтчета", ПериодОтчета);
	СхемаКомпоновкиДанных 	= Отчеты.ВозмещениеЗаРазборНаЕРЦ.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Вариант					= "ВозмещениеЗаРазборНаЕРЦСвод";
	Возврат ПолучитьТаблицуОтчета(параметры, СхемаКомпоновкиДанных, Вариант);	
	
КонецФункции


Функция ТаблицаКурьерскойДоставке(МесяцОтчета) Экспорт
	ПериодОтчета 			= новый СтандартныйПериод(НачалоМесяца(МесяцОтчета), КонецМесяца(МесяцОтчета));
	
	параметры				= новый Структура("ПериодОтчета", ПериодОтчета);
	СхемаКомпоновкиДанных 	= Отчеты.ОтчетПоКурьерскойДоставке.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Вариант					= "ОтчетПоКурьерскойДоставкеДетальный";
	Возврат ПолучитьТаблицуОтчета(параметры, СхемаКомпоновкиДанных, Вариант);	
	
КонецФункции


Функция ТаблицаПокупкиВПути(ДеньОтчета) Экспорт
	ПериодОтчета 			= новый СтандартныйПериод(НачалоДня(ДеньОтчета), КонецДня(ДеньОтчета));
	
	параметры				= новый Структура("Период", ПериодОтчета);
	СхемаКомпоновкиДанных 	= Отчеты.ПокупкиВПутиNEW.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Вариант					= "Детальный";
	Возврат ПолучитьТаблицуОтчета(параметры, СхемаКомпоновкиДанных, Вариант);	
	
КонецФункции




Функция СохранитьОтчетВозмещениеЗаРазборЕРЦXLSX(имяФайла, МесяцОтчета) Экспорт
	Если КонецМесяца(МесяцОтчета) = КонецМесяца(Дата(2022,03,01)) Тогда
		началоОтсчета = Дата(2022,03,25);
	Иначе	
		началоОтсчета = НачалоМесяца(МесяцОтчета);
	КОнецЕсли;
	ПериодОтчета 			= новый СтандартныйПериод(началоОтсчета, КонецМесяца(МесяцОтчета));
	
	параметры				= новый Структура("ПериодОтчета", ПериодОтчета);
	СхемаКомпоновкиДанных 	= Отчеты.ВозмещениеЗаРазборНаЕРЦ.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Вариант					= "ВозмещениеЗаРазборНаЕРЦ";
	ТабДок 					= ПолучитьОтчет(параметры, СхемаКомпоновкиДанных, Вариант);
	
	Попытка
		а =Новый файл(ИмяФайла);
		Если а.Существует() Тогда
			а.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;

		ТабДок.Результат.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
		Возврат Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

КонецФункции


Функция СохранитьОтчетПоБесплатнойВыдачеXLSX(имяФайла, МесяцОтчета) Экспорт
	
	ПериодОтчета 			= новый СтандартныйПериод(НачалоМесяца(МесяцОтчета), КонецМесяца(МесяцОтчета));
	
	параметры				= новый Структура("ПериодОтчета", ПериодОтчета);
	СхемаКомпоновкиДанных 	= Отчеты.ОтчетПоБесплатнойВыдаче.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Вариант					= "ОтчетПоБесплатнойВыдаче";
	ТабДок 					= ПолучитьОтчет(параметры, СхемаКомпоновкиДанных, Вариант);
	
	Попытка
		а =Новый файл(ИмяФайла);
		Если а.Существует() Тогда
			а.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;

		ТабДок.Результат.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
		Возврат Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

КонецФункции

Функция СохранитьОтчетПоКурьерскойДоставкеXLSX(имяФайла, МесяцОтчета) Экспорт
	
	ПериодОтчета 			= новый СтандартныйПериод(НачалоМесяца(МесяцОтчета), КонецМесяца(МесяцОтчета));
	
	параметры				= новый Структура("ПериодОтчета", ПериодОтчета);
	СхемаКомпоновкиДанных 	= Отчеты.ОтчетПоКурьерскойДоставке.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Вариант					= "ОтчетПоКурьерскойДоставке";
	ТабДок 					= ПолучитьОтчет(параметры, СхемаКомпоновкиДанных, Вариант);
	
	Попытка
		а =Новый файл(ИмяФайла);
		Если а.Существует() Тогда
			а.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;

		ТабДок.Результат.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
		Возврат Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

КонецФункции






Функция ПолучитьТаблицуОтчета(Параметры = Неопределено,  СхемаКомпоновкиДанных, Вариант, Отбор = Неопределено) Экспорт

	КомпоновщикНастроек		= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(
		СхемаКомпоновкиДанных.ВариантыНастроек[Вариант].Настройки);

	Настройки 			= КомпоновщикНастроек.Настройки;
	
	
	Если Параметры <> Неопределено Тогда
		Для Каждого элем Из параметры Цикл
			ПараметрДанных 					= Настройки.ПараметрыДанных.Элементы.Найти(элем.Ключ);
			ПараметрДанных.Значение 		= элем.Значение;
			ПараметрДанных.Использование	= Истина;	
		КонецЦикла;
	КонецЕсли;
	Если Отбор <> Неопределено Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
		Для Каждого элем Из Отбор Цикл
			ДоступноеПоле = Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти(элем.Ключ);
			ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = ДоступноеПоле.Поле;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = элем.Значение;
			ЭлементОтбора.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;

	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , , Тип(
		"ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ВнешниеНаборыДанных = Новый Структура;
//	ВнешниеНаборыДанных.Вставить("сверка", ТЗ_Сверка);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, );

	Результат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Возврат Результат;
КонецФункции


Функция ПолучитьОтчет(Параметры = Неопределено,  СхемаКомпоновкиДанных, Вариант, Отбор = Неопределено, УникальныйИдентификаторФормы = Неопределено, ВнешниеНД = Неопределено) Экспорт

	КомпоновщикНастроек		= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(
		СхемаКомпоновкиДанных.ВариантыНастроек[Вариант].Настройки);

	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

	Настройки 			= КомпоновщикНастроек.Настройки;
	Если Параметры <> Неопределено Тогда
		Для Каждого элем Из параметры Цикл
			ПараметрДанных 					= Настройки.ПараметрыДанных.Элементы.Найти(элем.Ключ);
			ПараметрДанных.Значение 		= элем.Значение;
			ПараметрДанных.Использование	= Истина;	
		КонецЦикла;
	КонецЕсли;

	
	Если Отбор <> Неопределено Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
		Для Каждого элем Из Отбор Цикл
			ДоступноеПоле = Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти(элем.Ключ);
			ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = ДоступноеПоле.Поле;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = элем.Значение;
			ЭлементОтбора.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;

	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,ДанныеРасшифровки , , Тип(
		"ГенераторМакетаКомпоновкиДанных"));
	
	
	ВнешниеНаборыДанных = Новый Структура;
	Если ВнешниеНД <> Неопределено	Тогда
		ВнешниеНаборыДанных = ВнешниеНД;
	КонецЕсли;	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	Результат = Новый ТабличныйДокумент();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент();;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Если УникальныйИдентификаторФормы = Неопределено Тогда
		Возврат Новый Структура("Результат, ДанныеРасшифровки",Результат, ПоместитьВоВременноеХранилище(ДанныеРасшифровки));
	Иначе	
		Возврат Новый Структура("Результат, ДанныеРасшифровки, СКД",
								Результат, 
								ПоместитьВоВременноеХранилище(ДанныеРасшифровки,Новый УникальныйИдентификатор),
								ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,Новый УникальныйИдентификатор));
	КонецЕсли;	
КонецФункции