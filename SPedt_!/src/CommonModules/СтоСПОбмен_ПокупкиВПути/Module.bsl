Функция Получить(ПериодНачала=Неопределено) Экспорт

	ПериодНачала= ПолучитьДатуЗагрузки(ПериодНачала);
	
	ПериодыОтправления 	= ПолучитьПериодыОтправления(ПериодНачала);
	хмл_отправили		= ПолучитьХМЛ(ПериодыОтправления);
	хмл_получили 		= СтоСПОбмен_Общий.Загрузить(хмл_отправили);

	объектXDTO_с_Заказами =  Разбор(хмл_получили);

	тзЗаказов = ПолучитьТаблицуЗаказов(объектXDTO_с_Заказами);
	СтоСПОбмен_Посылки.Загрузить_СоставПосылки_ПоПризнакуДогрузить();
	СтоСПОбмен_Коробки.Загрузить_КоробкиСПризнакомДогрузить();
	
	Результат = СформироватьДокуменыВыдачаТранзитаПоОбмену(тзЗаказов);
	Если Результат.Ошибок = 0 и объектXDTO_с_Заказами <> Ложь Тогда
		СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.ПокупкиВПутиОтчет);
	КонецЕсли;
	Возврат Результат;
КонецФункции	

Функция ПолучитьПериодыОтправления(ПериодНачала)
	текушийПериод = НачалоДня(ПериодНачала);
	периодыОтправления = новый СписокЗначений;
	Пока текушийПериод <= НачалоДня(ТекущаяДата()) Цикл
		периодыОтправления.Добавить(Формат(текушийПериод,"ДФ=dd.MM.yyyy;"));
		текушийПериод = текушийПериод + 60*60*24;
	КонецЦикла;
	Возврат периодыОтправления;	
КонецФункции


Функция ПолучитьДатуЗагрузки(ПериодНачала) 
	Если ПериодНачала=Неопределено Тогда
		ПериодНачала = Справочники.ПараметрыОбмена.ПокупкиВПутиОтчет.ДатаЗагрузки;
	КонецЕсли;
	Если не ЗначениеЗаполнено(ПериодНачала) Тогда
		ПериодНачала= НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Возврат ПериодНачала;
КонецФункции	

Функция ПолучитьХМЛ(ПериодыОтправления) 
	Тип_transfers				= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.transfers");
	Тип_distributors			= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	
	Объект_transfers			 	= ФабрикаXDTO.Создать(Тип_transfers);
	


	Для каждого элем из ПериодыОтправления Цикл	
		Объект_transfers.transfer.Добавить(элем.Значение);
	КонецЦикла;

	Объект_distributors						= ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.transfers			= Объект_transfers;
	
	Возврат СтоСПОбмен_Общий.ПолучитьСтрокуXML(Объект_distributors);
КонецФункции

Функция Разбор(ПолученныеДанные) 
	пространствоИмен		= "http://www.100sp.ru/api/distributor/upload/back/transfer";
	ПолученныеДанные		= СтрЗаменить(ПолученныеДанные,"http://www.100sp.ru",пространствоИмен);
	
	авторизацияВыполнена	= ложь;
	Если ПолученныеДанные 	= "Не удалось соеденится с сайтом" Тогда Возврат авторизацияВыполнена; КонецЕсли;
	
	Тип_distributors		= ФабрикаXDTO.Тип(пространствоИмен, "distributors");
	
	ЧтениеXML 				= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
 	Объект_distributors		= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена=истина;
	КонецЕсли;
	Если Объект_distributors.transfers = Неопределено Тогда
		Возврат авторизацияВыполнена;
	КонецЕсли;	
	Возврат	Объект_distributors.transfers.transfer;
КонецФункции

Функция ПолучитьТаблицуЗаказов(объектXDTO_с_Заказами)
	тз = новый ТаблицаЗначений;

	ТипЗаказ 		= Новый Массив;
	ТипЗаказ.Добавить(		Тип("СправочникСсылка.Посылки"));
	ТипЗаказ.Добавить(		Тип("СправочникСсылка.Коробки"));
	ТипПунктВыдачи 	= Новый Массив;
	ТипПунктВыдачи.Добавить(Тип("СправочникСсылка.ТочкиРаздачи"));
	КС = Новый КвалификаторыСтроки(12);

	
	тз.Колонки.Добавить("Заказ", 					Новый ОписаниеТипов(ТипЗаказ));
	тз.Колонки.Добавить("ДатаДокумента", 			Новый ОписаниеТипов("Дата"));
	тз.Колонки.Добавить("Группа", 					Новый ОписаниеТипов(ТипЗаказ));
	тз.Колонки.Добавить("ПунктВыдачиОтправитель",	Новый ОписаниеТипов(ТипПунктВыдачи));
	тз.Колонки.Добавить("НомерДокумента",			Новый ОписаниеТипов("Строка",,КС));
	
	
	Для каждого элем из объектXDTO_с_Заказами Цикл
		Для каждого заказ из элем.item Цикл
			новаяСтрока 						= тз.Добавить();
			новаяСтрока.НомерДокумента			= заказ.arrivalNumber;
			новаяСтрока.ДатаДокумента 			= НачалоДня(СтоСПОбмен_Общий.ДатаИзСтроки(заказ.created));
			новаяСтрока.ПунктВыдачиОтправитель 	= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(заказ.distributorCode);
			Если заказ.orderType = "package" Тогда
				новаяСтрока.Заказ 				= СП_РаботаСоСправочниками.ПолучитьПосылкуПо_Коду(заказ.orderId);				
			КонецЕсли;
			Если ЗначениеЗаполнено(заказ.groupCode)  Тогда
				новаяСтрока.Группа 				= СП_РаботаСоСправочниками.ПолучитьКоробкуПо_Коду(заказ.groupCode);
				СП_РаботаСоСправочниками.ОбновитьКоробку(новаяСтрока.Группа, новый Структура("видСтикера",Перечисления.ВидыСтикеров.ГС) );
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТаблицаЗаказов = тз.Скопировать(новый Структура("Группа",неопределено));
	
	массНеГрупп = тз.НайтиСтроки(новый Структура("Группа",неопределено));
	Для каждого элем из массНеГрупп Цикл
		тз.Удалить(элем);
	КонецЦикла;
	тз.свернуть("ДатаДокумента, Группа, ПунктВыдачиОтправитель, НомерДокумента");
	
	тз.Колонки.Группа.Имя = "Заказ";
	Для Каждого элем из тз Цикл
		новаяСтрока =ТаблицаЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(новаяСтрока,элем);
	КонецЦикла;
	
	
	Возврат ТаблицаЗаказов;
Конецфункции


Функция СформироватьДокуменыВыдачаТранзитаПоОбмену(тзЗаказов)
	
	ПолученоЭлементов = 0;
	Ошибок = 0;
	
	ВсеДокументыСформированны = Истина;
	тзКоличество = тзЗаказов.скопировать();
	тзКоличество.свернуть("НомерДокумента, ДатаДокумента, ПунктВыдачиОтправитель");
	ВсегоДокументов = тзКоличество.Количество();
	счетчик		 	= 0;
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	вт.НомерДокумента,
		|	вт.ДатаДокумента,
		|	вт.Заказ,
		|	вт.ПунктВыдачиОтправитель
		|ПОМЕСТИТЬ Внешняя
		|ИЗ
		|	&вт КАК вт
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Внешняя.НомерДокумента КАК НомерДокумента,
		|	Внешняя.ДатаДокумента КАК ДатаДокумента,
		|	Внешняя.Заказ,
		|	Внешняя.ПунктВыдачиОтправитель КАК ПунктВыдачиОтправитель
		|ИЗ
		|	Внешняя КАК Внешняя
		|ИТОГИ
		|ПО
		|	ПунктВыдачиОтправитель,
		|	ДатаДокумента";
	
	Запрос.Параметры.Вставить("вт", тзЗаказов);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПунктВыдачиОтправитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаПунктВыдачиОтправитель.Следующий() Цикл
		ВыборкаПунктВыдачиОтправитель.Количество();
		ВыборкаДатаДокумента = ВыборкаПунктВыдачиОтправитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДатаДокумента.Следующий() Цикл
			Выборка = ВыборкаДатаДокумента.Выбрать();
			//обТранзит = Документы.ВыдачаТранзита.СоздатьДокумент();
			обТранзит = ПолучитьДокументВыдачаТранзита( ВыборкаПунктВыдачиОтправитель.ПунктВыдачиОтправитель, 
														ВыборкаДатаДокумента.ДатаДокумента);

			Пока Выборка.Следующий() Цикл
				строкаЗаказа					= обТранзит.Покупки.Добавить();
				строкаЗаказа.Покупка			= Выборка.Заказ;
				строкаЗаказа.НомерОтправителя	= Выборка.НомерДокумента;
				строкаЗаказа.КоличествоМест		= 1;
				Если ТипЗнч(строкаЗаказа.Покупка) = Тип("СправочникСсылка.Коробки") Тогда
					строкаЗаказа.Количество		= строкаЗаказа.Покупка.Количество;
				иначе
					строкаЗаказа.Количество		= 1;										 
				КонецЕсли;
				Если ТипЗнч(Выборка.Заказ) = Тип("СправочникСсылка.Посылки") Тогда
					строкаЗаказа.Участник		= Выборка.Заказ.Участник;
				КонецЕсли;
			КонецЦикла;

			счетчик 			= счетчик + 1;
			Попытка
				обТранзит.Записать(РежимЗаписиДокумента.Проведение);
					ПолученоЭлементов = ПолученоЭлементов +1;
					ДокументТекст		= "" + ВыборкаПунктВыдачиОтправитель.ПунктВыдачиОтправитель + " "
					+ ВыборкаДатаДокумента.ДатаДокумента;

				ОбщегоНаЗначенияКлиентСервер.СообщитьПользователю("Формирование документов: " + ДокументТекст, , строка(
					счетчик), строка(ВсегоДокументов));

			Исключение
				Ошибок = Ошибок+1;		
				ВсеДокументыСформированны = Ложь;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"При записи документа ""Выдача транзита (по обмежну)"" возникла ошибка :" + ОписаниеОшибки(), ,
					строка(счетчик), строка(ВсегоДокументов));
			КонецПопытки;
		КонецЦикла;

	КонецЦикла;
	Результат = Новый Структура("ПолученоЭлементов,Ошибок",ПолученоЭлементов,Ошибок);
	
 	возврат Результат;
	
КонецФункции


Функция ПолучитьДокументВыдачаТранзита(ТочкаОтправитель, ДатаДок) 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыдачаТранзита.Ссылка
		|ИЗ
		|	Документ.ВыдачаТранзита КАК ВыдачаТранзита
		|ГДЕ
		|	ВыдачаТранзита.ПоОбмену
		|	И ВыдачаТранзита.Дата = &Дата
		|	И ВыдачаТранзита.ТочкаОтправитель = &ТочкаОтправитель
		|	И ВыдачаТранзита.Проведен";
		
		Запрос.УстановитьПараметр("Дата", 				НачалоДня(ДатаДок));
		Запрос.УстановитьПараметр("ТочкаОтправитель", 	ТочкаОтправитель);
		
		Результат 				= Запрос.Выполнить();
		

		ВыборкаДетальныеЗаписи 	= Результат.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
			ВыборкаДетальныеЗаписи.Следующий();
			обТранзит			= ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ИначеЕсли ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
			обТранзит=Документы.ВыдачаТранзита.СоздатьДокумент();
		Иначе	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				обТранзит			= ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				обТранзит.УстановитьПометкуУдаления(Истина);
				обТранзит.Записать();
			КонецЦикла;	
			обТранзит=Документы.ВыдачаТранзита.СоздатьДокумент();
		КонецЕсли;	
		обТранзит.Дата				= НачалоДня(ДатаДок);
		обТранзит.ПоОбмену			= Истина;
		обТранзит.ТочкаНазначения	= Константы.СвояТочка.Получить();
		обТранзит.ТочкаОтправитель	= ТочкаОтправитель;
		обТранзит.ТочкаТранзита		= обТранзит.ТочкаНазначения;
		обТранзит.Покупки.Очистить();		
		
		Возврат обТранзит;
	
	
КонецФункции	

	