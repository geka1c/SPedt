

Функция Авторизация() Экспорт
//	Адрес="https://api.dellin.ru/v1/customers/login.xml";
//	//Адрес="https://api.dellin.ru/v2/public/terminals.xml";
//	
//	СтруктураЗапроса=новый Структура;
//	СтруктураЗапроса.Вставить("appkey","E46B4891-F519-4014-8851-AB595703CA53");
//	СтруктураЗапроса.Вставить("login" ,"absentx@yandex.ru");
//	СтруктураЗапроса.Вставить("password" ,"YBNrrm6hv");
//	Тело = СериализоватьСтруктуруЗапроса(СтруктураЗапроса);

//	СтруктураАдреса=ОбщегоНазначенияКлиентСервер.СтруктураURI(Адрес);
//	
//	ответ = ВыполнитьPOSTЗапрос(СтруктураАдреса.Хост, СтруктураАдреса.Порт, СтруктураАдреса.ПутьНаСервере, 0, Тело);
//	СтруктураОтвета.КодСтатуса = Статус;
//	СтруктураОтвета.Данные     = Тело;
//	
//	
//	Возврат ответ;
КонецФункции


Функция ВыполнитьPOSTЗапрос(Хост, Порт, Адрес, Таймаут, Тело)
	
	// <TODO Автор="Марусов" Дата="2017-10-04" Тип="Критичный">Добавить возможность логирования в журнал</TODO> 
	
	Соединение = Новый HTTPСоединение(Хост, Порт, ,, , Таймаут);
	Заголовки  = Новый Соответствие;
	Заголовки.Вставить("Content-type", "text/xml");
	
	Запрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Запрос.УстановитьТелоИзСтроки(Тело, "UTF-8");
	
	Ответ  = Соединение.ОтправитьДляОбработки(Запрос);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("КодСтатуса", Ответ.КодСостояния);
	СтруктураДанных.Вставить("Тело",       Ответ.ПолучитьТелоКакСтроку());
	
	Возврат СтруктураДанных;
	
КонецФункции




Функция СтруктураОтветаНаЗапросДанных(Метод = Неопределено, КодСтатуса = 0, ОписаниеСтатуса = "")
	
	Ответ = Новый Структура;
	
	Ответ.Вставить("Метод",           Метод);
	Ответ.Вставить("КодСтатуса",      КодСтатуса);
	Ответ.Вставить("ОписаниеСтатуса", ОписаниеСтатуса);
	Ответ.Вставить("Данные",          Неопределено);
	
	Возврат Ответ;
	
КонецФункции



#Область СериализацияСтруктурыЗапросаВXML


Процедура СериализоватьСтруктуру(Приемник, ИмяЭлемента, Источник)
	
	Приемник.ЗаписатьНачалоЭлемента(ИмяЭлемента);	
	
	Для Каждого КлючЗначение Из Источник Цикл
		
		СериализоватьЗначение(Приемник, КлючЗначение.Ключ, КлючЗначение.Значение); 
		
	КонецЦикла;
	
	Приемник.ЗаписатьКонецЭлемента();
	
КонецПроцедуры


Процедура СериализоватьМассив(Приемник, ИмяЭлемента, Источник)
	
	Для Каждого Значение Из Источник Цикл
		
		СериализоватьЗначение(Приемник, ИмяЭлемента, Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СериализоватьЗначение(Приемник, ИмяЭлемента, Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Структура") Тогда
		
		СериализоватьСтруктуру(Приемник, ИмяЭлемента, Значение);
		
	ИначеЕсли ТипЗначения = Тип("Массив") Тогда
		
		СериализоватьМассив(Приемник, ИмяЭлемента, Значение);
		
	Иначе
		
		Приемник.ЗаписатьНачалоЭлемента(ИмяЭлемента);
		Приемник.ЗаписатьТекст(XMLСтрока(Значение));
		Приемник.ЗаписатьКонецЭлемента();
		
	КонецЕсли;	
	
КонецПроцедуры

Функция СериализоватьСтруктуруЗапроса(СтруктураЗапроса)
	
	XML = Новый ЗаписьXML; 	
	XML.УстановитьСтроку();
	
	СериализоватьСтруктуру(XML, "request", СтруктураЗапроса); 
	
	Возврат XML.Закрыть();
	
КонецФункции

#КонецОбласти



#Область ПубличныйАПИ
//Позволяет получить список городов, в которых есть пункты выдачи заказов Boxberry
Функция ПолучитьСписокГородов() Экспорт
    Прокси = ПолучитьПроксиПаблик().Прокси;
	токен=Константы.ТокенBoxBerry.Получить();
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить(ПолучитьПроксиПаблик().Адрес).Получить("ListCitiesQuery");
	WSПараметр=Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	WSПараметр.token=токен;
	СписокГородов=Прокси.ListCities(WSПараметр);
    
    Возврат СписокГородов;
КонецФункции

//Позволяет получить информацию о всех точках выдачи заказов. При использовании 
//дополнительного параметра ("code" код города в boxberry, можно получить методом ListCities) 
//позволяет выбрать ПВЗ только в заданном городе.
//По умолчанию возвращается список точек с возможностью оплаты при получении заказа
//(параметр 'OnlyPrepaidOrders'=No). Не возвращает отделения, работающие только с предоплаченными 
//посылками. Если вам необходимо увидеть точки, работающие с любым типом посылок, передайте 
//параметр "prepaid" равный 1
Функция ПолучитьСписокТочек(КодГорода=Неопределено,Предоплата=Неопределено) Экспорт
	Прокси = ПолучитьПроксиПаблик().Прокси;
	токен=Константы.ТокенBoxBerry.Получить();	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить(ПолучитьПроксиПаблик().Адрес).Получить("ListPointsQuery");
	WSПараметр=Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	WSПараметр.token=токен;
	Если ЗначениеЗаполнено(КодГорода)  Тогда WSПараметр.CityCode = КодГорода; КонецЕсли;
	Если ЗначениеЗаполнено(Предоплата) Тогда WSПараметр.prepaid = Предоплата; КонецЕсли;
	СписокТочек=Прокси.ListPoints(WSПараметр);
    
    Возврат СписокТочек;
КонецФункции




//позволяет получить всю информацию по пункту выдачи, включая фотографии.
Функция ПолучитьОписаниеТочки(КодТочки,получатьФото=ложь) Экспорт
	Прокси = ПолучитьПроксиПаблик().Прокси;
	токен=Константы.ТокенBoxBerry.Получить();	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить(ПолучитьПроксиПаблик().Адрес).Получить("PointsDescriptionQuery");
	WSПараметр=Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	WSПараметр.token=токен;
	WSПараметр.code =КодТочки;
	WSПараметр.photo =получатьФото;
	ОписаниеТочки=Прокси.PointsDescription(WSПараметр);
    Возврат ОписаниеТочки;
КонецФункции

	
//Позволяет получить список почтовых индексов, для которых возможна курьерская 
//доставка	
Функция ПолучитьСписокИндексов() Экспорт
	Прокси = ПолучитьПроксиПаблик().Прокси;
	токен=Константы.ТокенBoxBerry.Получить();	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить(ПолучитьПроксиПаблик().Адрес).Получить("ListZipsQuery");
	WSПараметр=Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	WSПараметр.token=токен;
	СписокИндексов=Прокси.ListZips(WSПараметр);
    
    Возврат СписокИндексов;
КонецФункции




//Процедура Позволяет получить стоимость доставки заказа до ПВЗ с учётом стоимости постоянных 
//услуг, предусмотренных Вашим договором, возможен расчет с учетом курьерской доставки. 
//Возвращает базовую стоимость, стоимость услуг (оповещение, выдача, страховой сбор, 
//прием платежа, курьерская доставка и т.п.), срок доставки с учетом варианта выдачи (получение 
//на ПВЗ или курьерская доставка). 
//Если указан почтовый индекс, расчет будет производиться для курьерской доставки по 
//заданному индексу (код пункта выдачи игнорируется).
//Параметры:
//WSServis - WS ссылка,
//токен - токен
// weight - вес посылки в граммах,
// targetstart - код пункта приема посылок,
// target - код пункта выдачи заказов,
// Обратите внимание! Следующие поля считаются равными 0 если не заполнены:
// ordersum - cтоимость товаров без учета стоимости доставки,
// deliverysum - заявленная ИМ стоимость доставки,
// paysum - сумма к оплате
// height - высота коробки (см),
// width - ширина коробки (см),
// depth - глубина коробки (см),
// zip - индекс города для курьерской доставки
// На выходе будет переменная price содержащая итоговую цену в рублях, а также 
//составляющие этой цены (базовая стоимость и стоимость услуг).
Функция ПолучитьСтоимостьДоставки(weight,targetstart,target,ordersum,deliverysum,paysum,
											height,width,depth,zip) Экспорт
	Прокси = ПолучитьПроксиПаблик().Прокси;
	токен=Константы.ТокенBoxBerry.Получить();
	
	price=0;
	price_base=0;
	price_service=0;
	delivery_period=0;
	
    Прокси.DeliveryCosts(токен,weight,targetstart,target,ordersum,deliverysum,paysum,
											height,width,depth,zip,price,price_base,price_service,delivery_period);
	Ответ=Новый Структура;											
	Ответ.Вставить("price",price);
	Ответ.Вставить("price_base",price_base);
	Ответ.Вставить("price_service",price_service);
	Ответ.Вставить("delivery_period",delivery_period);
											
    Возврат Ответ;
КонецФункции



#КонецОбласти


#Область ЛичныйКабинетАПИ


Функция ПечатьАктПередачи(ТрекНомер) Экспорт
	
	Прокси = ПолучитьПроксиЛК().Прокси;
	токен=Константы.ТокенBoxBerry.Получить();
	ТипSendQuery = Прокси.ФабрикаXDTO.Тип("api.boxberry.de", "ParselSendQuery");
	параметрSendQuery = Прокси.ФабрикаXDTO.Создать(ТипSendQuery);
	параметрSendQuery.token=токен;
	параметрSendQuery.ImIds=ТрекНомер;
	
	ответ=Новый Структура;
	Попытка
		Результат = Прокси.ParselSend(параметрSendQuery);

		ответ.Вставить("Успех",Истина);
		ответ.Вставить("Результат",Результат);
		//Сообщить(СокрЛП(Результат));
	Исключение
		ответ.Вставить("Успех",Ложь);
		ответ.Вставить("Результат",ОписаниеОшибки());
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Возврат ответ; 	
	
	
	
КонецФункции


//XXXXXX - код отслеживания заказа
//Позволяет получить ссылку на файл печати этикеток, список штрих-кодов коробок в посылке через запятую (,), список штрих-кодов выгруженных коробок в посылке через запятую (,) . Обязательно наличие параметра (код отслеживания заказа).
//Внимание! сервис работает только с посылками созданными в api.boxberry.de
Функция ПечатьЭтикеток(ТрекНомер) Экспорт
	
	Прокси = ПолучитьПроксиЛК().Прокси;
	токен=Константы.ТокенBoxBerry.Получить();
	
	label      ="";
	box        ="";
	box_upload ="";
	ответ=Новый Структура;
	Попытка
		
		Прокси.ParselCheck(токен, ТрекНомер, label, box, box_upload);
		Результат=Новый Структура;
		Результат.Вставить("label",label);
		Результат.Вставить("box",box);
		Результат.Вставить("box_upload",box_upload);
		
		ответ.Вставить("Успех",Истина);
		ответ.Вставить("Результат",Результат);
		//Сообщить(СокрЛП(Результат));
	Исключение
		ответ.Вставить("Успех",Ложь);
		ответ.Вставить("Результат",ОписаниеОшибки());
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Возврат ответ; 
КонецФункции



Функция СформироватьЗаказ(ДокОтправлениеТранзита)   Экспорт
	Прокси = ПолучитьПроксиЛК().Прокси;
	токен=Константы.ТокенBoxBerry.Получить();
	
	ТипСписок = Прокси.ФабрикаXDTO.Тип("api.boxberry.de", "ParselCreateQuery");
	ТипShop = Прокси.ФабрикаXDTO.Тип("api.boxberry.de", "ParselCreateShopData");
	ТипCustomer = Прокси.ФабрикаXDTO.Тип("api.boxberry.de", "ParselCreateCustomerData");
	ТипWeights = Прокси.ФабрикаXDTO.Тип("api.boxberry.de", "ParselCreateWeightsData");
	ТипItems = Прокси.ФабрикаXDTO.Тип("api.boxberry.de", "ParselCreateItemsData");
	ТипParselCreateKurdostData = Прокси.ФабрикаXDTO.Тип("api.boxberry.de", "ParselCreateKurdostData");
	
	
	// Заполняем параметр:
	WSПараметрСписок = Прокси.ФабрикаXDTO.Создать(ТипСписок);
	
	WSПараметрСписок.token = токен;
	WSПараметрСписок.order_id = ДокОтправлениеТранзита.Номер;
	//WSПараметрСписок.PalletNumber = "Номер палеты";
	//WSПараметрСписок.barcode = "баркод";                           //Внимание. Если вы передаёте параметр barcode (штрих-код заказа), вам недоступна печать нашей стандартной этикетки.
	WSПараметрСписок.price = ДокОтправлениеТранзита.ОбъявленнаяСтоимость;              //Общая (объявленная) стоимость ЗП, руб
	WSПараметрСписок.payment_sum = ДокОтправлениеТранзита.ИтогоСтоимость;               //Сумма к оплате (сумма, которую необходимо взять с получателя), руб. Рассчитывается как сумма стоимости товарных вложений и стоимости доставки. Стоимость товарных вложений = сумма (<price> x <quantity>) по всем <item>. Стоимость доставки = <delivery_sum> Для полностью предоплаченного заказа указывать 0
	
	//Если ДокОтправлениеТранзита.Коробка.МетодОплаты =Перечисления.МетодыОплаты.cod Тогда
	WSПараметрСписок.delivery_sum = ДокОтправлениеТранзита.ТарифТК;          //Стоимость доставки, которую ИМ объявил получателю, руб.
	//Иначе	
	//	WSПараметрСписок.delivery_sum=0;
	//КонецЕсли;	
	Если ДокОтправлениеТранзита.Тип="boxberryCourier" Тогда
		WSПараметрСписок.vid = "2";
		ОбъектParselCreateKurdostData = Прокси.ФабрикаXDTO.Создать(ТипParselCreateKurdostData);
		ОбъектParselCreateKurdostData.index   = ДокОтправлениеТранзита.Индекс;
		ОбъектParselCreateKurdostData.citi    = ДокОтправлениеТранзита.Город;
		ОбъектParselCreateKurdostData.addressp= ДокОтправлениеТранзита.Адрес;
		WSПараметрСписок.kurdost= ОбъектParselCreateKurdostData;
	Иначе	
		WSПараметрСписок.vid = "1";                   //Вид доставки. Возможные значения: 1 – самовывоз (доставка до ПВЗ), 2 – КД (экспресс-доставка до получателя)
	КонецЕсли;
	СписокShop = Прокси.ФабрикаXDTO.Создать(ТипShop);
	
	СписокShop.name = ДокОтправлениеТранзита.КодПВЗ;                //Код ПВЗ, в котором получатель будет забирать ЗП. Заполняется для самовывоза, для КД – оставить пустым.
	СписокShop.name1 =ДокОтправлениеТранзита.ПунктПриема.Код;       //Код пункта поступления ЗП (код ПВЗ, в который ИМ сдаёт посылки для доставки). Заполняется всегда, не зависимо от вида доставки. Для ИМ, сдающих отправления на ЦСУ Москва заполняется значением 010
	
	WSПараметрСписок.shop = СписокShop;
	
	СписокCustomer = Прокси.ФабрикаXDTO.Создать(ТипCustomer);
	
	СписокCustomer.fio = ДокОтправлениеТранзита.ФИО;                //ФИО получателя ЗП. Возможные варианты заполнения: «Фамилия Имя Отчество» или «Фамилия Имя» (разделитель – пробел).
																	//Внимание, для полностью предоплаченных заказов необходимо указывать Фамилию, Имя и Отчество получателя, т. к. при выдаче на ПВЗ проверяются паспортные данные.
	СписокCustomer.phone = ДокОтправлениеТранзита.Телефон;          //Номер мобильного телефона получателя.
																	//Внимание, если вы используете наше СМС-и/или голосовое оповещение, номер мобильного телефона необходимо передавать в формате 9ХХХХХХХХХ (10 цифр, начиная с девятки).

	//СписокCustomer.phone2 = "Доп. номер телефона";
	СписокCustomer.email = ДокОтправлениеТранзита.email;
	
	//name, address, inn, kpp, r_s, bank, kor_s, bik
	//Наименование юрлица-получателя. 
	//Внимание, данные поля обязательны для заполнения, если заказчиком и плательщиком по ЗП является юрлицо. При этом в поле <fio> указываются данные представителя юрлица, который будет получать ЗП. Для физлиц эти поля не заполняется.	
	//СписокCustomer.name = "Наименование организации";
	//СписокCustomer.address = "Адрес";
	//СписокCustomer.inn = "ИНН";
	//СписокCustomer.kpp = "КПП";
	//СписокCustomer.r_s = "Расчетный счет";
	//СписокCustomer.bank = "Наименование банка";
	//СписокCustomer.kor_s = "Кор. счет";
	//СписокCustomer.bik = "БИК";
	
	WSПараметрСписок.customer = СписокCustomer;
	Выборка=ДокОтправлениеТранзита.Заказы.Выбрать();
	
	РаскидаемПоТоварам=ДокОтправлениеТранзита.ИтогоСтоимость-ДокОтправлениеТранзита.ТарифТК;
	РаскидаемПоТоварам=?(РаскидаемПоТоварам<0,0,РаскидаемПоТоварам);
	ценаОдного=РаскидаемПоТоварам/Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		СписокItems=Прокси.ФабрикаXDTO.Создать(ТипItems);
		СписокItems.id= Выборка.НомерСтроки;
		СписокItems.name=Выборка.Покупка.Наименование;
		СписокItems.nds=0;
		ЦенаПозиции=0;//ценаОдного/Выборка.Количество;
		СписокItems.price=ЦенаПозиции;
		СписокItems.quantity=Выборка.Количество;
		WSПараметрСписок.items.Добавить(СписокItems);
	КонецЦикла;
	
	
	СписокWeights = Прокси.ФабрикаXDTO.Создать(ТипWeights);
	
	СписокWeights.weight = ДокОтправлениеТранзита.Вес;
	СписокWeights.weight2 = "0";
	СписокWeights.weight3 = "0";
	СписокWeights.weight4 = "0";
	СписокWeights.weight5 = "0";
	
	WSПараметрСписок.weights = СписокWeights;
	ответ=Новый Структура;
	// Обращаемся:
	Попытка
		Результат = Прокси.ParselCreate(WSПараметрСписок);

		ответ.Вставить("Успех",Истина);
		ответ.Вставить("Результат",Результат);
		Сообщить("label: " + СокрЛП(Результат.label) + Символы.ПС + "track: " + СокрЛП(Результат.track));
	Исключение
		ответ.Вставить("Успех",Ложь);
		ответ.Вставить("Результат",ОписаниеОшибки());
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Возврат ответ; 
КонецФункции


Функция УдалитьЗаказ(ТрекНомер) Экспорт
	Прокси = ПолучитьПроксиЛК().Прокси;
	токен=Константы.ТокенBoxBerry.Получить();

	ответ=Новый Структура;
	Попытка
		Результат = Прокси.ParselDel(токен, ТрекНомер);

		ответ.Вставить("Успех",Истина);
		ответ.Вставить("Результат",Результат);
		//Сообщить(СокрЛП(Результат));
	Исключение
		ответ.Вставить("Успех",Ложь);
		ответ.Вставить("Результат",ОписаниеОшибки());
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Возврат ответ; 	
КонецФункции	


#КонецОбласти



#Область ВспомогательныеФункции
Функция ПолучитьПроксиПаблик()
	WSServis=WSСсылки.WSBoxBerry;
	ОписаниеСервиса = WSServis.ПолучитьWSОпределения().Сервисы[0];
    Адрес        = ОписаниеСервиса.URIПространстваИмен;
    ИмяСервиса     = ОписаниеСервиса.Имя;                            
    ИмяПорта     = ОписаниеСервиса.ТочкиПодключения[0].Имя;
    Прокси = WSServis.СоздатьWSПрокси(Адрес,ИмяСервиса,ИмяПорта,,,);
	
	Возврат новый Структура("Прокси,Адрес",Прокси,Адрес);
КонецФункции	

Функция ПолучитьПроксиЛК()
	WSServis=WSСсылки.WSBoxBerryLK;
	ОписаниеСервиса = WSServis.ПолучитьWSОпределения().Сервисы[0];
    Адрес        = ОписаниеСервиса.URIПространстваИмен;
    ИмяСервиса     = ОписаниеСервиса.Имя;                            
    ИмяПорта     = ОписаниеСервиса.ТочкиПодключения[0].Имя;
    Прокси = WSServis.СоздатьWSПрокси(Адрес,ИмяСервиса,ИмяПорта,,,);
	Возврат новый Структура("Прокси,Адрес",Прокси,Адрес);
КонецФункции	

#КонецОбласти