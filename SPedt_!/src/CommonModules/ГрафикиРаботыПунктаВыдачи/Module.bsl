Процедура Синхронизировать() Экспорт
	док 				= Документы.СинхронизацияГрафиковРаботы.СоздатьДокумент();	
	док.Дата			= ТекущаяДата();
	док.НачалоЗагрузки 	= НачалоДня(Справочники.ПараметрыОбмена.ГрафикиРаботы.ДатаЗагрузки);
	Если не ЗначениеЗаполнено(док.НачалоЗагрузки) Тогда
		док.НачалоЗагрузки  = НачалоГода(НачалоГода(ТекущаяДата()) - 1)
	КонецЕсли;	             
	ГрафикиРаботыПунктаВыдачи.ЗаполнитьКалендари(док);
	Если не ЗначениеЗаполнено(док.Ссылка) или док.Модифицированность() Тогда 
		Док.Записать();
	КонецЕсли;
	
	РежимРаботыЗагружен 	= СтоСПОбмен_ГрафикРаботы.ЗагрузитьРежимРаботы(док); 
	Док.Праздники.Очистить();
	ПраздничныеДниЗагружены	= СтоСПОбмен_ГрафикРаботы.ЗагрузитьПраздничныеДни(Док,НачалоГода(Док.ДАта));
	ПраздничныеДниЗагружены	= СтоСПОбмен_ГрафикРаботы.ЗагрузитьПраздничныеДни(Док,КонецГода(Док.ДАта)+1);
	док.ОбменВыполнен 		= (РежимРаботыЗагружен и ПраздничныеДниЗагружены);
	Если док.ОбменВыполнен Тогда
		Док.Записать();
		ГрафикиРаботыПунктаВыдачи.ПерезаполнитьКлендариДаннымиСинхронизации(Док);	
		ГрафикиРаботыПунктаВыдачи.ОтразитьПраздникиВСправочнике(Док);
		СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.ГрафикиРаботы)
	КонецЕсли;	
	
КонецПроцедуры	


Процедура ОтразитьПраздникиВСправочнике(Объект) Экспорт
	Для каждого элем из Объект.Праздники Цикл
		пд = Справочники.ПраздничныеДни.НайтиПоРеквизиту("Дата",Элем.Дата);
		Если не значениеЗаполнено(пд) Тогда
			пдОбъект = Справочники.ПраздничныеДни.СоздатьЭлемент();
			
		ИначеЕсли 	пд.ВремяНачала 		<> элем.ВремяНачала или
					пд.ВремяОкончания 	<> элем.ВремяОкончания или
			        пд.Комментарий 		<> элем.Комментарий или
					пд.id 				<> элем.id                 Тогда
			пдОбъект = пд.ПолучитьОбъект();
		Иначе			
			 Продолжить;
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(пдОбъект, элем);
		пдОбъект.Наименование = элем.комментарий;
		продолжительностьПраздника = (пдОбъект.ВремяОкончания - пдОбъект.ВремяНачала)/(60*60);
		
		пдОбъект.ИсключатьИзРасчета = (продолжительностьПраздника>4);
		Попытка
			пдОбъект.Записать();
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;                 
		//Если (продолжительностьПраздника>4) Тогда     
		//	
		//	//Справочники.Календари.ЗаписатьДанныеГрафикаВРегистр(
		//	//Объект.ГрафикРаботы, ДниВключенныеВГрафик, ДатаНачала, ДатаОкончанияЗаполнения);

		//	НаборДни = РегистрыСведений.КалендарныеГрафики.СоздатьНаборЗаписей();
		//	НаборДни.Отбор.Календарь.Установить(Объект.ГрафикРаботы); 
		//	НаборДни.Отбор.ДатаГрафика.Установить(Элем.Дата); 
		//	НаборДни.Прочитать();  
		//	Если НаборДни.Количество() = 0 Тогда
		//		НоваяСтрока = НаборДни.Добавить()
		//		
		//	иначе
		//		НоваяСтрока = НаборДни[0];
		//	КонецЕсли;
		//	НоваяСтрока.Календарь = Объект.ГрафикРаботы;
		//	НоваяСтрока.ДатаГрафика = элем.дата;
		//	НоваяСтрока.Год = Год(Элем.Дата);
		//	НоваяСтрока.ДеньВключенВГрафик = Ложь;;
		//	НаборДни.Записать();
		//	
		//КонецЕсли;

		
		
	КонецЦикла;	
КонецПроцедуры	

Процедура ЗаполнитьКалендари(Объект) Экспорт
	Год = Год(Объект.Дата);
	ПрошлыйГод = Год-1;
	СледующийГод = Год+1;
	Объект.ПроизводственныйКалендарь = ПолучитьКалендарьПунктаВыдачи(ПрошлыйГод);
	Объект.ПроизводственныйКалендарь = ПолучитьКалендарьПунктаВыдачи(Год);
	Объект.ПроизводственныйКалендарь = ПолучитьКалендарьПунктаВыдачи(СледующийГод);
	Объект.ГрафикРаботы				 = ПолучитьГрафикРаботыПунктаВыдачи(Объект.ПроизводственныйКалендарь, Объект.НачалоЗагрузки);
КонецПроцедуры	

Процедура ПерезаполнитьКлендариДаннымиСинхронизации(Объект) Экспорт
	
	ЗаполнитьКалендари(Объект);
	ТаблицаПраздников	= Объект.Праздники.Выгрузить(,"Дата, ВремяНачала, ВремяОкончания");

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ.Дата КАК Дата,
		|	ВТ.ВремяНачала КАК ВремяНачала,
		|	ВТ.ВремяОкончания КАК ВремяОкончания
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ВТ КАК ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Дата КАК Дата,
		|	МИНИМУМ(ВТ.ВремяНачала) КАК ВремяНачала,
		|	МАКСИМУМ(ВТ.ВремяОкончания) КАК ВремяОкончания
		|ПОМЕСТИТЬ Сбор
		|ИЗ
		|	ВТ КАК ВТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сбор.Дата КАК Дата,
		|	Сбор.ВремяНачала КАК ВремяНачала,
		|	Сбор.ВремяОкончания КАК ВремяОкончания,
		|	РАЗНОСТЬДАТ(Сбор.ВремяНачала, Сбор.ВремяОкончания, ЧАС) КАК Часов,
		|	ГОД(Сбор.Дата) КАК Год
		|ИЗ
		|	Сбор КАК Сбор
		|ИТОГИ ПО
		|	Год";
	
	Запрос.Параметры.Вставить("ВТ", ТаблицаПраздников);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаГод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГод.Следующий() Цикл
		// Вставить обработку выборки ВыборкаГод
	    ПроизводственныйКалендарь = ПолучитьКалендарьПунктаВыдачи(ВыборкаГод.Год);
		ВыборкаДетальныеЗаписи = ВыборкаГод.Выбрать();
		
		НеРабочиеДни = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Часов >= 4 Тогда        

				
				НеРабочиеДни.Добавить(ВыборкаДетальныеЗаписи.Дата);
				Объект.ГрафикИзменился = Истина;
				
				
				НаборДни = РегистрыСведений.КалендарныеГрафики.СоздатьНаборЗаписей();
				НаборДни.Отбор.Календарь.Установить(Объект.ГрафикРаботы); 
				НаборДни.Отбор.ДатаГрафика.Установить(ВыборкаДетальныеЗаписи.Дата); 
				НаборДни.Прочитать();  
				Если НаборДни.Количество() = 0 Тогда
					НоваяСтрока = НаборДни.Добавить()
					
				иначе
					НоваяСтрока = НаборДни[0];
				КонецЕсли;
				НоваяСтрока.Календарь = Объект.ГрафикРаботы;
				НоваяСтрока.ДатаГрафика = ВыборкаДетальныеЗаписи.дата;
				НоваяСтрока.Год = ВыборкаДетальныеЗаписи.Год;
				НоваяСтрока.ДеньВключенВГрафик = Ложь;;
				НаборДни.Записать();
				
			КонецЕсли;	
		КонецЦикла;
		ИзменитьВидДнейПроизводственногоКалендаря(ПроизводственныйКалендарь, НеРабочиеДни, Перечисления.ВидыДнейПроизводственногоКалендаря.Нерабочий); 
		справочники.Календари.ПересчетДнейСначалаГода(Объект.ГрафикРаботы,ВыборкаГод.Год);// Вставить содержимое обработчика.

	КонецЦикла;
	
	
	ГрафикРаботы	 = ПолучитьГрафикРаботыПунктаВыдачи(Объект.ПроизводственныйКалендарь, Объект.НачалоЗагрузки);
	
	обГрафикРаботы 	 = ГрафикРаботы.ПолучитьОбъект();
	Для каждого Элем из Объект.РежимРаботы Цикл
		
		Если обГрафикРаботы.ШаблонЗаполнения[Элем.НомерСтроки-1].ДеньВключенВГрафик <> Элем.РабочийДень  Тогда
			Объект.ГрафикИзменился = Истина;
			обГрафикРаботы.ШаблонЗаполнения[Элем.НомерСтроки-1].ДеньВключенВГрафик = Элем.РабочийДень;
		КонецЕсли;	
	КонецЦикла;
	Если Объект.ГрафикИзменился Тогда
		обГрафикРаботы.ДатаОтсчета	=	Объект.НачалоЗагрузки;
		обГрафикРаботы.Записать();
		Константы.ГрафикРаботыПунктаВыдачи.Установить(обГрафикРаботы.Ссылка);
	КонецЕсли;
	
	
КонецПроцедуры



Процедура НоваяСинхронизаця()
	документСинхронизации = Документы.СинхронизацияГрафиковРаботы.СоздатьДокумент();
	документСинхронизации.Дата = ТекущаяДата();
	
КонецПроцедуры	



Функция ПолучитьГрафикРаботыПунктаВыдачи(ПроизводственныйКалендарь, НачалоЗагрузки = Неопределено)
	НаименованиеГрафика	=	"ГрафикРаботыПунктаВыдачи";
	НашлиГрафикРаботы 	= Справочники.Календари.НайтиПоНаименованию(НаименованиеГрафика);
	Если не ЗначениеЗаполнено(НашлиГрафикРаботы) Тогда
		ГрафикРаботыПВ 			 					= Справочники.Календари.СоздатьЭлемент();		
		ГрафикРаботыПВ.Наименование 				= НаименованиеГрафика;
		ГрафикРаботыПВ.ПроизводственныйКалендарь 	= ПроизводственныйКалендарь;
		ГрафикРаботыПВ.СпособЗаполнения				= перечисления.СпособыЗаполненияГрафикаРаботы.ПоНеделям;
		ГрафикРаботыПВ.ШаблонЗаполнения.Загрузить(ПолучитьШаблонЗаполненияПоУмолчанию());
		ГрафикРаботыПВ.УчитыватьПраздники			= Истина;
		Если не ЗначениеЗаполнено(ГрафикРаботыПВ.ДатаОтсчета) Тогда
			ГрафикРаботыПВ.ДатаОтсчета					= НачалоГода(НачалоГода(ТекущаяДата())-1);
		КонецЕсли;
		Если не ЗначениеЗаполнено(ГрафикРаботыПВ.ДатаНачала) Тогда
			ГрафикРаботыПВ.ДатаНачала					= НачалоГода(НачалоГода(ТекущаяДата())-1);
		КонецЕсли;
		Если не ЗначениеЗаполнено(ГрафикРаботыПВ.ДатаОкончания) или
			Год(ГрафикРаботыПВ.ДатаОкончания) < Год(ТекущаяДата()) Тогда
			ГрафикРаботыПВ.ДатаОкончания				= ДобавитьМесяц(КонецГода(ТекущаяДата()),12);
		КонецЕсли;		
		Попытка
		    ГрафикРаботыПВ.Записать();
		Исключение
								
		КонецПопытки;
		НашлиГрафикРаботы = ГрафикРаботыПВ.Ссылка; 
	КонецЕсли;	                           
	ДатаОкончания = НачалоДня(КонецГода(КонецГода(ТекущаяДата())+1));
	Если НашлиГрафикРаботы.ДатаОкончания < ДатаОкончания Тогда
		график = НашлиГрафикРаботы.ПолучитьОбъект();
		график.ДатаОкончания = ДатаОкончания;
		график.Записать();
	КонецЕсли;	
	Если НачалоЗагрузки <> Неопределено и НашлиГрафикРаботы.ДатаНачала <> НачалоЗагрузки Тогда
		график = НашлиГрафикРаботы.ПолучитьОбъект();
		график.ДатаНачала = НачалоЗагрузки;
		график.Записать();
	КонецЕсли;	
	
	Возврат НашлиГрафикРаботы;
КонецФункции

Функция ПолучитьКалендарьПунктаВыдачи(Год)
	НашлиКалендарь = Справочники.ПроизводственныеКалендари.НайтиПоНаименованию("КалендарьПунктаВыдачи");
	Если не ЗначениеЗаполнено(НашлиКалендарь) Тогда
		КалендарьПВ 			 	= Справочники.ПроизводственныеКалендари.СоздатьЭлемент();		
		КалендарьПВ.Наименование 	= "КалендарьПунктаВыдачи";
		КалендарьПВ.Код				= "ПВ";
		Попытка
		    КалендарьПВ.Записать();
		Исключение
								
		КонецПопытки;
		НашлиКалендарь = КалендарьПВ.Ссылка; 
	КонецЕсли;
	ДанныеПК 			= Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(НашлиКалендарь, Год);
	Если ДанныеПК.Количество()<360 Тогда
		ДанныеПоУмолчанию 	= Справочники.ПроизводственныеКалендари.РезультатЗаполненияПроизводственногоКалендаряПоУмолчанию("РФ", Год);
		Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(НашлиКалендарь, Год, ДанныеПоУмолчанию);
	КонецЕсли;		
	
	Возврат НашлиКалендарь;
КонецФункции


Процедура ИзменитьВидДняПроизводственногоКалендаря(Календарь, День, ВидДня)
	ДанныеПК 	= Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(Календарь, Год(День));
	мас_Строк 	= ДанныеПК.НайтиСтроки(Новый Структура("Дата",День));
	Для Каждого элем из мас_Строк Цикл
		элем.ВидДня	= ВидДня;
	КонецЦикла;
	Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(Календарь, Год(День), ДанныеПК);
КонецПроцедуры

Процедура ИзменитьВидДнейПроизводственногоКалендаря(Календарь, МассивДней, ВидДня)
	Год = Год(МассивДней[0]);
	ДанныеПК 	= Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(Календарь, Год);
	Для Каждого элемДень из МассивДней Цикл
		мас_Строк 	= ДанныеПК.НайтиСтроки(Новый Структура("Дата",элемДень));
		Для Каждого элем из мас_Строк Цикл
			элем.ВидДня	= ВидДня;
		КонецЦикла;
	КонецЦикла;
	Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(Календарь, Год, ДанныеПК);
КонецПроцедуры



Функция ПолучитьШаблонЗаполненияПоУмолчанию()
	Шаблон = Новый ТаблицаЗначений;
	Шаблон.Колонки.Добавить("ДеньВключенВГрафик",Новый ОписаниеТипов("Булево"));
	Для инд = 1 по 7 Цикл
		новаяСтрока	= Шаблон.Добавить();
		новаяСтрока.ДеньВключенВГрафик = Истина;
	КонецЦикла;
	Возврат Шаблон;
КонецФункции	
