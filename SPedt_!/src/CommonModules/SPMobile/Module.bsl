Функция СформироватьСтрокуПодключения() Экспорт     
	
	//ИмяКомпьютера = ИмяКомпьютера();
	
	ИмяКомпьютера = Константы.мкАдресСервера.Получить();
	//ИмяКонфигурации = СтандартныеПодсистемыСервер.ПараметрыАдминистрирования().ИмяВКластере;	
	ИмяПубликации = Константы.мкИмяПубликации.Получить();
	
	СтрокаПодключения = "http://"+ИмяКомпьютера+"/"+ИмяПубликации+"/ws/SPMobile?wsdl";   
	Возврат СтрокаПодключения;	
КонецФункции	


Функция ПолучитьIPПК() Экспорт
	
	strComputer = ".";
	SWBemlocator = Новый COMОбъект("WbemScripting.SWbemLocator");
	objWMIService = SWBemlocator.ConnectServer(strComputer,"root\CIMV2");
	IPConfigSet = objWMIService.ExecQuery("Select IPAddress from Win32_NetworkAdapterConfiguration where ipenabled = true");
	Разделитель = "";   
	адреса = "";
	Для Каждого Строка in IPConfigSet Цикл
		Для Каждого Стр Из Строка.IPAddress Цикл 
			адреса = адреса + Стр + Разделитель;
			Прервать;
		КонецЦикла;
		Разделитель = ";";
	КонецЦикла;      
	Возврат адреса;
КонецФункции

#Область Расходная

Функция СписокРасходных(Count) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 5
		|	Расходная.Номер КАК Номер,
		|	Расходная.Дата КАК Дата,
		|	Расходная.Участник КАК Участник,
		|	Расходная.СтоимостьИтого КАК СтоимостьИтого,
		|	Расходная.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Расходная КАК Расходная
		|ГДЕ
		|	Расходная.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 5", "ПЕРВЫЕ "+Формат(Count,"ЧГ=0"));
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	об_listInvoice = ПолучитьОбъектXDTO("listInvoice");
	
	
	Пока Выборка.Следующий() Цикл
		об_Invoice = ПолучитьОбъектXDTO("listInvoice.Invoice");	
		
		об_appointment 			= ПолучитьОбъектXDTO("appointment");
		об_appointment.id   	= Выборка.Участник.Код;
		об_appointment.name 	= Выборка.Участник.Наименование;
		об_appointment.type 	= "Участник";
		
		
		об_Invoice.barcode 	= СП_Штрихкоды.ШКДокумента(Выборка.Ссылка);			
		об_Invoice.number 		= Выборка.Номер;
		об_Invoice.date			= Выборка.Дата;
		об_Invoice.posting		= Истина;
		об_Invoice.appointment	= об_appointment;
		об_Invoice.sum			= Выборка.СтоимостьИтого;
		об_Invoice.count		= Выборка.Ссылка.Покупки.Количество();
		
		об_listInvoice.Invoice.Добавить(об_Invoice);
	КонецЦикла;
	об_listInvoice.Проверить();
	
	Возврат	об_listInvoice;

КонецФункции

Функция РасходнаяПоШК(ШК) Экспорт
	ДанныеШК = СП_Штрихкоды.ПолучитьДанныеПоШК(ШК);	
	Док = ДанныеШК.Ссылка;     
	Возврат Расходная(Док);	
КонецФункции


функция РасходнаяПоУчастнику(Участник, КартаУчастника = неопределено) Экспорт
	Док 			= Документы.Расходная.СоздатьДокумент();
	Док.Участник 	= Участник;   
	Док.Дата		= ТекущаяДата();
	Если ЗначениеЗаполнено(КартаУчастника) Тогда
		Док.КартаУчастника = КартаУчастника;
	КонецЕсли;
	Док.Заполнитьостатками();

	//Док.Записать();      // не записываем документ, чтобы не плодить при ходостых обращениях

	Возврат Расходная(Док);		
КонецФункции 

Функция Расходная(Док) 
	
	об_appointment 		= ПолучитьОбъектXDTO("appointment");
	об_appointment.id   = Док.Участник.Код;
	об_appointment.name = Док.Участник.Наименование;
	об_appointment.type = "Участник";
			
	об_Invoice 				= ПолучитьОбъектXDTO("listInvoice.Invoice");	
	об_Invoice.number 		= Док.Номер;
	об_Invoice.date			= Док.Дата;
	об_Invoice.barcode		= ?(ЗначениеЗаполнено(Док.ссылка),СП_Штрихкоды.ШКДокумента(Док.ссылка),"");
	об_Invoice.appointment	= об_appointment;    
	об_Invoice.sum			= Док.СтоимостьИтого;
	об_Invoice.count		= Док.Покупки.Количество();
	об_Invoice.posting		= Док.Проведен;	
		
	об_orders = ПолучитьОбъектXDTO("listInvoice.Invoice.orders");
		
	
	Для каждого строкаПокупки из док.Покупки Цикл
		об_orderString = ПолучитьОбъектXDTO("listInvoice.Invoice.orders.orderString");
			
		об_user 		= ПолучитьОбъектXDTO("object.user");
		об_user.id      = Док.Участник.Код;
		об_user.name    = Док.Участник.Наименование;   
		
		
		об_user_org		= ПолучитьОбъектXDTO("object.user");
		об_user_org.id      = строкаПокупки.Покупка.Организатор.Код;
		об_user_org.name    = строкаПокупки.Покупка.Организатор.Наименование;   
		
			
		об_tariff 			= ПолучитьОбъектXDTO("object.tariff");
		об_tariff.barcode   = строкаПокупки.Габарит.Код;
		об_tariff.name  	= строкаПокупки.Габарит.Наименование;
			
		об_cell 			= ПолучитьОбъектXDTO("object.cell");
		об_cell.barcode 	= строкаПокупки.МестоХранения.Код;
		об_cell.name  		= строкаПокупки.МестоХранения.Наименование;
			
		об_order 			= ПолучитьОбъектXDTO("object.order");
		об_order.user 		= об_user;
		об_order.name 		= строкаПокупки.Покупка.Наименование;
		
		об_order.org 		= об_user_org;
			
		Если не ЗначениеЗаполнено(строкаПокупки.Покупка.ШК) Тогда
			объект 		= строкаПокупки.Покупка.ПолучитьОбъект();				
			объект.ШК 	= СП_Штрихкоды.ПолучитьМегаордер(Объект.Ссылка,Объект.Участник ,Объект.ПунктВыдачи );
			объект.Записать()
		КонецЕсли;	
		об_order.barcode 	= строкаПокупки.Покупка.ШК.Код;				
				
		об_orderString.number    = строкаПокупки.НомерСтроки;
		об_orderString.selected  = Ложь;
		об_orderString.order	 =	об_order;
		об_orderString.tariff    = об_tariff;
		об_orderString.cell      = об_cell;
		
		об_orders.orderString.Добавить(об_orderString);
			
	КонецЦикла;	
	

	
	об_Invoice.orders = об_orders; 
	
	об_Invoice.Проверить();
	
	Возврат	об_Invoice;
	
КонецФункции

Функция ЗаписатьРасходную(УчастникКод,Дата, количество,сумма, КартаУчастника = неопределено) Экспорт   
	
	об_respPost 		= ПолучитьОбъектXDTO("responce.PostInvoice");

	Док 			= Документы.Расходная.СоздатьДокумент();
	Док.Участник 	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(УчастникКод);   
	Док.Дата		= Дата;
	Если ЗначениеЗаполнено(КартаУчастника) Тогда
		Док.КартаУчастника = КартаУчастника;
	КонецЕсли;
	Док.Заполнитьостатками();     
	ДокументИзменился = Ложь;
	описаниеОшибки = "";
	Если Док.Покупки.Количество() <> количество Тогда
		описаниеОшибки = "количество; " + количество + " -> "+ Док.Покупки.Количество();				
		ДокументИзменился = Истина;
	КонецЕсли;
	Если Док.СтоимостьИтого <> сумма Тогда
		описаниеОшибки = "Стоимость; " + сумма + " -> "+ Док.СтоимостьИтого;				
		ДокументИзменился = Истина;
	КонецЕсли;
	Если ДокументИзменился Тогда   
		об_respPost.result = Ложь;
		об_respPost.message = описаниеОшибки;		
		возврат об_respPost;
	КонецЕсли;		
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		об_respPost.result = Истина;
		об_respPost.message = "";		
		об_respPost.Invoice = Расходная(Док);
	Исключение
		об_respPost.result = Ложь;
		об_respPost.message = ОписаниеОшибки();		
	КонецПопытки;
	
	Возврат об_respPost;		
КонецФункции	
#КонецОбласти 


#Область СинхронизацияПриходов
Функция ЗаписатьСинхронизацияМобильныйКлиент(body, codeClirent) Экспорт   
	
	об_resp 		= ПолучитьОбъектXDTO("responce.PostIncome");
	мобильныйКлиент = Справочники.МобильныеКлиенты.НайтиПоКоду(codeClirent);
	
	
	таблицаДокументов = новый ТаблицаЗначений;
	таблицаДокументов.Колонки.Добавить("Номер", 	новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(9)));
	таблицаДокументов.Колонки.Добавить("Дата", 		новый ОписаниеТипов("Дата"));
	Для каждого элем из body.strDoc Цикл
		новаяСтрока = таблицаДокументов.Добавить();	
		новаяСтрока.Номер = Элем.num;
		новаяСтрока.Дата = Элем.date;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт.Номер КАК Номер,
		|	вт.Дата КАК Дата
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	&вт КАК вт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.Номер КАК Номер,
		|	вт.Дата КАК Дата,
		|	СинхронизацияМобильноеПриложение.Ссылка КАК ДокументСинхронизации
		|ИЗ
		|	вт КАК вт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СинхронизацияМобильноеПриложение КАК СинхронизацияМобильноеПриложение
		|		ПО вт.Номер = СинхронизацияМобильноеПриложение.мкНомер
		|			И вт.Дата = СинхронизацияМобильноеПриложение.мкДата
		|			И (СинхронизацияМобильноеПриложение.МобильныйКлиент = &МобильныйКлиент)
		|			И (СинхронизацияМобильноеПриложение.Проведен)";
	Запрос.УстановитьПараметр("вт", таблицаДокументов);
	Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДокументыСинхронизации = РезультатЗапроса.Выбрать();
	
	
	
	
	ДатаДокумента = ТекущаяДата();
	Для каждого элем из body.strDoc Цикл   
		об_resp_str 		= ПолучитьОбъектXDTO("responce.PostIncome.str");
		ЗаполнитьЗначенияСвойств(об_resp_str,элем);
		ВыборкаДокументыСинхронизации.НайтиСледующий(новый Структура("номер, дата",элем.num,элем.date));
		Если ЗначениеЗаполнено(ВыборкаДокументыСинхронизации.ДокументСинхронизации) Тогда
			Сообщение ="Для № "+элем.num +" от "+элем.date +" уже сформирован " +ВыборкаДокументыСинхронизации.ДокументСинхронизации;
			об_resp_str.result = Ложь;
			об_resp_str.message = Сообщение;
			об_resp.str.Добавить(об_resp_str);
			ВыборкаДокументыСинхронизации.Сбросить();
		    Продолжить;
		КонецЕсли;
		ВыборкаДокументыСинхронизации.Сбросить();
		
	    документСинхронизации 					= Документы.СинхронизацияМобильноеПриложение.СоздатьДокумент();
		документСинхронизации.МобильныйКлиент 	= мобильныйКлиент;
		документСинхронизации.Дата 				= ДатаДокумента; 
		документСинхронизации.мкДата 			= элем.date;
		документСинхронизации.мкНомер 			= элем.num;
		данныеШК 								= СП_Штрихкоды.ПолучитьДанныеПоШК(элем.barcodeGroup);
		документСинхронизации.Коробка			= ?(данныеШК = неопределено , Справочники.Коробки.БезКоробки,данныеШК.Коробка);
		данныеШК 								= СП_Штрихкоды.ПолучитьДанныеПоШК(элем.barcodeСontainer);
		документСинхронизации.Тара  			= ?(данныеШК = неопределено , Справочники.ОборотнаяТара.ПустаяСсылка(),данныеШК.ОборотнаяТара);

		
		
	//	ЗаполнитьЗначенияСвойств(документСинхронизации,элем);
		документСинхронизации.Заказы.Очистить();
		Для каждого элемСтр из элем.str Цикл
			новаяСтрока 				= документСинхронизации.Заказы.Добавить();		
			ЗаполнитьЗначенияСвойств(новаяСтрока,элемСтр);
			новаяСтрока.МестоХранения 	= СП_РаботаСоСправочниками.ПолучитьМестоХраненияПо_Коду(элемСтр.cellsId);
			новаяСтрока.Габарит 		= СП_РаботаСоСправочниками.ПолучитьГабаритПо_Коду(элемСтр.tarifId);
			данныеШК 					= СП_Штрихкоды.ПолучитьДанныеПоШК(элемСтр.barcode);
			новаяСтрока.Заказ 			= данныеШК.Заказ;
		КонецЦикла;  
		Попытка
			документСинхронизации.Записать(РежимЗаписиДокумента.Проведение);
			об_resp_str.result = Истина;
			об_resp_str.message = "";			
		Исключение
			об_resp_str.result = Ложь;
			об_resp_str.message = ОписаниеОшибки();		
		КонецПопытки;
		об_resp.str.Добавить(об_resp_str);
	КонецЦикла;
	об_resp.result = Истина;	                  
	Результат = СформироватьПоступления(МобильныйКлиент,ДатаДокумента);
	ЗаполнитьЗначенияСвойств(об_resp, Результат);
	Возврат 	 об_resp;
	
КонецФункции	


Функция СформироватьПоступления(МобильныйКлиент,ДатаДокумента)    
	
	результат = новый структура("result, message", Истина, "");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СинхронизацияМобильноеПриложениеЗаказы.Ссылка.Коробка КАК Коробка,
		|	СинхронизацияМобильноеПриложениеЗаказы.МестоХранения КАК МестоХранения,
		|	СинхронизацияМобильноеПриложениеЗаказы.Габарит КАК Габарит,
		|	СинхронизацияМобильноеПриложениеЗаказы.Заказ КАК Заказ,
		|	СинхронизацияМобильноеПриложениеЗаказы.Ссылка КАК Ссылка,
		|	СинхронизацияМобильноеПриложениеЗаказы.V КАК V,
		|	СинхронизацияМобильноеПриложениеЗаказы.weight КАК weight,
		|	СинхронизацияМобильноеПриложениеЗаказы.separate КАК separate,
		|	СинхронизацияМобильноеПриложениеЗаказы.Ссылка.Тара КАК Тара
		|ПОМЕСТИТЬ сбор
		|ИЗ
		|	Документ.СинхронизацияМобильноеПриложение.Заказы КАК СинхронизацияМобильноеПриложениеЗаказы
		|ГДЕ
		|	СинхронизацияМобильноеПриложениеЗаказы.Ссылка.ДокументПоступления = ЗНАЧЕНИЕ(Документ.РазборКоробки.ПустаяСсылка)
		|	И СинхронизацияМобильноеПриложениеЗаказы.Ссылка.МобильныйКлиент = &МобильныйКлиент
		|	И СинхронизацияМобильноеПриложениеЗаказы.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	сбор.Коробка КАК Коробка,
		|	сбор.Коробка.ШК КАК КоробкаШК,
		|	сбор.Ссылка КАК Ссылка,
		|	сбор.Тара КАК Тара
		|ИЗ
		|	сбор КАК сбор
		|
		|СГРУППИРОВАТЬ ПО
		|	сбор.Коробка,
		|	сбор.Коробка.ШК,
		|	сбор.Ссылка,
		|	сбор.Тара
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	сбор.Коробка КАК Коробка,
		|	сбор.Заказ КАК Посылка,
		|	сбор.Габарит КАК Габарит,
		|	сбор.МестоХранения КАК МестоХранения,
		|	сбор.Заказ.ПунктВыдачи КАК ПунктВыдачи,
		|	&ДатаПриема КАК ДатаПриема,
		|	сбор.Заказ.ШК КАК ШК,
		|	сбор.Ссылка КАК Ссылка,
		|	сбор.weight КАК Вес,
		|	сбор.V КАК Объем,
		|	сбор.separate КАК ОтдельнымМестом
		|ИЗ
		|	сбор КАК сбор
		|
		|СГРУППИРОВАТЬ ПО
		|	сбор.Габарит,
		|	сбор.Коробка,
		|	сбор.МестоХранения,
		|	сбор.Заказ,
		|	сбор.Заказ.ПунктВыдачи,
		|	сбор.Заказ.ШК,
		|	сбор.Ссылка,
		|	сбор.weight,
		|	сбор.V,
		|	сбор.separate
		|ИТОГИ ПО
		|	Ссылка";   
	
	
	Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
	Запрос.УстановитьПараметр("ДатаПриема", ТекущаяДата());
	
	Результаты = Запрос.ВыполнитьПакет();
	Если Результаты[2].Пустой() Тогда Возврат результат; КонецЕсли;	
	
	ВыборакааДокументы = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборакааДокументы.Следующий() Цикл
		разбор 					= Документы.РазборКоробки.СоздатьДокумент();
		Разбор.Дата 			= ДатаДокумента;
		разбор.Ответственный	= МобильныйКлиент.Сотрудник;
		разбор.Комментарий 		= "Моб. прил. " + ВыборакааДокументы.ссылка;
		ВыборкаЗаказы 			= ВыборакааДокументы.Выбрать();
		Пока ВыборкаЗаказы.Следующий() Цикл
			новаяСтрока = разбор.Посылки.Добавить();
			ЗаполнитьЗначенияСвойств(новаяСтрока, ВыборкаЗаказы);
		КонецЦикла;
		выборкаГруппы = Результаты[1].Выбрать();
		структураПоиска = Новый Структура("Ссылка", ВыборакааДокументы.Ссылка);
		Пока выборкаГруппы.НайтиСледующий(структураПоиска) Цикл
			новаяСтрока = разбор.Коробки.Добавить();			
			ЗаполнитьЗначенияСвойств(новаяСтрока, выборкаГруппы);			
		КонецЦикла;
		Попытка
			разбор.Записать(РежимЗаписиДокумента.Проведение);	
		Исключение        
			результат.result = Ложь;
			результат.message = результат.message + "Ошибка Оприходовани: " + ВыборакааДокументы.ссылка+ ". " + ОписаниеОшибки()+Символы.ПС;
		КонецПопытки;
		Док 						= ВыборакааДокументы.Ссылка.ПолучитьОбъект();
		Док.ДокументПоступления 	= разбор.Ссылка;
		Док.Записать(РежимЗаписиДокумента.Проведение);   
	КонецЦикла;	
	Возврат результат;	
КонецФункции

#КонецОбласти 


Функция ВыдачаТранзита(ШК) Экспорт
	ДанныеШК = СП_Штрихкоды.ПолучитьДанныеПоШК(ШК);	
	Док = ДанныеШК.Ссылка;     
	
	об_appointment 		= ПолучитьОбъектXDTO("appointment");
	об_appointment.id   = Док.ТочкаНазначения.Код;
	об_appointment.name = Док.ТочкаНазначения.Наименование;
	об_appointment.type = "ПунктВыдачи";
			
	об_Invoice 				= ПолучитьОбъектXDTO("listInvoice.Invoice");	
	об_Invoice.number 		= Док.Номер;
	об_Invoice.date			= Док.Дата;
	об_Invoice.barcode		= ШК;
	об_Invoice.appointment	= об_appointment;
		
	об_orders = ПолучитьОбъектXDTO("listInvoice.Invoice.orders");
		
	
	Для каждого строкаПокупки из док.Покупки Цикл
		об_orderString = ПолучитьОбъектXDTO("listInvoice.Invoice.orders.orderString");
			
		об_user 		= ПолучитьОбъектXDTO("object.user");
		об_user.id      = строкаПокупки.Участник.Код;
		об_user.name    = строкаПокупки.Участник.Наименование;   
		
		
		об_user_org		= ПолучитьОбъектXDTO("object.user");
		об_user_org.id      = строкаПокупки.Покупка.Организатор.Код;
		об_user_org.name    = строкаПокупки.Покупка.Организатор.Наименование;   
		
			
		об_tariff 			= ПолучитьОбъектXDTO("object.tariff");
		об_tariff.barcode   = строкаПокупки.Габарит.Код;
		об_tariff.name  	= строкаПокупки.Габарит.Наименование;
			
		об_cell 			= ПолучитьОбъектXDTO("object.cell");
		об_cell.barcode 	= строкаПокупки.МестоХранения.Код;
		об_cell.name  		= строкаПокупки.МестоХранения.Наименование;
			
		об_order 			= ПолучитьОбъектXDTO("object.order");
		об_order.user 		= об_user;
		об_order.name 		= строкаПокупки.Покупка.Наименование;
		
		об_order.org 		= об_user_org;
			
		Если не ЗначениеЗаполнено(строкаПокупки.Покупка.ШК) Тогда
			объект 		= строкаПокупки.Покупка.ПолучитьОбъект();				
			объект.ШК 	= СП_Штрихкоды.ПолучитьМегаордер(Объект.Ссылка,Объект.Участник ,Объект.ПунктВыдачи );
			объект.Записать()
		КонецЕсли;	
		об_order.barcode 	= строкаПокупки.Покупка.ШК.Код;				
				
		об_orderString.number    = строкаПокупки.НомерСтроки;
		об_orderString.selected  = Ложь;
		об_orderString.order	 =	об_order;
		об_orderString.tariff    = об_tariff;
		об_orderString.cell      = об_cell;
			
		об_orders.orderString.Добавить(об_orderString);
			
	КонецЦикла;	
	об_Invoice.orders = об_orders; 
	
	об_Invoice.Проверить();
	
	Возврат	об_Invoice;
	
КонецФункции


Функция СписокТранзитов(Count) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 5
		|	ВыдачаТранзита.Номер КАК Номер,
		|	ВыдачаТранзита.Дата КАК Дата,
		|	ВыдачаТранзита.ТочкаНазначения КАК ТочкаНазначения,
		|	ВыдачаТранзита.СтоимостьИтого КАК СтоимостьИтого,
		|	ВыдачаТранзита.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВыдачаТранзита КАК ВыдачаТранзита
		|ГДЕ
		|	ВыдачаТранзита.Проведен
		|	И НЕ ВыдачаТранзита.ПоОбмену
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 5", "ПЕРВЫЕ "+Формат(Count,"ЧГ=0"));
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	об_listInvoice = ПолучитьОбъектXDTO("listInvoice");
	
	
	Пока Выборка.Следующий() Цикл
		об_Invoice = ПолучитьОбъектXDTO("listInvoice.Invoice");	
		
		об_appointment 			= ПолучитьОбъектXDTO("appointment");
		об_appointment.id   	= Выборка.ТочкаНазначения.Код;
		об_appointment.name 	= Выборка.ТочкаНазначения.Наименование;
		об_appointment.type 	= "ПунктВыдачи";
		
		
		об_Invoice.barcode 		= СП_Штрихкоды.ШКДокумента(Выборка.Ссылка);			
		об_Invoice.number 		= Выборка.Номер;
		об_Invoice.date			= Выборка.Дата;
		об_Invoice.appointment	= об_appointment;
		об_Invoice.sum			= Выборка.СтоимостьИтого;
		об_Invoice.count		= Выборка.Ссылка.Покупки.Количество();
		
		об_listInvoice.Invoice.Добавить(об_Invoice);
	КонецЦикла;
	об_listInvoice.Проверить();
	
	Возврат	об_listInvoice;


КонецФункции




Функция ПолучитьОбъектXDTO(ИмяТипа) Экспорт
	тип_об 	=  ФабрикаXDTO.Тип("mobileApi",ИмяТипа);	
	об 		= ФабрикаXDTO.Создать(тип_об);
	Возврат об;
КонецФункции

