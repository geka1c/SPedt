#Область ПрограммныйИнтерфейс

////Формирует документы "Выдача транзита" с признаком "по обмену" 
////выехавшие на этот пункт выдачи с транзитных ПВ
//Процедура ЗагрузитьВыехавшиеТранзиты(ДатаЗагрузки = Неопределено) Экспорт
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Получение транзитов с сайта",,0,100);
//	Если ДатаЗагрузки = Неопределено Тогда
//		ДатаЗагрузкиСтрока = Строка(ТекущаяДата()-10*60*60*24);
//	иначе	
//		ДатаЗагрузкиСтрока = Строка(ДатаЗагрузки);	
//	КонецЕсли;	
//	Сервер              = Константы.Сервер.Получить();
//	Токен				= Константы.Токен.Получить();
//	АдресСкрипта		= Константы.АдресОбменаССайтом.Получить();
//	имяВыходногоФайла 	= ПолучитьимяВременногоФайла("zip");
//	ССЛ					= Новый ЗащищенноеСоединениеOpenSSL;
//	НТТР 				= Новый HTTPСоединение(Сервер,,,,,,ССЛ);
//	каталогТранзита		= КаталогВременныхФайлов()+"ТранзитIN\"+Формат(ТекущаяДата(),"ДФ=dd_MM_yy");
//	
//	Ответ 				= НТТР.Получить(АдресСкрипта+"?token="+Токен+"&date="+ДатаЗагрузкиСтрока, имяВыходногоФайла);
//	Попытка
//		ЧтениеZIP		= новый чтениеzipфайла(имяВыходногоФайла);
//		ВсегоЭлементов	= ЧтениеZIP.Элементы.Количество();
//		счетчик		 	= 0;
//		Для Каждого Элемент Из ЧтениеZIP.Элементы Цикл
//			счетчик 			= счетчик + 1;
//			ОбщегоНаЗначенияКлиентСервер.СообщитьПользователю("Формирование документов: " + Элемент.ПолноеИмя,,строка(счетчик),строка(ВсегоЭлементов));
//			ЧтениеZIP.Извлечь(	Элемент,
//								каталогТранзита,
//								РежимВосстановленияПутейФайловZIP.Восстанавливать);
//			чт	= новый ЧтениеТекста(каталогТранзита+"\"+Элемент.ПолноеИмя,"UTF-8");
//			стр	= чт.Прочитать();
//			СформироватьВыдачуТранзита(стр);
//		КонецЦикла;	
//	Исключение
//		ОбщегоНаЗначенияКлиентСервер.СообщитьПользователю("При получении Отправленных Транзитов возникла ошибка: "+ОписаниеОшибки());
//	КонецПопытки;
//КонецПроцедуры


//Функция ПолучитьСтрокуВыгрузки(Транзит) Экспорт
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	Транзит.Точка.Код КАК ТочкаПолучательКод,
//		|	&СвояТочка КАК ОтправительТочкаКод,
//		|	Транзит.Регистратор.Номер КАК РегистраторНомер,
//		|	Транзит.Регистратор.Дата КАК РегистраторДата,
//		|	ВЫБОР
//		|		КОГДА ТИПЗНАЧЕНИЯ(Транзит.ПокупкаСсылка) = ТИП(Справочник.Коробки)
//		|			ТОГДА Транзит.ПокупкаСсылка.Организатор.Код
//		|		ИНАЧЕ Транзит.Участник.Код
//		|	КОНЕЦ КАК УчастникКод,
//		|	Транзит.ПокупкаСсылка.Код КАК ПокупкаКод,
//		|	ВЫБОР
//		|		КОГДА ТИПЗНАЧЕНИЯ(Транзит.ПокупкаСсылка) = ТИП(Справочник.Коробки)
//		|			ТОГДА Транзит.ПокупкаСсылка.Количество
//		|		ИНАЧЕ Транзит.Количество
//		|	КОНЕЦ КАК Количество,
//		|	ВЫБОР
//		|		КОГДА ТИПЗНАЧЕНИЯ(Транзит.ПокупкаСсылка) = ТИП(Справочник.Покупки)
//		|			ТОГДА ""sp""
//		|		КОГДА ТИПЗНАЧЕНИЯ(Транзит.ПокупкаСсылка) = ТИП(Справочник.Заказы)
//		|			ТОГДА ""order""
//		|		КОГДА ТИПЗНАЧЕНИЯ(Транзит.ПокупкаСсылка) = ТИП(Справочник.Коробки)
//		|			ТОГДА ""group""
//		|		КОГДА ТИПЗНАЧЕНИЯ(Транзит.ПокупкаСсылка) = ТИП(Справочник.Посылки)
//		|			ТОГДА ""package""
//		|	КОНЕЦ КАК ТипПокупки,
//		|	Транзит.НомерСтроки КАК НомерСтроки,
//		|	Транзит.Регистратор.ТочкаТранзита.Код КАК ТочкаТранзитаКод,
//		|	Транзит.Регистратор.ВидОперации КАК ВидОперации
//		|ИЗ
//		|	РегистрНакопления.Транзит КАК Транзит
//		|ГДЕ
//		|	Транзит.Регистратор = &Транзит
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	УпакованныеЗаказы.Точка.Код,
//		|	&СвояТочка,
//		|	УпакованныеЗаказы.Регистратор.Номер,
//		|	УпакованныеЗаказы.Регистратор.Дата,
//		|	ВЫБОР
//		|		КОГДА ТИПЗНАЧЕНИЯ(УпакованныеЗаказы.Покупка) = ТИП(Справочник.Коробки)
//		|			ТОГДА УпакованныеЗаказы.Покупка.Организатор.Код
//		|		ИНАЧЕ УпакованныеЗаказы.Участник.Код
//		|	КОНЕЦ,
//		|	УпакованныеЗаказы.Покупка.Код,
//		|	ВЫБОР
//		|		КОГДА 	ТИПЗНАЧЕНИЯ(УпакованныеЗаказы.Покупка) = ТИП(Справочник.Коробки) или
//		|				 ТИПЗНАЧЕНИЯ(УпакованныеЗаказы.Покупка) = ТИП(Справочник.Мегаордера) 
//		|			ТОГДА УпакованныеЗаказы.Покупка.Количество
//		|		ИНАЧЕ УпакованныеЗаказы.Количество
//		|	КОНЕЦ,
//		|	ВЫБОР
//		|		КОГДА ТИПЗНАЧЕНИЯ(УпакованныеЗаказы.Покупка) = ТИП(Справочник.Покупки)
//		|			ТОГДА ""sp""
//		|		КОГДА ТИПЗНАЧЕНИЯ(УпакованныеЗаказы.Покупка) = ТИП(Справочник.Заказы)
//		|			ТОГДА ""order""
//		|		КОГДА ТИПЗНАЧЕНИЯ(УпакованныеЗаказы.Покупка) = ТИП(Справочник.Коробки)
//		|			ТОГДА ""group""
//		|		КОГДА ТИПЗНАЧЕНИЯ(УпакованныеЗаказы.Покупка) = ТИП(Справочник.Посылки)
//		|			ТОГДА ""package""		
//		|		КОГДА ТИПЗНАЧЕНИЯ(УпакованныеЗаказы.Покупка) = ТИП(Справочник.Мегаордера)
//		|			ТОГДА ""supergroup""
//		|	КОНЕЦ,
//		|	УпакованныеЗаказы.НомерСтроки,
//		|	УпакованныеЗаказы.Регистратор.ТочкаТранзита.Код,
//		|	УпакованныеЗаказы.Регистратор.ВидОперации
//		|ИЗ
//		|	РегистрНакопления.УпакованныеЗаказы КАК УпакованныеЗаказы
//		|ГДЕ
//		|	УпакованныеЗаказы.Регистратор = &Транзит";
//		

//	Запрос.УстановитьПараметр("Транзит", Транзит);
//	Запрос.УстановитьПараметр("СвояТочка", Константы.СвояТочка.Получить().Код);

//	Результат = Запрос.Выполнить();

//	ТЗ = Результат.Выгрузить();
//	Стр=ЗначениеВСтрокуВнутр(ТЗ);
//	Возврат Стр;
//КонецФункции




#КонецОбласти


//Процедура СформироватьВыдачуТранзита(Стр) 
//	тз	= ЗначениеИзСтрокиВнутр(Стр);
//	Если тз.количество()>0 Тогда
//		
//		ТочкаОтправитель		= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(тз[0].ОтправительТочкаКод);
//		Если ТочкаОтправитель 	= Константы.СвояТочка.Получить() Тогда Возврат; КонецЕсли;
//		
//		НомерОтправителя		= тз[0].РегистраторНомер;
//		ДатаДок					= тз[0].РегистраторДата;
//		ТочкаТранзита 			= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(тз[0].ТочкаТранзитаКод);
//		ТочкаНазначения 		= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(тз[0].ТочкаПолучательКод);
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ВыдачаТранзита.Ссылка
//		|ИЗ
//		|	Документ.ВыдачаТранзита КАК ВыдачаТранзита
//		|ГДЕ
//		|	ВыдачаТранзита.ПоОбмену
//		|	И ВыдачаТранзита.НомерОтправителя = &НомерОтправителя
//		|	И ВыдачаТранзита.Дата >= &Дата
//		|	И ВыдачаТранзита.ТочкаОтправитель = &ТочкаОтправитель";
//		
//		Запрос.УстановитьПараметр("Дата", 				НачалоГода(ДатаДок));
//		Запрос.УстановитьПараметр("НомерОтправителя", 	НомерОтправителя);
//		Запрос.УстановитьПараметр("ТочкаОтправитель", 	ТочкаОтправитель);
//		
//		Результат 				= Запрос.Выполнить();
//		
//		ВыборкаДетальныеЗаписи 	= Результат.Выбрать();
//		
//		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//			обТранзит			= ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
//		Иначе	
//			обТранзит=Документы.ВыдачаТранзита.СоздатьДокумент();
//		КонецЕсли;
//		обТранзит.Дата				= НачалоДня(ДатаДок);
//		обТранзит.ПоОбмену			= Истина;
//		обТранзит.ТочкаНазначения	= ТочкаНазначения;
//		обТранзит.НомерОтправителя	= НомерОтправителя;
//		обТранзит.ТочкаОтправитель	= ТочкаОтправитель;
//		обТранзит.ТочкаТранзита		= ТочкаТранзита;
//		обТранзит.Покупки.Очистить();	
//		Для каждого стрТЗ из Тз Цикл
//			стрПокупки	=обТранзит.Покупки.Добавить();
//			Если ЗначениеЗаполнено(стрТЗ.ПокупкаКод) Тогда
//               стрПокупки.Покупка	= СП_РаботаСоСправочниками.ПолучитьЗаказПоСтруктуре(стрТЗ);
//			Иначе
//				Продолжить;
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(стрТЗ.УчастникКод) и (стрТЗ.ТипПокупки="sp" или стрТЗ.ТипПокупки="order" или стрТЗ.ТипПокупки="package") Тогда
//				стрПокупки.Участник	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(стрТЗ.УчастникКод);
//			Иначе
//				стрПокупки.Участник	= Справочники.Участники.нулевой;
//			КонецЕсли;

//		    стрПокупки.Количество	= стрТЗ.Количество;
//		КонецЦикла;
//		Попытка
//		    обТранзит.Записать(РежимЗаписиДокумента.Проведение);
//		Исключение
//		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При записи документа ""Выдача транзита (по обмежну)"" возникла ошибка :"+ОписаниеОшибки());
//		КонецПопытки;
//	КонецЕсли
//	
//КонецПроцедуры	


