
//Параметры=Новый Структура;
//Параметры.Вставить("СерверТК","test.postcalc.ru");
//Параметры.Вставить("Откуда",);
//Параметры.Вставить("Куда",);
//Параметры.Вставить("Вес",);
//Параметры.Вставить("Ценность",);
//Параметры.Вставить("ПродавецДляТК","100sp.ru");
//Параметры.Вставить("Майл","absentx@yandex.ru");

Функция ПослатьЗапрос(Параметры) Экспорт
	// Вставить содержимое обработчика.
	Сервер = Параметры.СерверТК;
	с = Новый HTTPСоединение(Сервер,,,,,5);
	з = Новый HTTPЗапрос()                 ;
	Заголовки = Новый Соответствие()        ;
	Заголовки.Вставить("Accept-Encoding", "gzip");
	Заголовки.Вставить("User-Agent", "Custom 1C/8.2 (Windows NT 5.1)");
	з.Заголовки = Заголовки;
	строка_запроса = "";
	строка_запроса = строка_запроса + "f="  + 	Формат(Параметры.Откуда, 	"ЧЦ=6; ЧГ=");
	строка_запроса = строка_запроса + "&t=" + 	Формат(Параметры.Куда, 		"ЧЦ=6; ЧГ=");
	строка_запроса = строка_запроса + "&w=" + 	Формат(Параметры.Вес, 		"ЧЦ=6; ЧГ=");
	строка_запроса = строка_запроса + "&v=" + 	Формат(Параметры.Ценность, 	"ЧЦ=6; ЧГ=");
	строка_запроса = строка_запроса + "&ib="+ 	"f";//f- страховка от ценность + тариф, p- страховка от ценность
	строка_запроса = строка_запроса + "&o=wddx";
	
	// credentials
	//Person = Константы.PostcalcPerson.Получить();
	строка_запроса = строка_запроса + "&st=" + СокрЛП(Параметры.ПродавецДляТК);
	строка_запроса = строка_запроса + "&ml=" + СокрЛП(Параметры.Майл);
//	строка_запроса = строка_запроса + "&pn=" + СокрЛП(Person);
	з.АдресРесурса = "/?" + строка_запроса;
	файлОтвета=ПолучитьИмяВременногоФайла("gz");
	РаспакованныйФайл=СтрЗаменить(файлОтвета,".gz","");
	Попытка
	  ответ = с.Получить(з,файлОтвета ); 
	Исключение
	  а=1;
  КонецПопытки;
  
  
  
  СтрокаКоманды = """C:\Program Files (x86)\WinRAR\winrar.exe"" e -y """ +  файлОтвета + """ """ +  КаталогВременныхФайлов() + """";
  Шелл=Новый COMОбъект("Wscript.Shell");
  Шелл.run(СтрокаКоманды,1,True);
  //ИмяФайлаОтвета =  КаталогВременныхФайлов() + "postcalc_new";  
  
		//ЧтениеZIP=новый чтениеzipфайла(файлОтвета);
		//каталогТранзита=КаталогВременныхФайлов()+"ТранзитIN\"+Формат(ТекущаяДата(),"ДФ=dd_MM_yy");
		//
		//Для Каждого Элемент Из ЧтениеZIP.Элементы Цикл
		//	//Сообщить("Распаковка файла:" + Элемент.ПолноеИмя);
		//	ЧтениеZIP.Извлечь(Элемент,
		//	каталогТранзита,
		//	РежимВосстановленияПутейФайловZIP.Восстанавливать);
		//КонецЦикла;	
  
	
	//Разархивировать(файлОтвета,РаспакованныйФайл);
	Возврат Распарсить(РаспакованныйФайл);
КонецФункции

Процедура Разархивировать(файлОтвета,РаспакованныйФайл)
	// Вставить содержимое обработчика.
	ф = Новый Файл(файлОтвета);
	Если ф.Существует() Тогда
		УдалитьФайлы(ф.ПолноеИмя)
	КонецЕсли;
	ЗапуститьПриложение("gzip -d " + """" + РаспакованныйФайл + """",,Истина);  	
КонецПроцедуры

Функция ПолучитьВидыПочтовыхОтправлений()
	стр=Новый Структура;
	стр.Вставить("ПростаяБандероль");
	стр.Вставить("ЗаказнаяБандероль");
	стр.Вставить("ЗаказнаяБандероль1Класс");
	стр.Вставить("ЦеннаяБандероль");
	стр.Вставить("ЦеннаяПосылка");
	стр.Вставить("ЦеннаяАвиаБандероль");
	стр.Вставить("ЦеннаяАвиаПосылка");
	стр.Вставить("ЦеннаяБандероль1Класс");
	стр.Вставить("EMS");
	стр.Вставить("ПосылкаОнлайн");
	стр.Вставить("КурьерОнлайн");
	стр.Вставить("ПростоеПисьмо");
	стр.Вставить("ЗаказноеПисьмо");
	стр.Вставить("ЦенноеПисьмо");
	стр.Вставить("ПростойМультиконверт");
	стр.Вставить("ЗаказнойМультиконверт");
	
	Возврат стр;
	
КонецФункции	


Функция Распарсить(РаспакованныйФайл) 
	// Вставить содержимое обработчика.
	файл = Новый ЧтениеXML;
	файл.ОткрытьФайл(РаспакованныйФайл);
	дом = Новый ПостроительDOM;
	док = дом.Прочитать(файл);
	разыменователь = док.СоздатьРазыменовательПИ();
	
	Выражения = Новый Соответствие;
	ВидыПочтовыхОтправлений= ПолучитьВидыПочтовыхОтправлений();
	Для Каждого ВидОтправления из ВидыПочтовыхОтправлений Цикл
		
		имя =  ВидОтправления.Ключ;
		Выражения.Вставить(имя, док.СоздатьВыражениеXPath(
							"//var[@name='Отправления']/*/var[@name='" + имя + "']/*/var",
							разыменователь));
	КонецЦикла;						
	Результаты = Новый Структура;
	
	Для Каждого в из Выражения Цикл
		рез = в.Значение.Вычислить(док, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
		элемент = Новый Структура;
		параметр = рез.ПолучитьСледующий();
		Пока параметр <> Неопределено Цикл
			Если параметр.ПервыйДочерний.ПервыйДочерний=Неопределено Тогда параметр = рез.ПолучитьСледующий(); Продолжить; КонецЕсли;
			элемент.Вставить(параметр.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение, параметр.ПервыйДочерний.ПервыйДочерний.Данные);
			параметр = рез.ПолучитьСледующий();
		КонецЦикла;
		элемент.Вставить("ВидОтправления", в.Ключ);
		Результаты.Вставить(в.Ключ, элемент);
	КонецЦикла;
	файл.Закрыть();
	УдалитьФайлы(ПутьФайлаОтвета());
	Возврат Результаты;
	
КонецФункции

Функция ПутьАрхивногоФайлаОтвета(ИмяФайлаВыгрузки)
	Возврат "" + КаталогВременныхФайлов() + ИмяФайлаВыгрузки + ".xml.gz"
КонецФункции

Функция ПутьФайлаОтвета()
	Возврат "" + КаталогВременныхФайлов() + ПолучитьИмяВременногоФайла() + ".xml"
КонецФункции

Функция ПроизвестиРасчет(Параметры)
	ПослатьЗапрос(Параметры);
	//Разархивировать();
	//Возврат Распарсить();
КонецФункции

Функция ПолучитьОптимальныйТариф(Параметры) Экспорт
	Возврат ОптимальныйТариф(ПроизвестиРасчет(Параметры));
КонецФункции

Функция ОптимальныйТариф(тарифы)
	порог = 0;
	
	Для Каждого т из тарифы Цикл
		Если (Число(т.Значение.Тариф) < порог) или (порог = 0) Тогда
			порог = Число(т.Значение.Тариф);
			оптимальный_тариф = т;
		КонецЕсли;
	КОнецЦикла;
	Возврат оптимальный_тариф.Значение;
КонецФункции

Функция ПолучитьСписокТарифов(Параметры) Экспорт
	Возврат СортироватьТарифы(ПроизвестиРасчет(Параметры))
КонецФункции	


Функция СортироватьТарифы(тарифы)
	СписокТарифов = Новый СписокЗначений;
	Для Каждого т из тарифы Цикл
		СписокТарифов.Добавить(т.Значение, Число(т.Значение.Тариф) + Число(т.Значение.Страховка));
	КонецЦикла;
	СписокТарифов.СортироватьПоПредставлению();
	Для Каждого т из СписокТарифов Цикл
		т.Представление = т.Значение.Название;
	КонецЦикла;
	Возврат СписокТарифов;
КонецФункции



/////ПБРФ


Функция ПолучитьСтруктуруЖСОНДляПБРФ(ДокОтправлениеТранзита)
	
	стрСвойства=новый структура;
    стрСвойства.Вставить("from_index"		, "101000");
    стрСвойства.Вставить("from_city"		, "Москва");
    стрСвойства.Вставить("from_state"		, "");
    стрСвойства.Вставить("from_country"		, "Россия");
    стрСвойства.Вставить("from_addr"		, "ул. Тестовая, дом 12, корп. 2, кв. 291");
    стрСвойства.Вставить("from_fio"		    , "ООО ""Рога и Копыта""");

    стрСвойства.Вставить("from_inn"			, "7700000000");
    стрСвойства.Вставить("from_bik"			, "044000000");
    стрСвойства.Вставить("from_bank"		, "ОАО ""Банк"" г. Москва");
    стрСвойства.Вставить("from_ks"			,"30101810300000000000");
    стрСвойства.Вставить("from_rs"			,"40702810300000000000");
   
    стрСвойства.Вставить("nalogka_ur_lico_cb"	,"0");
    стрСвойства.Вставить("parcel_type"			,"rp");
    стрСвойства.Вставить("order_id"				,"12345");
    стрСвойства.Вставить("to_fio"				, "Тестов Тест Тестович");
    стрСвойства.Вставить("to_country"			, "Россия");
    стрСвойства.Вставить("to_index"				,"600000");
    стрСвойства.Вставить("to_state"				, "Владимирская область");
    стрСвойства.Вставить("to_city"				, "Владимир");
    стрСвойства.Вставить("to_addr"				, "ул. Героя Получателя, дом 1, кв. 90");
    стрСвойства.Вставить("to_tel"				, "+79123456789");

    стрСвойства.Вставить("ob_cennost_rub"		,"3999");
    стрСвойства.Вставить("nalogka_rub"			,"3999");	
	
	

	Возврат стрСвойства;		
	
КОнецФункции


Функция ПолучитьЖСОНПБФ(ДокОтправлениеТранзита) Экспорт
	ЗаписьJSON=новый ЗаписьJSON	;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,ПолучитьСтруктуруЖСОНДляПБРФ(ДокОтправлениеТранзита));
	Возврат ЗаписьJSON.Закрыть();
КонецФункции



Функция MD5ХешСтрока(тСтрока)
   Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
 
   Хеш.Добавить(тСтрока);
 
   Возврат Хеш.ХешСумма; 
КонецФункции


Функция ОбменССайтомПБФ1(ДокОтправлениеТранзита,Отказ)  экспорт
	СтрокаЗапроса=ПолучитьЖСОНПБФ(ДокОтправлениеТранзита);
	
	Токен	="03f1cb232eb5ae2f011d96f7235e70e8";
	Пароль	="456258";
	
	ПараметрыПостДляХэш= СтрокавUTF8(Токен+"|"+
                        "print_f7p|"+
                        "0|"+
                        "0|"+СтрокаЗапроса+"|"+Пароль);
	
	
	    ПараметрыПост= СтрокавUTF8("&apikey="+Токен+
                        "&method=print_f7p"+
                        "&print0=0"+
                        "&printnalogkareq=0"+
                        "&list="+СтрокаЗапроса+
						"&hash=")+MD5ХешСтрока(ПараметрыПостДляХэш);
	
	
    Попытка
        WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
       // WinHttp.Option(2,"utf-8");
        WinHttp.Open("POST","http://russianpostcalc.ru/api_v1.php",Ложь);
        WinHttp.SetRequestHeader("Accept-Language", "ru");
        WinHttp.SetRequestHeader("Accept-Charset","Windows-1251");
        WinHttp.setRequestHeader("Content-Language", "ru");
        WinHttp.setRequestHeader("Content-Charset", "Windows-1251");
        WinHttp.setRequestHeader("Content-type", "application / x-www-form-urlencoded; charset = Windows-1251");
		
		//ПараметрыПОСТ = "&access_token=" + Токен+"&data=" + СтрокаЗапроса;
		//ПараметрыПОСТ ="&access_token=7ae836bbb1897d2f3d0104d0f6383104&data={""type_blank"":""a"",""from_surname"": ""Иванова"",""from_name"": ""Ивана Ивановича"",""from_city"": ""г. Москва"",""from_street"": ""ул. Стахановская"",""from_build"": ""999"",""from_appartment"": ""99"",""from_zip"": ""109428"",""whom_surname"": ""Петрову"",""whom_name"": ""Петру Петровичу"",""whom_city"": ""г. Санкт-Петербург"",""whom_street"": ""ул. Гоголя"",""whom_build"": ""888"",""whom_appartment"": ""88"",""whom_zip"": ""190000"",""declared_value"": ""1000.00"",""COD_amount"": ""1100.00""}";
		
        WinHttp.Send(ПараметрыПОСТ);
        ТекстОтвета = WinHttp.ResponseText();
		ТекстОтвета = WinHttp.ResponseBody();
		ТекстОтвета = WinHttp.ResponseStream();
    Исключение
        Сообщить(ОписаниеОшибки());
    КонецПопытки;	

КонецФункции


Функция СтрокавUTF8(СтрокаDOS)
    ТекстUTF8 = Новый ТекстовыйДокумент;        
// ТекстUTF8.УстановитьТипФайла(КодировкаТекста.UTF8); - вот это лишнее, т.к. по умолчанию у насUTF8    
    ТекстUTF8.УстановитьТекст(СтрокаDOS);
    Возврат ТекстUTF8.ПолучитьТекст();
КонецФункции 


Функция ОбменССайтомПБФ(ДокОтправлениеТранзита,Отказ)  экспорт
	
	СтрокаЗапроса=ПолучитьЖСОНПБФ(ДокОтправлениеТранзита);
	
	Токен	="03f1cb232eb5ae2f011d96f7235e70e8";
	Пароль	="456258";
	
	ПараметрыПостДляХэш= СтрокавUTF8(Токен+"|"+
                        "print_f7p|"+
                        "0|"+
                        "0|"+СтрокаЗапроса+"|"+Пароль);
	
	
	//   ПараметрыПост= "&apikey="+Токен+
	//                    "&method=print_f7p"+
	//                    "&print0=0"+
	//                    "&printnalogkareq=0"+
	//                    "&list="+СтрокаЗапроса;
	//
	   ПараметрыПост= 	"&apikey="+Токен+
	                    "&method=print_f7p"+
	                    "&print0=0"+
	                    "&printnalogkareq=0"+
	                    "&list="+СтрокаЗапроса+
	    				"&hash="+СтрЗаменить(MD5ХешСтрока(ПараметрыПостДляХэш)," ","");
	
	
    Сервер = "russianpostcalc.ru";
    Ресурс = "/api_v1.php/";

    HTTP =  Новый HTTPСоединение(Сервер);
    ФайлЗапроса = ПолучитьИмяВременногоФайла();
    ТекстовыйФайл = Новый ТекстовыйДокумент;
    ТекстовыйФайл.УстановитьТекст(ПараметрыПост);
	//ТекстовыйФайл.УстановитьТекст("&data=" + СтрокаЗапроса);
    ТекстовыйФайл.Записать(ФайлЗапроса, КодировкаТекста.UTF8);
    ФайлРезультата = ПолучитьИмяВременногоФайла();
    ЗаголовокHTTP = Новый Соответствие();
    ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
    ЗаголовокHTTP.Вставить("Accept-Language", "ru");
    ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
    ЗаголовокHTTP.Вставить("Content-Language", "ru");
    ЗаголовокHTTP.Вставить("Content-Charset", "utf-8");
    HTTP.ОтправитьДляОбработки(ФайлЗапроса, Ресурс, ФайлРезультата, ЗаголовокHTTP);
    Ответ = Новый ТекстовыйДокумент();
    Ответ.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
    ТекстОтвета = Ответ.ПолучитьТекст();
	ТекстОтвета=ПереобразоватьЮникод(ТекстОтвета);
    УдалитьФайлы(ФайлЗапроса);
   // УдалитьФайлы(ФайлРезультата);	
	
	Возврат ФайлРезультата;

КонецФункции

&НаСервере
Функция ПереобразоватьЮникод(Строка)

    
    ГотововаяСтрока = "" ;
    
    МасУкр = Новый Массив(66) ;
    
    МасУкр[0]="А";   МасУкр[1]="Б";  МасУкр[2]="В";  МасУкр[3]="Г";  МасУкр[4]="Ґ";  МасУкр[5]="Д";
    МасУкр[6]="Е";   МасУкр[7]="Є";  МасУкр[8]="Ж";  МасУкр[9]="З";  МасУкр[10]="И"; МасУкр[11]="І";
    МасУкр[12]="Ї";  МасУкр[13]="Й"; МасУкр[14]="К"; МасУкр[15]="Л"; МасУкр[16]="М"; МасУкр[17]="Н";
    МасУкр[18]="О";  МасУкр[19]="П"; МасУкр[20]="Р"; МасУкр[21]="С"; МасУкр[22]="Т"; МасУкр[23]="У";
    МасУкр[24]="Ф";  МасУкр[25]="Х"; МасУкр[26]="Ц"; МасУкр[27]="Ч"; МасУкр[28]="Ш"; МасУкр[29]="Щ";
    МасУкр[30]="Ь";  МасУкр[31]="Ю"; МасУкр[32]="Я";  

    МасУкр[33]="а";  МасУкр[34]="б"; МасУкр[35]="в"; МасУкр[36]="г"; МасУкр[37]="ґ"; МасУкр[38]="д";
    МасУкр[39]="е";  МасУкр[40]="є"; МасУкр[41]="ж"; МасУкр[42]="з"; МасУкр[43]="и"; МасУкр[44]="і";
    МасУкр[45]="ї";  МасУкр[46]="й"; МасУкр[47]="к"; МасУкр[48]="л"; МасУкр[49]="м"; МасУкр[50]="н";
    МасУкр[51]="о";  МасУкр[52]="п"; МасУкр[53]="р"; МасУкр[54]="с"; МасУкр[55]="т"; МасУкр[56]="у";
    МасУкр[57]="ф";  МасУкр[58]="х"; МасУкр[59]="ц"; МасУкр[60]="ч"; МасУкр[61]="ш"; МасУкр[62]="щ";
    МасУкр[63]="ь";  МасУкр[31]="ю"; МасУкр[65]="я";  
        
    
    МасКод = Новый Массив(66) ;
    
    МасКод[0]="0410";   МасКод[1]="0411";  МасКод[2]="0412";  МасКод[3]="0413";  МасКод[4]="0490";  МасКод[5]="0414";
    МасКод[6]="0415";   МасКод[7]="0404";  МасКод[8]="0416";  МасКод[9]="0417";  МасКод[10]="0418"; МасКод[11]="0406";
    МасКод[12]="0407";  МасКод[13]="0419"; МасКод[14]="041A"; МасКод[15]="041B"; МасКод[16]="041C"; МасКод[17]="041D";
    МасКод[18]="041E";  МасКод[19]="041F"; МасКод[20]="0420"; МасКод[21]="0421"; МасКод[22]="0422"; МасКод[23]="0423";
    МасКод[24]="0424";  МасКод[25]="0425"; МасКод[26]="0426"; МасКод[27]="0427"; МасКод[28]="0428"; МасКод[29]="0429";
    МасКод[30]="042C";  МасКод[31]="042E"; МасКод[32]="042F";  

    МасКод[33]="0430";  МасКод[34]="0431"; МасКод[35]="0432"; МасКод[36]="0413"; МасКод[37]="0491"; МасКод[38]="0434";
    МасКод[39]="0435";  МасКод[40]="0454"; МасКод[41]="0436"; МасКод[42]="0437"; МасКод[43]="0438"; МасКод[44]="0456";
    МасКод[45]="0457";  МасКод[46]="0439"; МасКод[47]="043A"; МасКод[48]="043B"; МасКод[49]="043C"; МасКод[50]="043D";
    МасКод[51]="043E";  МасКод[52]="043F"; МасКод[53]="0440"; МасКод[54]="0441"; МасКод[55]="0442"; МасКод[56]="0443";
    МасКод[57]="0444";  МасКод[58]="0445"; МасКод[59]="0446"; МасКод[60]="0447"; МасКод[61]="0448"; МасКод[62]="0449";
    МасКод[63]="044C";  МасКод[31]="044E"; МасКод[65]="044F";  
    
    
    тмпСтрока = "" ;
    Для Счетчик = 1 По СтрДлина(Строка) Цикл      
        Если Лев(Строка, 1) = "\" Тогда
            Если Лев(Строка, 2) = "\u" Тогда
                
                тмпСтрока = Прав(Лев(Строка, 6),4) ;
                Если МасКод.Найти(тмпСтрока) = Неопределено Тогда
                    СтрокаЗамены = Прав(тмпСтрока, 1) ;
                    тмпСтрока = СтрЗаменить(тмпСтрока,СтрокаЗамены,ТРег(СтрокаЗамены)); 
					Если МасКод.Найти(тмпСтрока) = Неопределено Тогда
						// не найден и не найден. Хрен с ним. Всё-равно это в русском языке. Пользователь и так поймёт.
						// ничего пользователю говорить не будем.  
						//Сообщить("Код символа не найден: " + тмпСтрока);
                    Иначе                      
                        ГотововаяСтрока = ГотововаяСтрока + МасУкр[МасКод.Найти(тмпСтрока)] ;                                   
                    КонецЕсли;
                Иначе
                    ГотововаяСтрока = ГотововаяСтрока + МасУкр[МасКод.Найти(тмпСтрока)] ;               
                КонецЕсли;
                
                Строка = Прав(Строка, (СтрДлина(Строка)-6)) ; 
            Иначе  
                Строка = Прав(Строка, (СтрДлина(Строка)-2)) ;
            КонецЕсли;
        Иначе
            ГотововаяСтрока = ГотововаяСтрока + Лев(Строка, 1) ;
            Строка = Прав(Строка, (СтрДлина(Строка)-1)) ;     
        КонецЕсли;         
    КонецЦикла;   

    Возврат ГотововаяСтрока ;
        
КонецФункции



//Функция ОбменССайтомПБФ(СтрокаЗапроса,Отказ)  экспорт
//	Сервер              ="pbrf.ru";
//	Порт				=80;
//	АдресСкрипта        ="pdf.F7";
////	СтрокаЗапроса = КодироватьСтроку(СтрокаЗапроса, СпособКодированияСтроки.КодировкаURL);
//	ИспользоватьПрокси=Ложь;
//	///////////
//	Прокси = Новый ИнтернетПрокси;
//	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
//	Прокси.Пароль = ""; 
//	Прокси.Пользователь = "";
//	///////////
//	//Логин                 =ПараметрыОбмена.Логин;
//	//Пароль				  =ПараметрыОбмена.Пароль;
//	Токен="7ae836bbb1897d2f3d0104d0f6383104";
//	
//	ИмяФайлаОтвета   = КаталогВременныхФайлов() + "ansv.txt";
//	ИмяФайлаОтправки = КаталогВременныхФайлов() + "post.txt";
//    ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.UTF8, Символы.ПС, ЛОЖЬ);
//	
//	
//	
//	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
//	

//    //Определяем раздел двоичных данных
//    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);

//    //Соответствует HTML-тэгу
//    //input type="text" name="some_field" value="Some text" /
//	ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
//    ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""access_token""" + Символы.ПС);
//    ФайлОтправки.ЗаписатьСтроку(токен);
//    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
//	
//	
//    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
//    ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""data""" + Символы.ПС);
//    ФайлОтправки.ЗаписатьСтроку(СтрокаЗапроса);
//    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);

//	
//	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
//	//ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name=""password""" + Символы.ПС);
//	//ФайлОтправки.ЗаписатьСтроку(пароль);
//	//ФайлОтправки.ЗаписатьСтроку("--" + Boundary);

//    ФайлОтправки.Закрыть();
//	
//	
//	
//	////////////////////
//	
//	//Заголов = Новый Соответствие();
//	//Заголов.Вставить("Content-Type", "application/json; charset=UTF-8");

//    ЗаголовокHTTP = Новый Соответствие();
//    //При необходимости зададим Referer, например таким образом
//	//СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
//	//СерверИсточник = НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
//	//ЗаголовокHTTP.Вставить("Referer", СерверИсточник);

//    //Укажем формат данных Content-Type
//    ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=UTF-8; boundary=" + Boundary);

//    //Укажем длину POST-запроса Content-Length
//    ФайлОтправки = Новый Файл(ИмяФайлаОтправки);
//    РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
//    ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);


//    //ИспользоватьПрокси - какая-то логическая переменная, может быть значение флажка на форме или переключатель
//	Если ИспользоватьПрокси Тогда
//		НТТР = Новый HTTPСоединение(Сервер, Порт, , , Прокси);
//	Иначе
//		НТТР = Новый HTTPСоединение(Сервер, Порт);
//	КонецЕсли;


//    //Естественно, следует указать имя своего скрипта.
//    Попытка
//        НТТР.ОтправитьДляОбработки(ИмяФайлаОтправки, АдресСкрипта, ИмяФайлаОтвета, ЗаголовокHTTP);
//    Исключение
//        //Пример обработки ошибки соединения.
//        #Если Клиент Тогда
//            Сообщить("Неудачная попытка соединения: " + ОписаниеОшибки());
//        #Иначе
//            ЗаписьЖурналаРегистрации("HTTPСоединение", УровеньЖурналаРегистрации.Ошибка, , , "Неудачная попытка соединения: " + ОписаниеОшибки());
//        #КонецЕсли
//        Возврат Неопределено;
//    КонецПопытки;

//    //Удалим файл отправки POST-запроса. Больше он нам не нужен.
//    УдалитьФайлы(ИмяФайлаОтправки);

// 
//	Возврат ИмяФайлаОтвета;
//	
//КонецФункции
