Процедура Синхронизировать() Экспорт
	СтоСПОбмен_Тарифы.НомераТарифовИзРегистра();
	док 				= Документы.СинхронизацияТарифов.СоздатьДокумент();	
	ЗагрузитьТарифы(док);
	
КонецПроцедуры	





Функция 	ЗагрузитьТарифы(Объект) Экспорт
	НачатьТранзакцию();
	
	Объект.Дата = ТекущаяДата();
	//Отражаем Ответ на выгрузку (Первая точка приема..)
	СтрокаПротокола						= СтоСПОбмен_Выгрузка100сп.СтруктураПротокола();
	СтрокаПротокола.ДатаНачала			= ТекущаяДата();
	
	хмл_отправили						= СтоСПОбмен_Запрос.Тарифы_tariffs();
	
	стр_Ответа 							= СтоСПОбмен_Выгрузка100сп.Загрузить(хмл_отправили);
	
	//Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	СсылкаНового = Документы.СинхронизацияТарифов.ПолучитьСсылку();
	//	Объект.УстановитьСсылкуНового(СсылкаНового);
	//КонецЕсли;
	
	СтрокаПротокола.Описание			= "Загрузка Тарифов";
	
	
	СтрокаПротокола.Отправили			= хмл_отправили;
	СтрокаПротокола.ДатаОкончания		= ТекущаяДата();
	СтрокаПротокола.ПолученныеДанные	= стр_Ответа.Получили;
	
	Если не стр_Ответа.Свойство("Разбор") Тогда
		СтрокаПротокола.Результат	=	Ложь;
	Иначе	
		СтрокаПротокола.Результат 	= стр_Ответа.Разбор.авторизацияВыполнена;
	КонецЕсли;
	
	Если не СтрокаПротокола.Результат Тогда Возврат Ложь; Конецесли;
	
	
	Если не стр_Ответа.Разбор.авторизацияВыполнена Тогда Возврат ложь; КонецЕсли;
	
	Статус	= Перечисления.СтатусОтпавкиНаСайт.Отправлен;
	тз		= Неопределено;
	Если стр_Ответа.Разбор.Свойство("tariffs",тз) Тогда
		ОтразитьТарифы(тз, Объект);
	КонецЕсли;
	Объект.Записать(РежимЗаписиДокумента.Проведение);
	СтоСПОбмен_Выгрузка100сп.СохранитьПротоколОбмена(СтрокаПротокола,Объект.Ссылка);
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
КонецФункции



Процедура ОтразитьТарифы(тз, Объект)
	Запрос = новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втВнешняя.id 			КАК id,
	|	втВнешняя.name 			КАК name,
	|	втВнешняя.forfeit 		КАК forfeit,
	|	втВнешняя.frost 		КАК frost,
	|	втВнешняя.cost 			КАК cost,
	|	втВнешняя.oversized 	КАК oversized,
	|	втВнешняя.time 			КАК time,
	|	втВнешняя.costKG 		КАК costKG,
	|	втВнешняя.costCub 		КАК costCub,
	|	втВнешняя.updated_at 	КАК updated_at
	|ПОМЕСТИТЬ втВнешняя
	|ИЗ
	|	&втВнешняя КАК втВнешняя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВнешняя.id 			КАК id,
	|	втВнешняя.name 			КАК name,
	|	втВнешняя.forfeit 		КАК forfeit,
	|	втВнешняя.frost 		КАК frost,
	|	втВнешняя.cost 			КАК cost,
	|	втВнешняя.oversized 	КАК oversized,
	|	втВнешняя.time 			КАК time,
	|	втВнешняя.costKG 		КАК costKG,
	|	втВнешняя.costCub 		КАК costCub,
	|	втВнешняя.updated_at 	КАК updated_at,
	|	Габариты.Ссылка 		КАК Габарит,
	|	Выбор Когда Габариты.Наименование <> Выразить(втВнешняя.name как Строка(25)) Тогда Габариты.Наименование  Иначе """" Конец Как СтароеНаименование
	|ИЗ
	|	втВнешняя КАК втВнешняя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Габариты КАК Габариты
	|		ПО ((ВЫРАЗИТЬ(втВнешняя.id КАК СТРОКА(9))) = Габариты.Код)";
	Запрос.Параметры.Вставить("втВнешняя", тз);
	
	Результат = Запрос.Выполнить();
	выборка = Результат.Выбрать();
	
	тзНазваний	= Объект.Тарифы.Выгрузить(,"Габарит,СтароеНаименование");
	
	Объект.Тарифы.Очистить();	
	
	Пока выборка.Следующий() Цикл
		
		новаяСтрока = Объект.Тарифы.Добавить();
		ПараметрыГабарита = Новый Структура;
		ПараметрыГабарита.Вставить("Наименование", Выборка.name);
		Если ЗначениеЗаполнено(выборка.Габарит) Тогда
			Габарит = Выборка.Габарит;
			Габарит = СП_РаботаСоСправочниками.ОбновитьГабарит(Габарит, ПараметрыГабарита);
		иначе	
			Габарит = СП_РаботаСоСправочниками.ПолучитьГабаритПо_Коду(Выборка.id, ПараметрыГабарита);
		КонецЕсли;	
		новаяСтрока.Габарит		= Габарит;
		новаяСтрока.СтароеНаименование      =  Выборка.СтароеНаименование;
		новаяСтрока.ЦенаХранения 			= ?(Выборка.cost	 	= "", 0 ,Число(Выборка.cost));
		новаяСтрока.ЦенаЗаКуб 				= ?(Выборка.costCub  	= "", 0 ,Число(Выборка.costCub));
		новаяСтрока.ЦенаЗаКГ		 		= ?(Выборка.costKG   	= "", 0 ,Число(Выборка.costKG));
		новаяСтрока.СрокХранения			= ?(Выборка.time   		= "", 0 ,Число(Выборка.time));
		новаяСтрока.Штраф 					= ?(Выборка.forfeit   	= "", 0 ,Число(Выборка.forfeit));
		новаяСтрока.Заморозка			 	= ?(Выборка.frost 		= "0", Ложь, Истина);
		новаяСтрока.НеГабарит			 	= ?(Выборка.oversized 	= "0", Ложь, Истина);
		новаяСтрока.Изменен		 			= СтоСПОбмен_Общий.ДатаИзСтроки(Выборка.updated_at,1);
		
		массСтрок = тзНазваний.НайтиСтроки(новый Структура("Габарит", Габарит));
		Если массСтрок.Количество()>0 и массСтрок[0].СтароеНаименование <> "" Тогда
			новаяСтрока.СтароеНаименование = массСтрок[0].СтароеНаименование <> ""
		КонецЕсли;	
		
		//Тарифы по напрпавлениям
		найдено = тз.НайтиСтроки(Новый Структура("id", Выборка.id ));	
		ТарифыПоНапрпавлениям = найдено[0].destinations.destination;
		
		Если ТарифыПоНапрпавлениям.Количество()>0 Тогда
			Для каждого элем из ТарифыПоНапрпавлениям Цикл
				новаяСтрока 			= Объект.ТарифыПоНаправлениям.Добавить();	
				новаяСтрока.Габарит 	= Габарит;
				новаяСтрока.Откуда 		= СП_РаботаСоСправочниками.ПолучитьГородПокупкиПо_Коду(элем.from);
				новаяСтрока.Куда 		= СП_РаботаСоСправочниками.ПолучитьГородПокупкиПо_Коду(элем.to);
				новаяСтрока.Стоимость 	= ?(элем.cost	 	= "", 0 ,Число(элем.cost));
				новаяСтрока.Изменен		= СтоСПОбмен_Общий.ДатаИзСтроки(элем.updated_at,1);
			КонецЦикла;	
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры	



