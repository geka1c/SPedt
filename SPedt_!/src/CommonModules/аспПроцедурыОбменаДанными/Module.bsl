#Область ПрограммныйИнтерфейс
//  Загрузка участников, покупок, посылок, группобъединенной доставки, карт участников по дате
//
//
Функция ПолучитьССайта() Экспорт
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Получаем с сайта: Покупки, Участников, Карты участников", , 0,
		100);
	параметрыДаты = Новый Структура;
	параметрыДаты.Вставить("ДатаОбъединеннойДоставки", 	Справочники.ПараметрыОбмена.ГруппыДоставки.ДатаЗагрузки);
	//параметрыДаты.Вставить("ДатаУчастники", 			Справочники.ПараметрыОбмена.Участники.ДатаЗагрузки);
	параметрыДаты.Вставить("ДатаПокупки", 				Справочники.ПараметрыОбмена.Покупки.ДатаЗагрузки);
	параметрыДаты.Вставить("ДатаКарты", 				Справочники.ПараметрыОбмена.КартыУчастников.ДатаЗагрузки);
	параметрыДаты.Вставить("ДатаТочки", ТекущаяДата());

	Параметры			=	Новый Структура;
	Параметры.Вставить("token", Константы.Токен.Получить());
	Параметры.Вставить("xml", 	ПолучитьСтрокуСДатамиЗагрузки(параметрыДаты));

	АдресСкрипта        = Константы.АдресЗагрузкиССайта.Получить();
	ИмяФайлаОтвета		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);

	Если АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		стрСТЗ			= ОбработатьЗагруженныеССайтаДанные(ИмяФайлаОтвета);
		тзУчастники		= стрСТЗ.Участники;
		тзПокупки		= стрСТЗ.Покупки;
		тзКарты 		= стрСТЗ.КартыУчастников;

		СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныхУчастников(тзУчастники);
		СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.Участники);

		СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныеПокупки(тзПокупки);
		СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.Покупки);

		СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныеКарты(тзКарты);
		СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.КартыУчастников);

	КонецЕсли;

	СтоСПОбмен_Посылки.Загрузить_ПосылкиПоДате();
	//СтоСПОбмен_Возвраты.Загрузить_ВозвратыПоДате();
КонецФункции
Процедура ПолучитьУчастниковПоДате(ДатаЗагрузки = Неопределено) Экспорт
	Параметры = Новый Структура;
	Если ДатаЗагрузки = Неопределено Тогда
		Параметры.Вставить("ДатаУчастники", Справочники.ПараметрыОбмена.Участники.ДатаЗагрузки);
	Иначе
		Параметры.Вставить("ДатаУчастники", ДатаЗагрузки);
	КонецЕсли;
	Параметры.Вставить("xml", ПолучитьСтрокуСДатамиЗагрузки(Параметры));
	Параметры.Вставить("token", Константы.Токен.Получить());

	АдресСкрипта        = Константы.АдресЗагрузкиССайта.Получить();
	ИмяФайлаОтвета		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);
	;
	Если АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		тзУчастники		= ОбработатьЗагруженныеССайтаДанные(ИмяФайлаОтвета).Участники;
		СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныхУчастников(тзУчастники);
		СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.Участники);
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьУчастниковПоКодам(ПараметрУчастники) Экспорт
	Если ТипЗнч(ПараметрУчастники) = Тип("Строка") Тогда
		списокУчастников = Новый СписокЗначений;
		списокУчастников.Добавить(ПараметрУчастники);
	ИначеЕсли ТипЗнч(ПараметрУчастники) = Тип("Число") Тогда
		списокУчастников = Новый СписокЗначений;
		списокУчастников.Добавить(Формат(ПараметрУчастники, "ЧГ=0"));
	ИначеЕсли ТипЗнч(ПараметрУчастники) = Тип("СправочникСсылка.Участники") Тогда
		списокУчастников = Новый СписокЗначений;
		списокУчастников.Добавить(Формат(ПараметрУчастники.Код, "ЧГ=0"));
	Иначе
		списокУчастников = ПараметрУчастники;
	КонецЕсли;

	Параметры=Новый Структура;
	Параметры.Вставить("token", Константы.Токен.Получить());
	Параметры.Вставить("xml", 	СтоСПОбмен_Запрос.УчастникПоИД(списокУчастников));

	АдресСкрипта        = Константы.АдресЗагрузкиССайта.Получить();
	ИмяФайлаОтвета		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);
	Если АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		тзУчастники		= ОбработатьЗагруженныеССайтаДанные(ИмяФайлаОтвета).Участники;
		СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныхУчастников(тзУчастники);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПокупкиПоДате(ДатаЗагрузки = Неопределено) Экспорт
	Параметры = Новый Структура;
	Если ДатаЗагрузки = Неопределено Тогда
		Параметры.Вставить("ДатаПокупки", Справочники.ПараметрыОбмена.Покупки);
	Иначе
		Параметры.Вставить("ДатаПокупки", ДатаЗагрузки);
	КонецЕсли;
	Параметры.Вставить("xml", ПолучитьСтрокуСДатамиЗагрузки(Параметры));
	Параметры.Вставить("token", Константы.Токен.Получить());

	АдресСкрипта        = Константы.АдресЗагрузкиССайта.Получить();
	ИмяФайлаОтвета		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);
	Если АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		тзПокупки		= ОбработатьЗагруженныеССайтаДанные(ИмяФайлаОтвета).Покупки;
		СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныеПокупки(тзПокупки);
		СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.Покупки);
	КонецЕсли;

КонецФункции

Процедура ПолучитьПокупкиПоКодам(ПараметрПокупки) Экспорт
	Если ТипЗнч(ПараметрПокупки) = Тип("Строка") Тогда
		списокПокупок 		= Новый СписокЗначений;
		списокПокупок.Добавить(ПараметрПокупки);
	ИначеЕсли ТипЗнч(ПараметрПокупки) = Тип("Число") Тогда
		списокПокупок 		= Новый СписокЗначений;
		списокПокупок.Добавить(Формат(ПараметрПокупки, "ЧГ=0"));
	ИначеЕсли ТипЗнч(ПараметрПокупки) = Тип("СправочникСсылка.Покупки") Тогда
		списокУчастников 	= Новый СписокЗначений;
		списокУчастников.Добавить(Формат(ПараметрПокупки.Код, "ЧГ=0"));
	Иначе
		списокПокупок = ПараметрПокупки;
	КонецЕсли;

	Параметры=Новый Структура;
	Параметры.Вставить("token", Константы.Токен.Получить());
	Параметры.Вставить("xml", ПолучитьСтрокуПоКодамСправочника(списокПокупок, "Покупки"));

	АдресСкрипта        = Константы.АдресЗагрузкиССайта.Получить();
	ИмяФайлаОтвета		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);
	Если АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		тзПокупки		= ОбработатьЗагруженныеССайтаДанные(ИмяФайлаОтвета).Покупки;
		СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныеПокупки(тзПокупки);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ФормированиеЭлементовСправочников
Процедура ОбработатьЗагруженныеЗаказы(тзИзФайла)
	Если Не ЗначениеЗаполнено(тзИзФайла) Или тзИзФайла.количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тзФ.id   		как Код,
	|	тзФ.modified 	как ДатаМодификации,
	|	тзФ.secureCode  как secureCode,
	|	тзФ.orgid 		как КодОрга
	|ПОМЕСТИТЬ Ф
	|ИЗ
	|	&тзФ КАК тзФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ф.Код,
	|	Ф.КодОрга,
	|	Ф.ДатаМодификации,
	|	Ф.secureCode,
	|	Участники.Ссылка как СсылкаУч,
	|	Заказы.Ссылка как СсылкаЗаказ,
	|	Организаторы.Ссылка как СсылкаОрг
	|	поместить Итоговая
	|ИЗ
	|	Ф КАК Ф
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Заказы КАК Заказы
	|		ПО Выразить(Ф.Код как Строка(8)) = Заказы.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Участники КАК Участники
	|		ПО Ф.КодОрга = Участники.Код		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организаторы КАК Организаторы
	|		ПО Ф.КодОрга = Организаторы.Код";
	Запрос.Параметры.Вставить("тзФ", тзИзФайла);
	Результат=Запрос.Выполнить();

	Запрос.Текст=
	"ВЫБРАТЬ
	|	Ф.Код,
	|	Ф.КодОрга,
	|	Ф.ДатаМодификации,
	|	Ф.secureCode,
	|	Ф.СсылкаУч КАК СсылкаУчастник,
	|	Ф.СсылкаЗаказ КАК СсылкаЗаказ,
	|	Ф.СсылкаОрг КАК СсылкаОрганизатор
	|ИЗ
	|	Итоговая КАК Ф";

	результатИзменилисьЗаказ=Запрос.Выполнить();
	Выборка = результатИзменилисьЗаказ.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДобавитьЗаказИзСтрТЗ(Выборка);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
Процедура ЗаполнениеКонстант() Экспорт
	ТребуетсяОбновление = ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы();
	Если ТребуетсяОбновление Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Константы.АдресЗагрузкиССайта.Получить()) Тогда
		Константы.АдресЗагрузкиССайта.Установить("api/distributor");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Константы.АдресВыгрузкиНасайт.Получить()) Тогда
		Константы.АдресВыгрузкиНасайт.Установить("api/distributor/upload");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Константы.АдресОбменаССайтом.Получить()) Тогда
		Константы.АдресОбменаССайтом.Установить("/api/distributor/exchange");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Константы.АдресЗагрузкиДоставленныхТранзитов.Получить()) Тогда
		Константы.АдресЗагрузкиДоставленныхТранзитов.Установить("/api/distributor/incomesFromMe");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Константы.АдресПроверкиТекущегоВремени.Получить()) Тогда
		Константы.АдресПроверкиТекущегоВремени.Установить("/api/distributor/curTime");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Константы.АдресФормированияКоробок.Получить()) Тогда
		Константы.АдресФормированияКоробок.Установить("/api/distributor/group/create");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Константы.Сервер.Получить()) Тогда
		Константы.Сервер.Установить("www.100sp.ru");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Константы.Порт.Получить()) Тогда
		Константы.Порт.Установить(80);
	КонецЕсли;
	
	Если Справочники.Коробки.БезКоробки.Организатор <> справочники.Организаторы.нулевой или
		 Справочники.Коробки.БезКоробки.КРазбору	<> Истина Тогда
		
		кор				= Справочники.Коробки.БезКоробки.ПолучитьОбъект();
		кор.Организатор	= справочники.Организаторы.нулевой;
		кор.КРазбору	= Истина;
		кор.Записать();
		
	КонецЕсли;

	ПараметрОбмена = Справочники.ПараметрыОбмена.Супергруппы;
	Если Не ЗначениеЗаполнено(ПараметрОбмена.ДатаЗагрузки) Тогда
		обПараметрыЗагрузки 				= ПараметрОбмена.ПолучитьОбъект();
		обПараметрыЗагрузки.ДатаЗагрузки 	= Константы.ПоследняяЗагрузкаСупергрупп.Получить();
		обПараметрыЗагрузки.Записать();
	КонецЕсли;

	ПараметрОбмена = Справочники.ПараметрыОбмена.ГруппыДоставки;
	Если Не ЗначениеЗаполнено(ПараметрОбмена.ДатаЗагрузки) Тогда
		обПараметрыЗагрузки 				= ПараметрОбмена.ПолучитьОбъект();
		обПараметрыЗагрузки.ДатаЗагрузки 	= ТекущаяДата();
		обПараметрыЗагрузки.Записать();
	КонецЕсли;

	ПараметрОбмена = Справочники.ПараметрыОбмена.КартыУчастников;
	Если Не ЗначениеЗаполнено(ПараметрОбмена.ДатаЗагрузки) Тогда
		обПараметрыЗагрузки 				= ПараметрОбмена.ПолучитьОбъект();
		обПараметрыЗагрузки.ДатаЗагрузки 	= ТекущаяДата();
		обПараметрыЗагрузки.Записать();
	КонецЕсли;

	ПараметрОбмена = Справочники.ПараметрыОбмена.Покупки;
	Если Не ЗначениеЗаполнено(ПараметрОбмена.ДатаЗагрузки) Тогда
		обПараметрыЗагрузки 				= ПараметрОбмена.ПолучитьОбъект();
		обПараметрыЗагрузки.ДатаЗагрузки 	= ТекущаяДата();
		обПараметрыЗагрузки.Записать();
	КонецЕсли;

	ПараметрОбмена = Справочники.ПараметрыОбмена.Посылки;
	Если Не ЗначениеЗаполнено(ПараметрОбмена.ДатаЗагрузки) Тогда
		обПараметрыЗагрузки 				= ПараметрОбмена.ПолучитьОбъект();
		обПараметрыЗагрузки.ДатаЗагрузки 	= ТекущаяДата();
		обПараметрыЗагрузки.Записать();
	КонецЕсли;

	ПараметрОбмена = Справочники.ПараметрыОбмена.Участники;
	Если Не ЗначениеЗаполнено(ПараметрОбмена.ДатаЗагрузки) Тогда
		обПараметрыЗагрузки 				= ПараметрОбмена.ПолучитьОбъект();
		обПараметрыЗагрузки.ДатаЗагрузки 	= ТекущаяДата();
		обПараметрыЗагрузки.Записать();
	КонецЕсли;

	ПараметрОбмена = Справочники.ПараметрыОбмена.ПокупкиВПутиОтчет;
	Если Не ЗначениеЗаполнено(ПараметрОбмена.ДатаЗагрузки) Тогда
		обПараметрыЗагрузки 				= ПараметрОбмена.ПолучитьОбъект();
		обПараметрыЗагрузки.ДатаЗагрузки 	= ТекущаяДата();
		обПараметрыЗагрузки.Записать();
	КонецЕсли;
		
	//об = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0083"); 
	//Если ЗначениеЗаполнено(об) Тогда
	//	СДЭК=об.ПолучитьОбъект();
	//	Если не ЗначениеЗаполнено(СДЭК.СерверТК) Тогда
	//		СДЭК.СерверТК ="integration.cdek.ru";
	//	КонецЕсли;
	//	Если не ЗначениеЗаполнено(СДЭК.ПортТК) Тогда
	//		СДЭК.ПортТК   =80;
	//	КонецЕсли;
	//	СДЭК.Записать();
	//КонецЕсли;
КонецПроцедуры
Функция АвторизацияВыполнена(ИмяФайлаОтвета) Экспорт
	ЧтениеХМЛ=Новый ЧтениеXML;
	Попытка
		ЧтениеХМЛ.ОткрытьФайл(ИмяФайлаОтвета);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.Имя = "auth" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеХМЛ.Прочитать();
			ЧтениеХМЛ.Прочитать();
			Если ЧтениеХМЛ.Значение = "ok" Тогда
				Возврат Истина;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					"Не выполнене авторизация при подключении к сайту 100 сп!");
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции



/////////Выгрузка

Процедура СформироватИОтправитьПакет(Док = Неопределено) Экспорт
	
	Константы.ДатаПоследнейВыгрузки.Установить(ТекущаяДата());
	сек = 3;
	КонДата = ТекущаяДата() + сек;
	Пока ТекущаяДата() < КонДата Цикл
		// ждемссс....
	КонецЦикла;
	
	
	Если ЗначениеЗаполнено(Док) Тогда
		УдалитьДокументИзОтправленных(Док);
	КонецЕсли;
	Пакет=Документы.ПакетНаСайт.СоздатьДокумент();
	Пакет.Дата=ТекущаяДата();
	ЗаполненоОбъектов=пакет.ЗаполнитьТаблицы();
	Если ЗаполненоОбъектов > 0 Тогда
		пакет.СериолизоватьВХМЛ();
		пакет.ОтправитьНаСайт();
		
		
		Попытка
			Пакет.Записать(РежимЗаписиДокумента.Запись);
		Исключение
		КонецПопытки;
		пакет.ДесериализоватьИзХМЛ();
		Попытка
			Пакет.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
	Иначе	

	КонецЕсли;
КонецПроцедуры

Процедура УдалитьДокументИзОтправленных(Док) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбменССайтом.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.Обмен100СПрн КАК ОбменССайтом
	|ГДЕ
	|	ОбменССайтом.Партия = &Док
	| И ТИПЗНАЧЕНИЯ(ОбменССайтом.Регистратор) = ТИП(Документ.Выгрузка_100СП)";

	Запрос.УстановитьПараметр("Док", Док);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Пакет=ВыборкаДетальныеЗаписи.Регистратор.ПолучитьОбъект();
		СтрокиКУдалению=Новый Массив;
		СтрокиКУдалению= пакет.ВыгружаемыДокументы.НайтиСтроки(Новый Структура("Документ", Док));
		Для Каждого стр Из СтрокиКУдалению Цикл
			стр.Изменен=ТекущаяДата();
			//пакет.ВыгружаемыДокументы.Удалить(стр);
		КонецЦикла;
		СтрокиКУдалению= пакет.ВыгружаемыеДанные.НайтиСтроки(Новый Структура("Партия", Док));
		Для Каждого стр Из СтрокиКУдалению Цикл
			стр.Изменен=Истина;
			//пакет.ВыгружаемыеДанные.Удалить(стр);
		КонецЦикла;
		пакет.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
КонецПроцедуры
Процедура ОтправитьНеОтправленныеПакеты() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетНаСайт.Ссылка
	|ИЗ
	|	Документ.ПакетНаСайт КАК ПакетНаСайт
	|ГДЕ
	|	ПакетНаСайт.Проведен
	|	И ПакетНаСайт.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Отправлен)";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Пакет=Выборка.Ссылка.ПолучитьОбъект();
		пакет.ОтправитьНаСайт();
		Пакет.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
КонецПроцедуры

#Область Загрузка

//ДатаУчастники			= Неопределено,
//ДатаПокупки				= Неопределено,
//ДатаКарты				= Неопределено,
//ДатаТочки				= Неопределено,
//ДатаОбъединеннойДоставки= Неопределено
Функция ПолучитьСтрокуСДатамиЗагрузки(Параметры)
	ЗаписьXML	= Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьНачалоЭлемента("dataByDates");
	Если Параметры.Свойство("ДатаУчастники") Тогда
		ДобавитьЭлементXML(ЗаписьXML, "users", Параметры.ДатаУчастники);
	КонецЕсли;
	Если Параметры.Свойство("ДатаПокупки") Тогда
		ДобавитьЭлементXML(ЗаписьXML, "purchases", Параметры.ДатаПокупки);
	КонецЕсли;
	Если Параметры.Свойство("ДатаКарты") Тогда
		ДобавитьЭлементXML(ЗаписьXML, "cards", Параметры.ДатаКарты);
	КонецЕсли;
	Если Параметры.Свойство("ДатаОбъединеннойДоставки") Тогда
		ДобавитьЭлементXML(ЗаписьXML, "deliveryGroups", Параметры.ДатаОбъединеннойДоставки);
	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	Если Параметры.Свойство("ДатаТочки") Тогда
		ДобавитьЭлементXML(ЗаписьXML, "publicDistributors", "");
	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	стр =ЗаписьXML.Закрыть();
	стр="<?xml version=""1.0"" encoding=""UTF-8""?> " + СтрЗаменить(стр,
		"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ", "");
	Возврат стр;
КонецФункции
Функция ПолучитьЗапросЗагрузкиГородвСП(СписокГородов)
	ЗаписьXML=Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
	Если СписокГородов = Неопределено Тогда
		ДобавитьЭлементXML(ЗаписьXML, "cities", "");
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("cities");
		Для Каждого элем Из СписокГородов Цикл
			ДобавитьЭлементXML(ЗаписьXML, "city", Формат(Число(элем.Значение), "ЧГ=0"));
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	стр =ЗаписьXML.Закрыть();
	стр="<?xml version=""1.0"" encoding=""UTF-8""?> " + СтрЗаменить(стр,
		"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ", "");
	Возврат стр;
КонецФункции
Функция ПолучитьКарты(ДатаЗагрузки = Неопределено) Экспорт
	Параметры	= Новый Структура;
	Параметры.Вставить("token", Константы.Токен.Получить());
	Параметры.Вставить("xml", ПолучитьСтрокуСДатамиЗагрузки(Новый Структура("ДатаКарты",
																			Справочники.ПараметрыОбмена.КартыУчастников.ДатаЗагрузки)));

	АдресСкрипта        = Константы.АдресЗагрузкиССайта.Получить();
	ИмяФайлаОтвета		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);
	Если АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		тзКарты=ОбработатьЗагруженныеССайтаДанные(ИмяФайлаОтвета).Карты;
		Для Каждого карта Из тзКарты Цикл
		КонецЦикла;
	Иначе	
		
	КонецЕсли;
КонецФункции

Функция ПолучитьТочкиРаздачи(ДатаЗагрузки = Неопределено) Экспорт
	Параметры	= Новый Структура;
	Параметры.Вставить("token", Константы.Токен.Получить());
	Параметры.Вставить("xml", ПолучитьСтрокуСДатамиЗагрузки(Новый Структура("ДатаТочки", Дата(1, 1, 2))));

	АдресСкрипта        = Константы.АдресЗагрузкиССайта.Получить();
	ИмяФайлаОтвета		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);
	;
	Если АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		тзТочкиРаздачи = ОбработатьЗагруженныеССайтаДанные(ИмяФайлаОтвета).ТочкиРаздачи;
		Для Каждого точка Из тзТочкиРаздачи Цикл
			Если точка.code = "" Тогда
				Продолжить;
			КонецЕсли;
			параметрыПВ = Новый Структура;
			параметрыПВ.Вставить("Наименование", точка.name);
		//	параметрыПВ.Вставить("КРазбору", (Не Булево(точка.canProcessGroup)));
			параметрыПВ.Вставить("Город", точка.city);
			параметрыПВ.Вставить("ГородСП", СП_РаботаСоСправочниками.ПолучитьГородПокупкиПо_Коду(точка.city_id));
			параметрыПВ.Вставить("Адрес", точка.address);
			параметрыПВ.Вставить("Догрузить", Ложь);

			СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(точка.code, параметрыПВ);
		КонецЦикла;
		тзПостомат=ОбработатьЗагруженныеССайтаДанные(ИмяФайлаОтвета).Постомат;
		Для Каждого пв Из тзПостомат Цикл
			Если пв.unique_id = "" Тогда
				Продолжить;
			КонецЕсли;
			код=пв.unique_id;
			ссылкаПВ=Справочники.ПВПочтовыхКомпаний.НайтиПоКоду(код);
			Если ЗначениеЗаполнено(ссылкаПВ) Тогда
				обПВ=ссылкаПВ.ПолучитьОбъект();
			Иначе
				обПВ=Справочники.ПВПочтовыхКомпаний.СоздатьЭлемент();
				обПВ.Код=код;
			КонецЕсли;
			обПВ.Наименование=пв.name;
			обПВ.Город=пв.city;
			обПВ.Адрес=пв.address;
			обПВ.Вид=Перечисления.ВидыПВПочтовыхКомпаний.Постомат;
			Попытка
				обПВ.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;

		тзСДЭК=ОбработатьЗагруженныеССайтаДанные(ИмяФайлаОтвета).СДЭК;
		Для Каждого пв Из тзСДЭК Цикл
			Если пв.unique_id = "" Тогда
				Продолжить;
			КонецЕсли;
			код=пв.unique_id;
			ссылкаПВ=Справочники.ПВПочтовыхКомпаний.НайтиПоКоду(код);
			Если ЗначениеЗаполнено(ссылкаПВ) Тогда
				обПВ=ссылкаПВ.ПолучитьОбъект();
			Иначе
				обПВ=Справочники.ПВПочтовыхКомпаний.СоздатьЭлемент();
				обПВ.Код=код;
			КонецЕсли;
			обПВ.Наименование=пв.name;
			обПВ.Город=пв.city;
			обПВ.Адрес=пв.address;
			обПВ.Вид=Перечисления.ВидыПВПочтовыхКомпаний.СДЭК;
			Попытка
				обПВ.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
	Иначе
		//ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(,,

	КонецЕсли;
КонецФункции
Функция ПолучитьГородаСП(СписокГородов = Неопределено) Экспорт
	Параметры=Новый Структура;
	Параметры.Вставить("token", Константы.Токен.Получить());
	Параметры.Вставить("xml", ПолучитьЗапросЗагрузкиГородвСП(СписокГородов));

	АдресСкрипта        = Константы.АдресЗагрузкиССайта.Получить();
	ИмяФайлаОтвета		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);
	Если АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		тзГорода=ОбработатьЗагруженныеССайтаДанные(ИмяФайлаОтвета).Города;
		Для Каждого точка Из тзГорода Цикл
			Если точка.region_id = "" Тогда
				Продолжить;
			КонецЕсли;
			Если точка.id = "" Тогда
				Продолжить;
			КонецЕсли;

			кодРегиона=Формат(Число(точка.region_id), "ЧГ=0");
			ссылкаРегион=Справочники.РегионыСП.НайтиПоКоду(кодРегиона);
			Если ЗначениеЗаполнено(ссылкаРегион) Тогда
				обРегион=ссылкаРегион.ПолучитьОбъект();
			Иначе
				обРегион=Справочники.РегионыСП.СоздатьЭлемент();
				обРегион.Код=кодРегиона;
			КонецЕсли;
			обРегион.Наименование=точка.region;
			Попытка
				обРегион.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось заисать регион с кодом "
					+ точка.region_id);
				Продолжить;
			КонецПопытки;

			кодГорода=Формат(Число(точка.id), "ЧГ=0");
			ссылкаГород=Справочники.ГородаСП.НайтиПоКоду(кодГорода);
			Если ЗначениеЗаполнено(ссылкаГород) Тогда
				обГород=ссылкаГород.ПолучитьОбъект();
			Иначе
				обГород=Справочники.ГородаСП.СоздатьЭлемент();
				обГород.Код=кодГорода;
			КонецЕсли;
			обГород.Наименование=точка.name;
			обГород.РегионСП=ссылкаРегион;
			Попытка
				обГород.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось заисать город с кодом " + точка.id);
				Продолжить;
			КонецПопытки;
		КонецЦикла;

	Иначе
		//ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(,,
		
	КонецЕсли;
КонецФункции

#КонецОбласти
#Область РедактированиеОбласти
Функция ДобавитьЗаказИзСтрТЗ(стр) 
	////Участник
	Если ЗначениеЗаполнено(стр.СсылкаУчастник) Тогда
		Участник	= стр.СсылкаУчастник;
	Иначе
		Участник	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(стр.КодОрга);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(стр.СсылкаОрганизатор) Тогда
		Организатор = СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(стр.КодОрга);
	КонецЕсли;

	кодЗаказа 		= стр.Код;
	параметрыЗаказа = Новый Структура;

	параметрыЗаказа.Вставить("Организатор", Организатор);
	параметрыЗаказа.Вставить("Наименование", "Заказ (" + стр.Код + ")");
	параметрыЗаказа.Вставить("Догрузить", Ложь);
	параметрыЗаказа.Вставить("ДатаЗагрузки", ТекущаяДата());
	параметрыЗаказа.Вставить("secureCode", стр.secureCode);
	параметрыЗаказа.Вставить("ДатаМодификации", стр.ДатаМодификации);

	СП_РаботаСоСправочниками.ПолучитьЗаказПо_Коду(кодЗаказа, параметрыЗаказа);
КонецФункции

#КонецОбласти
#Область ЗагрузкаПоЗапросу
Функция ПолучитьСтрокуПоКодамСправочника(СписокКодовСправочника, Справочник)
	ЗаписьXML=Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");

	Если Справочник = "Участники" Тогда
		ТэгСписка="users";
		ТэгЭлемента="user";
	ИначеЕсли Справочник = "Покупки" Тогда
		ТэгСписка="purchases";
		ТэгЭлемента="purchase";
	ИначеЕсли Справочник = "КартыУчастников" Тогда
		ТэгСписка="cards";
		ТэгЭлемента="card";
	ИначеЕсли Справочник = "Заказы" Тогда
		ТэгСписка="shopOrders";
		ТэгЭлемента="shopOrder";
	ИначеЕсли Справочник = "Коробки" Тогда
		ТэгСписка="groups";
		ТэгЭлемента="group";
	ИначеЕсли Справочник = "Пристрой" Тогда
		Возврат ПолучитьСтрокуЗапросаПристроя(СписокКодовСправочника);
	Иначе
		Возврат "";
	КонецЕсли;

	Если ЗначениеЗаполнено(СписокКодовСправочника) И СписокКодовСправочника.Количество() > 0 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента(ТэгСписка);
		Если Метаданные.Справочники[Справочник].СтандартныеРеквизиты.Код.Тип.СодержитТип(Тип("Число")) Тогда
			Для Каждого элСписка Из СписокКодовСправочника Цикл
				ДобавитьЭлементXML(ЗаписьXML, ТэгЭлемента, СтрЗаменить(Формат(элСписка.Значение, "ЧГ=0"), " ", ""));
			КонецЦикла;
		Иначе
			Для Каждого элСписка Из СписокКодовСправочника Цикл
				ДобавитьЭлементXML(ЗаписьXML, ТэгЭлемента, СтрЗаменить(элСписка.Значение, " ", ""));
			КонецЦикла;
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		Возврат "";
	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	стр =ЗаписьXML.Закрыть();
	стр="<?xml version=""1.0"" encoding=""UTF-8""?> " + СтрЗаменить(стр,
		"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ", "");
	Возврат стр;
КонецФункции
Функция ПолучитьЗапросом(СписокКодовСправочника, Справочник) Экспорт

	Если ЗначениеЗаполнено(СписокКодовСправочника) И СписокКодовСправочника.Количество() > 0 Тогда
		Параметры=Новый Структура;
		Параметры.Вставить("token", Константы.Токен.Получить());
		Параметры.Вставить("xml", ПолучитьСтрокуПоКодамСправочника(СписокКодовСправочника, Справочник));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	АдресСкрипта        = Константы.АдресЗагрузкиССайта.Получить();
	ИмяФайлаОтвета		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);
	Если АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		тзРазобрано=ОбработатьЗагруженныеССайтаДанные(ИмяФайлаОтвета)[Справочник];
		Возврат тзРазобрано;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
Процедура ПолучитьЗапросомЗаказы(ПараметрыЗаказа) Экспорт
	Если ТипЗнч(ПараметрыЗаказа) = "Строка" Тогда
		список = Новый СписокЗначений;
		список.Добавить(ПараметрыЗаказа);
	Иначе
		список = ПараметрыЗаказа;
	КонецЕсли;
	тзИзФайла	=	ПолучитьЗапросом(список, "Заказы");
	ОбработатьЗагруженныеЗаказы(тзИзФайла);
КонецПроцедуры
Процедура ПолучитьЗапросомКарты(ПараметрКарты) Экспорт
	Если ТипЗнч(ПараметрКарты) = Тип("Строка") Или ТипЗнч(ПараметрКарты) = Тип("Число") Тогда
		списокКартУчастников = Новый СписокЗначений;
		списокКартУчастников.Добавить(ПараметрКарты);
	Иначе
		списокКартУчастников = ПараметрКарты;
	КонецЕсли;

	тзИзФайла=ПолучитьЗапросом(списокКартУчастников, "КартыУчастников");
	СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныеКарты(тзИзФайла);
КонецПроцедуры
#КонецОбласти

Процедура ДогрузитьСправочникиССайта() Экспорт
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Догружаем Участников", , 0, 100);
#Область Участники
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Участники.Код КАК Код
	|ПОМЕСТИТЬ пред
	|ИЗ
	|	Справочник.Участники КАК Участники
	|ГДЕ
	|	Участники.Догрузить
	|	И НЕ Участники.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организаторы.Код
	|ИЗ
	|	Справочник.Организаторы КАК Организаторы
	|ГДЕ
	|	(Организаторы.Догрузить
	|			ИЛИ Организаторы.Участник = ЗНАЧЕНИЕ(Справочник.Участники.ПустаяСсылка)
	|			ИЛИ Организаторы.Наименование  ПОДОБНО ""%Участник%"")
	|	И НЕ Организаторы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	пред.Код КАК Код
	|ИЗ
	|	пред КАК пред
	|
	|СГРУППИРОВАТЬ ПО
	|	пред.Код";

	РезультатЗапроса = Запрос.Выполнить();
	СписокКодовСправочника= Новый СписокЗначений;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокКодовСправочника.Добавить(Формат(Выборка.Код, "ЧГ=0"));
	КонецЦикла;
	тзИзФайла=ПолучитьЗапросом(СписокКодовСправочника, "Участники");
	СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныхУчастников(тзИзФайла);
#КонецОбласти

#Область Коробки
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Догружаем: Коробки", , 0, 100);
	СтоСПОбмен_Коробки.Загрузить_КоробкиСПризнакомДогрузить();

#КонецОбласти
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Догружаем: Посылки", , 0, 100);
	СтоСПОбмен_Посылки.Загрузить_СоставПосылки_ПоПризнакуДогрузить();

#Область Покупки
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Догружаем: Покупки", , 0, 100);
	СтоСПОбмен_Покупки.Догрузить();
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Покупки.Код КАК Код
	//	|ИЗ
	//	|	Справочник.Покупки КАК Покупки
	//	|ГДЕ
	//	|	Покупки.Догрузить
	//	|	И НЕ Покупки.ПометкаУдаления";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//СписокКодовСправочника= новый СписокЗначений;
	//СписокКодовСправочника.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Код"));
	//тзИзФайла=ПолучитьЗапросом(СписокКодовСправочника,"Покупки");
	//ОбработатьЗагруженныеПокупки(тзИзФайла);
#КонецОбласти
#Область Заказы
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.Код КАК Код
	|ИЗ
	|	Справочник.Заказы КАК Заказы
	|ГДЕ
	|	(Заказы.Догрузить
	|			ИЛИ Заказы.Организатор = ЗНАЧЕНИЕ(Справочник.Организаторы.ПустаяСсылка)
	|			ИЛИ Заказы.Организатор = ЗНАЧЕНИЕ(Справочник.Участники.ПустаяСсылка)
	|			ИЛИ Заказы.Организатор = НЕОПРЕДЕЛЕНО)
	|	И НЕ Заказы.ПометкаУдаления";

	РезультатЗапроса = Запрос.Выполнить();
	СписокКодовСправочника= Новый СписокЗначений;
	СписокКодовСправочника.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Код"));
	тзИзФайла=ПолучитьЗапросом(СписокКодовСправочника, "Заказы");
	ОбработатьЗагруженныеЗаказы(тзИзФайла);
#КонецОбласти
#Область Картыучастников

	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Догружаем: Карты участников", , 0, 100);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КартыУчастников.Код
	|ИЗ
	|	Справочник.КартыУчастников КАК КартыУчастников
	|ГДЕ
	|	КартыУчастников.Догрузить";

	РезультатЗапроса = Запрос.Выполнить();
	СписокКодовСправочника= Новый СписокЗначений;
	СписокКодовСправочника.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Код"));
	тзИзФайла=ПолучитьЗапросом(СписокКодовСправочника, "КартыУчастников");
	СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныеКарты(тзИзФайла);
#КонецОбласти
КонецПроцедуры
Процедура ДогрузитьЭлементСправочникаССайта(Элемент) Экспорт
	//Коробки
	Если ТипЗнч(Элемент) = Тип("СправочникСсылка.Коробки") Тогда
		СписокКодовСправочника= Новый СписокЗначений;
		Попытка
			СписокКодовСправочника.Добавить(Элемент.Код);
		Исключение

		КонецПопытки;
		СтоСПОбмен_Коробки.Загрузить_КоробкиПоКодам(СписокКодовСправочника);
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Мегаордера") Тогда //Супергруппы
		СтоСПОбмен_СупперГруппы.ПолучитьСостав(Элемент);
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Посылки") Тогда
		СписокКодовСправочника= Новый СписокЗначений;
		Попытка
			СписокКодовСправочника.Добавить(Элемент.Код);
		Исключение

		КонецПопытки;
		СтоСПОбмен_Посылки.Загрузить_СоставПосылкиПоКодам(СписокКодовСправочника);

	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Заказы") Тогда
		СписокКодовСправочника= Новый СписокЗначений;
		Попытка
			СписокКодовСправочника.Добавить(Элемент.Код);
		Исключение

		КонецПопытки;

		тзИзФайла=ПолучитьЗапросом(СписокКодовСправочника, "Заказы");
		ОбработатьЗагруженныеЗаказы(тзИзФайла);
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Покупки") Тогда
		СписокКодовСправочника= Новый СписокЗначений;
		Попытка
			СписокКодовСправочника.Добавить(Элемент.Код);
		Исключение

		КонецПопытки;

		тзИзФайла=ПолучитьЗапросом(СписокКодовСправочника, "Покупки");
		ОбработатьЗагруженныеЗаказы(тзИзФайла);

	КонецЕсли;
КонецПроцедуры

Процедура ДогрузитьЭлементСправочникаССайтаВФоне(Элемент) Экспорт
	ПараметрыФЗ=Новый Массив;
	ПараметрыФЗ.Добавить(Элемент);
	ФоновыеЗадания.Выполнить("аспПроцедурыОбменаДанными.ДогрузитьЭлементСправочникаССайта", ПараметрыФЗ,
		Новый УникальныйИдентификатор, "Догружаем элемент справочника с сайта");
КонецПроцедуры
Процедура ОбработатьТэг(ЧтениеXML, ИмяТэга, ТЗрезультат, СтруктураАтрибутов = Неопределено)
	Если ЧтениеXML.ЛокальноеИмя = ИмяТэга И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		новаяСтрока=ТЗрезультат.Добавить();
		Если СтруктураАтрибутов <> Неопределено Тогда
			Для Каждого стр Из СтруктураАтрибутов Цикл
				новаяСтрока[стр.Ключ]=Стр.Значение;
			КонецЦикла;
		КонецЕсли;
		Пока Не (ЧтениеXML.ЛокальноеИмя = ИмяТэга И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
			send=ЧтениеXML.ПолучитьАтрибут(0);
			Если ЗначениеЗаполнено(send) Тогда
				новаяСтрока.send=send;
			КонецЕсли;
			ЧтениеXML.Прочитать();
			Если ЧтениеXML.ЛокальноеИмя = "#text" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЗрезультат.Колонки.Найти(ЧтениеXML.ЛокальноеИмя) <> Неопределено И ЧтениеXML.ТипУзла
				= ТипУзлаXML.НачалоЭлемента Тогда
				ИмяКолонки=ЧтениеXML.ЛокальноеИмя;
				ЧтениеXML.Прочитать();
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
					Если ИмяКолонки = "groupCode" Тогда
						новаяСтрока[ИмяКолонки]=Формат(Число(ЧтениеXML.Значение), "ЧЦ=8; ЧВН=; ЧГ=0");
					Иначе
						новаяСтрока[ИмяКолонки]=ЧтениеXML.Значение;
					КонецЕсли;
				Иначе
					новаяСтрока[ИмяКолонки]=Неопределено;
				КонецЕсли;
				ЧтениеXML.Прочитать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Функция ОбработатьТэгВер2(ЧтениеXML, ИмяТэга, ИмяСписка, СтруктураФайла)
	Если ЧтениеXML.ЛокальноеИмя = ИмяСписка И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТЗрезультат=ТЗпоСтруктуре(СтруктураФайла);
		Пока Не (ЧтениеXML.ЛокальноеИмя = ИмяСписка И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
			ЧтениеXML.Прочитать();
			Если ЧтениеXML.ЛокальноеИмя = ИмяТэга И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда

				новаяСтрока=ТЗрезультат.Добавить();
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ТЗрезультат.Колонки.Найти(ЧтениеXML.ЛокальноеИмя) = Неопределено Тогда
							ТЗрезультат.Колонки.Добавить(ЧтениеXML.ЛокальноеИмя, Новый ОписаниеТипов("Строка"));
						КонецЕсли;
						новаяСтрока[ЧтениеXML.ЛокальноеИмя]=ЧтениеXML.Значение;

					КонецЦикла;
				КонецЕсли;
				Пока Не (ЧтениеXML.ЛокальноеИмя = ИмяТэга И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
					ЧтениеXML.Прочитать();
					Если ЧтениеXML.ЛокальноеИмя = "#text" Тогда
						Продолжить;
					КонецЕсли;
					Если ТЗрезультат.Колонки.Найти(ЧтениеXML.ЛокальноеИмя) <> Неопределено И ЧтениеXML.ТипУзла
						= ТипУзлаXML.НачалоЭлемента Тогда

						ИмяКолонки=ЧтениеXML.ЛокальноеИмя;

						Если ТЗрезультат.колонки[ИмяКолонки].ТипЗначения = Новый ОписаниеТипов("ТаблицаЗначений") Тогда
							новаяСтрока[ИмяКолонки]=ОбработатьТэгВер2(ЧтениеXML, СтруктураФайла[ИмяКолонки].ИмяТэга,
								ИмяКолонки, СтруктураФайла[ИмяКолонки].тз);
						Иначе
							ЧтениеXML.Прочитать();
							Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
								новаяСтрока[ИмяКолонки]=ЧтениеXML.Значение;
							Иначе
								новаяСтрока[ИмяКолонки]=Неопределено;
							КонецЕсли;
							Если ЧтениеXML.ЛокальноеИмя = "#text" Тогда
								ЧтениеXML.Прочитать();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
	Возврат ТЗрезультат;
КонецФункции
Функция ТЗпоСтруктуре(СтруктураКолонок) Экспорт
	тз=Новый ТаблицаЗначений;
	Для Каждого стр Из СтруктураКолонок Цикл
		Если ТипЗнч(стр.Значение) = Тип("Структура") Тогда
			тз.Колонки.Добавить(стр.Ключ, Новый ОписаниеТипов("ТаблицаЗначений"));
		Иначе
			тз.Колонки.Добавить(стр.Ключ, Новый ОписаниеТипов(стр.Значение));
		КонецЕсли;
	КонецЦикла;
	Возврат тз;
КонецФункции

Функция ОбработатьЗагруженныеССайтаДанные(ФайлЗагрузки, ИзСтоки = Ложь) Экспорт
	СтруктураВозврата=Новый Структура;

	тзДоставленныеТранзиты	=	ТЗпоСтруктуре(
		Новый Структура("orderType,pid,uid,date,arrivalNumber,code,send,result,groupCode", "Строка", "Число", "Число",
		"Дата", "Строка", "Строка", "Число", "Строка", "Строка"));
	тзУчастники				=	ТЗпоСтруктуре(
		Новый Структура("id,name,status,phone,modified,rating,result,message,send,city_id, phoneHash", "Число", "Строка", "Число",
		"Строка", "Дата", "Число", "Строка", "Строка", "Число", "Строка", "Строка"));
	тзЗаказы				=	ТЗпоСтруктуре(Новый Структура("id,orgid,result,message,modified,send,secureCode",
		"Строка", "Число", "Строка", "Строка", "Дата", "Число", "Строка"));
	тзПокупки               =	ТЗпоСтруктуре(
		Новый Структура("id,name,orgid,result,message,modified,send,secureCode,city_id", "Число", "Строка", "Число",
		"Строка", "Строка", "Дата", "Число", "Строка", "Строка"));
	тзКарты                 =	ТЗпоСтруктуре(Новый Структура("id,uid,status,modified,result,message,send", "Число",
		"Число", "Строка", "Дата", "Строка", "Строка", "Число"));
	тзКоробки				=	ТЗпоСтруктуре(
		Новый Структура("id, packageId, pid, orderId, uid, type, result, message,modified,send", "Строка", "Число",
		"Число", "Строка", "Число", "Строка", "Строка", "Строка", "Дата", "Число"));
	тзТочки					=	ТЗпоСтруктуре(
		Новый Структура("code,name,city,address,unique_id, canProcessGroup,result,city_id", "Строка", "Строка",
		"Строка", "Строка", "Строка", "Число", "Строка", "Строка"));
	тзГруппы				=	ТЗпоСтруктуре(Новый Структура("distributorCode,uniqueKey,name,items,result", "Строка",
		"Строка", "Число", "Строка"));
	тзСДЭК					=	ТЗпоСтруктуре(
		Новый Структура("code,name,city,address,unique_id, canProcessGroup,result", "Строка", "Строка", "Строка",
		"Строка", "Строка", "Число", "Строка"));
	тзПостомат				=	ТЗпоСтруктуре(
		Новый Структура("code,name,city,address,unique_id, canProcessGroup,result", "Строка", "Строка", "Строка",
		"Строка", "Строка", "Число", "Строка"));
	тзГорода				=	ТЗпоСтруктуре(Новый Структура("id,region_id,region,name,send,result", "Строка",
		"Строка", "Строка", "Строка", "Строка", "Строка"));
	Ошибки=Неопределено;

	ЧтениеXML = Новый ЧтениеXML;
	Если ИзСтоки Тогда
		ЧтениеXML.УстановитьСтроку(ФайлЗагрузки);
	Иначе
		ЧтениеXML.ОткрытьФайл(ФайлЗагрузки);
	КонецЕсли;
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ЛокальноеИмя = "distributor" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			КодТ=ЧтениеXML.ПолучитьАтрибут("code");
			кодТочки=Формат(Число(?(КодТ = "", 0, КодТ)), "ЧЦ=2; ЧВН=; ЧГ=0");
			Пока Не (ЧтениеXML.ЛокальноеИмя = "distributor" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
				ЧтениеXML.Прочитать();
				ОбработатьТэг(ЧтениеXML, "income", тзДоставленныеТранзиты, Новый структура("code", кодТочки));
			КонецЦикла;
		КонецЕсли;
		Если ЧтениеXML.ЛокальноеИмя = "group" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			кодГруппы=ЧтениеXML.ПолучитьАтрибут("code");
			Пока Не (ЧтениеXML.ЛокальноеИмя = "group" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
				ЧтениеXML.Прочитать();
				Если ЧтениеXML.ЛокальноеИмя = "result" Тогда
					ТекстДляОднойОшибки="Коробки :для кода """ + кодГруппы + """ получен ответ с сайта """;
					Пока Не (ЧтениеXML.ЛокальноеИмя = "message" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
						ЧтениеXML.Прочитать();
						Если (ЧтениеXML.ЛокальноеИмя = "message" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
							ЧтениеXML.Прочитать();
							ТекстДляОднойОшибки=ТекстДляОднойОшибки + ЧтениеXML.Значение + """";
							ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстДляОднойОшибки, , , );
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				ОбработатьТэг(ЧтениеXML, "order", тзКоробки, Новый структура("id, send", кодГруппы, кодГруппы));
			КонецЦикла;
		КонецЕсли;
		ОбработатьТэг(ЧтениеXML, "user", тзУчастники);
		ОбработатьТэг(ЧтениеXML, "shopOrder", тзЗаказы);
		ОбработатьТэг(ЧтениеXML, "purchase", тзПокупки);
		ОбработатьТэг(ЧтениеXML, "card", тзКарты);
		ОбработатьТэг(ЧтениеXML, "publicDistributor", тзТочки);
		ОбработатьТэг(ЧтениеXML, "postamatDistributor", тзПостомат);
		ОбработатьТэг(ЧтениеXML, "sdecDistributor", тзСДЭК);
		ОбработатьТэг(ЧтениеXML, "city", тзГорода);
	КонецЦикла;

	СтруктураВозврата.Вставить("ДоставленныеТранзиты", тзДоставленныеТранзиты);
	СтруктураВозврата.Вставить("Участники", тзУчастники);
	СтруктураВозврата.Вставить("Заказы", тзЗаказы);
	СтруктураВозврата.Вставить("Покупки", тзПокупки);
	СтруктураВозврата.Вставить("КартыУчастников", тзКарты);
	СтруктураВозврата.Вставить("Коробки", тзКоробки);
	СтруктураВозврата.Вставить("ТочкиРаздачи", тзТочки);
	СтруктураВозврата.Вставить("Постомат", тзПостомат);
	СтруктураВозврата.Вставить("СДЭК", тзСДЭК);
	СтруктураВозврата.Вставить("Города", тзГорода);
	Для Каждого стр Из СтруктураВозврата Цикл
		ОбработатьОшибочныеЗаписи(стр.Значение, стр.Ключ, Ошибки);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);

	Возврат СтруктураВозврата;
КонецФункции

Процедура ОбработатьОшибочныеЗаписи(ТЗ, НаименованиеСправочника, Ошибки)
	СтрокиСОшибками=ТЗ.НайтиСтроки(Новый Структура("result", "error"));
	Если СтрокиСОшибками.Количество() > 0 Тогда
		Для Каждого стр Из СтрокиСОшибками Цикл
			ТекстДляОднойОшибки=НаименованиеСправочника + ":для кода """ + стр.send + """ получен ответ с сайта """
				+ стр.message + """";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстДляОднойОшибки, , , );
			ТЗ.Удалить(стр);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


//////// Вспомогательные
Процедура ДобавитьЭлементXML(ЗаписьXML, Название, Значение)
	ЗаписьXML.ЗаписатьНачалоЭлемента(Название);
	ЗаписьXML.ЗаписатьТекст(Строка(Значение));
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры


/////////Общие методы

#Область ГРУППЫ_ДОСТАВКИ
Функция ОбработатьОтветыНаСменуСтатусовГД(ПолученныеДанные) Экспорт
	СтруктураФайлаПродление=Новый Структура("delivery_group_id,result,message,Ссылка", "Строка", "Строка", "Строка",
		"СправочникСсылка.Коробки");
	СтруктураФайлаИсключение=Новый Структура("delivery_group_id,result,message,Ссылка,Покупка,Участник", "Строка",
		"Строка", "Строка", "СправочникСсылка.Коробки", "СправочникСсылка.Покупки", "СправочникСсылка.Участники");
	СтруктураФайлаУдаление  =Новый Структура("delivery_group_id,result,message,Ссылка,Покупка,Участник", "Строка",
		"Строка", "Строка", "СправочникСсылка.Коробки", "СправочникСсылка.Покупки", "СправочникСсылка.Участники");
	СтруктураФайлаВзвешивание=Новый Структура("delivery_group_id,result,message,Ссылка", "Строка", "Строка", "Строка",
		"СправочникСсылка.Коробки");

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	//
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ЛокальноеИмя = "groupsDelay" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			тзГруппПродление=ОбработатьТэгВер2(ЧтениеXML, "group", "groupsDelay", СтруктураФайлаПродление);
			ЗаполнитьСсылкиВТЗ(тзГруппПродление, "delivery_group_id", "Ссылка", "Коробки");
		КонецЕсли;
		Если ЧтениеXML.ЛокальноеИмя = "groupsBill" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			тзГруппВзвешивание=ОбработатьТэгВер2(ЧтениеXML, "group", "groupsBill", СтруктураФайлаВзвешивание);
			ЗаполнитьСсылкиВТЗ(тзГруппВзвешивание, "delivery_group_id", "Ссылка", "Коробки");
		КонецЕсли;
		Если ЧтениеXML.ЛокальноеИмя = "groupsDetach" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			тзГруппИсключение=ОбработатьТэгВер2(ЧтениеXML, "group", "groupsDetach", СтруктураФайлаИсключение);
			ЗаполнитьСсылкиВТЗ(тзГруппИсключение, "delivery_group_id", "Ссылка", "Коробки");
			ЗаполнитьСсылкиВТЗ(тзГруппИсключение, "pid", "Покупка", "Покупки");
			ЗаполнитьСсылкиВТЗ(тзГруппИсключение, "uid", "Участник", "Участники");
		КонецЕсли;

		Если ЧтениеXML.ЛокальноеИмя = "groupsUnlink" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			тзГруппУдаление=ОбработатьТэгВер2(ЧтениеXML, "group", "groupsUnlink", СтруктураФайлаИсключение);
			ЗаполнитьСсылкиВТЗ(тзГруппУдаление, "delivery_group_id", "Ссылка", "Коробки");
			ЗаполнитьСсылкиВТЗ(тзГруппУдаление, "pid", "Покупка", "Покупки");
			ЗаполнитьСсылкиВТЗ(тзГруппУдаление, "uid", "Участник", "Участники");
		КонецЕсли;

	КонецЦикла;
	Результат=Новый Структура("Продление,Взвешивание,Исключение,Удаление", тзГруппПродление, тзГруппВзвешивание,
		тзГруппИсключение, тзГруппУдаление);

	Возврат Результат;
КонецФункции

Процедура ЗаполнитьСсылкиВТЗ(ТЗ, Код, Ссылка, Справочник)
	Если ТЗ <> Неопределено И ТЗ.Колонки.Найти(Код) <> Неопределено Тогда
		Для Каждого стр Из ТЗ Цикл
			Если Справочник = "Коробки" Тогда
				КодКоробки="гд_" + Формат(Число(стр[Код]), "ЧЦ=11; ЧВН=; ЧГ=0");
			Иначе
				КодКоробки=Число(стр[Код]);
			КонецЕсли;
			стр[Ссылка]=Справочники[Справочник].НайтиПоКоду(КодКоробки);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ОбработатьОбъединениеГруппыДоставки(ПолученныеДанные) Экспорт

	СтруктураФайла=Новый Структура;//"id,status, min_delivery_date, max_delivery_date, created_at, updated_at, orders, message, result",
	//										"Строка","Строка","Строка","Строка","Строка",СтруктураItems,"Строка","Строка");
	СтруктураФайла.Вставить("deliveryGroupId", "Строка");
	СтруктураФайла.Вставить("message", "Строка");
	СтруктураФайла.Вставить("result", "Строка");
	СтруктураФайла.Вставить("Ссылка", "СправочникСсылка.Коробки");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	//
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ЛокальноеИмя = "groupsCreate" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			тзГрупп=ОбработатьТэгВер2(ЧтениеXML, "group", "groupsCreate", СтруктураФайла);
		КонецЕсли;
	КонецЦикла;
	Возврат тзГрупп;
КонецФункции

#КонецОбласти
#Область КОРОБКИ

Функция ОбработатьСозданныеНаСайтеКоробки(ПолученныеДанные) Экспорт
	СтруктураItems	= Новый Структура("ИмяТэга,тз", "item", Новый Структура("orderType,uid,pid,orderId,message",
		"Строка", "Строка", "Строка", "Строка", "Строка"));

	СтруктураФайла	= Новый Структура("uniqueKey,barcode,distributorName,ownerName,ordersNumber,code,createdAt,name,items,message,result",
		"Строка", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка", СтруктураItems, "Строка",
		"Строка");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	//
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ЛокальноеИмя = "groups" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			тзГрупп=ОбработатьТэгВер2(ЧтениеXML, "group", "groups", СтруктураФайла);
			СформироватьКоробкиПоТЗ(тзГрупп);
			Возврат тзГрупп;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Процедура СформироватьКоробкиПоТЗ(тзГрупп)
	Ошибки=Неопределено;
	тзГрупп.Колонки.Добавить("Ссылка");
	Для Каждого стр Из тзГрупп Цикл
		Если стр.result = "error" Тогда
			ТекстОшибки = "При формировании группы документом №" + стр.uniqueKey + " возникли ошибки:";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстОшибки, );
			Если стр.items.Количество() > 0 Тогда
				Для Каждого итем Из стр.items Цикл
					ТекстОшибки="ошибка: " + итем.message + ":" + Символы.ПС + "	orderType: " + итем.orderType + ","
						+ Символы.ПС + "	orderId:   " + итем.orderId + "," + Символы.ПС + "	pid:       "
						+ итем.pid + "," + Символы.ПС + "	uid:       " + итем.uid + ";" + Символы.ПС;
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстОшибки, );
				КонецЦикла;
			КонецЕсли;
			Если стр.message <> "" Тогда
				ТекстОшибки="ошибка: " + стр.message + ";";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстОшибки, );
			КонецЕсли;
		Иначе
			Коробока_Ссылка	= СП_Штрихкоды.ПолучитьДанныеПоШК(стр.barcode).Коробка;
			аспПроцедурыОбменаДанными.ДогрузитьЭлементСправочникаССайтаВФоне(Коробока_Ссылка);

			стр.Ссылка	=	Коробока_Ссылка;
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);

КонецПроцедуры
#КонецОбласти
#Область Вспомогательные
Функция ФайлВСтроку(ИмяФайлаОтвета) Экспорт
	ТекстФайла="";
	Текст=Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаОтвета, КодировкаТекста.UTF8);
	Стр = Текст.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		ТекстФайла=ТекстФайла + Стр;
		Стр = Текст.ПрочитатьСтроку();
	КонецЦикла;
		/////
	ТекстФайла=СтрЗаменить(ТекстФайла, "<auth>", "<auth>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "<deliveryGroup>", Символы.ПС + "<deliveryGroup>");
	ТекстФайла=СтрЗаменить(ТекстФайла, "</auth>", "</auth>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "<groups>", "<groups>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "</groups>", "</groups>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "</barcode>", "</barcode>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "</distributorName>", "</distributorName>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "</ownerName>", "</ownerName>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "</ordersNumber>", "</ordersNumber>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "</code>", "</code>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "</createdAt>", "</createdAt>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "</name>", "</name>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "</result>", "</result>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "<superGroups>", "<superGroups>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "<orders>", Символы.ПС + "<orders>" + Символы.ПС);
	ТекстФайла=СтрЗаменить(ТекстФайла, "</order>", "</order>" + Символы.ПС);

	ТекстФайла=СтрЗаменить(ТекстФайла, "</orders>", Символы.ПС + "</orders>");
	ТекстФайла=СтрЗаменить(ТекстФайла, "</superGroups>", Символы.ПС + "</superGroups>");
	ТекстФайла=СтрЗаменить(ТекстФайла, "</distributors>", Символы.ПС + "</distributors>");
	ТекстФайла=СтрЗаменить(ТекстФайла, "<distributors", "<distributors xmlns=""http://www.100sp.ru""  ");
	Возврат ТекстФайла;
КонецФункции

Функция ПолучитьЭлементСправочникаПоКоду(код, имяСправочника)
	Если Метаданные.Справочники[имяСправочника].ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
		кодЭлемента=Число(код);
	Иначе
		кодЭлемента=Строка(код);
	КонецЕсли;
	СсылкаЭлем=Справочники[имяСправочника].НайтиПоКоду(кодЭлемента);

	Если ЗначениеЗаполнено(СсылкаЭлем) Тогда
		Возврат СсылкаЭлем;
	Иначе
		Элем=Справочники[имяСправочника].СоздатьЭлемент();
		Элем.Код=код;
		Элем.Наименование=имяСправочника + " " + код;
		Если имяСправочника = "Покупки" Тогда
			Элем.Владелец=Справочники.Участники.нулевой;
		КонецЕсли;
		Элем.Догрузить	=Истина;

		Попытка
			Элем.Записать();
			Возврат Элем.Ссылка;
		Исключение
			Возврат СсылкаЭлем;
		КонецПопытки;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область Адреса
Функция ОбработатьАдресаЗаказовССайта(ПолученныеДанные) Экспорт
	//СтруктураItems=новый Структура("ИмяТэга,тз","item",новый Структура("orderType,uid,pid,orderId,message","Строка","Строка","Строка","Строка","Строка"));

	СтруктураФайла=Новый Структура("orderType,uid,pid,orderId,type,recipient_name,zipcode,region,city,address,address_street,address_building,address_apartment,address_comment,phone,email,pvz_code,city_code ,message,result",
		"Строка", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка",
		"Строка", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	//
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ЛокальноеИмя = "deliveryDetails" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			тзАдресов=ОбработатьТэгВер2(ЧтениеXML, "sticker", "deliveryDetails", СтруктураФайла);
			Возврат тзАдресов;
		КонецЕсли;
	КонецЦикла;
КонецФункции

#КонецОбласти

#Область ДетальныйОбмен

#Область Incomes

Функция ОбработатьIncomesССайта(ПолученныеДанные, ПакетДокументов) Экспорт
	
	//ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"<distributors","<distributors xmlns=""http://www.100sp.ru""  ");

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	ТЗincomes=incomesXDTOвТЗ(ЧтениеXML);
	ТЗincomesСШК=incomesНайтиМегаордера(ТЗincomes, ПакетДокументов);
	Возврат ТЗincomesСШК;
	
	//СтруктураФайла=новый Структура("orderType,uid,pid,orderId,stickerId,groupCode,date,arrivalNumber,firstIncomeCode ,message,result",
	//										"Строка","Число","Число","Строка","Строка","Строка","Дата","Строка","Число","Строка","Строка");
	//
	//
	//ЧтениеXML = Новый ЧтениеXML;
	//ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	////
	//Пока ЧтениеXML.Прочитать() Цикл
	//	Если  ЧтениеXML.ЛокальноеИмя="incomes"  и ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
	//		тзАдресов=ОбработатьТэгВер2(ЧтениеXML,"income","incomes",СтруктураФайла);
	//		Возврат тзАдресов;
	//	КонецЕсли;	
	//КонецЦикла;
КонецФункции

Функция incomesXDTOвТЗ(ЧтениеXML)           //Загрузка приема

	Структураincomes=Новый Структура("orderType,uid,pid,orderId,stickerId,groupCode,date,arrivalNumber,firstIncomeCode ,message,result",
		"Строка", "Число", "Число", "Строка", "Строка", "Строка", "Дата", "Строка", "Число", "Строка", "Строка");
	ТЗincomes=ТЗпоСтруктуре(Структураincomes);

	Тип_distributors=ФабрикаXDTO.Тип("http://www.100sp.ru", "distributors");

	ПристройXDTO= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, Тип_distributors);
	Если ПристройXDTO.auth.result = "ok" Тогда
		авторизацияВыполнена=Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не пройдена аутентификация!");
	КонецЕсли;

	Если ПристройXDTO.incomes <> Неопределено Тогда
		Для Каждого стр Из ПристройXDTO.incomes.income Цикл
			стрТЗ=ТЗincomes.Добавить();
			ЗаполнитьЗначенияСвойств(стрТЗ, стр);
		КонецЦикла;
	КонецЕсли;

	Возврат ТЗincomes;
КонецФункции

Функция incomesНайтиМегаордера(тз, ПакетДокументов)
	массСтрок=тз.НайтиСтроки(Новый структура("orderType", "group"));
	Для Каждого стр Из массСтрок Цикл
		стр.groupCode=Формат(число(стр.groupCode), "ЧЦ=8; ЧН=0; ЧВН=; ЧГ=0");
	КонецЦикла;
	массСтрок=тз.НайтиСтроки(Новый структура("orderType", "bulletin"));
	Для Каждого стр Из массСтрок Цикл
		стр.orderId=Формат(число(стр.orderId), "ЧЦ=10; ЧН=0; ЧВН=; ЧГ=0");
	КонецЦикла;

	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ТЗ.arrivalNumber КАК arrivalNumber,
	|	ТЗ.firstIncomeCode КАК firstIncomeCode,
	|	ТЗ.message КАК message,
	|	ТЗ.stickerId КАК stickerId,
	|	ТЗ.orderId КАК orderId,
	|	ТЗ.groupCode КАК groupCode,
	|	ТЗ.orderType КАК orderType,
	|	ТЗ.pid КАК pid,
	|	ТЗ.result КАК result,
	|	ТЗ.date КАК date,
	|	ТЗ.uid КАК uid
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетНаСайтДетально.Мегаордер КАК Мегаордер,
	|	ПакетНаСайтДетально.НомерСтроки КАК НомерСтроки,
	|	ПакетНаСайтДетально.Партия КАК Партия
	|ПОМЕСТИТЬ Пакет
	|ИЗ
	|	Документ.ПакетНаСайт.Детально КАК ПакетНаСайтДетально
	|ГДЕ
	|	ПакетНаСайтДетально.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.arrivalNumber КАК arrivalNumber,
	|	ВТ.firstIncomeCode КАК firstIncomeCode,
	|	ВТ.message КАК message,
	|	ВТ.orderId КАК orderId,
	|	ВТ.stickerId КАК stickerId,
	|	ВТ.groupCode КАК groupCode,
	|	ВТ.orderType КАК orderType,
	|	ВТ.pid КАК pid,
	|	ВТ.result КАК result,
	|	ВТ.date КАК date,
	|	ВТ.uid КАК uid,
	|	ПакетНаСайтДетально.Мегаордер.Покупка.Код КАК ДляПроверки,
	|	ВЫРАЗИТЬ(ПакетНаСайтДетально.Мегаордер.Покупка.Код КАК ЧИСЛО) КАК ДляПроверки2,
	|	ПакетНаСайтДетально.Мегаордер КАК Мегаордер,
	|	ПакетНаСайтДетально.НомерСтроки КАК НомерСтроки,
	|	ПакетНаСайтДетально.Партия КАК Партия
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Пакет КАК ПакетНаСайтДетально
	|		ПО (ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(ВТ.orderType КАК СТРОКА(2))) = ""sp""
	|					ТОГДА ВТ.pid = ПакетНаСайтДетально.Мегаордер.Покупка.Код
	|							И ТИПЗНАЧЕНИЯ(ПакетНаСайтДетально.Мегаордер.Покупка) = ТИП(Справочник.Покупки)
	|				КОГДА (ВЫРАЗИТЬ(ВТ.orderType КАК СТРОКА(5))) = ""group""
	|					ТОГДА (ВЫРАЗИТЬ(ВТ.groupCode КАК СТРОКА(25))) = ПакетНаСайтДетально.Мегаордер.Покупка.Код
	|							И ТИПЗНАЧЕНИЯ(ПакетНаСайтДетально.Мегаордер.Покупка) = ТИП(Справочник.Коробки)
	|				КОГДА (ВЫРАЗИТЬ(ВТ.orderType КАК СТРОКА(8))) = ""bulletin""
	|					ТОГДА (ВЫРАЗИТЬ(ВТ.orderId КАК СТРОКА(10))) = ПакетНаСайтДетально.Мегаордер.Покупка.Код
	|							И ТИПЗНАЧЕНИЯ(ПакетНаСайтДетально.Мегаордер.Покупка) = ТИП(Справочник.Пристрой)
	|				ИНАЧЕ (ВЫРАЗИТЬ(ВТ.orderId КАК СТРОКА(8))) = ПакетНаСайтДетально.Мегаордер.Покупка.Код
	|						И ТИПЗНАЧЕНИЯ(ПакетНаСайтДетально.Мегаордер.Покупка) = ТИП(Справочник.Заказы)
	|			КОНЕЦ)
	|			И ВТ.uid = ПакетНаСайтДетально.Мегаордер.Участник.Код";
	Запрос.Параметры.Вставить("ТЗ", ТЗ);
	Запрос.Параметры.Вставить("Ссылка", ПакетДокументов);
	Результат=Запрос.Выполнить();
	Возврат Результат.Выгрузить();
КонецФункции

#КонецОбласти

#Область СупперГруппы

Функция ОбработатьSuperGroupsССайта(ПолученныеДанные, ПакетДокументов, Регистрация = Ложь) Экспорт
	
	//ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"<distributors","<distributors xmlns=""http://www.100sp.ru""  ");

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	ТЗincomes=superGroupsXDTOвТЗ(ЧтениеXML, Регистрация);
	ТЗincomesСШК=superGroupsНайтиМегаордера(ТЗincomes, ПакетДокументов, Регистрация);
	Возврат ТЗincomesСШК;

КонецФункции

Функция superGroupsXDTOвТЗ(ЧтениеXML, Регистрация)           //Загрузка приема

	Структураincomes=Новый Структура("documentNumber,processedAt,actualDeliveryDate,message,result", "Строка", "Дата",
		"Дата", "Строка", "Строка");
	ТЗincomes=ТЗпоСтруктуре(Структураincomes);

	Тип_distributors=ФабрикаXDTO.Тип("http://www.100sp.ru", "distributors");

	ПристройXDTO= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, Тип_distributors);
	Если ПристройXDTO.auth.result = "ok" Тогда
		авторизацияВыполнена=Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не пройдена аутентификация!");
	КонецЕсли;

	Если Регистрация Тогда
		Если ПристройXDTO.superGroupReceipts <> Неопределено Тогда
			Для Каждого стр Из ПристройXDTO.superGroupReceipts.superGroupReceipt Цикл
				стрТЗ=ТЗincomes.Добавить();
				ЗаполнитьЗначенияСвойств(стрТЗ, стр);
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если ПристройXDTO.superGroups <> Неопределено Тогда
			Для Каждого стр Из ПристройXDTO.superGroups.superGroup Цикл
				стрТЗ=ТЗincomes.Добавить();
				ЗаполнитьЗначенияСвойств(стрТЗ, стр);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат ТЗincomes;
КонецФункции

Функция superGroupsНайтиМегаордера(тз, ПакетДокументов, Регистрация)
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ТЗ.documentNumber КАК documentNumber,
	|	ТЗ.processedAt КАК processedAt,
	|	ТЗ.actualDeliveryDate КАК actualDeliveryDate,
	|	ТЗ.message КАК message,
	|	ТЗ.result КАК result
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетНаСайтДетально.Мегаордер КАК Мегаордер,
	|	ПакетНаСайтДетально.НомерСтроки КАК НомерСтроки,
	|	ПакетНаСайтДетально.Партия КАК Партия
	|ПОМЕСТИТЬ Пакет
	|ИЗ
	|	Документ.ПакетНаСайт.Детально КАК ПакетНаСайтДетально
	|ГДЕ
	|	ПакетНаСайтДетально.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА &Регистрация
	|				ТОГДА ПакетНаСайтДетально.ТипОбмена = ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппаРегистрация)
	|			ИНАЧЕ ПакетНаСайтДетально.ТипОбмена = ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппа)
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.documentNumber КАК documentNumber,
	|	ВТ.processedAt КАК processedAt,
	|	ВТ.actualDeliveryDate КАК actualDeliveryDate,
	|	ВТ.message КАК message,
	|	ВТ.result КАК result,
	|	ПакетНаСайтДетально.Мегаордер.Покупка.Код КАК ДляПроверки,
	|	ВЫРАЗИТЬ(ПакетНаСайтДетально.Мегаордер.Покупка.Код КАК ЧИСЛО) КАК ДляПроверки2,
	|	ПакетНаСайтДетально.Мегаордер КАК Мегаордер,
	|	ПакетНаСайтДетально.НомерСтроки КАК НомерСтроки,
	|	ПакетНаСайтДетально.Партия КАК Партия
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Пакет КАК ПакетНаСайтДетально
	|		ПО ((ВЫРАЗИТЬ(ВТ.documentNumber КАК СТРОКА(25))) = ПакетНаСайтДетально.Мегаордер.Код)";
	Запрос.Параметры.Вставить("ТЗ", ТЗ);
	Запрос.Параметры.Вставить("Ссылка", ПакетДокументов);
	Запрос.Параметры.Вставить("Регистрация", Регистрация);

	Результат=Запрос.Выполнить();
	Возврат Результат.Выгрузить();
КонецФункции
Функция ОбработатьsuperGroupStageССайта(ПолученныеДанные, ПакетДокументов) Экспорт
	
	//ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"<distributors","<distributors xmlns=""http://www.100sp.ru""  ");

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	ТЗincomes=superGroupStagesXDTOвТЗ(ЧтениеXML);
	ТЗincomesСШК=ssuperGroupStagesНайтиМегаордера(ТЗincomes, ПакетДокументов);
	Возврат ТЗincomesСШК;

КонецФункции

Функция superGroupStagesXDTOвТЗ(ЧтениеXML)    //Загрузка приема

	Структураincomes=Новый Структура("documentNumber,message,result", "Строка", "Строка", "Строка");
	ТЗincomes=ТЗпоСтруктуре(Структураincomes);

	Тип_distributors=ФабрикаXDTO.Тип("http://www.100sp.ru", "distributors");

	ПристройXDTO= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, Тип_distributors);
	Если ПристройXDTO.auth.result = "ok" Тогда
		авторизацияВыполнена=Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не пройдена аутентификация!");
	КонецЕсли;
	Если ПристройXDTO.superGroupStages <> Неопределено Тогда
		Для Каждого стр Из ПристройXDTO.superGroupStages.superGroupStage Цикл
			стрТЗ=ТЗincomes.Добавить();
			ЗаполнитьЗначенияСвойств(стрТЗ, стр);
		КонецЦикла;
	КонецЕсли;
	Возврат ТЗincomes;
КонецФункции

Функция ssuperGroupStagesНайтиМегаордера(тз, ПакетДокументов)
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ТЗ.documentNumber КАК documentNumber,
	|	ТЗ.message КАК message,
	|	ТЗ.result КАК result
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетНаСайтДетально.Мегаордер КАК Мегаордер,
	|	ПакетНаСайтДетально.НомерСтроки КАК НомерСтроки,
	|	ПакетНаСайтДетально.Партия КАК Партия
	|ПОМЕСТИТЬ Пакет
	|ИЗ
	|	Документ.ПакетНаСайт.Детально КАК ПакетНаСайтДетально
	|ГДЕ
	|	ПакетНаСайтДетально.Ссылка = &Ссылка
	|	И  ПакетНаСайтДетально.ТипОбмена = ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппаКолено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.documentNumber КАК documentNumber,
	|	ВТ.message КАК message,
	|	ВТ.result КАК result,
	|	ПакетНаСайтДетально.Мегаордер.Покупка.Код КАК ДляПроверки,
	|	ВЫРАЗИТЬ(ПакетНаСайтДетально.Мегаордер.Покупка.Код КАК ЧИСЛО) КАК ДляПроверки2,
	|	ПакетНаСайтДетально.Мегаордер КАК Мегаордер,
	|	ПакетНаСайтДетально.НомерСтроки КАК НомерСтроки,
	|	ПакетНаСайтДетально.Партия КАК Партия
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Пакет КАК ПакетНаСайтДетально
	|		ПО ((ВЫРАЗИТЬ(ВТ.documentNumber КАК СТРОКА(25))) = ПакетНаСайтДетально.Мегаордер.Код)";
	Запрос.Параметры.Вставить("ТЗ", ТЗ);
	Запрос.Параметры.Вставить("Ссылка", ПакетДокументов);

	Результат=Запрос.Выполнить();
	Возврат Результат.Выгрузить();
КонецФункции
#КонецОбласти
#КонецОбласти
#Область Пристрой
Процедура ПолучитьЗапросомПристрой(СписокУчастников) Экспорт
	Если ЗначениеЗаполнено(СписокУчастников) И СписокУчастников.Количество() > 0 Тогда
		Параметры=Новый Структура;
		Параметры.Вставить("token", Константы.Токен.Получить());
		Параметры.Вставить("xml", ПолучитьСтрокуЗапросаПристроя(СписокУчастников));
	Иначе	
		//Возврат Неопределено;
	КонецЕсли;
	АдресСкрипта        = Константы.АдресЗагрузкиССайта.Получить();
	ИмяФайлаОтвета		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);
	Если Не АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		//Возврат Неопределено;
	КонецЕсли;

	ПолученныеДанные=ФайлВСтроку(ИмяФайлаОтвета);
	//ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"<distributors","<distributors xmlns=""http://www.100sp.ru""  ");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	тзПристрой=ПристройXDTOвТЗ(ЧтениеXML);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ССайта.id КАК id,
	|	ССайта.uid КАК uid,
	|	ССайта.orderId КАК orderId,
	|	ССайта.message КАК message,
	|	ССайта.bulletinName КАК bulletinName,
	|	ССайта.result КАК result,
	|	ССайта.secureCode КАК secureCode,
	|	ССайта.distributorCode КАК distributorCode
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ССайта КАК ССайта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.id КАК id,
	|	ВТ.uid КАК uid,
	|	ВТ.orderId КАК orderId,
	|	ВТ.distributorCode КАК distributorCode,
	|	ВТ.result КАК result,
	|	ВТ.secureCode КАК secureCode,
	|	ВТ.message КАК message,
	|	ВТ.bulletinName КАК bulletinName,
	|	Участники.Ссылка КАК УчастникОтправитель,
	|	УчастникиПолучатели.Ссылка КАК Участник,
	|	ТочкиРаздачи.Ссылка КАК ТочкаНазначения,
	|	Пристрой.Ссылка КАК Пристрой
	|ПОМЕСТИТЬ Пред
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Участники КАК Участники
	|		ПО ВТ.id = Участники.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Участники КАК УчастникиПолучатели
	|		ПО ВТ.uid = УчастникиПолучатели.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиРаздачи КАК ТочкиРаздачи
	|		ПО ((ВЫРАЗИТЬ(ВТ.distributorCode КАК СТРОКА(4))) = ТочкиРаздачи.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пристрой КАК Пристрой
	|		ПО ((ВЫРАЗИТЬ(ВТ.orderId КАК СТРОКА(10))) = Пристрой.Код)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пред.id КАК id,
	|	Пред.orderId КАК orderId,
	|	Пред.distributorCode КАК distributorCode,
	|	Пред.secureCode КАК secureCode,
	|	Пред.result КАК result,
	|	Пред.message КАК message,
	|	Пред.bulletinName КАК bulletinName,
	|	Пред.УчастникОтправитель КАК УчастникОтправитель,
	|	Пред.ТочкаНазначения КАК ТочкаНазначения,
	|	Пред.Пристрой КАК Пристрой,
	|	Пред.uid КАК uid,
	|	Пред.Участник КАК Участник
	|ИЗ
	|	Пред КАК Пред
	|ГДЕ
	|	Пред.Пристрой ЕСТЬ NULL";
	Запрос.Параметры.Вставить("ССайта", тзПристрой);
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		обПристрой	=	Справочники.Пристрой.СоздатьЭлемент();
		обПристрой.Код						= Формат(Число(ВыборкаДетальныеЗаписи.orderId), "ЧГ=0");
		обПристрой.Наименование				= ВыборкаДетальныеЗаписи.bulletinName;
		обПристрой.УчастникОтправитель		= ВыборкаДетальныеЗаписи.УчастникОтправитель;
		обПристрой.secureCode               = ВыборкаДетальныеЗаписи.secureCode;
		обПристрой.Участник					= ВыборкаДетальныеЗаписи.Участник;
		обПристрой.ТочкаНазначения			= ВыборкаДетальныеЗаписи.ТочкаНазначения;
		Попытка
			обПристрой.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ПолучитьЗапросомПристройПоДате(Дата) Экспорт
	Параметры=Новый Структура;
	Параметры.Вставить("token", Константы.Токен.Получить());
	Параметры.Вставить("xml", ПолучитьСтрокуЗапросаПристрояПоДате(Дата));

	АдресСкрипта        = Константы.АдресЗагрузкиССайта.Получить();
	ИмяФайлаОтвета		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);
	Если Не АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		//Возврат Неопределено;
	КонецЕсли;

	ПолученныеДанные=ФайлВСтроку(ИмяФайлаОтвета);
	//ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"<distributors","<distributors xmlns=""http://www.100sp.ru""  ");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	тзПристрой=ПристройXDTOвТЗ(ЧтениеXML);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ССайта.id КАК id,
	|	ССайта.orderId КАК orderId,
	|	ССайта.message КАК message,
	|	ССайта.bulletinName КАК bulletinName,
	|	ССайта.result КАК result,
	|	ССайта.distributorCode КАК distributorCode
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ССайта КАК ССайта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.id КАК id,
	|	ВТ.orderId КАК orderId,
	|	ВТ.distributorCode КАК distributorCode,
	|	ВТ.result КАК result,
	|	ВТ.message КАК message,
	|	ВТ.bulletinName КАК bulletinName,
	|	Участники.Ссылка КАК Участник,
	|	ТочкиРаздачи.Ссылка КАК ТочкаНазначения,
	|	Пристрой.Ссылка КАК Пристрой
	|ПОМЕСТИТЬ Пред
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Участники КАК Участники
	|		ПО ВТ.id = Участники.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиРаздачи КАК ТочкиРаздачи
	|		ПО ((ВЫРАЗИТЬ(ВТ.distributorCode КАК СТРОКА(4))) = ТочкиРаздачи.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пристрой КАК Пристрой
	|		ПО ((ВЫРАЗИТЬ(ВТ.orderId КАК СТРОКА(10))) = Пристрой.Код)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пред.id КАК id,
	|	Пред.orderId КАК orderId,
	|	Пред.distributorCode КАК distributorCode,
	|	Пред.result КАК result,
	|	Пред.message КАК message,
	|	Пред.bulletinName КАК bulletinName,
	|	Пред.Участник КАК Участник,
	|	Пред.ТочкаНазначения КАК ТочкаНазначения,
	|	Пред.Пристрой КАК Пристрой
	|ИЗ
	|	Пред КАК Пред
	|ГДЕ
	|	Пред.Пристрой ЕСТЬ NULL";
	Запрос.Параметры.Вставить("ССайта", тзПристрой);
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		обПристрой	=	Справочники.Пристрой.СоздатьЭлемент();
		обПристрой.Код				= Формат(Число(ВыборкаДетальныеЗаписи.orderId), "ЧГ=0");
		обПристрой.Наименование		= ВыборкаДетальныеЗаписи.bulletinName;
		обПристрой.УчастникОтправитель			= ВыборкаДетальныеЗаписи.Участник;
		обПристрой.ТочкаНазначения	= ВыборкаДетальныеЗаписи.ТочкаНазначения;
		Попытка
			обПристрой.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры
Функция ПолучитьЗапросомПристройПоШК(ШК) Экспорт
	Параметры=Новый Структура;
	Параметры.Вставить("token", Константы.Токен.Получить());
	Параметры.Вставить("xml", ПолучитьСтрокуЗапросаПристрояПоШК(ШК));

	АдресСкрипта        = Константы.АдресЗагрузкиССайта.Получить();
	ИмяФайлаОтвета		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);
	Если Не АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		//Возврат Неопределено;
	КонецЕсли;

	ПолученныеДанные=ФайлВСтроку(ИмяФайлаОтвета);
	//ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"<distributors","<distributors xmlns=""http://www.100sp.ru""  ");
//	ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"</distributors","</distributors1");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	тзПристрой=ПристройXDTOвТЗпоШК(ЧтениеXML);

	Выборка=тзПристрой[0];
	Если Выборка.result = "error" Тогда
		Возврат Справочники.Пристрой.ПустаяСсылка();
	КонецЕсли;

	Участник	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(Выборка.uid);
	ПристройСсылка=Справочники.Пристрой.НайтиПоКоду(Выборка.orderId);
	Если ЗначениеЗаполнено(ПристройСсылка) Тогда
		Возврат ПристройСсылка;
	КонецЕсли;

	обПристрой						= Справочники.Пристрой.СоздатьЭлемент();
	обПристрой.Код					= Формат(Число(Выборка.orderId), "ЧГ=0");
	обПристрой.Наименование			= Выборка.bulletinName;
	обПристрой.УчастникОтправитель 	= Справочники.Участники.нулевой;
	обПристрой.Участник         	= Участник;
	обПристрой.ТочкаНазначения		= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(Выборка.distributorCode);
	обПристрой.secureCode			= Выборка.secureCode;
	Попытка
		обПристрой.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;

	Возврат обПристрой.Ссылка;
КонецФункции
Функция ПолучитьСтрокуЗапросаПристроя(СписокУчастников)
	ЗаписьXML=Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
	Если ЗначениеЗаполнено(СписокУчастников) И СписокУчастников.Количество() > 0 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("userBulletinOrders");
		Для Каждого элСписка Из СписокУчастников Цикл
			ДобавитьЭлементXML(ЗаписьXML, "user", Формат(Число(элСписка.Значение.Код), "ЧГ=0"));
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		Возврат "";
	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	стр =ЗаписьXML.Закрыть();
	стр="<?xml version=""1.0"" encoding=""UTF-8""?> " + СтрЗаменить(стр,
		"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ", "");
	Возврат стр;
КонецФункции
Функция ПолучитьСтрокуЗапросаПристрояПоДате(Дата)
	ЗаписьXML=Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьНачалоЭлемента("dataByDates");
	ДобавитьЭлементXML(ЗаписьXML, "packageOrders", Дата);

	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьКонецЭлемента();
	стр =ЗаписьXML.Закрыть();
	стр="<?xml version=""1.0"" encoding=""UTF-8""?> " + СтрЗаменить(стр,
		"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ", "");
	Возврат стр;
КонецФункции

Функция ПолучитьСтрокуЗапросаПристрояПоШК(ШК)
	ЗаписьXML=Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьНачалоЭлемента("bulletinStickers");
	ДобавитьЭлементXML(ЗаписьXML, "bulletinSticker", Сред(ШК, 3, 10));

	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьКонецЭлемента();
	стр =ЗаписьXML.Закрыть();
	стр="<?xml version=""1.0"" encoding=""UTF-8""?> " + СтрЗаменить(стр,
		"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ", "");
	Возврат стр;
КонецФункции
Функция ПристройXDTOвТЗ(ЧтениеXML)           //Загрузка приема
	
	//Структура_bulletinOrder=новый Структура("orderId,bulletinName,distributorCode","Строка","Строка","Строка");
	//СтруктураТЗ=новый Структура("bulletinOrder,id,result,message",Структура_bulletinOrder,"Число","Строка","Строка");
	СтруктураТЗ=Новый Структура;
	СтруктураТЗ.Вставить("id", "Число");      //код участника поставщика
	СтруктураТЗ.Вставить("uid", "Число");      //код участника получателя

	СтруктураТЗ.Вставить("result", "Строка");
	СтруктураТЗ.Вставить("message", "Строка");
	СтруктураТЗ.Вставить("orderId", "Строка");      //Код пристроя
	СтруктураТЗ.Вставить("bulletinName", "Строка");     //Название пристроя
	СтруктураТЗ.Вставить("distributorCode", "Строка");     //Код ПВ      
	СтруктураТЗ.Вставить("secureCode", "Строка");     //Код защиты      
	Тип_distributors=ФабрикаXDTO.Тип("http://www.100sp.ru", "distributors");
	ТипПристройXDTO=ФабрикаXDTO.Тип("http://www.100sp.ru", "user");
	ТЗУчастников=ТЗпоСтруктуре(СтруктураТЗ);

	ПристройXDTO= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, Тип_distributors);
	Если ПристройXDTO.auth.result = "ok" Тогда
		авторизацияВыполнена=Истина;
	КонецЕсли;

	Для Каждого участник Из ПристройXDTO.userBulletinOrders.user Цикл
		Если участник.result = "error" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(участник.message);
			Продолжить;
		КонецЕсли;
		Для Каждого заказ Из участник.bulletinOrder Цикл
			строкаПристроя	= ТЗУчастников.Добавить();
			строкаПристроя.id		= участник.id;
			строкаПристроя.uid		= заказ.uid;
			строкаПристроя.secureCode=заказ.secureCode;
			строкаПристроя.message	= участник.message;
			строкаПристроя.result	= участник.result;

			строкаПристроя.bulletinName		= заказ.bulletinName;
			строкаПристроя.distributorCode	= Формат(заказ.distributorCode, "ЧЦ=4; ЧН=0; ЧВН=; ЧГ=0");
			строкаПристроя.orderId			= Формат(заказ.orderId, "ЧЦ=10; ЧН=0; ЧВН=; ЧГ=0");
		КонецЦикла;
	КонецЦикла;
	Возврат ТЗУчастников;
КонецФункции

Функция ПристройXDTOвТЗпоШК(ЧтениеXML)    //Загрузка Выдачи
	
	//Структура_bulletinOrder=новый Структура("orderId,bulletinName,distributorCode","Строка","Строка","Строка");
	//СтруктураТЗ=новый Структура("bulletinOrder,id,result,message",Структура_bulletinOrder,"Число","Строка","Строка");
	СтруктураТЗ=Новый Структура;
	СтруктураТЗ.Вставить("id", "Строка");      //код стикера
	СтруктураТЗ.Вставить("uid", "Число");      //код участника получателя

	СтруктураТЗ.Вставить("result", "Строка");
	СтруктураТЗ.Вставить("message", "Строка");
	СтруктураТЗ.Вставить("orderId", "Строка");      //Код пристроя
	СтруктураТЗ.Вставить("bulletinName", "Строка");     //Название пристроя
	СтруктураТЗ.Вставить("secureCode", "Строка");     //Код ПВ   
	СтруктураТЗ.Вставить("distributorCode", "Строка");     //Код ПВ 
	Тип_distributors=ФабрикаXDTO.Тип("http://www.100sp.ru", "distributors1");
	ТипСписокПристройXDTO=ФабрикаXDTO.Тип("http://www.100sp.ru", "bulletinStickers");
	ТипПристройXDTO=ФабрикаXDTO.Тип("http://www.100sp.ru", "bulletinSticker");
	ТЗУчастников=ТЗпоСтруктуре(СтруктураТЗ);

	ПристройXDTO= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, Тип_distributors);
	Если ПристройXDTO.auth.result = "ok" Тогда
		авторизацияВыполнена=Истина;
	КонецЕсли;

	Для Каждого пристрой Из ПристройXDTO.bulletinStickers.bulletinSticker Цикл
		строкаПристроя	= ТЗУчастников.Добавить();
		строкаПристроя.id				= пристрой.id;
		строкаПристроя.uid				= пристрой.uid;
		строкаПристроя.message			= пристрой.message;
		строкаПристроя.result			= пристрой.result;
		строкаПристроя.distributorCode	= Формат(пристрой.distributorCode, "ЧЦ=4; ЧН=0; ЧВН=; ЧГ=0");

		строкаПристроя.bulletinName		= пристрой.bulletinName;
		строкаПристроя.secureCode		= Формат(пристрой.secureCode, "ЧЦ=4; ЧН=0; ЧВН=; ЧГ=0");
		строкаПристроя.orderId			= Формат(пристрой.orderId, "ЧЦ=10; ЧН=0; ЧВН=; ЧГ=0");
	КонецЦикла;
	Возврат ТЗУчастников;
КонецФункции
#КонецОбласти