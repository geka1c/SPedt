
Функция 	ВыгрузитьПотерянныеЗаказы_lostOrder(Объект) Экспорт
	//Отражаем Ответ на выгрузку (Первая точка приема..)
	СтрокаПротокола						= новый Структура ("ДатаНачала, ДатаОкончания,Результат, ПолученныеДанные");
	СтрокаПротокола.ДатаНачала			= ТекущаяДата();
	
	хмл_отправили						= СкомпоноватьДляВыгрузки(Объект);
	стр_Ответа 							= СтоСПОбмен_Выгрузка100сп.Выгрузить(хмл_отправили);
	
	СтрокаПротокола.ДатаОкончания		= ТекущаяДата();
	СтрокаПротокола.ПолученныеДанные	= стр_Ответа.Получили;
	
	Если не стр_Ответа.Свойство("Разбор") Тогда
		СтрокаПротокола.Результат	=	Ложь;
	Иначе	
		СтрокаПротокола.Результат 	= стр_Ответа.Разбор.авторизацияВыполнена;
	КонецЕсли;
	СтоСПОбмен_Выгрузка100сп.СохранитьПротоколОбмена(СтрокаПротокола,Объект.Ссылка);
	Если не СтрокаПротокола.Результат Тогда Возврат Ложь; Конецесли;
	
	
	Если не стр_Ответа.Разбор.авторизацияВыполнена Тогда Возврат ложь; КонецЕсли;
	
	Статус	= Перечисления.СтатусОтпавкиНаСайт.Отправлен;
	тз		= Неопределено;
	Если стр_Ответа.Разбор.Свойство("lostOrders",тз) Тогда
		lostOrders_ОтразитьРезультатВыгрузки(тз, Объект);
	КонецЕсли;	
	// Загружаем состав принятых посылок
	
	
	
	Возврат Истина;
КонецФункции


Процедура 	ЗагрузитьСоставПосылок(Объект)
	масс_отправленных	=	Объект.Посылки.НайтиСтроки(новый структура ("Отправлено",Истина));
	список_посылок		=	Новый СписокЗначений;
	Для каждого элем из масс_отправленных цикл
		Если 		элем.Посылка.Догрузить или 
					(не 	элем.Загружено и 
							(элем.ПунктВыдачи.ТранспортнаяКомпания или
							 элем.Посылка.ПунктВыдачи.ТранспортнаяКомпания) ) Тогда
			список_посылок.Добавить(элем.посылка);
		КонецЕсли;
	КонецЦикла;		
	Если список_посылок.Количество()=0 Тогда Возврат КонецЕсли;
	
	стрОтвета = СтоСПОбмен_Посылки.Загрузить_СоставПосылкиПоКодам(список_посылок);
		
	Если не стрОтвета.авторизацияВыполнена Тогда Возврат; КонецЕсли;
	тзПосылок = стрОтвета.Результат;
	Для каждого стр из тзПосылок Цикл
		масс	=	Объект.Посылки.НайтиСтроки(новый Структура("Посылка",стр.Посылка));
		Для каждого элем из масс Цикл
			элем.Загружено	=	стр.Загружена;
			Если не стр.Загружена ТОгда
				элем.СообщениеОшибки="Ошибка загрузки состава посылки: "+стр.Посылка;
			Иначе 	
				элем.СообщениеОшибки="";
			КонецЕсли;	
		КонецЦикла
	КонецЦикла	
КонецПроцедуры

Функция		СкомпоноватьДляВыгрузки(Объект) Экспорт
		
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd","http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьАтрибут("apiVersion","1");
	///////
	ЗаписьXML.ЗаписатьНачалоЭлемента("lostOrders");	
	хмл_income			= Документы[Объект.метаданные().Имя].ПолучитьТэг_lostOrder(Объект.Ссылка);
	ЗаписьXML.ЗаписатьБезОбработки(хмл_income);

	ЗаписьXML.ЗаписатьКонецЭлемента();           //incomes
	//////
	ЗаписьXML.ЗаписатьКонецЭлемента();           //distributors
	Возврат ЗаписьXML.Закрыть();
КонецФункции	
	
Процедура 	lostOrders_ОтразитьРезультатВыгрузки(тзПараметр, Объект) 
	Запрос		= новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ТЗ.DistributorID 				КАК DistributorID,
	|	ТЗ.exchangeNumber 				КАК exchangeNumber,
	|	ТЗ.date 						КАК date,
	|	ТЗ.arrivalNumber				КАК arrivalNumber,
	|	ТЗ.packageId 					КАК packageId,
	|	ТЗ.groupCode 					КАК groupCode,
	|	ТЗ.orderType 					КАК orderType,
	|	ТЗ.comment						КАК comment,
	|	ТЗ.resolved 					КАК resolved,
	|	ТЗ.created_at					КАК created_at,
	|	ТЗ.status 						КАК status,
	|	ТЗ.message			 			КАК message
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПотерянныеЗаказыЗаказы.Посылка 		КАК Посылка,
	|	ПотерянныеЗаказыЗаказы.НомерСтроки 	КАК НомерСтроки
	|ПОМЕСТИТЬ Посылки
	|ИЗ
	|	Документ.ПотерянныеЗаказы.Заказы 		КАК ПотерянныеЗаказыЗаказы 
	|ГДЕ
	|	ПотерянныеЗаказыЗаказы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.DistributorID 				КАК DistributorID,
	|	ВТ.exchangeNumber 				КАК exchangeNumber,
	|	ВТ.date 						КАК date,
	|	ВТ.arrivalNumber				КАК arrivalNumber,
	|	ВТ.packageId 					КАК packageId,
	|	ВТ.groupCode 					КАК groupCode,
	|	ВТ.orderType 					КАК orderType,
	|	ВТ.comment						КАК comment,
	|	ВТ.resolved 					КАК resolved,
	|	ВТ.created_at					КАК created_at,
	|	ВТ.status 						КАК status,
	|	ВТ.message			 			КАК message,
	|	Посылки.Посылка 				КАК Посылка,
	|	Коробки.Ссылка	 				КАК Коробка
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Коробки КАК Коробки
	|		ПО Выразить(ВТ.groupCode Как Строка(25)) = Коробки.Код	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Посылки КАК Посылки
	|		ПО ВТ.packageId = Посылки.Посылка.Код";
	Запрос.Параметры.Вставить("ТЗ",		тзПараметр);
	Запрос.Параметры.Вставить("Ссылка",	Объект.Ссылка);
	Результат	= Запрос.Выполнить();
	ТЗРезультат	= Результат.Выгрузить();
	
	Если ТЗРезультат <> неопределено Тогда  
		Для каждого стр из Объект.Заказы Цикл
			Если не стр.Выгружать Тогда Продолжить; КонецЕсли;
			
			мас_НайденоВОтвете	= ТЗРезультат.НайтиСтроки(Новый Структура("Посылка",стр.Посылка));
			
			Если мас_НайденоВОтвете.Количество()>0 тогда
				стр_ответа	= мас_НайденоВОтвете[0];
				стр.Отправлено	= Истина;
				//Если 	стр_ответа.result	= "created" или 
				//		стр_ответа.result	= "updated" 		Тогда
				//КонецЕсли;	
				стр.СообщениеОшибки	=	стр_ответа.message;
			Иначе	
				стр.СообщениеОшибки	=	"Не найдено в ответе";
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
		
		
КонецПроцедуры

	


