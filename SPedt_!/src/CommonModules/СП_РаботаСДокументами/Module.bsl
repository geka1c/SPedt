Процедура ПриСозданииНаСервере(ЭтотОбъект) Экспорт
	
	
	Если ЭтотОбъект.Объект.Свойство("ТочкаОтправитель") и не ЗначениеЗаполнено(ЭтотОбъект.Объект["ТочкаОтправитель"]) Тогда
		ЭтотОбъект.Объект["ТочкаОтправитель"] 	= Константы.СвояТочка.Получить();
	КонецЕсли;	
	Если ЭтотОбъект.Объект.Свойство("СвояТочка") 		и не ЗначениеЗаполнено(ЭтотОбъект.Объект.СвояТочка) Тогда
		ЭтотОбъект.Объект.СвояТочка			= Константы.СвояТочка.Получить();
	КонецЕсли;

	
КонецПроцедуры	



Функция 	ЗаполнитьФорму(Форма,Параметры) Экспорт
	Для каждого стр из Параметры Цикл
		Если ТипЗнч(стр.Значение)=тип("Структура") Тогда
			новСтр=Форма[стр.Ключ].Добавить();
			Для каждого элем Из стр.Значение Цикл
				Если новСтр.Свойство(элем.Ключ) ТОгда
					новСтр[элем.Ключ]=элем.Значение;
				КонецЕсли;
			КонецЦикла;	
		Иначе	
			Форма[стр.Ключ]=стр.Значение;	
		КонецЕсли;	
	КонецЦикла;
КонецФункции

Процедура 	ЗаполнитьФорму_Расходная_ОстаткамиТоваров(НовыйОбъект) Экспорт
		расх=ДанныеФормыВЗначение(НовыйОбъект,Тип("ДокументОбъект.Расходная"));
		расх.заполнитьОстатками();
		ЗначениеВДанныеФормы(расх,НовыйОбъект);
КонецПроцедуры	


Функция ТаблицаРасходной(наДату, Участник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Остатки.Покупка КАК Покупка,
	|	Остатки.Участник КАК Участник,
	|	Остатки.Габарит КАК Габарит,
	|	Остатки.МестоХранения КАК МестоХранения,
	|	Остатки.Оплачен КАК Оплачен,
	|	Остатки.Партия КАК Партия,
	|	Остатки.КоличествоОстаток КАК КоличествоОстаток,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПраздничныеДни.Дата) КАК ПраздничныхДней,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендарныеГрафики.ДатаГрафика) КАК РабочихДней,
	|	Остатки.Покупка.ШК КАК ШК
	|ПОМЕСТИТЬ ОстаткиУчастника
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваров.Остатки(&Период, Участник = &Участник) КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПраздничныеДни КАК ПраздничныеДни
	|		ПО (ПраздничныеДни.Дата > Остатки.Партия.Дата)
	|			И (ПраздничныеДни.Дата < &Период)
	|			И (ПраздничныеДни.ИсключатьИзРасчета)
	|			И (НЕ ПраздничныеДни.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО Остатки.Партия.Дата < КалендарныеГрафики.ДатаГрафика
	|			И (&Период >= КалендарныеГрафики.ДатаГрафика)
	|			И (КалендарныеГрафики.Календарь = &ГрафикРаботы)
	|			И (КалендарныеГрафики.ДеньВключенВГрафик)
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.МестоХранения,
	|	Остатки.Оплачен,
	|	Остатки.Габарит,
	|	Остатки.Участник,
	|	Остатки.Партия,
	|	Остатки.КоличествоОстаток,
	|	Остатки.Покупка,
	|	Остатки.Покупка.ШК
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Покупка,
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиУчастника.Покупка КАК Покупка,
	|	ОстаткиУчастника.Участник КАК Участник,
	|	ОстаткиУчастника.Габарит КАК Габарит,
	|	ОстаткиУчастника.МестоХранения КАК МестоХранения,
	|	ОстаткиУчастника.Оплачен КАК Оплачен,
	|	ОстаткиУчастника.Партия КАК Партия,
	|	ОстаткиУчастника.КоличествоОстаток КАК Количество,
	|	ЕСТЬNULL(ОстаткиУчастника.ПраздничныхДней, 0) КАК ПраздничныхДней,
	|	ЕСТЬNULL(ОстаткиУчастника.РабочихДней, 0) КАК РабочихДней,
	|	РАЗНОСТЬДАТ(ОстаткиУчастника.Партия.Дата, &Период, ДЕНЬ) КАК КалендарныхДней,
	|	ЕСТЬNULL(ДанныеЗаказов.Вес, 0) КАК Вес,
	|	ЕСТЬNULL(ДанныеЗаказов.Объем, 0) КАК Объем,
	|	ЕСТЬNULL(ДанныеЗаказовСайт.БесплатнаяВыдача, ЛОЖЬ) КАК БесплатнаяВыдача,
	|	ДанныеЗаказовСайт.ПерваяТочка КАК ПерваяТочка,
	|	ЕСТЬNULL(ДанныеЗаказовСайт.НадбавкаЗаОбработку, 0) КАК Надбавка,
	|	ОстаткиУчастника.ШК КАК ШК,
	|	ЕСТЬNULL(ОстаткиУчастника.ШК.ПерваяТочка.ГородСП, ЗНАЧЕНИЕ(Справочник.ГородаСП.ПустаяСсылка)) КАК ГородСП,
	|	ЕСТЬNULL(ТарифыСрезПоследних.ЦенаХранения, 0) КАК ЦенаХранения,
	|	ЕСТЬNULL(ТарифыСрезПоследних.СрокХранения, 0) КАК СрокХранения,
	|	ЕСТЬNULL(ТарифыСрезПоследних.Заморозка, ЛОЖЬ) КАК Заморозка,
	|	ЕСТЬNULL(ТарифыСрезПоследних.Штраф, 0) КАК Штраф,
	|	ЕСТЬNULL(ТарифыСрезПоследних.Негабарит, ЛОЖЬ) КАК негабарит,
	|	ЕСТЬNULL(ТарифыСрезПоследних.ЦенаЗаКГ, 0) КАК ЦенаЗаКГ,
	|	ЕСТЬNULL(ТарифыСрезПоследних.ЦенаЗаКуб, 0) КАК ЦенаЗаКуб,
	|	ВЫБОР
	|		КОГДА ТарифыСрезПоследних.ЦенаХранения ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТарифУстановлен,
	|	ЕСТЬNULL(ДанныеЗаказовСайт.ПредоплаченоУчастником, ЛОЖЬ) КАК ПредоплаченоУчастником
	|ПОМЕСТИТЬ Пред
	|ИЗ
	|	ОстаткиУчастника КАК ОстаткиУчастника
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Тарифы.СрезПоследних КАК ТарифыСрезПоследних
	|		ПО ОстаткиУчастника.Габарит = ТарифыСрезПоследних.Габарит
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗаказов КАК ДанныеЗаказов
	|		ПО ОстаткиУчастника.Покупка = ДанныеЗаказов.Заказ
	|			И ОстаткиУчастника.Партия = ДанныеЗаказов.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗаказовСайт КАК ДанныеЗаказовСайт
	|		ПО ОстаткиУчастника.Покупка = ДанныеЗаказовСайт.Заказ
	|			И ОстаткиУчастника.Партия = ДанныеЗаказовСайт.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пред.Покупка КАК Покупка,
	|	Пред.Оплачен КАК Оплачен,
	|	Пред.МестоХранения КАК МестоХранения,
	|	Пред.Габарит КАК Габарит,
	|	Пред.Количество КАК Количество,
	|	Пред.КалендарныхДней КАК КалендарныхДней,
	|	Пред.РабочихДней КАК РабочихДней,
	|	Пред.ПраздничныхДней КАК ПраздничныхДней,
	|	ВЫБОР
	|		КОГДА Пред.Заморозка
	|			ТОГДА Пред.КалендарныхДней
	|		ИНАЧЕ Пред.РабочихДней
	|	КОНЕЦ КАК ВремяХранения,
	|	Пред.Партия КАК Партия,
	|	Пред.Вес КАК Вес,
	|	Пред.Объем КАК Объем,
	|	Пред.ШК КАК ШК,
	|	Пред.ГородСП КАК ГородСП,
	|	Пред.БесплатнаяВыдача КАК БесплатнаяВыдача,
	|	Пред.ПредоплаченоУчастником КАК ОплаченоУчастником,
	|	Пред.Надбавка КАК Надбавка,
	|	ЕСТЬNULL(ТарифыПоНаправлениямСрезПоследних.Стоимость, 0) КАК СтоимостьДоставки,
	|	Пред.ЦенаХранения КАК ЦенаХранения,
	|	Пред.СрокХранения КАК СрокХранения,
	|	Пред.Заморозка КАК Заморозка,
	|	Пред.Штраф КАК Штраф,
	|	Пред.негабарит КАК негабарит,
	|	Пред.ЦенаЗаКГ КАК ЦенаЗаКГ,
	|	Пред.ЦенаЗаКуб КАК ЦенаЗаКуб,
	|	Пред.ТарифУстановлен КАК ТарифУстановлен
	|ИЗ
	|	Пред КАК Пред
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыПоНаправлениям.СрезПоследних(&Период, ) КАК ТарифыПоНаправлениямСрезПоследних
	|		ПО (ТарифыПоНаправлениямСрезПоследних.Куда = &СвойГород)
	|			И Пред.Габарит = ТарифыПоНаправлениямСрезПоследних.Габарит
	|			И Пред.ПерваяТочка.ГородСП = ТарифыПоНаправлениямСрезПоследних.Откуда";
	
	Запрос.Параметры.Вставить("Участник",		Участник);
	Запрос.Параметры.Вставить("СвойГород",		Константы.СвояТочка.Получить().ГородСП);
	Запрос.Параметры.Вставить("ГрафикРаботы", 	Константы.ГрафикРаботыПунктаВыдачи.Получить());

	Запрос.Параметры.Вставить("Период",наДату);
	Результат = Запрос.Выполнить();	
	Тз=Результат.Выгрузить();
	СП_РаботаСДокументами.РасчитатьСтоимостьХранения(тз);

	Возврат ТЗ;
	
КонецФункции	



Функция ГабаритПараметры(Габарит) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиТоваровОбороты.Габарит КАК Габарит,
		|	СУММА(ОстаткиТоваровОбороты.КоличествоПриход) КАК Количество
		|ПОМЕСТИТЬ втПринятоГабарита
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваров.Обороты(&НачалоПериода, &КонецПериода, , Габарит = &Габарит) КАК ОстаткиТоваровОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваровОбороты.Габарит
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТарифыСрезПоследних.ЦенаХранения КАК ЦенаХранения,
		|	ТарифыСрезПоследних.СрокХранения КАК СрокХранения,
		|	ТарифыСрезПоследних.Штраф КАК Штраф,
		|	ТарифыСрезПоследних.Заморозка КАК Заморозка,
		|	ТарифыСрезПоследних.негабарит КАК негабарит,
		|	ТарифыСрезПоследних.ЦенаЗаКГ КАК ЦенаЗаКГ,
		|	ТарифыСрезПоследних.ЦенаЗаКуб КАК ЦенаЗаКуб,
		|	ТарифыСрезПоследних.Отменен КАК Отменен,
		|	ВЫБОР
		|		КОГДА ТарифыСрезПоследних.Габарит.ЛимитВМесяц > 0
		|				И ЕСТЬNULL(втПринятоГабарита.Количество, 0) >= ТарифыСрезПоследних.Габарит.ЛимитВМесяц
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЛимитПревышен,
		|	ЕСТЬNULL(втПринятоГабарита.Количество, 0) КАК Лимит
		|ИЗ
		|	РегистрСведений.Тарифы.СрезПоследних(, Габарит = &Габарит) КАК ТарифыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПринятоГабарита КАК втПринятоГабарита
		|		ПО ТарифыСрезПоследних.Габарит = втПринятоГабарита.Габарит
		|ГДЕ
		|	НЕ ТарифыСрезПоследних.Отменен";
	
	Запрос.УстановитьПараметр("Габарит", 		Габарит);
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();

	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		результат = новый Структура;
		Для каждого элем из РезультатЗапроса.Колонки Цикл
			результат.Вставить(элем.имя);
		КонецЦикла;	
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаДетальныеЗаписи);
		Возврат Результат;
	Иначе	
		 ТекстСообщения = "Не установлены цены по габариту: "+Габарит;
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	Возврат неопределено;
	
КонецФункции	

Функция ГабаритыНегабориты(списокГабаритов, наДату)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТарифыСрезПоследних.Габарит КАК Габарит,
		|	ТарифыСрезПоследних.Негабарит КАК Негабарит
		|ИЗ
		|	РегистрСведений.Тарифы.СрезПоследних(&НаДату, Габарит В (&СписокГабаритов)) КАК ТарифыСрезПоследних
		|ГДЕ
		|	ТарифыСрезПоследних.Негабарит";
	
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("СписокГабаритов", СписокГабаритов);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	возврат РезультатЗапроса
	
КонецФункции	

Процедура РасчитатьСтоимостьХранения(ТЗ) Экспорт
	МассивТипов 		= Новый Массив;
	МассивТипов.Добавить(Тип("число"));
	ПараметрыЧисла 		= Новый КвалификаторыЧисла(15,2);
	ТипЧисло 			= Новый ОписаниеТипов(МассивТипов, , ПараметрыЧисла);
	
	ТЗ.Колонки.Добавить("СтоимостьИтого",		ТипЧисло);
	ТЗ.Колонки.Добавить("ОплачиваетОрганизатор",ТипЧисло);
	ТЗ.Колонки.Добавить("ОплачиваетУчастник",	ТипЧисло);
	ТЗ.Колонки.Добавить("СтоимостьХранения",	ТипЧисло);
	ТЗ.Колонки.Добавить("КоличествоСУчетомСГ",	ТипЧисло);
//	ТЗ.Колонки.Добавить("СтоимостьДоставки",	ТипЧисло);
	
	ДниХраненияБесплатнойДоставки = Константы.ДниХраненияБесплатнойДоставки.Получить();
	
	Для каждого элем из тз Цикл
		Если не элем.ТарифУстановлен Тогда
			ТекстСообщения ="Для габарита: "+элем.Габарит+" не установлена стоимость хранения!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			элем.КоличествоСУчетомСГ = Элем.Количество;
			Продолжить;
		КонецЕсли;	
		этоСупергуппа = (тз.Колонки.Найти("Покупка")<>Неопределено и 
						 ТипЗнч(Элем.Покупка)= Тип("СправочникСсылка.Мегаордера") и
						 Элем.Покупка.ТипМегаордера = Перечисления.типМегаордера.Супергруппа);
		Результат = РасчитатьСтоимостьХраненияПоСтроке(элем,ДниХраненияБесплатнойДоставки,этоСупергуппа );
		ЗаполнитьЗначенияСвойств(элем,Результат);
	КонецЦикла;
КонецПроцедуры	


///Поля необходимые для расчета
//СтоимостьДоставки
//ВремяХранения
//БесплатнаяВыдача
//Штраф
//Надбавка
//СрокХранения
//негабарит
//ЦенаЗаКГ
//ЦенаЗаКуб
//Вес
//Объем
//Количество
//ЦенаХранения

//? этоСупергуппа, Партия

Функция РасчитатьСтоимостьХраненияПоСтроке(элем, ДниХраненияБесплатнойДоставки = неопределено,этоСупергуппа = Ложь) Экспорт

	Результат = Новый Структура("СтоимостьИтого,ОплачиваетОрганизатор, ОплачиваетУчастник, СтоимостьХранения,КоличествоСУчетомСГ ");
	
	Если ДниХраненияБесплатнойДоставки = неопределено Тогда
		ДниХраненияБесплатнойДоставки = Константы.ДниХраненияБесплатнойДоставки.Получить();	
	КонецЕсли;	
	
	ВремяХранения					= элем.ВремяХранения;
	ВремяХраненияЗаСчетОрганизатора = ?(элем.БесплатнаяВыдача,ДниХраненияБесплатнойДоставки,0);
	Штраф							= элем.Штраф;
	Попытка
		Надбавка						= элем.Надбавка;
	Исключение
		Надбавка = 0;	
	КонецПопытки;
	
	СрокХранения					= элем.СрокХранения;
	
	
	КоличествоСУчетомСГ = 0;							
	Если  этоСупергуппа Тогда
		СтоимостьХранения   = Элем.Партия.СтоимостьИтого;
		Для каждого элемСупергруппы из элем.Покупка.Состав Цикл
			Если ТипЗнч(элемСупергруппы.Заказ) = Тип("СправочникСсылка.Коробки") Тогда
				КоличествоСУчетомСГ = КоличествоСУчетомСГ + элемСупергруппы.Заказ.Состав.Количество();
			Иначе	
				КоличествоСУчетомСГ = КоличествоСУчетомСГ + 1;
			КонецЕсли;
		КонецЦикла;	
	ИначеЕсли элем.негабарит Тогда
		СтоимостьКг			= элем.ЦенаЗаКГ		* элем.Вес;
		СтоимостьКуб		= элем.ЦенаЗаКуб	* Элем.Объем;
		СтоимостьХранения  	= Макс(СтоимостьКг, СтоимостьКуб);
		КоличествоСУчетомСГ = Элем.Количество;
	Иначе
		СтоимостьХранения	= Элем.ЦенаХранения;				
		КоличествоСУчетомСГ = Элем.Количество;
	КонецЕсли;
	
	Если ВремяХраненияЗаСчетОрганизатора > 0 Тогда
		ДнейШтрафаЗаСчетОрганизатора 	= ?(ВремяХраненияЗаСчетОрганизатора > СрокХранения, ВремяХраненияЗаСчетОрганизатора	- СрокХранения, 0);
		ШтрафЗаСчетОрганизатора 		= ДнейШтрафаЗаСчетОрганизатора * Штраф;
		ЛимитОплатыОрганизатора 		= СтоимостьХранения + ШтрафЗаСчетОрганизатора + элем.СтоимостьДоставки;
	Иначе
		ЛимитОплатыОрганизатора 		= 0;
	КонецЕсли;
	ВремяХранения					= ?(ВремяХранения 	= null,0,ВремяХранения)  ;
	ДнейШтрафаИтого					= ?(ВремяХранения >  СрокХранения, ВремяХранения - СрокХранения, 0);
	ШтрафИтого						= ДнейШтрафаИтого * Штраф;
	
	СтоимостьИтого					= СтоимостьХранения + Надбавка + ШтрафИтого				+ Элем.СтоимостьДоставки;	
	
	ОплачиваетОрганизатор  			= ?(ЛимитОплатыОрганизатора > СтоимостьИтого, СтоимостьИтого, ЛимитОплатыОрганизатора);
	ОплачиваетУчастник				= СтоимостьИтого - ОплачиваетОрганизатор;
	
	Результат.СтоимостьИтого				= СтоимостьИтого;
	Результат.ОплачиваетОрганизатор		= ОплачиваетОрганизатор;
	Результат.ОплачиваетУчастник		= ОплачиваетУчастник;
	Результат.СтоимостьХранения			= СтоимостьХранения;
	Результат.КоличествоСУчетомСГ		= ?(КоличествоСУчетомСГ=null,0,КоличествоСУчетомСГ);
	
	Возврат Результат;
	
	
КонецФункции



// Расчитать стимость хранения всоответствии с габаритом
//
// Параметры:
//  Параметры  - Структура - В составе поля: Партия, Габарит, Вес, Объем, Количество
//  датаВыдачи - Дата - для расчетавремени хранения
//
// Возвращаемое значение:
//   Структура   - содержит ВремяХранения, СтоимостьХранения
//
Функция ПолучитьСтоимостьХранения(Параметры,датаВыдачи) Экспорт
	Если ЗначениеЗаполнено(Параметры.Партия) Тогда
		ВремяХраненияНаСкладе	= аСПНаСервере.РазностьДат(датаВыдачи,Параметры.Партия.Дата);
	Иначе
		ВремяХраненияНаСкладе	= 0;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(Параметры.Габарит) Тогда
		Возврат Новый Структура("ВремяХранения, СтоимостьХранения",ВремяХраненияНаСкладе, 0);
	КонецЕсли;
	
	ДниХранения			= Параметры.Габарит.ДниХранения;
	ДобавочнаяСтоимость	= Параметры.Габарит.ДобавочнаяСтоимость;
	ЗнакЗабираетКурьер 	= ?((ЗначениеЗаполнено(Параметры.Габарит) и Параметры.Габарит.ЗабираетКурьер),-1,1);
	
	СтоимостьХранения   = 0;
	Если 	ТипЗнч(Параметры.Покупка)  		= Тип("СправочникСсылка.Мегаордера") и
			Параметры.Покупка.ТипМегаордера = Перечисления.типМегаордера.Супергруппа Тогда

		СтоимостьХранения   = Параметры.Партия.СтоимостьИтого;
		Возврат Новый Структура("ВремяХранения, СтоимостьХранения",ВремяХраненияНаСкладе, СтоимостьХранения);
		
	КонецЕсли;
	
	Если Параметры.Габарит.Негабарит Тогда
		
		СтоимостьКг			= Параметры.Габарит.СтоимостьКг	*Параметры.Вес;
		СтоимостьКуб		= Параметры.Габарит.СтоимостьКуб*Параметры.Объем;
		СтоимостьХранения  	= Макс(СтоимостьКг,СтоимостьКуб);
		
	Иначе	
		СтоимостьХранения	= Параметры.Габарит.СтоимостьХранения;
	КонецЕсли;
	
	ДнейШтрафаИтого			= ?(ВремяХраненияНаСкладе >  ДниХранения, ВремяХраненияНаСкладе - ДниХранения, 0);
	ШтрафИтого				= ДнейШтрафаИтого * ДобавочнаяСтоимость;
	
	СтоимостьХранения       = СтоимостьХранения + ШтрафИтого; 
	СтоимостьХранения		= СтоимостьХранения	* Параметры.Количество;
	СтоимостьХранения 		= СтоимостьХранения * ЗнакЗабираетКурьер;
	Возврат Новый Структура("ВремяХранения, СтоимостьХранения",ВремяХраненияНаСкладе, СтоимостьХранения);
КонецФункции	

Функция ПолучитьСтоимостьДоставки(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТарифыПоНаправлениямСрезПоследних.Габарит КАК Габарит,
		|	ТарифыПоНаправлениямСрезПоследних.Куда КАК Куда,
		|	ТарифыПоНаправлениямСрезПоследних.Стоимость КАК Стоимость
		|ИЗ
		|	РегистрСведений.ТарифыПоНаправлениям.СрезПоследних(
		|			&Период,
		|			Габарит = &Габарит
		|				И Откуда = &Откуда
		|				И Куда = &Куда) КАК ТарифыПоНаправлениямСрезПоследних";
	
	Запрос.УстановитьПараметр("Габарит", 	Параметры.Габарит);
	Запрос.УстановитьПараметр("Куда", 		Константы.СвояТочка.Получить().ГородСП);
	Запрос.УстановитьПараметр("Откуда", 	Параметры.ПерваяТочка.ГородСП);
	Запрос.УстановитьПараметр("Период", 	Параметры.Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Стоимость;
	КонецЕсли;
	Возврат 0;
Конецфункции	
Функция Получить_ПоследнееМестоХранения(ТабЧастьСМестомХранения) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокуиентЗапроса.МестоХранения
		|ИЗ
		|	"+ТабЧастьСМестомХранения+" КАК ДокуиентЗапроса
		|ГДЕ
		|	ДокуиентЗапроса.МестоХранения <> ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокуиентЗапроса.Ссылка.Дата УБЫВ,
		|	ДокуиентЗапроса.Ссылка.Номер УБЫВ,
		|	ДокуиентЗапроса.НомерСтроки УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.МестоХранения;
	КонецЕсли;
	Возврат Справочники.МестаХранения.ПустаяСсылка();
КонецФункции



////////////////////////////////////////////////////

Функция 	СформироватьДокумент_Продажа(Номенклатура)  Экспорт
	обПродажа			= Документы.Продажа.СоздатьДокумент();
	Если  ТипЗнч(Номенклатура)=Тип("СправочникСсылка.КартыУчастников") Тогда
		обПродажа.Участник	= Номенклатура.Владелец;
	КонецЕсли;	
	обПродажа.Дата		= ТекущаяДата();
	обПродажа.ДобавитьТовар(Номенклатура);
	Попытка
		обПродажа.Записать(РежимЗаписиДокумента.Запись);
		Возврат обПродажа.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать документ ""Продажа""");
		Возврат Неопределено
	КонецПопытки;
КонецФункции

функция  СформироватьДокумент_ЗаполнитьСупергруппу(Супергруппа) Экспорт

	
	документ					= Документы.ЗаполнитьСупергруппу.СоздатьДокумент();
	документ.Супергруппа		= Супергруппа;
	документ.Дата 				= ТекущаяДата();
	документ.ДокументОснование 	= Супергруппа.Накладная;
	документ.ТочкаНазначения	= Супергруппа.ПунктВыдачи;
	документ.Комментарий		= "Записан автоматически при создании супергруппы";
	Попытка
	    документ.Записать(РежимЗаписиДокумента.Проведение);
		возврат документ.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось заполнить супергруппу: "+Супергруппа+". "+ОписаниеОшибки());	
	КонецПопытки;
	возврат Неопределено;
КонецФункции	

Процедура ЗаполнитьОтправленыеСтроки(Документ) Экспорт
	Если не ЗначениеЗаполнено(Документ.Ссылка) Тогда Возврат КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеЗаказовСайт.Заказ КАК Заказ
		|ИЗ
		|	РегистрСведений.ДанныеЗаказовСайт КАК ДанныеЗаказовСайт
		|ГДЕ
		|	ДанныеЗаказовСайт.Партия = &Партия";
	
	Запрос.УстановитьПараметр("Партия", Документ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	ЭтоРазборКоробки = (ТипЗнч(Документ) = Тип("ДокументСсылка.РазборКоробки"));
	
	Пока Выборка.Следующий() Цикл
		выполненОбмен = Документ.Посылки.НайтиСтроки(новый Структура("Посылка",Выборка.Заказ));
		Для каждого элем Из выполненОбмен Цикл
			элем.Отправлено = Истина;
		КонецЦикла;	
		
		
		Если ЭтоРазборКоробки Тогда
			выполненОбмен = Документ.ГруппыНаТранзит.НайтиСтроки(новый Структура("Коробка",Выборка.Заказ));
			Для каждого элем Из выполненОбмен Цикл
				элем.Отправлено = Истина;
			КонецЦикла;	
			
		Иначе     // Приходная
			выполненОбмен = Документ.Покупки.НайтиСтроки(новый Структура("Покупка",Выборка.Заказ));
			Для каждого элем Из выполненОбмен Цикл
				элем.Отправлено = Истина;
			КонецЦикла;	
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

	



#Область НеИспользуется

//Функция ПолучитьПараметрыРасчетаСтоимости(Габарит, Покупка, Участник, Партия) Экспорт
//	//ВремяХранения,БесплатнаяВыдача,Штраф,СрокХранения,Покупка,ЦенаЗаКГ,ЦенаЗаКуб,ЦенаХраниения,Вес,Объем, Партия"
//	Результат = новый структура("ЦенаХранения,СрокХранения,Штраф,Заморозка,негабарит, ЦенаЗаКГ,ЦенаЗаКуб",0,0,0,Ложь,Ложь,0,0);
//	Результат.Вставить("Вес",			0);
//	Результат.Вставить("Оъем",			0);
//	Результат.Вставить("ВремяХранения",	0);
//	Результат.Вставить("Партия", Партия);
//	Результат.Вставить("Покупка", Покупка);
//	Результат.Вставить("Участник", Участник);
//	Результат.Вставить("Габарит", Габарит);
//	
//	  								
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ТарифыСрезПоследних.ЦенаХранения КАК ЦенаХранения,
//		|	ТарифыСрезПоследних.СрокХранения КАК СрокХранения,
//		|	ТарифыСрезПоследних.Штраф КАК Штраф,
//		|	ТарифыСрезПоследних.Заморозка КАК Заморозка,
//		|	ТарифыСрезПоследних.негабарит КАК негабарит,
//		|	ТарифыСрезПоследних.ЦенаЗаКГ КАК ЦенаЗаКГ,
//		|	ТарифыСрезПоследних.ЦенаЗаКуб КАК ЦенаЗаКуб,
//		|	ТарифыСрезПоследних.Отменен КАК Отменен
//		|ИЗ
//		|	РегистрСведений.Тарифы.СрезПоследних(&ДатаДокумента, Габарит = &Габарит) КАК ТарифыСрезПоследних
//		|ГДЕ
//		|	НЕ ТарифыСрезПоследних.Отменен
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	НегабаритЗначения.Вес КАК Вес,
//		|	НегабаритЗначения.объем КАК объем
//		|ИЗ
//		|	РегистрСведений.НегабаритЗначения КАК НегабаритЗначения
//		|ГДЕ
//		|	НегабаритЗначения.Покупка = &Покупка
//		|	И НегабаритЗначения.Участник = &Участник
//		|	И НегабаритЗначения.Габарит = &Габарит
//		|	И НегабаритЗначения.Партия = &Партия
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ТарифыПоНаправлениямСрезПоследних.Стоимость КАК СтоимостьДоставки
//		|ИЗ
//		|	РегистрСведений.ТарифыПоНаправлениям.СрезПоследних(
//		|			&ДатаДокумента,
//		|			Откуда = &Откуда
//		|				И Куда = &Куда
//		|				И Габарит = &Габарит
//		|				И НЕ Отменен) КАК ТарифыПоНаправлениямСрезПоследних";
//	
//	Запрос.УстановитьПараметр("Габарит", 		Габарит);
//	//Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
//	
//	//РезультатЗапроса = Запрос.ВыполнитьПакет();
//	
//	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	//Если ВыборкаДетальныеЗаписи.Следующий() Тогда
//	//	ЗаполнитьЗначенияСвойств(Результат,ВыборкаДетальныеЗаписи);
//	//КонецЕсли;
//	
//	Возврат Результат;

//	
//КонецФункции	




#КонецОбласти