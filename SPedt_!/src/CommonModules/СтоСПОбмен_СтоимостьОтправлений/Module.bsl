Функция Получить(СписокОтправлений, Ссылка) Экспорт
	
	хмл_отправили						= СтоСПОбмен_Запрос.СтоимостьОтправлений(СписокОтправлений);
	
	СтрокаПротокола						= СтоСПОбмен_Выгрузка100сп.СтруктураПротокола();
	СтрокаПротокола.ДатаНачала			= ТекущаяДата();
	СтрокаПротокола.Описание			= "Получить стоимость отправлений";
	СтрокаПротокола.Отправили			= хмл_отправили;
	
	стр_Ответа 							= СтоСПОбмен_Выгрузка100сп.Загрузить(хмл_отправили);
	
	СтрокаПротокола.ДатаОкончания		= ТекущаяДата();
	СтрокаПротокола.ПолученныеДанные	= стр_Ответа.Получили;
	
	Если не стр_Ответа.Свойство("Разбор") или стр_Ответа.Разбор.megaordersPrices.Количество() = 0 Тогда
		СтрокаПротокола.СообщениеОшибки = "Не удалось соединиться.";
		СтрокаПротокола.Результат	=	Ложь;
	Иначе	
		СтрокаПротокола.Результат	=	Истина;
		СтрокаПротокола.Вставить("ТаблицаРезультат", стр_Ответа.Разбор.megaordersPrices );
	КонецЕсли;
	
	СтоСПОбмен_Выгрузка100сп.СохранитьПротоколОбмена(СтрокаПротокола,Ссылка);
	
	Возврат СтрокаПротокола;	
КонецФункции	

Процедура Синхронизировать(ОборотнаяТара) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОборотнаяТараСрезПоследних.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.ОборотнаяТара.СрезПоследних(, Тара = &ОборотнаяТара) КАК ОборотнаяТараСрезПоследних";
	
	Запрос.УстановитьПараметр("ОборотнаяТара", ОборотнаяТара);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Док = Выборка.Регистратор.ПолучитьОбъект();
	Иначе	
	    Док = Документы.СинхронизацияОборотнойТары.СоздатьДокумент();
	КонецЕсли;
	док.Синхронизировать(ОборотнаяТара);	
	Док.Записать(РежимЗаписиДокумента.Проведение);

	
КонецПроцедуры	

Функция ИсторияПоТаре(Объект) Экспорт
	тара = объект.ОборотнаяТара;
	
	хмл_отправили						= СтоСПОбмен_Запрос.ОборотнаяТараИстория(тара);
	
	СтрокаПротокола						= СтоСПОбмен_Выгрузка100сп.СтруктураПротокола();
	СтрокаПротокола.ДатаНачала			= ТекущаяДата();
	СтрокаПротокола.Описание			= "История оборотной тары по коду";
	СтрокаПротокола.Отправили			= хмл_отправили;
	
	стр_Ответа 							= СтоСПОбмен_Выгрузка100сп.Загрузить(хмл_отправили);
	
	СтрокаПротокола.ДатаОкончания		= ТекущаяДата();
	СтрокаПротокола.ПолученныеДанные	= стр_Ответа.Получили;
	
	Если не стр_Ответа.Свойство("Разбор") или не стр_Ответа.Разбор.авторизацияВыполнена или стр_Ответа.Разбор.reusableStickerLog.Количество() = 0 Тогда
		СтрокаПротокола.СообщениеОшибки = "Не удалось соединиться.";
		СтрокаПротокола.Результат	=	Ложь;
	Иначе	
			СтрокаПротокола.Результат	=	Истина;
	КонецЕсли;
	
	СтоСПОбмен_Выгрузка100сп.СохранитьПротоколОбмена(СтрокаПротокола,Объект.Ссылка);
	
	Возврат стр_Ответа.Разбор.reusableStickerLog;	
	
КонецФункции	


Процедура ДополнитьКоробкой(ДанныеШКОборотнойТары) Экспорт
	ОборотнаяТара = ДанныеШКОборотнойТары.ОборотнаяТара; 
	
	Синхронизировать(ОборотнаяТара);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОборотнаяТараСрезПоследних.Тара КАК Тара,
		|	ОборотнаяТараСрезПоследних.Коробка КАК Коробка,
		|	ОборотнаяТараСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ОборотнаяТара.СрезПоследних(, Тара = &ОборотнаяТара) КАК ОборотнаяТараСрезПоследних";
	
	Запрос.УстановитьПараметр("ОборотнаяТара", ОборотнаяТара);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ШККоробки = Выборка.Коробка.ШК.Код;
		ДанныеКоробки = СП_Штрихкоды.ПолучитьДанныеПоШК(ШККоробки);
		ДанныеКоробки.Вставить("ТараЗаполнена",Выборка.Период);
		ДанныеКоробки.КРазбору = Истина;
		Для каждого элем из ДанныеКоробки Цикл		
			ДанныеШКОборотнойТары.Вставить(Элем.Ключ, элем.Значение);
		КонецЦикла;
	Иначе	
		ДанныеШКОборотнойТары.Вставить("Коробка",неопределено);
	КонецЕсли;
	
	
КонецПроцедуры	