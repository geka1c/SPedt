функция ОбработатьЗагруженныеСупергруппы(тзИзФайла) Экспорт
	Начало = ТекущаяДата();
	Ошибок = 0;	
	Если Не ЗначениеЗаполнено(тзИзФайла) Или тзИзФайла.количество() = 0 Тогда
		Конец = ТекущаяДата();	
		Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец,  0, 0);	
		Возврат Результат;
	КонецЕсли;
	Для каждого Элем из тзИзФайла Цикл 
		Результат = СтоСПОбмен_СупперГруппы.ОбновитьСупергруппу(элем);
		Если Результат = Неопределено Тогда
			Ошибок = Ошибок	+1;
		КонецЕсли;
	КонецЦикла;	
	Конец = ТекущаяДата();	
	Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец, тзИзФайла.Количество(), Ошибок);	
	Возврат Результат;
	
КонецФункции	



функция ОбработатьЗагруженныеПосылки(тзИзФайла) Экспорт
	Начало = ТекущаяДата();
	Ошибок = 0;	
	Если Не ЗначениеЗаполнено(тзИзФайла) Или тзИзФайла.количество() = 0 Тогда
		Конец = ТекущаяДата();	
		Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец,  0, 0);	
		Возврат Результат;
	КонецЕсли;
	
	
Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тз_Посылки.destinationDistributorCode КАК destinationDistributorCode,
		|	тз_Посылки.did КАК did,
		|	тз_Посылки.firstPid КАК firstPid,
		|	тз_Посылки.packageCreatorUid КАК packageCreatorUid,
		|	тз_Посылки.packageId КАК packageId,
		|	тз_Посылки.secureCode КАК secureCode,
		|	тз_Посылки.uid КАК uid
		|ПОМЕСТИТЬ втПосылки
		|ИЗ
		|	&тзФ КАК тз_Посылки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПосылки.destinationDistributorCode КАК destinationDistributorCode,
		|	втПосылки.did КАК did,
		|	втПосылки.firstPid КАК firstPid,
		|	втПосылки.packageCreatorUid КАК packageCreatorUid,
		|	втПосылки.packageId КАК packageId,
		|	втПосылки.secureCode КАК secureCode,
		|	втПосылки.uid КАК uid,
		|	Посылки.Ссылка КАК Ссылка
		|ИЗ
		|	втПосылки КАК втПосылки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Посылки КАК Посылки
		|		ПО втПосылки.packageId = Посылки.Код
		|ГДЕ
		|	Посылки.Ссылка ЕСТЬ NULL";
	
	Запрос.Параметры.Вставить("тзФ",тзИзФайла); 
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	счетчик		 	= 0;
	ВсегоЭлементов	= Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		счетчик = счетчик + 1;
		
		ПараметрыПосылки	= новый Структура;
		ПараметрыПосылки.Вставить("ПунктВыдачи",		СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(	Выборка.destinationDistributorCode));
		ПараметрыПосылки.Вставить("Участник",			СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(		Выборка.uid));
		ПараметрыПосылки.Вставить("Организатор",		СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(	Выборка.packageCreatorUid));
		ПараметрыПосылки.Вставить("Покупка",			?(Выборка.firstPid <> 0,СП_РаботаСоСправочниками.ПолучитьПокупкуПо_Коду(Выборка.firstPid),Справочники.Покупки.ПустаяСсылка()));
		ПараметрыПосылки.Вставить("secureCode",			Выборка.secureCode);
		ПараметрыПосылки.Вставить("ДатаЗагрузки",		ТекущаяДата());
		
		Посылка_Ссылка	=	СП_РаботаСоСправочниками.ПолучитьПосылкуПо_Коду(Выборка.packageId);
		Результат = СП_РаботаСоСправочниками.ОбновитьПосылку(Посылка_Ссылка,	ПараметрыПосылки);
		Если Результат = Неопределено Тогда
			Ошибок = Ошибок	+1;
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загрузка Посылок: " + счетчик + " из " + ВсегоЭлементов ,,строка(счетчик),строка(ВсегоЭлементов));
	КонецЦикла;
	
	Конец = ТекущаяДата();	
	Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец, ВсегоЭлементов, Ошибок);	
	Возврат Результат;
	
КонецФункции	



функция ОбработатьЗагруженныеГруппыДоставки(тзИзФайла, таблицаСоставаГруппы) Экспорт
	Начало = ТекущаяДата();
	Ошибок = 0;
	Если Не ЗначениеЗаполнено(тзИзФайла) Или тзИзФайла.количество() = 0 Тогда
		Конец = ТекущаяДата();	
		Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец, 0, 0);	
		Возврат Результат;
	КонецЕсли;

// Формирование новых элементов справочников	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тзФ.ДатаСоздания				КАК ДатаСоздания,
	|	тзФ.ДатаМодификации 			КАК ДатаМодификации,
	|	тзФ.МинДатаДоставки 			КАК МинДатаДоставки,
	|	тзФ.МаксДатаДоставки 			КАК МаксДатаДоставки,
	|	тзФ.СрокХраненияГруппы 		КАК СрокХраненияГруппы,
	|	тзФ.СтоимостьВыбралУчастник 	КАК СтоимостьВыбралУчастник,
	|	тзФ.СтатусГруппыДоставки 		КАК СтатусГруппыДоставки,
	|	тзФ.ВидРПОВыбралУчастник 		КАК ВидРПОВыбралУчастник,
	|	тзФ.МетодОплаты 				КАК МетодОплаты,
	
	|	тзФ.КодУчастника			КАК КодУчастника,
	|	тзФ.КодТочкиНазначения 		КАК КодТочкиНазначения,
	|	тзФ.КодКоробки		 		КАК КодКоробки,
	|	тзФ.КодТочкиСбора 			КАК КодТочкиСбора
	|ПОМЕСТИТЬ Ф
	|ИЗ
	|	&тзФ КАК тзФ
	|;
	|
	|ВЫБРАТЬ
	|	тзФСостав.Цена				 		КАК Цена,
	|	тзФСостав.КодЗаказа			 		КАК КодЗаказа,
	|	тзФСостав.КодПокупки		 		КАК КодПокупки,
	|	тзФСостав.ТипПокупки		 		КАК ТипПокупки,
	|	тзФСостав.КодКоробки		 		КАК КодКоробки
	|ПОМЕСТИТЬ ФСостав
	|ИЗ
	|	&тзФСостав КАК тзФСостав;
	|
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ф.КодУчастника										КАК КодУчастника,
	|	ВЫРАЗИТЬ(Ф.КодТочкиНазначения КАК СТРОКА(4)) 		КАК КодТочкиНазначения,
	|	ВЫРАЗИТЬ(Ф.КодТочкиСбора КАК СТРОКА(4)) 			КАК КодТочкиСбора,
	|	ВЫРАЗИТЬ(Ф.КодКоробки КАК СТРОКА(25)) 				КАК КодКоробки,
	|	isnull(ТочкиРаздачи.Ссылка, Значение(Справочник.точкиРаздачи.ПУстаяССылка)) 	КАК ТочкаНазначения,
	|	isnull(Коробки.Ссылка, Значение(Справочник.Коробки.ПУстаяССылка)) 				КАК Группа,
	|	isnull(ТочкиРаздачи1.Ссылка, Значение(Справочник.точкиРаздачи.ПУстаяССылка))	КАК ТочкаСбора,
	|	isnull(Участники.Ссылка, Значение(Справочник.Участники.ПУстаяССылка)) 			КАК УчастникГД

	|ПОМЕСТИТЬ ВсеГруппы
	|ИЗ
	|	Ф КАК Ф
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиРаздачи КАК ТочкиРаздачи
	|		ПО ((ВЫРАЗИТЬ(Ф.КодТочкиНазначения КАК СТРОКА(4))) = ТочкиРаздачи.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиРаздачи КАК ТочкиРаздачи1
	|		ПО ((ВЫРАЗИТЬ(Ф.КодТочкиСбора КАК СТРОКА(4))) = ТочкиРаздачи1.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Коробки КАК Коробки
	|		ПО ((ВЫРАЗИТЬ(Ф.КодКоробки КАК СТРОКА(25))) = Коробки.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Участники КАК Участники
	|		ПО (Ф.КодУчастника = Участники.Код);
	|
	
	|ВЫБРАТЬ
	|	ФСостав.Цена		 			КАК Цена,
	|	ФСостав.КодПокупки		 		КАК КодПокупки,
	|	ФСостав.ТипПокупки		 		КАК ТипПокупки,
	|	isnull(Покупки.Ссылка, Значение(Справочник.Покупки.ПУстаяССылка))				КАК Покупка
	|ПОМЕСТИТЬ Состав
	|ИЗ
	|	ФСостав КАК ФСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Покупки КАК Покупки
	|		ПО ФСостав.КодПокупки = Покупки.Код;
	|
	|
	|ВЫБРАТЬ
	|	ВсеГруппы.КодТочкиНазначения КАК КодТочки
	|ПОМЕСТИТЬ сборПВ
	|ИЗ
	|	ВсеГруппы КАК ВсеГруппы
	|ГДЕ
	|	ВсеГруппы.ТочкаНазначения = ЗНАЧЕНИЕ(Справочник.точкиРаздачи.ПУстаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеГруппы.КодТочкиНазначения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеГруппы.КодТочкиСбора
	|ИЗ
	|	ВсеГруппы КАК ВсеГруппы
	|ГДЕ
	|	ВсеГруппы.ТочкаСбора = ЗНАЧЕНИЕ(Справочник.точкиРаздачи.ПУстаяССылка)
	|;
	|
	//5
	|ВЫБРАТЬ
	|	ВсеГруппы.КодУчастника КАК КодУчастника
	|ИЗ
	|	ВсеГруппы КАК ВсеГруппы
	|ГДЕ
	|	ВсеГруппы.УчастникГД = ЗНАЧЕНИЕ(Справочник.Участники.ПУстаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеГруппы.КодУчастника;
	
	|
	//6
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	сборПВ.КодТочки КАК КодТочки
	|ИЗ
	|	сборПВ КАК сборПВ;
	|
	//7
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеГруппы.КодКоробки КАК КодКоробки
	|ИЗ
	|	ВсеГруппы КАК ВсеГруппы
	|ГДЕ
	|	ВсеГруппы.Группа = ЗНАЧЕНИЕ(Справочник.Коробки.ПУстаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеГруппы.КодКоробки;	
	|
	|
	//8
	|ВЫБРАТЬ
	|	Состав.КодПокупки КАК КодПокупки
	|ИЗ
	|	Состав КАК Состав
	|ГДЕ
	|	Состав.Покупка = ЗНАЧЕНИЕ(Справочник.Покупки.ПУстаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Состав.КодПокупки";	
	Запрос.Параметры.Вставить("тзФ",тзИзФайла);
	Запрос.Параметры.Вставить("тзФСостав",таблицаСоставаГруппы);
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	ВыборкаУчастники = РезультатПакет[5].Выбрать();
	Пока ВыборкаУчастники.Следующий() Цикл
		СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(ВыборкаУчастники.КодУчастника);	
	КонецЦикла;
	
	ВыборкаПунктыВыдачи = РезультатПакет[6].Выбрать();
	Пока ВыборкаПунктыВыдачи.Следующий() Цикл
		СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(ВыборкаПунктыВыдачи.КодТочки);	
	КонецЦикла;	
	
	ВыборкаКоробки = РезультатПакет[7].Выбрать();
	Пока ВыборкаКоробки.Следующий() Цикл
		СП_РаботаСоСправочниками.ПолучитьКоробкуПо_Коду(ВыборкаКоробки.КодКоробки);	
	КонецЦикла;		
	
	ВыборкаПокупки = РезультатПакет[8].Выбрать();
	Пока ВыборкаПокупки.Следующий() Цикл
		СП_РаботаСоСправочниками.ПолучитьПокупкуПо_Коду(ВыборкаПокупки.КодПокупки);	
	КонецЦикла;		
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Ф.ДатаСоздания КАК ДатаСоздания,
	               |	Ф.ДатаМодификации КАК ДатаМодификации,
	               |	Ф.МинДатаДоставки КАК МинДатаДоставки,
	               |	Ф.МаксДатаДоставки КАК МаксДатаДоставки,
	               |	Ф.СрокХраненияГруппы КАК СрокХраненияГруппы,
	               |	Ф.СтоимостьВыбралУчастник КАК СтоимостьВыбралУчастник,
	               |	Ф.СтатусГруппыДоставки КАК СтатусГруппыДоставки,
	               |	Выразить(Ф.ВидРПОВыбралУчастник как Строка(100)) КАК ВидРПОВыбралУчастник,
	               |	Ф.МетодОплаты КАК МетодОплаты,
	               |	ЕСТЬNULL(ТочкиРаздачи.Ссылка, ЗНАЧЕНИЕ(Справочник.точкиРаздачи.ПУстаяССылка)) КАК ТочкаНазначения,
	               |	ЕСТЬNULL(ТочкиРаздачи1.Ссылка, ЗНАЧЕНИЕ(Справочник.точкиРаздачи.ПУстаяССылка)) КАК ТочкаСбора,
	               |	ЕСТЬNULL(Коробки.Ссылка, ЗНАЧЕНИЕ(Справочник.Коробки.ПУстаяССылка)) КАК Группа,
	               |	ЕСТЬNULL(Участники.Ссылка, ЗНАЧЕНИЕ(Справочник.Участники.ПУстаяССылка)) КАК УчастникГД
	               |ПОМЕСТИТЬ ГруппыИтог
	               |ИЗ
	               |	Ф КАК Ф
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиРаздачи КАК ТочкиРаздачи
	               |		ПО ((ВЫРАЗИТЬ(Ф.КодТочкиНазначения КАК СТРОКА(4))) = ТочкиРаздачи.Код)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиРаздачи КАК ТочкиРаздачи1
	               |		ПО ((ВЫРАЗИТЬ(Ф.КодТочкиСбора КАК СТРОКА(4))) = ТочкиРаздачи1.Код)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Коробки КАК Коробки
	               |		ПО ((ВЫРАЗИТЬ(Ф.КодКоробки КАК СТРОКА(25))) = Коробки.Код)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Участники КАК Участники
	               |		ПО Ф.КодУчастника = Участники.Код
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФСостав.Цена КАК Цена,
	               |	ВЫРАЗИТЬ(ФСостав.КодЗаказа КАК СТРОКА(12)) КАК КодЗаказа,
	               |	ФСостав.КодПокупки КАК КодПокупки,
	               |	ФСостав.ТипПокупки КАК ТипПокупки,
	               |	ФСостав.КодКоробки КАК КодКоробки,
	               |	ЕСТЬNULL(Коробки.Ссылка, ЗНАЧЕНИЕ(Справочник.Коробки.ПУстаяССылка)) КАК Группа,
	               |	ЕСТЬNULL(Покупки.Ссылка, ЗНАЧЕНИЕ(Справочник.Покупки.ПУстаяССылка)) КАК Покупка
	               |ПОМЕСТИТЬ СоставИтог
	               |ИЗ
	               |	ФСостав КАК ФСостав
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Покупки КАК Покупки
	               |		ПО ФСостав.КодПокупки = Покупки.Код
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Коробки КАК Коробки
	               |		ПО ((ВЫРАЗИТЬ(ФСостав.КодКоробки КАК СТРОКА(25))) = Коробки.Код)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вз.Группа КАК Группа,
	               |	вз.КодЗаказа КАК КодЗаказа,
	               |	СУММА(вз.ЦенаВБазе) КАК ЦенаВБазе,
	               |	СУММА(вз.ЦенаНаСайте) КАК ЦенаНаСайте,
	               |	СУММА(вз.КоличествоВБазе) КАК КоличествоВБазе,
	               |	СУММА(вз.КоличествоНаСайте) КАК КоличествоНаСайте
	               |ПОМЕСТИТЬ Сравнение
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		КоробкиСостав.Ссылка КАК Группа,
	               |		КоробкиСостав.КодЗаказа КАК КодЗаказа,
	               |		КоробкиСостав.Цена КАК ЦенаВБазе,
	               |		0 КАК ЦенаНаСайте,
	               |		1 КАК КоличествоВБазе,
	               |		0 КАК КоличествоНаСайте
	               |	ИЗ
	               |		Справочник.Коробки.Состав КАК КоробкиСостав
	               |	ГДЕ
	               |		КоробкиСостав.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ГруппыИтог.Группа КАК Группа
	               |				ИЗ
	               |					ГруппыИтог КАК ГруппыИтог)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СоставИтог.Группа,
	               |		СоставИтог.КодЗаказа,
	               |		0,
	               |		СоставИтог.Цена,
	               |		0,
	               |		1
	               |	ИЗ
	               |		СоставИтог КАК СоставИтог) КАК вз
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	вз.КодЗаказа,
	               |	вз.Группа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сравнение.Группа КАК Группа,
	               |	Сравнение.КодЗаказа КАК КодЗаказа,
	               |	Сравнение.ЦенаВБазе КАК ЦенаВБазе,
	               |	Сравнение.ЦенаНаСайте КАК ЦенаНаСайте,
	               |	Сравнение.КоличествоВБазе КАК КоличествоВБазе,
	               |	Сравнение.КоличествоНаСайте КАК КоличествоНаСайте
	               |ПОМЕСТИТЬ Сравнение2
	               |ИЗ
	               |	Сравнение КАК Сравнение
	               |ГДЕ
	               |	(Сравнение.ЦенаВБазе <> Сравнение.ЦенаНаСайте
	               |			ИЛИ Сравнение.КоличествоВБазе <> Сравнение.КоличествоНаСайте)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сравнение2.Группа КАК Группа
	               |ПОМЕСТИТЬ СоставИзменился
	               |ИЗ
	               |	Сравнение2 КАК Сравнение2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Сравнение2.Группа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыИтог.ДатаСоздания КАК ДатаСоздания,
	               |	ГруппыИтог.ДатаМодификации КАК ДатаМодификации,
	               |	ГруппыИтог.МинДатаДоставки КАК МинДатаДоставки,
	               |	ГруппыИтог.МаксДатаДоставки КАК МаксДатаДоставки,
	               |	ГруппыИтог.СрокХраненияГруппы КАК СрокХраненияГруппы,
	               |	ГруппыИтог.СтоимостьВыбралУчастник КАК СтоимостьВыбралУчастник,
	               |	ГруппыИтог.СтатусГруппыДоставки КАК СтатусГруппыДоставки,
	               |	ГруппыИтог.ВидРПОВыбралУчастник КАК ВидРПОВыбралУчастник,
	               |	ГруппыИтог.МетодОплаты КАК МетодОплаты,
	               |	ГруппыИтог.ТочкаНазначения КАК ТочкаНазначения,
	               |	ГруппыИтог.ТочкаСбора КАК ТочкаСбора,
	               |	ГруппыИтог.Группа КАК Группа,
	               |	ГруппыИтог.УчастникГД КАК УчастникГД,
	               |	ВЫБОР
	               |		КОГДА ГруппыИтог.Группа.ВидСтикера <> ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
	               |				ИЛИ ГруппыИтог.Группа.СтатусГруппыДоставки <> ГруппыИтог.СтатусГруппыДоставки
	               |				ИЛИ ГруппыИтог.Группа.ТочкаСбора <> ГруппыИтог.ТочкаСбора
	               |				ИЛИ ГруппыИтог.Группа.ТочкаНазначения <> ГруппыИтог.ТочкаНазначения
	               |				ИЛИ ГруппыИтог.Группа.УчастникГД <> ГруппыИтог.УчастникГД
	               |				ИЛИ ГруппыИтог.Группа.МинДатаДоставки <> ГруппыИтог.МинДатаДоставки
	               |				ИЛИ ГруппыИтог.Группа.МаксДатаДоставки <> ГруппыИтог.МаксДатаДоставки
	               |				ИЛИ ГруппыИтог.Группа.СрокХраненияГруппы <> ГруппыИтог.СрокХраненияГруппы
	               |				ИЛИ ГруппыИтог.Группа.МетодОплаты <> ГруппыИтог.МетодОплаты
	               |				ИЛИ ГруппыИтог.Группа.СтоимостьВыбралУчастник <> ГруппыИтог.СтоимостьВыбралУчастник
	               |				ИЛИ ГруппыИтог.Группа.ВидРПОВыбралУчастник <> ГруппыИтог.ВидРПОВыбралУчастник
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ШапкаИзменилась,
	               |	ВЫБОР
	               |		КОГДА СоставИзменился.Группа ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК СоставИзменился
	               |ПОМЕСТИТЬ ГруппыИтог2
	               |ИЗ
	               |	ГруппыИтог КАК ГруппыИтог
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СоставИзменился КАК СоставИзменился
	               |		ПО ГруппыИтог.Группа = СоставИзменился.Группа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыИтог2.ДатаСоздания КАК ДатаСоздания,
	               |	ГруппыИтог2.ДатаМодификации КАК ДатаМодификации,
	               |	ГруппыИтог2.МинДатаДоставки КАК МинДатаДоставки,
	               |	ГруппыИтог2.МаксДатаДоставки КАК МаксДатаДоставки,
	               |	ГруппыИтог2.СрокХраненияГруппы КАК СрокХраненияГруппы,
	               |	ГруппыИтог2.СтоимостьВыбралУчастник КАК СтоимостьВыбралУчастник,
	               |	ГруппыИтог2.СтатусГруппыДоставки КАК СтатусГруппыДоставки,
	               |	ГруппыИтог2.ВидРПОВыбралУчастник КАК ВидРПОВыбралУчастник,
	               |	ГруппыИтог2.МетодОплаты КАК МетодОплаты,
	               |	ГруппыИтог2.ТочкаНазначения КАК ТочкаНазначения,
	               |	ГруппыИтог2.ТочкаСбора КАК ТочкаСбора,
	               |	ГруппыИтог2.Группа КАК Группа,
	               |	ГруппыИтог2.УчастникГД КАК УчастникГД,
	               |	ГруппыИтог2.ШапкаИзменилась КАК ШапкаИзменилась,
	               |	ГруппыИтог2.СоставИзменился КАК СоставИзменился
	               |ИЗ
	               |	ГруппыИтог2 КАК ГруппыИтог2
	               |ГДЕ
	               |	ГруппыИтог2.ШапкаИзменилась
	               |	ИЛИ ГруппыИтог2.СоставИзменился
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СоставИтог.Цена КАК Цена,
	               |	СоставИтог.КодЗаказа КАК КодЗаказа,
	               |	СоставИтог.КодПокупки КАК КодПокупки,
	               |	СоставИтог.ТипПокупки КАК ТипПокупки,
	               |	СоставИтог.КодКоробки КАК КодКоробки,
	               |	СоставИтог.Группа КАК Группа,
	               |	СоставИтог.Покупка КАК Покупка
	               |ИЗ
	               |	СоставИтог КАК СоставИтог
	               |ГДЕ
	               |	СоставИтог.Группа В
	               |			(ВЫБРАТЬ
	               |				СоставИзменился.Группа КАК Группа
	               |			ИЗ
	               |				СоставИзменился КАК СоставИзменился)"; 
	 
		РезультатПакет = Запрос.ВыполнитьПакет();
		
		ВыборкаГруппы = РезультатПакет[6].Выбрать();
		ВыборкаСостав = РезультатПакет[7].Выбрать();
		Пока ВыборкаГруппы.Следующий() Цикл
			
				параметрыКоробки	= Новый Структура;
				параметрыКоробки.Вставить("Догрузить", 				Ложь);
				параметрыКоробки.Вставить("ДатаЗагрузки", 			ТекущаяДата());
				параметрыКоробки.Вставить("ДатаМодификации", 		ВыборкаГруппы.ДатаМодификации);
				
				Если ВыборкаГруппы.ШапкаИзменилась Тогда
					параметрыКоробки.Вставить("ВидСтикера", 			Перечисления.ВидыСтикеров.ГруппаДоставки);
					параметрыКоробки.Вставить("СтатусГруппыДоставки", 	ВыборкаГруппы.СтатусГруппыДоставки);
					параметрыКоробки.Вставить("ТочкаСбора", 			ВыборкаГруппы.ТочкаСбора);
					параметрыКоробки.Вставить("ТочкаНазначения", 		ВыборкаГруппы.ТочкаНазначения);
					параметрыКоробки.Вставить("УчастникГД", 			ВыборкаГруппы.УчастникГД);
					параметрыКоробки.Вставить("МинДатаДоставки", 		ВыборкаГруппы.МинДатаДоставки);
					параметрыКоробки.Вставить("МаксДатаДоставки", 		ВыборкаГруппы.МаксДатаДоставки);
					параметрыКоробки.Вставить("СрокХраненияГруппы", 	ВыборкаГруппы.СрокХраненияГруппы);
					параметрыКоробки.Вставить("МетодОплаты", 			ВыборкаГруппы.МетодОплаты);
					параметрыКоробки.Вставить("СтоимостьВыбралУчастник",ВыборкаГруппы.СтоимостьВыбралУчастник);	
					параметрыКоробки.Вставить("ВидРПОВыбралУчастник", 	ВыборкаГруппы.ВидРПОВыбралУчастник);
				КонецЕсли;
				
				Если ВыборкаГруппы.СоставИзменился Тогда
					Состав = Новый СписокЗначений;
				 	Пока ВыборкаСостав.НайтиСледующий(новый Структура("Группа", ВыборкаГруппы.Группа)) Цикл
						элемСостава = новый Структура("Покупка, Участник,Цена, КодЗаказа");
						ЗаполнитьЗначенияСвойств(элемСостава,ВыборкаСостав);
						элемСостава.Участник = ВыборкаГруппы.УчастникГД;
						Состав.Добавить(элемСостава);
					КонецЦикла;
					ВыборкаСостав.Сбросить();
					параметрыКоробки.Вставить("Состав", 				Состав);
				КОнецЕсли;	

				СП_РаботаСоСправочниками.ОбновитьКоробку(ВыборкаГруппы.Группа, параметрыКоробки);
			
		
	    КонецЦикла;
КонецФункции	

функция ОбработатьЗагруженныеПунктыВыдачи(тзИзФайла) Экспорт
	Начало = ТекущаяДата();
	Ошибок = 0;
	Если Не ЗначениеЗаполнено(тзИзФайла) Или тзИзФайла.количество() = 0 Тогда
		Конец = ТекущаяДата();	
		Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец, 0, 0);	
		Возврат Результат;
	КонецЕсли;
	Для каждого элем из тзИзФайла Цикл
		элем .code = Формат(Число(элем .code),"ЧЦ=4; ЧН=0; ЧВН=; ЧГ=0");
	КонецЦикла;	
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тзФ.code КАК Код,
	|	тзФ.name КАК Наименование,
	|	тзФ.city КАК ГородНаименование,
	|	тзФ.city_id КАК ГородКод,
	|	тзФ.address КАК Адрес,
	|	тзФ.canProcessGroup КАК НеРазбирать,
	|	тзФ.version1C  КАК Версия1С,
	|	тзФ.isPostService КАК ТранспортнаяКомпания
	|ПОМЕСТИТЬ Ф
	|ИЗ
	|	&тзФ КАК тзФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Ф.Код КАК СТРОКА(4)) КАК Код,
	|	ВЫРАЗИТЬ(Ф.Наименование КАК СТРОКА(100)) КАК Наименование,
	|	ВЫРАЗИТЬ(Ф.ГородНаименование КАК СТРОКА(25)) КАК ГородНаименование,
	|	ВЫРАЗИТЬ(Ф.ГородКод КАК СТРОКА(9)) КАК ГородКод,
	|	ВЫРАЗИТЬ(Ф.Адрес КАК СТРОКА(100)) КАК Адрес,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Ф.НеРазбирать КАК СТРОКА(1))) = ""1""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеРазбирать,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Ф.ТранспортнаяКомпания КАК СТРОКА(1))) = ""1""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТранспортнаяКомпания,
	|	ТочкиРаздачи.Ссылка КАК ПунктВыдачиСсылка,
	|	ВЫРАЗИТЬ(Ф.Версия1С КАК СТРОКА(15))		КАК Версия1С,
	|	ГородаСП.Ссылка КАК ГородСПСсылка
	|ПОМЕСТИТЬ ВсеПВ
	|ИЗ
	|	Ф КАК Ф
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиРаздачи КАК ТочкиРаздачи
	|		ПО ((ВЫРАЗИТЬ(Ф.Код КАК СТРОКА(4))) = ТочкиРаздачи.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГородаСП КАК ГородаСП
	|		ПО ((ВЫРАЗИТЬ(Ф.ГородКод КАК СТРОКА(9))) = ГородаСП.Код)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеПВ.Код 					КАК Код,
	|	ВсеПВ.Наименование 			КАК Наименование,
	|	ВсеПВ.ГородНаименование 	КАК ГородНаименование,
	|	ВсеПВ.ГородКод 				КАК ГородКод,
	|	ВсеПВ.Адрес 				КАК Адрес,
	|	ВсеПВ.НеРазбирать 			КАК НеРазбирать,
	|	ВсеПВ.ТранспортнаяКомпания 	КАК ТранспортнаяКомпания,
	|	ВсеПВ.ПунктВыдачиСсылка 	КАК ПунктВыдачиСсылка,
	|	ВсеПВ.ГородСПСсылка 		КАК ГородСПСсылка,
	|	ВсеПВ.Версия1С				КАК Версия1С
	|ИЗ
	|	ВсеПВ КАК ВсеПВ";
	Запрос.Параметры.Вставить("тзФ",тзИзФайла);
	Результат = Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВсеПВ.ГородНаименование КАК ГородНаименование,
	|	ВсеПВ.ГородКод КАК ГородКод
	|ИЗ
	|	ВсеПВ КАК ВсеПВ
	|ГДЕ
	|	ВсеПВ.ГородСПСсылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеПВ.ГородКод,
	|	ВсеПВ.ГородНаименование";
	результатНовыйГород 	= Запрос.Выполнить();
	Выборка 				= результатНовыйГород.Выбрать();
	ВсегоГородов			= Выборка.Количество();
	Счетчик 				= 0;
	Пока Выборка.Следующий() Цикл
		Счетчик 			= Счетчик +1;
		ГородСП 			= СП_РаботаСоСправочниками.ПолучитьГородПокупкиПо_Коду(Выборка.ГородКод);
		
		параметрыГорода 	= Новый Структура("Наименование");
		ЗаполнитьЗначенияСвойств(параметрыГорода, Выборка);
		Результат = СП_РаботаСоСправочниками.ОбновитьГородПокупки(ГородСП,параметрыГорода);
		Если Результат = Неопределено Тогда
			Ошибок = Ошибок	+1;
		КонецЕсли;

	КонецЦикла;	
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВсеПВ.Код КАК 				Код,
	|	ВсеПВ.Наименование 			КАК Наименование,
	|	ВсеПВ.ГородНаименование 	КАК ГородНаименование,
	|	ВсеПВ.ГородКод 				КАК ГородКод,
	|	ВсеПВ.Адрес 				КАК Адрес,
	|	не ВсеПВ.НеРазбирать 		КАК КРазбору,
	|	ВсеПВ.ТранспортнаяКомпания 	КАК ТранспортнаяКомпания,
	|	ВсеПВ.ПунктВыдачиСсылка		КАК ПунктВыдачиСсылка,
	|	ВсеПВ.Версия1С				КАК Версия1С,
	|	ВсеПВ.ГородСПСсылка 		КАК ГородСП
	|ИЗ
	|	ВсеПВ КАК ВсеПВ
	|ГДЕ
	|	ВсеПВ.ПунктВыдачиСсылка ЕСТЬ НЕ NULL 
	|	И (			ВсеПВ.Наименование 			<> ВсеПВ.ПунктВыдачиСсылка.Наименование
	|			ИЛИ ВсеПВ.Адрес 				<> ВсеПВ.ПунктВыдачиСсылка.Адрес
	|			ИЛИ ВсеПВ.ТранспортнаяКомпания 	<> ВсеПВ.ПунктВыдачиСсылка.ТранспортнаяКомпания
	|			ИЛИ ВсеПВ.Версия1С				<> ВсеПВ.ПунктВыдачиСсылка.Версия1С
	|			ИЛИ ВсеПВ.НеРазбирать 			 = ВсеПВ.ПунктВыдачиСсылка.КРазбору)";
	
	РезультатИзменилсяПунктВыдачи 	= Запрос.Выполнить();
	Выборка 						= РезультатИзменилсяПунктВыдачи.Выбрать();
	ИзменилосьПунктовВыдачи  		= Выборка.Количество();
	Счетчик 						= 0;
	Пока Выборка.Следующий() Цикл
		Счетчик 			= Счетчик +1;
		ПунктВыжачи			= Выборка.ПунктВыдачиСсылка;
		
		//параметрыПунктаВыдачи 	= Новый Структура("Наименование, Адрес, КРазбору, ТранспортнаяКомпания, ГородСП, Версия1С");
		параметрыПунктаВыдачи 	= Новый Структура("Наименование, Адрес,  ТранспортнаяКомпания, ГородСП, Версия1С");
		ЗаполнитьЗначенияСвойств(параметрыПунктаВыдачи, Выборка);
		Если не значениеЗаполнено(параметрыПунктаВыдачи.ГородСП) Тогда
			параметрыПунктаВыдачи.ГородСП = СП_РаботаСоСправочниками.ПолучитьГородПокупкиПо_Коду(Выборка.кородКод);
		КОнецЕсли;	
		Результат = СП_РаботаСоСправочниками.ОбновитьПунктВыдачи(ПунктВыжачи, параметрыПунктаВыдачи);
		Если Результат = Неопределено Тогда
			Ошибок = Ошибок	+1;
		КонецЕсли;

	КонецЦикла;	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВсеПВ.Код КАК Код,
	|	ВсеПВ.Наименование КАК Наименование,
	|	ВсеПВ.ГородНаименование КАК ГородНаименование,
	|	ВсеПВ.ГородКод КАК ГородКод,
	|	ВсеПВ.Адрес КАК Адрес,
	|	ВсеПВ.НеРазбирать КАК НеРазбирать,
	|	ВсеПВ.ТранспортнаяКомпания КАК ТранспортнаяКомпания,
	|	ВсеПВ.Версия1С				КАК Версия1С,
	|	ВсеПВ.ГородСПСсылка КАК ГородСПСсылка
	|ИЗ
	|	ВсеПВ КАК ВсеПВ
	|ГДЕ
	|	ВсеПВ.ПунктВыдачиСсылка ЕСТЬ NULL ";
	
	РезультатНовыйПунктВыдачи = Запрос.Выполнить();
	Выборка = РезультатНовыйПунктВыдачи.Выбрать();
	НовыхПунктовВыдачи  		= Выборка.Количество();
	Счетчик 						= 0;
	Пока Выборка.Следующий() Цикл
		Счетчик 			= Счетчик +1;
		//параметрыПунктаВыдачи 	= Новый Структура("Наименование, Адрес, КРазбору, ТранспортнаяКомпания, ГородСП, Версия1С");
		параметрыПунктаВыдачи 	= Новый Структура("Наименование, Адрес, ТранспортнаяКомпания, ГородСП, Версия1С");
		ЗаполнитьЗначенияСвойств(параметрыПунктаВыдачи, Выборка);
		Если не значениеЗаполнено(параметрыПунктаВыдачи.ГородСП) Тогда
			параметрыПунктаВыдачи.ГородСП = СП_РаботаСоСправочниками.ПолучитьГородПокупкиПо_Коду(Выборка.ГородКод);
		КОнецЕсли;	
		СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(Выборка.код, параметрыПунктаВыдачи);
	КонецЦикла;	
	ВсегоПунктовВыдачи = НовыхПунктовВыдачи +ИзменилосьПунктовВыдачи;
	Конец = ТекущаяДата();	
	Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец, ВсегоПунктовВыдачи, Ошибок);	
	Возврат Результат;
	
КонецФункции


Функция  ОбработатьЗагруженныхУчастников(тзИзФайла) Экспорт
	Начало = ТекущаяДата();
	Ошибок = 0;
	Если Не ЗначениеЗаполнено(тзИзФайла) Или тзИзФайла.количество() = 0 Тогда
		Конец = ТекущаяДата();	
		Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец, 0, 0);	
		Возврат Результат;
	КонецЕсли;
	тзИзФайла.Колонки.Добавить("raitingint", Новый описаниеТипов("Число"));
	
	Для каждого элем из тзИзФайла Цикл
		элем.raitingint = Число(элем.rating);
	КонецЦикла;	
	
	ЕстьХэшьТелефона = (тзИзФайла.Колонки.Найти("phoneHash")<>Неопределено);
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тзФ.id КАК Код,
	|	тзФ.name КАК Наименование,
	|	тзФ.phone КАК Телефон1,
	|	тзФ.raitingint КАК Рэйтинг,
	|	тзФ.status КАК Статус, "+?(ЕстьХэшьТелефона,"
	|	тзФ.phoneHash КАК phoneHash, "," ")+"
	|	тзФ.modified КАК ДатаМодификации
	|ПОМЕСТИТЬ Ф
	|ИЗ
	|	&тзФ КАК тзФ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ф.Код КАК Код,
	|	Ф.Наименование КАК Наименование,
	|	Ф.Телефон1 КАК Телефон1,
	|	Ф.Рэйтинг КАК Рэйтинг,
	|	Ф.Статус КАК Статус,  "+?(ЕстьХэшьТелефона,"
	|	Ф.phoneHash КАК phoneHash, "," ")+"
	|	Ф.ДатаМодификации КАК ДатаМодификации,
	|	Организаторы.Ссылка КАК СсылкаОрг,
	|	Участники.Рэйтинг КАК РэйтингУчастника,
	|	Участники.Статус КАК СтатусУчастника,
	|	Участники.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Итоговая
	|ИЗ
	|	Ф КАК Ф
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Участники КАК Участники
	|		ПО Ф.Код = Участники.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организаторы КАК Организаторы
	|		ПО Ф.Код = Организаторы.Код";
	Запрос.Параметры.Вставить("тзФ", тзИзФайла);
	Запрос.Выполнить();
	
	
	
	//Нет в базе  или изменились реквизиты или не заполнен участник в организаторе иди догрузить участника, организатора
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Ф.Код 				КАК Код,
	|	Ф.Наименование 		КАК Наименование,
	|	Ф.Телефон1 			КАК Телефон1,
	|	Ф.Рэйтинг 			КАК Рэйтинг,
	|	Ф.РэйтингУчастника  КАК РэйтингУчастника,
	|	Ф.СтатусУчастника	КАК СтатусУчастника,
	|	Ф.Статус 			КАК Статус,  "+?(ЕстьХэшьТелефона,"
	|	Ф.phoneHash			КАК phoneHash,	 "," ")+"
	|	Ф.ДатаМодификации 	КАК ДатаМодификации,
	|	Ф.Ссылка 			КАК Ссылка,
	|	Ф.СсылкаОрг 		КАК СсылкаОрг
	|ИЗ
	|	Итоговая КАК Ф
	|ГДЕ
	|	(				Ф.Ссылка ЕСТЬ NULL
	|			ИЛИ 	(НЕ Ф.СсылкаОрг ЕСТЬ NULL
	|				и 	 не Ф.Ссылка ЕСТЬ NULL
	|				и   (ВЫРАЗИТЬ(Ф.СсылкаОрг.Наименование КАК СТРОКА(120))) 	<> (ВЫРАЗИТЬ(Ф.Ссылка.Наименование КАК СТРОКА(120))))
	|			ИЛИ НЕ Ф.СсылкаОрг ЕСТЬ NULL
	|				И (Ф.СсылкаОрг.Участник = ЗНАЧЕНИЕ(Справочник.Участники.ПустаяСсылка)
	|					ИЛИ Ф.СсылкаОрг.Догрузить)
	|			ИЛИ НЕ Ф.Ссылка ЕСТЬ NULL
	|				И (		Ф.Ссылка.Догрузить   "+?(ЕстьХэшьТелефона,"
	|					ИЛИ (ВЫРАЗИТЬ(Ф.phoneHash КАК СТРОКА(150))) 	<> (ВЫРАЗИТЬ(Ф.Ссылка.ТелефонХэш КАК СТРОКА(150)))	 "," ")+"
	|					ИЛИ (ВЫРАЗИТЬ(Ф.Наименование КАК СТРОКА(120))) 	<> (ВЫРАЗИТЬ(Ф.Ссылка.Наименование КАК СТРОКА(120)))
	|					ИЛИ (ВЫРАЗИТЬ(Ф.Телефон1 КАК СТРОКА(50))) 		<> (ВЫРАЗИТЬ(Ф.Ссылка.Телефон1 КАК СТРОКА(50)))
	|					ИЛИ ((Ф.Рэйтинг - Ф.РэйтингУчастника)> 1)
	|					ИЛИ ((Ф.Рэйтинг - Ф.РэйтингУчастника) < -1)
	|					ИЛИ Ф.Статус 	<> 	Ф.СтатусУчастника))";

	результатНовыеУчастники	= Запрос.Выполнить();
	Выборка 	= результатНовыеУчастники.Выбрать();

	счетчик		 	= 0;
	ВсегоЭлементов	= Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		счетчик 			= счетчик + 1;
		КодУчастника 		= Выборка.Код;
		параметрыУчастника  = Новый Структура;
		параметрыУчастника.Вставить("Наименование", 	Выборка.Наименование);
		параметрыУчастника.Вставить("Телефон1", 		Выборка.Телефон1);
		Если ЕстьХэшьТелефона Тогда
			параметрыУчастника.Вставить("ТелефонХэш", 		Выборка.phoneHash);
		КонецЕсли;	
		параметрыУчастника.Вставить("Рэйтинг", 			Выборка.Рэйтинг);
		параметрыУчастника.Вставить("Статус", 			Выборка.Статус);
		параметрыУчастника.Вставить("ДатаМодификации", 	Выборка.ДатаМодификации);
		параметрыУчастника.Вставить("ДатаЗагрузки", 	ТекущаяДата());
		параметрыУчастника.Вставить("Догрузить", 		Ложь);
		Участник_Ссылка		= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(КодУчастника);
		Результат = СП_РаботаСоСправочниками.ОбновитьУчастника(Участник_Ссылка, параметрыУчастника);
		Если Результат = Неопределено Тогда
			Ошибок = Ошибок	+1;
		КонецЕсли;
		
		Если Выборка.Статус = 5 Или Выборка.Статус = 11 Или Выборка.Статус = 12 Или (ЗначениеЗаполнено(
			Выборка.СсылкаОрг) И Не ЗначениеЗаполнено(Выборка.СсылкаОрг.Участник)) Тогда

			Организатор_Ссылка = 	СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(КодУчастника);
			Результат = СП_РаботаСоСправочниками.ОбновитьОрганизатора(Организатор_Ссылка, параметрыУчастника);
			Если Результат = Неопределено Тогда
				Ошибок = Ошибок	+1;
			КонецЕсли;
			
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загрузка Участников: " + счетчик + " из " + ВсегоЭлементов, ,
			строка(счетчик), строка(ВсегоЭлементов));
		КонецЦикла;
	Конец = ТекущаяДата();	
	Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец, ВсегоЭлементов, Ошибок);	
	Возврат Результат;
		

КонецФункции



Функция ОбработатьЗагруженныеПокупки(тзИзФайла) Экспорт
	Начало = ТекущаяДата();
	Ошибок = 0;
	
	Если Не ЗначениеЗаполнено(тзИзФайла) Или тзИзФайла.количество() = 0 Тогда
		Конец = ТекущаяДата();	
		Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец, 0, 0);	
		Возврат Результат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тзФ.id КАК Код,
	|	тзФ.name КАК Наименование,
	|	тзФ.modified КАК ДатаМодификации,
	|	тзФ.city_id КАК КодГорода,
	|	тзФ.secureCode КАК secureCode,
	|	тзФ.orgid КАК КодОрга
	|ПОМЕСТИТЬ Ф
	|ИЗ
	|	&тзФ КАК тзФ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код,
	|	КодОрга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ф.Код КАК Код,
	|	Ф.Наименование КАК Наименование,
	|	Ф.КодОрга КАК КодОрга,
	|	Ф.ДатаМодификации КАК ДатаМодификации,
	|	Ф.КодГорода КАК КодГорода,
	|	Ф.secureCode КАК secureCode,
	|	Участники.Ссылка КАК СсылкаУч,
	|	Организаторы.Ссылка КАК СсылкаОрг,
	|	ГородаСП.Ссылка КАК СсылкаГород,
	|	Покупки.Ссылка КАК СсылкаПокупка
	|ПОМЕСТИТЬ Итоговая
	|ИЗ
	|	Ф КАК Ф
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Покупки КАК Покупки
	|		ПО Ф.Код = Покупки.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГородаСП КАК ГородаСП
	|		ПО ((ВЫРАЗИТЬ(Ф.КодГорода КАК СТРОКА(9))) = (ВЫРАЗИТЬ(ГородаСП.Код КАК СТРОКА(9))))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Участники КАК Участники
	|		ПО Ф.КодОрга = Участники.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организаторы КАК Организаторы
	|		ПО Ф.КодОрга = Организаторы.Код";
	Запрос.Параметры.Вставить("тзФ", тзИзФайла);
	Результат=Запрос.Выполнить();
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Ф.Код КАК Код,
	|	Ф.Наименование КАК Наименование,
	|	Ф.КодОрга КАК КодОрга,
	|	Ф.ДатаМодификации КАК ДатаМодификации,
	|	Ф.КодГорода КАК КодГорода,
	|	Ф.СсылкаГород КАК СсылкаГород,
	|	Ф.secureCode КАК secureCode,
	|	Ф.СсылкаУч КАК СсылкаУчастник,
	|	Ф.СсылкаОрг КАК СсылкаОрганизатор,
	|	Ф.СсылкаПокупка КАК СсылкаПокупка
	|ИЗ
	|	Итоговая КАК Ф
	|ГДЕ
	|	(	Ф.СсылкаПокупка ЕСТЬ NULL
	|			ИЛИ 
	|	 НЕ Ф.СсылкаПокупка ЕСТЬ NULL И
	|				 		(Ф.СсылкаПокупка.Догрузить
	|					ИЛИ (ВЫРАЗИТЬ(Ф.Наименование КАК СТРОКА(150))) 	<> Ф.СсылкаПокупка.Наименование
	|					ИЛИ Ф.СсылкаОрг.Код 							<> Ф.СсылкаПокупка.Владелец.Код
	|					ИЛИ Ф.СсылкаПокупка.Организатор 				=  ЗНАЧЕНИЕ(Справочник.Участники.ПустаяСсылка)
	|					ИЛИ (ВЫРАЗИТЬ(Ф.СсылкаГород.Код КАК СТРОКА(9))) <> (ВЫРАЗИТЬ(Ф.СсылкаПокупка.ГородСП.Код КАК СТРОКА(9)))
	|					ИЛИ Ф.СсылкаПокупка.ГородСП 					=  ЗНАЧЕНИЕ(Справочник.ГородаСП.ПустаяСсылка)
	|					ИЛИ (ВЫРАЗИТЬ(Ф.secureCode КАК СТРОКА(8))) 		<> Ф.СсылкаПокупка.secureCode))";

	результатИзменилисьПокупки	= Запрос.Выполнить();
	Выборка 					= результатИзменилисьПокупки.Выбрать();
	счетчик		 				= 0;
	ВсегоЭлементов				= Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		счетчик = счетчик + 1;
		Если ЗначениеЗаполнено(Выборка.СсылкаУчастник) Тогда
			Участник	= Выборка.СсылкаУчастник;
		Иначе
			Участник	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(Выборка.КодОрга);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Выборка.СсылкаОрганизатор) Тогда
			СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(Выборка.КодОрга);
		КонецЕсли;

		кодПокупки			= Выборка.Код;
		параметрыПокупки	= Новый Структура;
		параметрыПокупки.Вставить("Владелец", Участник);
		параметрыПокупки.Вставить("Наименование", Выборка.Наименование);
		параметрыПокупки.Вставить("Организатор", Участник);
		параметрыПокупки.Вставить("ГородСП", СП_РаботаСоСправочниками.ПолучитьГородПокупкиПо_Коду(Выборка.КодГорода, Выборка.СсылкаГород));
		параметрыПокупки.Вставить("Догрузить", Ложь);
		параметрыПокупки.Вставить("ДатаЗагрузки", ТекущаяДата());
		параметрыПокупки.Вставить("ДатаМодификации", Выборка.ДатаМодификации);
		параметрыПокупки.Вставить("secureCode", Выборка.secureCode);

		Покупка_Ссылка	= СП_РаботаСоСправочниками.ПолучитьПокупкуПо_Коду(кодПокупки);
		Результат = СП_РаботаСоСправочниками.ОбновитьПокупку(Покупка_Ссылка, параметрыПокупки);
		Если Результат = Неопределено Тогда
			Ошибок = Ошибок	+1;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загрузка Покупок: " + счетчик + " из " + ВсегоЭлементов, ,
			строка(счетчик), строка(ВсегоЭлементов));

	КонецЦикла;
	Конец = ТекущаяДата();	
	Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец, ВсегоЭлементов, Ошибок);	
	Возврат Результат;
КонецФункции

Функция  ОбработатьЗагруженныеКарты(тзИзФайла) Экспорт
	Начало = ТекущаяДата();
	Ошибок = 0;	
	Если Не ЗначениеЗаполнено(тзИзФайла) Или тзИзФайла.количество() = 0 Тогда
		Конец = ТекущаяДата();	
		Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец,  0, 0);	
		Возврат Результат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тзФ.id КАК Код,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(тзФ.status КАК СТРОКА(6))) = ""active""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусКартыУчастника.Зарегистрированна)
	|		КОГДА (ВЫРАЗИТЬ(тзФ.status КАК СТРОКА(8))) = ""rejected""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусКартыУчастника.Блокирована)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусКартыУчастника.НеЗарегистрирована)
	|	КОНЕЦ КАК Статус,
	|	тзФ.modified КАК ДатаМодификации,
	|	тзФ.uid КАК КодУч
	|ПОМЕСТИТЬ Ф
	|ИЗ
	|	&тзФ КАК тзФ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код,
	|	КодУч
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ф.Код КАК Код,
	|	Ф.Статус КАК Статус,
	|	Ф.ДатаМодификации КАК ДатаМодификации,
	|	Ф.КодУч КАК КодУч,
	|	Участники.Ссылка КАК СсылкаУчастник,
	|	КартыУчастников.Ссылка КАК СсылкаКарта
	|ПОМЕСТИТЬ Итоговая
	|ИЗ
	|	Ф КАК Ф
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартыУчастников КАК КартыУчастников
	|		ПО Ф.Код = КартыУчастников.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Участники КАК Участники
	|		ПО Ф.КодУч = Участники.Код";
	Запрос.Параметры.Вставить("тзФ", тзИзФайла);
	Результат=Запрос.Выполнить();

	Запрос.Текст=
	"ВЫБРАТЬ
	|	Ф.Код,
	|	Ф.Статус,
	|	Ф.ДатаМодификации,
	|	Ф.КодУч,
	|	Ф.СсылкаУчастник,
	|	Ф.СсылкаКарта
	|ИЗ
	|	Итоговая КАК Ф
	|		Где  Ф.СсылкаКарта есть NULL ";

	результатНетКарты=Запрос.Выполнить();
	Выборка = результатНетКарты.Выбрать();
	ВсегоЭлементовНетКарты			= Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		Результат = ДобавитьКартуИзСтрТЗ(Выборка);
		Если Результат = Неопределено Тогда
			Ошибок = Ошибок	+1;
		КонецЕсли;

	КонецЦикла;

	Запрос.Текст=
	"ВЫБРАТЬ
	|	Ф.Код,
	|	Ф.Статус,
	|	Ф.ДатаМодификации,
	|	Ф.КодУч,
	|	Ф.СсылкаУчастник,
	|	Ф.СсылкаКарта
	|ИЗ
	|	Итоговая КАК Ф
	|		Где  не Ф.СсылкаКарта есть null  и
	|		    (ф.Статус<>Ф.СсылкаКарта.Статус или
	|		     ф.КодУч<>Ф.СсылкаКарта.Владелец.Код)";

	результатИзменилисьКарты	= Запрос.Выполнить();
	Выборка 					= результатИзменилисьКарты.Выбрать();
	счетчик		 				= 0;
	ВсегоЭлементов				= Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		счетчик = счетчик + 1;
		Результат =ДобавитьКартуИзСтрТЗ(Выборка);
		Если Результат = Неопределено Тогда
			Ошибок = Ошибок	+1;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загрузка Карт участников: " + счетчик + " из "
			+ ВсегоЭлементов, , строка(счетчик), строка(ВсегоЭлементов));
	КонецЦикла;
	Конец = ТекущаяДата();	
	Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец, ВсегоЭлементов+ ВсегоЭлементовНетКарты, Ошибок);	
	Возврат Результат;

КонецФункции


Функция ДобавитьКартуИзСтрТЗ(стр) 
	////Участник
	Если ЗначениеЗаполнено(стр.СсылкаУчастник) Тогда
		Участник	= стр.СсылкаУчастник;
	Иначе
		Участник	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(стр.КодУч);
	КонецЕсли;

	Если ЗначениеЗаполнено(стр.СсылкаКарта) Тогда
		Карта		= стр.СсылкаКарта.ПолучитьОбъект();
	Иначе
		Карта		= Справочники.КартыУчастников.СоздатьЭлемент();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Карта, стр);
	Карта.Владелец		= Участник;
	Карта.Участник		= Участник;
	Карта.Догрузить		= Ложь;
	Карта.ДатаЗагрузки	= ТекущаяДата();

	Попытка
		Карта.Записать();
		Возврат Карта.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("" + ОписаниеОшибки());
	КонецПопытки;
	Возврат неопределено;
КонецФункции
