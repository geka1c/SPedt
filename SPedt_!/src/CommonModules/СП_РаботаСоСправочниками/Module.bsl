Функция 	ПолучитьМегаордерПоШК(ШК, Параметры = Неопределено) Экспорт
	
	мегаордер_Ссылка = справочники.Мегаордера.НайтиПоКоду(ШК);
	
	Если ЗначениеЗаполнено(мегаордер_Ссылка) Тогда
		Возврат мегаордер_Ссылка;
	КонецЕсли;
	
	
	мегаордер_Объект					= Справочники.Мегаордера.СоздатьЭлемент();
	мегаордер_Объект.Код				= ШК;
	мегаордер_Объект.ДатаСоздания		= ТекущаяДата();

	Если ЗначениеЗаполнено(Параметры) Тогда
		ЗаполнитьЗначенияСвойств(мегаордер_Объект, Параметры);
	КонецЕсли;	
	
	ЗаполнитьТипМегаордера(мегаордер_Объект, ШК);
	Попытка
	    мегаордер_Объект.Записать();
		Возврат мегаордер_Объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При записи ШК : "+ШК+", возникла ошибка: "+Символы.ПС+ОписаниеОшибки());
	    Возврат Неопределено;	
	КонецПопытки;	
	
КонецФункции

Процедура ОбновитьМегаордерПосылки(Мегаордер_Ссылка, Посылка) Экспорт
	параметрыМегаордера = новый Структура;
	параметрыМегаордера.Вставить("Покупка", 	Посылка);
	параметрыМегаордера.Вставить("Посылка", 	Посылка);
	параметрыМегаордера.Вставить("Участник", 	Посылка.Участник);
	Если ЗначениеЗаполнено(Посылка.Организатор) Тогда
		параметрыМегаордера.Вставить("Организатор", Посылка.Организатор);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Посылка.ПунктВыдачи) Тогда
		параметрыМегаордера.Вставить("ПунктВыдачи", Посылка.ПунктВыдачи);
	КонецЕсли;	
	ОбновитьМегаордер(Мегаордер_Ссылка, параметрыМегаордера);
КонецПроцедуры	

Функция 	ОбновитьМегаордер(Мегаордер_Ссылка, Параметры = неопределено) Экспорт
//Маршрут	
	ИзмененныеПараметры = ПолучитьИзмененныеРеквизиты(мегаордер_Ссылка, Параметры);
	Если ИзмененныеПараметры.Количество() = 0 Тогда 
			Возврат мегаордер_Ссылка;
	КонецЕсли;
	
	мегаордер_Объект		= мегаордер_Ссылка.ПолучитьОбъект();
	РеквизитыМегаордера		= мегаордер_Объект.метаданные().Реквизиты;
	Если  ТипЗнч(Параметры) = Тип("Структура") Тогда 	
		Для каждого элем из ИзмененныеПараметры Цикл
			Если 	РеквизитыМегаордера.Найти(элем.Ключ)	= Неопределено и
					Элем.Ключ 								<> "Маршрут"   и
					Элем.Ключ 								<> "Состав"			Тогда Продолжить; КонецЕсли;
			Если Элем.Ключ = "Маршрут" Тогда
				коллекция_Маршруты	=	элем.Значение;
				количество_строк	= мегаордер_Объект.Маршрут.Количество();	
				Для каждого стр из коллекция_Маршруты Цикл
					индекс_строки	= число(стр.ordinalNumber)-1;
					Если индекс_строки < количество_строк Тогда
						колено		= мегаордер_Объект.Маршрут[индекс_строки];
					Иначе	
						колено		= мегаордер_Объект.Маршрут.Добавить();
					КонецЕсли;	
					колено.ДатаДоставкиПлан 	= СтоСПОбмен_Общий.ДатаИзСтроки(стр.estimate_delivery_date);
					колено.ДатаДоставкиФакт 	= СтоСПОбмен_Общий.ДатаИзСтроки(стр.actual_delivery_date);
					колено.Комментарий			= стр.delivery_description;
					колено.ТрэкНомер			= стр.delivery_number;
					колено.ТранспортнаяКомпания	= аСПОбменССайтомСервер.НайтиКонтрагентаПоНаименованию(стр.delivery_service_name);

				КонецЦикла;
			ИначеЕсли Элем.Ключ = "Состав" Тогда
				коллекция_Состав	=	элем.Значение;
				мегаордер_Объект.Состав.Загрузить(коллекция_Состав);
				
			Иначе	
				мегаордер_Объект[элем.Ключ] 	= элем.Значение;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьТипМегаордера(мегаордер_Объект, мегаордер_Объект.Код);

	
	Попытка
	    мегаордер_Объект.Записать();
		Возврат мегаордер_Объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать Штрих код : "+мегаордер_Ссылка+". Ошибка: "+Символы.ПС+ОписаниеОшибки());
	КонецПопытки;	
	Возврат неопределено;
КонецФункции

функция		ПолучитьСупергруппуПоНакладной(Накладная) Экспорт
		Если ТипЗнч(Накладная) = Тип("ДокументСсылка.ВыдачаТранзита") Тогда
			префиксДокумента = "0";
		Иначе
			префиксДокумента = "1";
		КонецЕсли;	
		
		ШК_Супергруппы			= 	"67" + 	
									префиксДокумента +
									Формат(Число(Прав(Накладная.Номер,(СтрДлина(Накладная.Номер)-3))),"ЧЦ=8; ЧН=0; ЧВН=; ЧГ=0") + 
							 		Формат(Год(Накладная.Дата),"ЧГ=0") +
							 		Накладная.ТочкаОтправитель.Код;

		помеченныеСтроки		= Накладная.Покупки.НайтиСтроки(Новый Структура("Подбор",Истина));
		КоличествоСупергруппы 	= помеченныеСтроки.Количество();
		
									
		ПараметрыСупергрупппы 	= Новый  Структура();							 
		ПараметрыСупергрупппы.Вставить("Покупка", 			Накладная.Ссылка);
		ПараметрыСупергрупппы.Вставить("Накладная", 		Накладная.Ссылка);
		ПараметрыСупергрупппы.Вставить("ПерваяТочка", Накладная.ТочкаОтправитель);
		ПараметрыСупергрупппы.Вставить("количество", 		КоличествоСупергруппы);
		ПараметрыСупергрупппы.Вставить("ПунктВыдачи",		Накладная.ТочкаНазначения);
		ПараметрыСупергрупппы.Вставить("типМегаордера",		Перечисления.типМегаордера.Супергруппа);
		ПараметрыСупергрупппы.Вставить("ДатаСоздания",		ТекущаяДата());
		
		Супергруппа 			= СП_Штрихкоды.ПолучитьДанныеПоШК(ШК_Супергруппы).ШК;
		СП_РаботаСоСправочниками.ОбновитьМегаордер(Супергруппа, ПараметрыСупергрупппы);
		
		возврат Супергруппа;
	
	
КонецФункции	

Функция 	ПолучитьСобранныйЗаказПо_Коду(КодПараметр) Экспорт
	
	Если ТипЗнч(КодПараметр) = Тип("СправочникСсылка.СобранныеЗаказы") Тогда
		заказ_Ссылка	= КодПараметр;
	Иначе	
		заказ_Код		= Число(КодПараметр);
		заказ_Ссылка 	= справочники.СобранныеЗаказы.НайтиПоКоду(заказ_Код);
	КонецЕсли;	
	Если ЗначениеЗаполнено(заказ_Ссылка)	Тогда
		Возврат заказ_Ссылка;
	Иначе	
		заказ_объект				= Справочники.СобранныеЗаказы.СоздатьЭлемент();
		заказ_объект.Наименование 	= "Заказ КД (" + заказ_Код + ")";
		заказ_объект.Код			= заказ_Код;
	КонецЕсли; 	

	Если не ЗначениеЗаполнено(заказ_объект.ШК) Тогда
		заказ_объект.ШК	= СП_РаботаСоСправочниками.ПолучитьМегаордерПоШК("45"+Формат(заказ_объект.Код,"ЧЦ=8; ЧН=0; ЧВН=; ЧГ=0;"));
	КонецЕсли;	
	Попытка
		заказ_объект.Записать();
		Возврат заказ_объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать Заказ курьерской доставки с кодом: " + заказ_Код + ". Ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;	
	КонецПопытки;
	
КонецФункции


Процедура 	ОбновитьСобранныйЗаказ(заказ_Ссылка, ПараметрыЗаказа) Экспорт
		                 
					 
    ИзмененныеПараметры 	= ПолучитьИзмененныеРеквизиты(заказ_Ссылка, ПараметрыЗаказа);
	Если ИзмененныеПараметры.Количество() = 0 Тогда Возврат  КонецЕсли;
		
	заказ_объект			= заказ_Ссылка.ПолучитьОбъект();
	РеквизитыЗаказа			= заказ_объект.метаданные().Реквизиты;
	Для каждого элем из ИзмененныеПараметры Цикл
		Если РеквизитыЗаказа.Найти(элем.Ключ)	= Неопределено 		Тогда Продолжить; КонецЕсли;
		заказ_объект[элем.Ключ] 	= элем.Значение;	
	КонецЦикла;
	
	Попытка
		заказ_объект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать Заказ курьерской доставки с кодом: " + заказ_Ссылка.Код + ". Ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры


Функция 	ПолучитьПосылкуПо_Коду(КодПараметр,  Параметры = Неопределено) Экспорт
	
	Если ТипЗнч(КодПараметр) = Тип("СправочникСсылка.Посылки") Тогда
		посылка_Ссылка	= КодПараметр;
	Иначе	
		посылка_Код		= Формат(Число(КодПараметр),"ЧЦ=10; ЧВН=; ЧГ=0");
		посылка_Ссылка 	= справочники.Посылки.НайтиПоКоду(посылка_Код);
	КонецЕсли;	
	Если ЗначениеЗаполнено(посылка_Ссылка)	Тогда
		Возврат посылка_Ссылка;
	Иначе	
		посылка_объект				= Справочники.Посылки.СоздатьЭлемент();
		посылка_объект.Наименование = "Посылка (" + посылка_Код + ")";
		посылка_объект.Код			= посылка_Код;
		Если ЗначениеЗаполнено(Параметры) Тогда
			ЗаполнитьЗначенияСвойств(посылка_объект, Параметры);
		КонецЕсли;		
		посылка_объект.Догрузить	= Истина;
	КонецЕсли; 	
	Попытка
		посылка_объект.Записать();
		Возврат посылка_объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать посылку с кодом: " + посылка_Код + ". Ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;	
	КонецПопытки;
	
КонецФункции



Функция 	ПолучитьОборотнуюТаруПо_Коду(КодПараметр) Экспорт
	
	ОТ_Код		= Формат(Число(КодПараметр),"ЧЦ=10; ЧГ=0");
	ОТ_Ссылка 	= справочники.ОборотнаяТара.НайтиПоКоду(ОТ_Код);

	Если ЗначениеЗаполнено(ОТ_Ссылка)	Тогда
		Возврат ОТ_Ссылка;
	КонецЕсли;
	
	ОТ_объект				= Справочники.ОборотнаяТара.СоздатьЭлемент();
	ОТ_объект.Наименование = "тара (" + ОТ_Код + ")";
	ОТ_объект.Код			= ОТ_Код;
		//Если ЗначениеЗаполнено(Параметры) Тогда
		//	ЗаполнитьЗначенияСвойств(посылка_объект, Параметры);
		//КонецЕсли;		

	Попытка
		ОТ_объект.Записать();
		Возврат ОТ_объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать элемент справочника ""оборотная тара"" с кодом: " + ОТ_Код + ". Ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;	
	КонецПопытки;
	
КонецФункции





Функция ОбновитьПосылку(Посылка_Ссылка,ПараметрыПосылки) Экспорт
		                 
					 
    ИзмененныеПараметры 	= ПолучитьИзмененныеРеквизиты(Посылка_Ссылка, ПараметрыПосылки);
	Если ИзмененныеПараметры.Количество() = 0 Тогда Возврат Посылка_Ссылка;  КонецЕсли;
		
	посылка_объект			= Посылка_Ссылка.ПолучитьОбъект();
	РеквизитыПосылки		= посылка_объект.метаданные().Реквизиты;
	Для каждого элем из ИзмененныеПараметры Цикл
		Если РеквизитыПосылки.Найти(элем.Ключ)	= Неопределено и
				Элем.Ключ 							<> "Состав"		Тогда Продолжить; КонецЕсли;
		Если Элем.Ключ = "Состав" Тогда
			коллекция_Заказов 	= Элем.Значение;
			посылка_объект.Состав.Очистить();
			Для каждого заказ из коллекция_Заказов Цикл 
				стрСостав			 	= посылка_объект.Состав.Добавить();
				стрСостав.КодЗаказа 	= заказ.orderId;	
				стрСостав.Участник  	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(заказ.uid);
				стрСостав.Покупка 	 	= СП_РаботаСоСправочниками.ПолучитьЗаказПоXDTO(заказ,"orderType");
				
				стрСостав.ШК			= СП_Штрихкоды.ПолучитьМегаордер(стрСостав.Покупка,стрСостав.Участник,посылка_объект.ПунктВыдачи);
			КонецЦикла;	
			
		Иначе	
			посылка_объект[элем.Ключ] 	= элем.Значение;	
		КонецЕсли;
	КонецЦикла;
	
	//Наименование и догрузить меняется в модуле объекта ПередЗаписью
	
	//Если посылка_объект.Состав.Количество()	= 0 Тогда
	//	НаименованиеПосылки		= ?(ЗначениеЗаполнено(посылка_объект.Покупка),	посылка_объект.Покупка.Наименование,"");
	//Иначе	
	//	стрСостав					= посылка_объект.Состав[0];
	//	НаименованиеПосылки			= ?(ЗначениеЗаполнено(стрСостав.Покупка),		стрСостав.Покупка.Наименование,		"");
	//	посылка_объект.Участник 	= стрСостав.Участник;
	//	посылка_объект.Покупка  	= стрСостав.Покупка;
	//	посылка_объект.Догрузить	= стрСостав.Покупка.Догрузить;
	//	Если ТипЗнч(стрСостав.Покупка)	<>	Тип("СправочникСсылка.Пристрой") 	Тогда 
	//		посылка_объект.Организатор 	= СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(?(ТипЗнч(стрСостав.Покупка)=Тип("СправочникСсылка.Покупки"),стрСостав.Покупка.Владелец.Код,стрСостав.Покупка.Организатор.Код));
	//	Иначе	
	//		НаименованиеПосылки			=	НаименованиеПосылки + " пристрой";
	//	Конецесли;
	//КонецЕсли;	
	//посылка_объект.Наименование = "П ("+Формат(посылка_объект.Код,"ЧГ=0")+") "+ НаименованиеПосылки;
	посылка_объект.ДатаЗагрузки = ТекущаяДата();
	Попытка
		посылка_объект.Записать();
		Возврат посылка_объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать посылку с кодом: " + Посылка_Ссылка.Код + ". Ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	Возврат Неопределено;
КонецФункции


Функция 	ПолучитьКоробкуПо_Коду(КодПараметр,ВидСтикера = Неопределено) Экспорт
	Если не ЗначениеЗаполнено(КодПараметр) Тогда Возврат Неопределено; КонецЕсли;
	Если ТипЗнч(КодПараметр) = Тип("СправочникСсылка.Коробки") Тогда
		коробка_Ссылка	= КодПараметр;
	Иначе	
		Если СтрНайти(КодПараметр,"_")>0 Тогда
			коробка_Код		= КодПараметр;
		Иначе	
			коробка_Код		= Формат(Число(КодПараметр),"ЧЦ=8; ЧВН=; ЧГ=0");
		КонецЕсли;	
		//Попытка		
		//	коробка_Код		= Формат(Число(КодПараметр),"ЧЦ=8; ЧВН=; ЧГ=0");
		//Исключение
		//	коробка_Код		= КодПараметр;
		//КонецПопытки;		
		коробка_Ссылка 	= справочники.Коробки.НайтиПоКоду(коробка_Код);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(коробка_Ссылка) Тогда
		Возврат коробка_Ссылка;
	Иначе	
		коробка_объект				= Справочники.Коробки.СоздатьЭлемент();
		Если ВидСтикера<>  Неопределено Тогда
			коробка_объект.ВидСтикера   = ВидСтикера;
		КонецЕсли;
		коробка_объект.Наименование = "Коробка (" + коробка_Код + ") будет догружен";
		коробка_объект.Код			= коробка_Код;
		коробка_объект.Догрузить	= Истина;
	КонецЕсли;
	Попытка
		коробка_объект.Записать();
		Возврат коробка_объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать Коробку с кодом: " + Коробка_Код + ". Ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;	
	КонецПопытки;
КонецФункции

Функция 	ОбновитьКоробку(Коробка_Ссылка,	ПараметрыКоробки) Экспорт
	ИзмененныеПараметры = ПолучитьИзмененныеРеквизиты(Коробка_Ссылка, ПараметрыКоробки);
	Если ИзмененныеПараметры.Количество() = 0 Тогда Возврат Коробка_Ссылка  КонецЕсли;
	
	коробка_объект				= коробка_Ссылка.ПолучитьОбъект();
	РеквизитыКоробки			= коробка_объект.метаданные().Реквизиты;
	
	
	Для каждого элем из ИзмененныеПараметры Цикл
		Если 	РеквизитыКоробки.Найти(элем.Ключ)	= Неопределено и
				Элем.Ключ 							<> "Состав"		Тогда Продолжить; КонецЕсли;
		Если Элем.Ключ = "Состав" Тогда
			тзПометокИсключить	= коробка_объект.Состав.Выгрузить(новый Структура("Исключить",	Истина));
			тзПометокУдалить	= коробка_объект.Состав.Выгрузить(новый Структура("Удалить",	Истина));
			
			НеобходимоОбработатьПосылки = Ложь;                // Запись в РС Посылки заказа
			Если ТипЗнч(Элем.Значение) = Тип("ОбъектXDTO") Тогда                //Группы доставки
				коллекция_Заказов 	= Элем.Значение.order;
				названиеТипаЗаказа	= "orderType";
				НеобходимоОбработатьПосылки = Истина;
			ИначеЕсли ТипЗнч(Элем.Значение) = Тип("СписокXDTO") Тогда			// Коробки (Групповые стикеры)
				коллекция_Заказов 	= Элем.Значение;
				названиеТипаЗаказа	= "type";	
			ИначеЕсли ТипЗнч(Элем.Значение) = Тип("ТаблицаЗначений") Тогда			// Коробки (Групповые стикеры)
				коллекция_Заказов 	= Элем.Значение;
				названиеТипаЗаказа	= "Ссылка";	
			ИначеЕсли ТипЗнч(Элем.Значение) = Тип("СписокЗначений") Тогда			// Коробки (Групповые стикеры)
				коллекция_Заказов 	= Элем.Значение;
				названиеТипаЗаказа	= "СсылкаНовая";	
				
			Иначе	
				коллекция_Заказов = Элем.Значение.orders;
				названиеТипаЗаказа	= "type";	
			Конецесли;	
			
			коробка_объект.Количество	= 0;
			коробка_объект.Состав.Очистить();
			Для каждого заказ из коллекция_Заказов Цикл 
				
				стрСостав			= коробка_объект.Состав.Добавить();
				Если названиеТипаЗаказа = "Ссылка" Тогда
					стрСостав.Покупка	= заказ.Покупка;
					стрСостав.Участник	= заказ.Участник;
				ИначеЕсли названиеТипаЗаказа = "СсылкаНовая" Тогда
					ЗаполнитьЗначенияСвойств(стрСостав, Заказ.Значение);
				Иначе	
					стрСостав.Покупка	= СП_РаботаСоСправочниками.ПолучитьЗаказПоXDTO(заказ,названиеТипаЗаказа);
					стрСостав.Участник	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(заказ.uid);
					стрСостав.КодЗаказа = заказ.orderId;
					стрСостав.Цена		= ?(заказ.payment_sum = Неопределено, 0,Число(заказ.payment_sum));
				КонецЕсли;				
				Если 	НеобходимоОбработатьПосылки и 
					Заказ.packages<>Неопределено  	Тогда
					
					НаборЗаписей 	= РегистрыСведений.СтоСП_ПосылкиЗаказа.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Участник.Установить(стрСостав.Участник);
					НаборЗаписей.Отбор.Покупка.Установить(стрСостав.Покупка);
					Для каждого посылка из Заказ.packages.package Цикл	
						НоваяЗапись 			= НаборЗаписей.Добавить();		
						НоваяЗапись.Участник 	= стрСостав.Участник;
						НоваяЗапись.Покупка 	= стрСостав.Покупка;
						НоваяЗапись.Посылка		= СП_РаботаСоСправочниками.ПолучитьПосылкуПо_Коду(посылка);
						НоваяЗапись.КодЗаказа	= стрСостав.КодЗаказа;
					КонецЦикла;	
					НаборЗаписей.Записать();
					
				КонецЕсли;
				структураОтбора	= новый Структура("Покупка, Участник",стрСостав.Покупка, стрСостав.Участник);
				Если тзПометокИсключить.НайтиСтроки(структураОтбора).Количество()>0 Тогда
					стрСостав.Исключить			= истина;
				КонецЕсли;
				Если тзПометокУдалить.НайтиСтроки(структураОтбора).Количество()>0 Тогда
					стрСостав.Удалить			= истина;
				КонецЕсли;
				Если не стрСостав.Исключить и не стрСостав.Удалить Тогда
					коробка_объект.Количество	= коробка_объект.Количество + 1;
				КонецЕсли	
			КонецЦикла;
		Иначе	
			коробка_объект[элем.Ключ] 	= элем.Значение;	
		КонецЕсли;		
	КонецЦикла;
	если коробка_объект.ВидСтикера 		= Перечисления.ВидыСтикеров.ГС Тогда
		ПрефиксНаименования	= "Коробка";
		наименование_Код	= Коробка_Ссылка.Код;
	Иначеесли коробка_объект.ВидСтикера = Перечисления.ВидыСтикеров.ГруппаДоставки Тогда
		ПрефиксНаименования	= "Группа ";
		наименование_Код	= СтрЗаменить(Коробка_Ссылка.Код, "гд_", "");
	Иначеесли коробка_объект.ВидСтикера = Перечисления.ВидыСтикеров.ЗаказТК Тогда
		ПрефиксНаименования	= "Одиночный ";
		наименование_Код	= Коробка_Ссылка.Код;
	Иначе	
		ПрефиксНаименования	= "Не определено";
	КонецЕсли;
	Если ПараметрыКоробки.Свойство("Наименование") Тогда
		коробка_объект.Наименование	= ПараметрыКоробки.Наименование;
	Иначе	
		коробка_объект.Наименование	= ПрефиксНаименования + "(" + наименование_Код+ ")" + ?(коробка_объект.Догрузить," будет догружен","");
	КонецЕсли;
	Попытка
		коробка_объект.Записать();
		Возврат коробка_объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать Коробку с кодом: " + Коробка_Ссылка.Код + ". Ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	Возврат неопределено;
КонецФункции


Функция 	ПолучитьУчастникаПо_Коду(КодПараметр, Параметры = неопределено, ДогружатьПриСоздании = Ложь) Экспорт
	Если не ЗначениеЗаполнено(КодПараметр) Тогда возврат неопределено; КонецЕсли;
	Если ТипЗнч(КодПараметр) 		= Тип("Число") Тогда
		КодУчастника = КодПараметр;
	ИначеЕсли ТипЗнч(КодПараметр) 	= Тип("Строка") Тогда
		КодУчастника = Число(СтрЗаменить(КодПараметр," ",""));
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неожиданный код участника :" + КодПараметр);
	    Возврат Неопределено;
	Конецесли;	
	
	участник_ссылка	= Справочники.Участники.НайтиПоКоду(КодУчастника);	
	Если ЗначениеЗаполнено(участник_ссылка) Тогда
		НовыеЗначения = Ложь;
		Если  ЗначениеЗаполнено(Параметры) Тогда 
			Для Каждого элем из Параметры Цикл
				Если участник_ссылка[элем.Ключ] <> элем.Значение Тогда
					НовыеЗначения = Истина;
					Прервать
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НовыеЗначения Тогда
			участник_Объект = участник_ссылка.ПолучитьОбъект();
		Иначе	
			Возврат участник_ссылка;
		КонецЕсли	
	Иначе	
		участник_Объект					= Справочники.Участники.СоздатьЭлемент();
		участник_Объект.Догрузить		= Истина;
		Если ДогружатьПриСоздании Тогда
			Параметры = СтоСПОбмен_Участники.ПолучитьРеквизитыУчастника(КодУчастника)	
		КонецЕсли;	
	КонецЕсли;	
	
	участник_Объект.Код				= КодУчастника;
	участник_Объект.Наименование	= "Участник ("+КодУчастника+")";

	Если  ЗначениеЗаполнено(Параметры) Тогда 
		Для Каждого элем из Параметры Цикл
			участник_Объект[элем.Ключ] = элем.Значение;
		КонецЦикла;
		участник_Объект.Догрузить		= Ложь;
	КонецЕсли;	
		
	Попытка
	    участник_Объект.Записать();
		Возврат участник_Объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать участника с кодом: "+КодУчастника+". Ошибка: "+Символы.ПС+ОписаниеОшибки());
	    Возврат Неопределено;	
	КонецПопытки;	
КонецФункции

Функция 	ОбновитьУчастника(Участник_Ссылка , Параметры = Неопределено) Экспорт
	Если не ЗначениеЗаполнено(участник_ссылка) Тогда Возврат Неопределено КонецЕсли;
	участник_Объект					= участник_ссылка.ПолучитьОбъект();
	РеквизитыУчастника				= участник_Объект.метаданные().Реквизиты;
	
	Для каждого элем из Параметры Цикл
		Если 	РеквизитыУчастника.Найти(элем.Ключ)	= Неопределено и  
				элем.Ключ 							<> "Наименование" Тогда Продолжить; КонецЕсли;
		участник_Объект[элем.Ключ] = элем.Значение;
	КонецЦикла;
	
	Попытка
	    участник_Объект.Записать();
		Возврат участник_Объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось обновить реуквизиты Участника : "+Участник_Ссылка+". Ошибка: "+Символы.ПС+ОписаниеОшибки());
	    Возврат Неопределено;	
	КонецПопытки;
КонецФункции

Функция 	ОбновитьУчастника_Регистр(Участник_Ссылка , Параметры = Неопределено) Экспорт
	нз = РегистрыСведений.ДанныеУчастников.СоздатьНаборЗаписей();
	нз.Отбор.Участник.Значение =  Участник_Ссылка;
	нз.Отбор.Участник.Использование = Истина;
	новаяСтрока = нз.Добавить();
	новаяСтрока.Участник = Участник_Ссылка;
	ЗаполнитьЗначенияСвойств(новаяСтрока,Параметры);
	нз.Записать();
КонецФункции




Функция 	ПолучитьПокупкуПо_Коду(КодПараметр) Экспорт
	Если ТипЗнч(КодПараметр)		= Тип("Число") Тогда
		КодПокупки = КодПараметр;
	ИначеЕсли ТипЗнч(КодПараметр)	= Тип("Строка") Тогда
		КодПокупки = Число(СтрЗаменить(КодПараметр," ",""));
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ножиданный код покупки :" + КодПараметр);
	    Возврат Неопределено;
	Конецесли;		
	
	покупка_Ссылка = справочники.Покупки.НайтиПоКоду(КодПокупки);
	Если ЗначениеЗаполнено(покупка_Ссылка)	Тогда
		Возврат покупка_Ссылка;
	Иначе	
		покупка_Объект					= Справочники.Покупки.СоздатьЭлемент();
		покупка_Объект.Код				= КодПокупки;
		покупка_Объект.Наименование		= "Покупка ("+КодПокупки+")";
		покупка_Объект.Владелец			= Справочники.Участники.нулевой;
		покупка_Объект.Догрузить		= Истина;
	КонецЕсли;
	
	Попытка
	    покупка_Объект.Записать();
		Возврат покупка_Объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать Покупку с кодом: "+КодПокупки+". Ошибка: "+Символы.ПС+ОписаниеОшибки());
	    Возврат Неопределено;	
	КонецПопытки;	
КонецФункции

Функция 	ОбновитьПокупку(Покупка_Ссылка, Параметры = Неопределено) Экспорт
	покупка_Объект					= покупка_Ссылка.ПолучитьОбъект();
	РеквизитыПокупки				= покупка_Объект.метаданные().Реквизиты;
	
	Для каждого элем из Параметры Цикл
		Если 	РеквизитыПокупки.Найти(элем.Ключ)	=   Неопределено   и  
				элем.Ключ 							<> "Наименование"  и
				элем.Ключ 							<> "Владелец"			Тогда Продолжить; КонецЕсли;
		покупка_Объект[элем.Ключ] 	= элем.Значение;
	КонецЦикла;
	
	Попытка
	    покупка_Объект.Записать();
		Возврат покупка_Объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось обновить реквизиты Покупки с кодом: "+Покупка_Ссылка+".Ошибка: "+Символы.ПС+ОписаниеОшибки());
	    Возврат Неопределено;	
	КонецПопытки;	
КонецФункции


Функция 	ПолучитьЗаказПоXDTO(обXDTO,	ИмяType="type") Экспорт
	типЗаказа=обXDTO[ИмяType];
	Если 		типЗаказа	="sp" или
				типЗаказа	="purchase"	Тогда
		результат	= ПолучитьПокупкуПо_Коду(обXDTO.pid);
	ИначеЕсли 	типЗаказа	= "shop_order" или
				типЗаказа	= "order" или
				типЗаказа	= "shop" Тогда
		результат	= ПолучитьЗаказПо_Коду(обXDTO.orderId);
	ИначеЕсли 	типЗаказа	= "bulletin" Тогда
		результат	= ПолучитьПристройПо_Коду(обXDTO.orderId);
	ИначеЕсли 	типЗаказа	= "external" Тогда
		результат	= ПолучитьЗаявкуНаДоставкуПо_Коду(обXDTO.orderId);
	ИначеЕсли 	типЗаказа	= "package" Тогда	
        Попытка
		    результат=ПолучитьПосылкуПо_Коду(обXDTO.packageId);
		Исключение
			результат=ПолучитьПосылкуПо_Коду(обXDTO.orderId);		
		КонецПопытки;
	КонецЕсли;
	Возврат Результат;
КонецФункции


Функция 	ПолучитьКартуУчастникаПо_Коду(КодКартыПараметр) Экспорт
	КодКарты 				= Число(КодКартыПараметр);
	картаУчастника_Ссылка 	= справочники.КартыУчастников.НайтиПоКоду(КодКарты);
	Если не ЗначениеЗаполнено(картаУчастника_Ссылка) Тогда
		карта_Объект					= Справочники.КартыУчастников.СоздатьЭлемент();
		карта_Объект.Код				= КодКарты;
		карта_Объект.Статус 			= Перечисления.СтатусКартыУчастника.НеЗарегистрирована;		
		карта_Объект.Владелец			= Справочники.Участники.нулевой;
		карта_Объект.Догрузить			= Истина;
		Попытка
			карта_Объект.Записать();
			картаУчастника_Ссылка	=	карта_Объект.Ссылка;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать Карту участника с кодом: "+КодКарты+". Ошибка: "+Символы.ПС+ОписаниеОшибки());
			Возврат Неопределено;	
		КонецПопытки;		
	КонецЕсли;
	Возврат картаУчастника_Ссылка;
КонецФункции


Процедура 	ОбновитьКартуУчастника(Карта_Ссылка, Параметры = Неопределено) Экспорт
    ИзмененныеПараметры 	= ПолучитьИзмененныеРеквизиты(Карта_Ссылка, Параметры);
	Если ИзмененныеПараметры.Количество() = 0 Тогда Возврат  КонецЕсли;

	Карта_Объект					= Карта_Ссылка.ПолучитьОбъект();
	РеквизитыКарты					= Карта_Объект.метаданные().Реквизиты;
	
	Для каждого элем из ИзмененныеПараметры Цикл
		Если 	РеквизитыКарты.Найти(элем.Ключ)	= Неопределено и элем.Ключ <> "Владелец" Тогда Продолжить; КонецЕсли;
		Карта_Объект[элем.Ключ] 	= элем.Значение;
	КонецЦикла;
	
	Попытка
	    Карта_Объект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось обновить реквизиты Карты участника с кодом: "+Карта_Ссылка+".Ошибка: "+Символы.ПС+ОписаниеОшибки());
	КонецПопытки;	
КонецПроцедуры






/////////////////

// ПолучитьЭлемент справочника Покупка , Заказ, Коробка  по переданной структуре
//
// Параметры:
//   Парам - Структура - поля:
//   ТипПокупки - Строка -"sp","order", "purchase", "shop_order"
//   ПокупкаКод - Строка -Код Покупки
//	Если  Коробка
//	 Количество - Строка, Количество в Коробке
//   УчастникКод - Строка, Код учатсника
//   ТочкаПолучательКод - Строка Код точки
// Возвращаемое значение: - СправочникСссылка.Покупки, СправочникСссылка.Заказы, СправочникСссылка.Коробки  
Функция ПолучитьЗаказПоСтруктуре(Парам) Экспорт
	
	покупка=Неопределено;
	Если Парам.ТипПокупки="sp" или Парам.ТипПокупки="purchase"  Тогда
		покупка	= СП_РаботаСоСправочниками.ПолучитьПокупкуПо_Коду(Парам.ПокупкаКод);
	ИначеЕсли Парам.ТипПокупки="order" или Парам.ТипПокупки="shop_order" Тогда	
		покупка	= СП_РаботаСоСправочниками.ПолучитьЗаказПо_Коду(Парам.ПокупкаКод);
	ИначеЕсли Парам.ТипПокупки="package" Тогда	    
		покупка	= СП_РаботаСоСправочниками.ПолучитьПосылкуПо_Коду(Парам.ПокупкаКод);
	ИначеЕсли Парам.ТипПокупки="supergroup" Тогда	
		ДанныеШК  	= СП_Штрихкоды.ПолучитьДанныеПоШК(Парам.ПокупкаКод);
		покупка		= ДанныеШК.Супергруппа;
		
	Иначе
		ПараметрыКоробки	= Новый Структура;
		ПараметрыКоробки.Вставить("Количество",			Парам.Количество);
		ПараметрыКоробки.Вставить("ВидСтикера",			Перечисления.ВидыСтикеров.ГС);
		ПараметрыКоробки.Вставить("Организатор",		СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(?(Парам.УчастникКод=null,0,Число(Парам.УчастникКод))));
		ПараметрыКоробки.Вставить("ТочкаНазначения",	СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(Парам.ТочкаПолучательКод));
		ПараметрыКоробки.Вставить("Догрузить",			Истина);
		
		покупка = СП_РаботаСоСправочниками.ПолучитьКоробкуПо_Коду(Парам.ПокупкаКод);
		СП_РаботаСоСправочниками.ОбновитьКоробку(покупка, ПараметрыКоробки);
	КонецЕсли;
	возврат покупка;
КонецФункции


Функция ПолучитьПунктВыдачиПо_Коду(КодПараметр, Параметры = Неопределено) Экспорт
	Если не ЗначениеЗаполнено(КодПараметр) Тогда Возврат Неопределено; КонецЕсли;
	пунктВыдачи_Код = Формат(Число(КодПараметр),"ЧЦ=4; ЧН=0; ЧВН=; ЧГ=0");
	Если пунктВыдачи_Код = "0000" или
		 пунктВыдачи_Код = "0"			Тогда 
		возврат Справочники.ТочкиРаздачи.ПунтВыдачиНеУказан;
	КонецЕсли;	
	
	//Если КодПВ="0000" Тогда Возврат Константы.СвояТочка.Получить() КонецЕсли;
	пунктВыдачи_Ссылка	=	Справочники.ТочкиРаздачи.НайтиПоКоду(пунктВыдачи_Код);	
	Если ЗначениеЗаполнено(пунктВыдачи_Ссылка) и Параметры = Неопределено Тогда
		Возврат ?(ЗначениеЗаполнено(пунктВыдачи_Ссылка.ОсновнаяТочка),пунктВыдачи_Ссылка.ОсновнаяТочка,пунктВыдачи_Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(пунктВыдачи_Ссылка) Тогда
		пунктВыдачи_объект			= пунктВыдачи_Ссылка.ПолучитьОбъект();
	Иначе	
		пунктВыдачи_объект			= Справочники.ТочкиРаздачи.СоздатьЭлемент();
	КонецЕсли;	
	пунктВыдачи_объект.Код			= пунктВыдачи_Код;
    Если Параметры = Неопределено Тогда
		пунктВыдачи_объект.Наименование	= "Пункт выдачи ("+пунктВыдачи_Код+")";
		пунктВыдачи_объект.Догрузить	= истина;
	ИначеЕсли  ТипЗнч(Параметры) = Тип("Структура") Тогда 
		Для каждого элем из Параметры Цикл
			пунктВыдачи_объект[элем.Ключ] = элем.Значение;
		КонецЦикла;
	КонецЕсли;	
	
	Попытка
		пунктВыдачи_объект.Записать();
		Возврат ?(ЗначениеЗаполнено(пунктВыдачи_объект.Ссылка.ОсновнаяТочка),пунктВыдачи_объект.Ссылка.ОсновнаяТочка,пунктВыдачи_объект.Ссылка);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При записи Пункта выдачи с кодом:"+ пунктВыдачи_Код+" произошла ошибка "+ ОписаниеОшибки());
		Возврат неопределено;
	КонецПопытки;
КонецФункции	

Функция 	ОбновитьПунктВыдачи(ПунктВыдачи_Ссылка, Параметры = Неопределено) Экспорт
	ПунктВыдачи_Объект				= ПунктВыдачи_Ссылка.ПолучитьОбъект();
	РеквизитыПунктаВыдачи 			= ПунктВыдачи_Объект.метаданные().Реквизиты;
	
	Для каждого элем из Параметры Цикл
		Если 	РеквизитыПунктаВыдачи.Найти(элем.Ключ)	=   Неопределено   и  
				элем.Ключ 							<> "Наименование"  	Тогда Продолжить; КонецЕсли;
		ПунктВыдачи_Объект[элем.Ключ] 	= элем.Значение;
	КонецЦикла;
	
	Попытка
	    ПунктВыдачи_Объект.Записать();
		Возврат ПунктВыдачи_Объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось обновить реквизиты пункта выдачи с кодом: "+ПунктВыдачи_Ссылка+".Ошибка: "+Символы.ПС+ОписаниеОшибки());
	    Возврат Неопределено;	
	КонецПопытки;	
КонецФункции



Функция ПолучитьОрганизатораПо_Коду(Код) Экспорт
	организатор_ссылка = Справочники.Организаторы.НайтиПоКоду(Код);	
	Если ЗначениеЗаполнено(организатор_ссылка) Тогда
		Возврат организатор_ссылка;
	КонецЕсли;	
	организатор_объект 				= Справочники.Организаторы.СоздатьЭлемент();
	организатор_объект.Код			= Код;
	организатор_объект.Участник		= ПолучитьУчастникаПо_Коду(Код);
	Если организатор_объект.Участник = Неопределено Тогда
		организатор_объект.Догрузить	= Истина;
		организатор_объект.Наименование	= "Организатор ("+Код+")";
	Иначе
		организатор_объект.Догрузить	= организатор_объект.Участник.Догрузить;
		организатор_объект.Наименование	= организатор_объект.Участник.Наименование;
	КонецЕсли;	
	Попытка
	    организатор_объект.Записать();
		Возврат организатор_объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При записи организатора с кодом: "+Код+", возникла ошибка: "+Символы.ПС+ОписаниеОшибки());
		Возврат Неопределено;	
	КонецПопытки;
КонецФункции


Функция 	ОбновитьОрганизатора(Организатор_Ссылка , Параметры = Неопределено) Экспорт
	Организатор_Объект					= Организатор_Ссылка.ПолучитьОбъект();
	РеквизитыОрганизатора				= Организатор_Ссылка.метаданные().Реквизиты;
	
	Для каждого элем из Параметры Цикл
		Если 	РеквизитыОрганизатора.Найти(элем.Ключ)	= Неопределено и  
				элем.Ключ 							<> "Наименование" Тогда Продолжить; КонецЕсли;
		организатор_Объект[элем.Ключ] = элем.Значение;
	КонецЦикла;
	
	Попытка
	    организатор_Объект.Записать();
		Возврат организатор_Объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось обновить реуквизиты Организатора : "+Организатор_Ссылка+". Ошибка: "+Символы.ПС+ОписаниеОшибки());
	    Возврат Неопределено;	
	КонецПопытки;
КонецФункции



Функция ПолучитьЗаказПо_Коду(КодЗаказа, параметры = Неопределено) Экспорт
	КодЗаказа		= Формат(Число(КодЗаказа),"ЧДЦ=; ЧГ=0");
	заказ_ссылка	= справочники.Заказы.НайтиПоКоду(КодЗаказа);
	Если ЗначениеЗаполнено(заказ_ссылка) Тогда
		возврат заказ_ссылка;
	КонецЕсли;	
	
	Если Параметры = Неопределено Тогда
		аспПроцедурыОбменаДанными.ПолучитьЗапросомЗаказы(КодЗаказа);
		заказ_ссылка = справочники.Заказы.НайтиПоКоду(КодЗаказа);
		Если ЗначениеЗаполнено(заказ_ссылка) Тогда
			Возврат заказ_ссылка;
		КонецЕсли;
	КонецЕсли;
	

	заказ_объект				= Справочники.Заказы.СоздатьЭлемент();
	заказ_объект.Код			= КодЗаказа;
	Если Параметры = Неопределено Тогда
		заказ_объект.Наименование 	= "Заказ 100 маркет ("+КодЗаказа+")";
		заказ_объект.Догрузить		= истина;
	иначеЕсли  ТипЗнч(Параметры) = Тип("Структура") Тогда 	
		Для каждого элем из Параметры Цикл
			заказ_объект[элем.Ключ] = элем.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		заказ_объект.Записать();
		Возврат заказ_объект.Ссылка;
	Исключение
	
	КонецПопытки;
	Возврат неопределено;
КонецФункции

Функция ПолучитьПристройПо_Коду(КодЗаказа) Экспорт
	заказ_ссылка=справочники.Пристрой.НайтиПоКоду(Формат(КодЗаказа,"ЧГ=0"));
	Если ЗначениеЗаполнено(заказ_ссылка) Тогда
		возврат заказ_ссылка;
	КонецЕсли;	

	заказ_объект=Справочники.Пристрой.СоздатьЭлемент();
	заказ_объект.Наименование 	= "Пристрой скодом "+КодЗаказа;
	заказ_объект.Догрузить		= истина;
	заказ_объект.Код			= Формат(Число(КодЗаказа),"ЧГ=0");
	Попытка
		заказ_объект.Записать();
		аспПроцедурыОбменаДанными.ДогрузитьЭлементСправочникаССайтаВФоне(заказ_объект.Ссылка);
		Возврат заказ_объект.Ссылка;
	Исключение
	
	КонецПопытки;
	Возврат неопределено;
КонецФункции


Функция ПолучитьЗаявкуНаДоставкуПо_Коду(КодЗаказа) Экспорт
	заказ_ссылка=справочники.ЗаявкаНаДоставку.НайтиПоКоду(КодЗаказа);
	Если ЗначениеЗаполнено(заказ_ссылка) Тогда
		возврат заказ_ссылка;
	КонецЕсли;	

	заказ_объект=Справочники.ЗаявкаНаДоставку.СоздатьЭлемент();
	заказ_объект.Наименование 	= "З("+КодЗаказа+")";
	заказ_объект.Догрузить		= истина;
	заказ_объект.Код			= Формат(Число(КодЗаказа),"ЧГ=0");
	Попытка
		заказ_объект.Записать();
//		аспПроцедурыОбменаДанными.ДогрузитьЭлементСправочникаССайтаВФоне(заказ_объект.Ссылка);
		Возврат заказ_объект.Ссылка;
	Исключение
	
	КонецПопытки;
	Возврат неопределено;
КонецФункции


функция ПолучитьСотрудникаПо_Коду(КодСотрудника) Экспорт
	сотрудник_Ссылка = Справочники.Сотрудники.НайтиПоКоду(КодСотрудника);
	Возврат сотрудник_Ссылка
КонецФункции	

функция ПолучитьНоменклатуруПо_Коду(Код) Экспорт
	справочник_Ссылка = Справочники.Номенклатура.НайтиПоКоду(Код);
	Возврат справочник_Ссылка;
КонецФункции

функция ПолучитьГабаритПо_Коду(Код, Параметры = Неопределено) Экспорт
	ПараметрыСправочника = новый Структура;
	ПараметрыСправочника.Вставить("Справочник", 			 "Габариты");
	ПараметрыСправочника.Вставить("НаименованиеПоУмолчанию", "Габарит");
	
	Возврат ПолучитьЭлементСправочника(Код, ПараметрыСправочника,Параметры)
КонецФункции


Функция 	ОбновитьГабарит(Элемент , Параметры = Неопределено) Экспорт
					 
    ИзмененныеПараметры 	= ПолучитьИзмененныеРеквизиты(Элемент, Параметры);
	Если ИзмененныеПараметры.Количество() = 0 Тогда Возврат Элемент;  КонецЕсли;
		
	объект					= Элемент.ПолучитьОбъект();
	
	Для каждого элем из ИзмененныеПараметры Цикл
		объект[элем.Ключ] 	= элем.Значение;	
	КонецЦикла;
	Попытка
		объект.Записать();
		Возврат объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать Габарит с кодом: " + Элемент.Код + ". Ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	Возврат Неопределено;
КонецФункции




функция ПолучитьМестоХраненияПо_Коду(Код) Экспорт
	справочник_Ссылка = Справочники.МестаХранения.НайтиПоКоду(Код);
	Возврат справочник_Ссылка;
КонецФункции


функция ПолучитьГородПокупкиПо_Коду(КодГорода, СсылкаГород = Неопределено) Экспорт
	Если ЗначениеЗаполнено(СсылкаГород) Тогда
		Возврат СсылкаГород;
	КонецЕсли;

	справочник_Ссылка = Справочники.ГородаСП.НайтиПоКоду(КодГорода);
	если ЗначениеЗаполнено(справочник_Ссылка) Тогда
		возврат справочник_Ссылка;
	КонецЕсли;
	
	справочник_Объект	= Справочники.ГородаСП.СоздатьЭлемент();
	справочник_Объект=Справочники.ГородаСП.СоздатьЭлемент();
	справочник_Объект.Код=КодГорода;
	справочник_Объект.Догрузить=Истина;
	справочник_Объект.Наименование="город Покупки ("+КодГорода+")";
	Попытка
		справочник_Объект.Записать();
		Возврат справочник_Объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать Город покупки с кодом: "+КодГорода+". Ошибка: "+Символы.ПС+ОписаниеОшибки());
	КонецПопытки;
	
	Возврат неопределено;
КонецФункции

Функция 	ОбновитьГородПокупки(Город_Ссылка, Параметры = Неопределено) Экспорт
	город_Объект					= Город_Ссылка.ПолучитьОбъект();
	РеквизитыГорода					= город_Объект.метаданные().Реквизиты;
	
	Для каждого элем из Параметры Цикл
		Если 	РеквизитыГорода.Найти(элем.Ключ)	=   Неопределено   и  
				элем.Ключ 							<> "Наименование"  	Тогда Продолжить; КонецЕсли;
		город_Объект[элем.Ключ] 	= элем.Значение;
	КонецЦикла;
	
	Попытка
	    город_Объект.Записать();
		Возврат город_Объект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось обновить реквизиты города Покупки с кодом: "+Город_Ссылка+".Ошибка: "+Символы.ПС+ОписаниеОшибки());
	    Возврат Неопределено;	
	КонецПопытки;	
КонецФункции




// сравниваем реквизиты объекта со хначениями реквизитов переданных во втором параметре
//
// Параметры:
//  ЭлементСправочника  - СправочникСсылка - Объект у которого проверяем реквизиты
//                 
//  ЗначенияРеквиитов  - Структура - ключ-реквизит
//                 Значение- Значение реквизита
//
// Возвращаемое значение:
//   Структура   - Структура с реквиизитами которые не совпадают во входной структуре и объекте
//
Функция ПолучитьИзмененныеРеквизиты(ЭлементСправочника, ЗначенияРеквиитов)   
	ИзмененныеРеквизиты	= новый Структура;
	Если ЗначенияРеквиитов = неопределено Тогда Возврат ИзмененныеРеквизиты; КонецЕсли;
	РеквизитыЭлемента	= ЭлементСправочника.метаданные().Реквизиты;
	Для каждого элем из ЗначенияРеквиитов Цикл
		//Если 	элем.Ключ						=  "Состав" и
		//		Типзнч(ЭлементСправочника)		= Тип("СправочникСсылка.Коробки") и
		//		ЭлементСправочника.ВидСтикера   = Перечисления.ВидыСтикеров.ГруппаДоставки Тогда
		//		суммаВБазе = 0;
		//		суммаНаСайте = 0;
		//		Для каждого элемСуммыВБазе из ЭлементСправочника.состав Цикл
		//			суммаВБазе = суммаВБазе + элемСуммыВБазе.Цена;
		//		КонецЦикла;
		//		массивВБазе	= ЭлементСправочника.состав.ВыгрузитьКолонку("КодЗаказа");
		//		массивНаСайте = Новый массив;
		//		Для Каждого элемНасайте из ЗначенияРеквиитов.Состав.order цикл
		//			массивНаСайте.Добавить(элемНасайте.orderId);
		//			суммаНаСайте = суммаНаСайте + ?(элемНасайте.payment_sum = "",0,Число(элемНасайте.payment_sum));
		//		КонецЦикла;
		//		Результат  = ИсключающееИЛИ(массивВБазе, массивНаСайте);
		//		Если Результат.Количество() >0 или суммаВБазе <> суммаНаСайте Тогда
		//			ИзмененныеРеквизиты.Вставить(элем.Ключ, элем.Значение);	
		//		КОнецЕсли;	
		//	Иначе
		Если
				элем.Ключ						=  "Состав" или 
				элем.Ключ						=  "Маршрут" Тогда
			    ИзмененныеРеквизиты.Вставить(элем.Ключ, элем.Значение);
				Продолжить;
		КонецЕсли;	
		
		Если 	(элем.Ключ						=  "Владелец" или элем.Ключ						=  "Родитель")
			
				и
				ЭлементСправочника[элем.Ключ] 	<> элем.Значение 	Тогда
			    ИзмененныеРеквизиты.Вставить(элем.Ключ, элем.Значение);
				Продолжить;
		КонецЕсли;	
			
		Если элем.Ключ = "Наименование"	  и 
		     ЭлементСправочника.Наименование <>  элем.Значение Тогда
			 ИзмененныеРеквизиты.Вставить(элем.Ключ, элем.Значение);
		Конецесли;				
		
		Если 	РеквизитыЭлемента.Найти(элем.Ключ) 	= 	Неопределено Тогда Продолжить; КонецЕсли;
		Если 	ЭлементСправочника[элем.Ключ] 		<> 	элем.Значение Тогда
			ИзмененныеРеквизиты.Вставить(элем.Ключ, элем.Значение);
		КонецЕсли;	
	КонецЦикла;
	Возврат ИзмененныеРеквизиты;
КонецФункции	


Функция ПолучитьЭлементСправочника(код, ПараметрыСпправочника, ПараметрыЭлемента = Неопределено)
	Справочник 					= ПараметрыСпправочника.Справочник;
	НаименованиеПоУмолчанию		= ПараметрыСпправочника.НаименованиеПоУмолчанию;
	
	cсылка = Справочники[Справочник].НайтиПоКоду(Код);
	Если ЗначениеЗаполнено(cсылка) Тогда
		возврат cсылка;
	КонецЕсли;		
	объект					= Справочники[Справочник].СоздатьЭлемент();
	объект.Наименование 	= НаименованиеПоУмолчанию + " ("+Код+")";
	объект.Код				= Формат(Число(Код),"ЧГ=0");
	Если ЗначениеЗаполнено(ПараметрыЭлемента) Тогда
		РеквизитыЭлемента		= объект.метаданные().Реквизиты;
		Для каждого элем из ПараметрыЭлемента Цикл 
			
			Если 	элем.Ключ	=  "Владелец" 	или 
					элем.Ключ	=  "Родитель" 	или
					элем.Ключ 	=  "Наименование"  	Тогда
			    объект[элем.Ключ] = элем.Значение;
			КонецЕсли;	
			Если 	РеквизитыЭлемента.Найти(элем.Ключ) 	= 	Неопределено Тогда 
				Продолжить; 
			КонецЕсли;
			объект[элем.Ключ] = элем.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		объект.Записать();
		Возврат объект.Ссылка;
	Исключение
	
	КонецПопытки;
	Возврат неопределено;
	
КонецФункции	


Процедура ЗаполнитьТипМегаордера(мегаордер_Объект, ШК)
	Если не ЗначениеЗаполнено(мегаордер_Объект.типМегаордера) Тогда
		Если 		СтрНачинаетсяС(ШК,"12") Тогда
			мегаордер_Объект.типМегаордера = Перечисления.типМегаордера.Посылка;
		ИначеЕсли 	СтрНачинаетсяС(ШК,"44") Тогда
			мегаордер_Объект.типМегаордера = Перечисления.типМегаордера.Коробка;
		ИначеЕсли 	СтрНачинаетсяС(ШК,"45") Тогда
			мегаордер_Объект.типМегаордера = Перечисления.типМегаордера.ЗаказКД;
		ИначеЕсли 	СтрНачинаетсяС(ШК,"11") Тогда
			мегаордер_Объект.типМегаордера = Перечисления.типМегаордера.Покупка;
		ИначеЕсли 	СтрНачинаетсяС(ШК,"33") Тогда
			мегаордер_Объект.типМегаордера = Перечисления.типМегаордера.Заказ100маркета;
		ИначеЕсли 	СтрНачинаетсяС(ШК,"22") Тогда
			мегаордер_Объект.типМегаордера = Перечисления.типМегаордера.КартаУчастника;
		ИначеЕсли 	СтрНачинаетсяС(ШК,"23") Тогда
			мегаордер_Объект.типМегаордера = Перечисления.типМегаордера.КартаУчастникаВиртуальная;
		ИначеЕсли 	СтрНачинаетсяС(ШК,"55") Тогда
			мегаордер_Объект.типМегаордера = Перечисления.типМегаордера.Сотрудник;
		ИначеЕсли 	СтрНачинаетсяС(ШК,"61") Тогда
			мегаордер_Объект.типМегаордера = Перечисления.типМегаордера.Номенклатура;
		ИначеЕсли 	СтрНачинаетсяС(ШК,"62") Тогда
			мегаордер_Объект.типМегаордера = Перечисления.типМегаордера.Габарит;
		ИначеЕсли 	СтрНачинаетсяС(ШК,"63") Тогда
			мегаордер_Объект.типМегаордера = Перечисления.типМегаордера.МестоХранения;
		ИначеЕсли 	СтрНачинаетсяС(ШК,"64") Тогда
			мегаордер_Объект.типМегаордера = Перечисления.типМегаордера.ПунктВыдачи;
		ИначеЕсли 	СтрНачинаетсяС(ШК,"67") Тогда
			мегаордер_Объект.типМегаордера = Перечисления.типМегаордера.Супергруппа;
		КонецЕсли	
	КонецЕсли;
КонецПроцедуры	

Функция ИсключающееИЛИ(Массив1, Массив2)
	Результат = Новый Массив;
	Повтор = Новый Соответствие;
	Для каждого Элемент Из Массив1 Цикл
		Повтор[Элемент] = ?(Повтор[Элемент] = Неопределено, Ложь, Истина)
	КонецЦикла;
	Для каждого Элемент Из Массив2 Цикл
		Повтор[Элемент] = ?(Повтор[Элемент] = Неопределено, Ложь, Истина)
	КонецЦикла;
	Для каждого Элемент Из Повтор Цикл
		Если НЕ Элемент.Значение Тогда
			Результат.Добавить(Элемент.Ключ)
		КонецЕсли
	КонецЦикла;
	Возврат Результат
КонецФункции

