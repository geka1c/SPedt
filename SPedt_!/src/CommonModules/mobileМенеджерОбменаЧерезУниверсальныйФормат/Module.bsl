////////////////////////////////////////////////////////////////////////////////
// Менеджер обмена через универсальный формат (СовместныеПокупки 3.6.3.51 (mobile) от 22.09.2022 8:28:22)
//
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Процедура, выполняемая перед началом конвертации данных..
//
// Параметры:
//  КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт

	
КонецПроцедуры


// Процедура, выполняемая после выполнения конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт

	
КонецПроцедуры


// Процедура, выполняемая перед началом отложенного заполнения объектов.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт

	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
//
// Возвращаемое значение:
//  Строка - номер версии.
//
Функция ВерсияФорматаМенеджераОбмена() Экспорт
	Возврат "2";
КонецФункции

// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена      - Строка - "Отправка" либо "Получение".
//  ПравилаОбработкиДанных - см. ОбменДаннымиXDTOСервер.ТаблицаПравилОбработкиДанных
// 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт

	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Справочник_Габариты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_МестаХранения_Отправка(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена  - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила.
// 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт


	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Справочник_Габариты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_СправочникСсылка_МестаХранения_Отправка(ПравилаКонвертации);
	КонецЕсли;
КонецПроцедуры
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - Cтрока - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
КонецПроцедуры

// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - Структура - структура, в которую добавляются параметры конвертации:
//                         Ключ - имя параметра, значение - значение параметра, по умолчанию - Неопределено.
//
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
КонецПроцедуры

// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя процедуры этого модуля.
//  Параметры - Структура:
//    * ОбъектОбработки - Произвольный
//    * ИспользованиеПКО - Структура
//    * КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//    * ДанныеИБ - СправочникОбъект
//               - ДокументОбъект
//               - и т.п.
//    * ПолученныеДанные - СправочникОбъект
//                       - ДокументОбъект
//                       - и т.п.
//    * КонвертацияСвойств - ТаблицаЗначений
//    * ДанныеXDTO - Структура
//    * КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//    * СтекВыгрузки - Массив из Произвольный
//
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
КонецПроцедуры


#КонецОбласти
#Область СлужебныеПроцедурыИФункции
Функция Подключаемый_ИдентификаторМодуля() Экспорт
	Возврат "7c0296a4-b34d-41d5-b81f-e68ef25eaba4";
КонецФункции
#Область Справочники
Процедура ДобавитьПОД_Справочник_Габариты_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Габариты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Габариты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Габариты_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_МестаХранения_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_МестаХранения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.МестаХранения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("СправочникСсылка_МестаХранения_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Габариты_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Габариты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Габариты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Габариты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "НеГабарит",    "НеГабарит");

	
КонецПроцедуры

Процедура ДобавитьПКО_СправочникСсылка_МестаХранения_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "СправочникСсылка_МестаХранения_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.МестаХранения;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.МестаХранения";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	
КонецПроцедуры


#КонецОбласти


Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
	
	Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
		ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
	КонецЕсли;
	
	КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
	КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
	КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
	КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
	
	Возврат КонвертацияТабличнойЧасти.Свойства;
	
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
		ПравилоКонвертацииСвойства = "", ПространствоИмен = "")
	
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
	НоваяСтрока.ПространствоИмен                = ПространствоИмен;
	
КонецПроцедуры

#Область ОбработчикиКонвертации

#КонецОбласти
#Область Алгоритмы



#КонецОбласти
#КонецОбласти
