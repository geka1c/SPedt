
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОповеститьОбИзменении(Объект.Ссылка);
КонецПроцедуры


&НаКлиенте
Процедура ВесПриИзменении(Элемент)
	Объект.ДатаВзвешивания=ТекущаяДата();
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьАдрес(Команда)
	ПолучитьАдресНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдресНаСервере()
	ТЗ=Объект.Состав.Выгрузить(,"Покупка,Участник");
	СПЗаказыТК.ПолучитьАдресаНаТЗЗаказов(ТЗ)
КонецПроцедуры

&НаКлиенте
Процедура Взвесить(Команда)
	формаОтправления=ПолучитьФорму("Документ.ОтправлениеТранзита.Форма.ФормаДокумента",новый Структура("ГруппаДоставки,ТочкаНазначения",Объект.Ссылка,Объект.ТочкаНазначения));
	ДанныеФормы = формаОтправления.Объект;
	ВзвеситьНаСервере(ДанныеФормы);
	КопироватьДанныеФормы(ДанныеФормы, формаОтправления.Объект);
	формаОтправления.Открыть();
КонецПроцедуры

Процедура ВзвеситьНаСервере(ДанныеФормы)
	
	
	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьССайта(Команда)
	ОбновитьССайтаНаСервере();
	Прочитать();
	ОбновитьОтображениеДанных();
	ОповеститьОбИзменении(Объект.Ссылка);
КонецПроцедуры

Процедура ОбновитьССайтаНаСервере()
	списокКодов = новый СписокЗначений;
	списокКодов.Добавить(Объект.Ссылка);
	СтоСПОбмен_ГруппыДоставки.Получить_ПоКодам(списокКодов);
КонецПроцедуры



&НаКлиенте
Процедура СоставУдалитьПриИзменении(Элемент)
	Элементы.Состав.ТекущиеДанные.Исключить = не Элементы.Состав.ТекущиеДанные.Удалить;
КонецПроцедуры

&НаКлиенте
Процедура СоставИсключитьПриИзменении(Элемент)
	Элементы.Состав.ТекущиеДанные.Удалить = не Элементы.Состав.ТекущиеДанные.Исключить;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчикаОбъект
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Вставить содержимое обработчика
КонецПроцедуры


#Область УдалениеЗаказовИзГруппы
&НаКлиенте
Процедура УдалитьЗаказИзГруппы(Команда) 
	
	
	ОповещениеВопроса = Новый ОписаниеОповещения("УдалитьЗаказИзГруппыЗавершение",ЭтотОбъект);
	ПоказатьВопрос(ОповещениеВопроса,"Выделенные заказы будут удалены из группы. Продолжить?",РежимДиалогаВопрос.ДаНет);

	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаказИзГруппыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если результат = КодВозвратаДиалога.Да Тогда
		УдалитьЗаказИзГруппыНаСервере(Элементы.Состав.ВыделенныеСтроки);
		ОбновитьССайта(Неопределено);
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура УдалитьЗаказИзГруппыНаСервере(знач ВыделенныеСтроки)
	таблицаУдаления = Документы.ЗапросыГруппДоставки.ТаблицаУдаления();
	Для каждого элем из ВыделенныеСтроки цикл
		новаяСтрока = таблицаУдаления.добавить();
		новаяСтрока.ГруппаДоставки = объект.Ссылка;
		ЗаполнитьЗначенияСвойств(новаяСтрока, ОБъект.Состав.НайтиПоИдентификатору(элем));
	КонецЦикла;
	СтоСПОбмен_ГруппыДоставки.УдалитьЗаказы(таблицаУдаления);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияДоставки(Команда)
	текСтрока = объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ВыделенныеСтроки[0]);
	
	//текСтрока.Покупка
	Посылка = ПолучитьПосылкуПоКодузаказа(текСтрока.КодЗаказа);
	Если ЗначениеЗаполнено(Посылка) Тогда 
		открытьФорму(	"Отчет.ИсторияЗаказов.Форма.ФормаОтчета",
					новый структура("мегаордер, СформироватьПриОткрытии",Посылка.ШК, истина),
					ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не нойдена посылка по коду заказа");
	КонецЕсли;
КонецПроцедуры
				
Функция ПолучитьПосылкуПоКодузаказа(КодЗаказа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказыВПосылках.Посылка КАК Посылка
		|ИЗ
		|	РегистрНакопления.ЗаказыВПосылках КАК ЗаказыВПосылках
		|ГДЕ
		|	ЗаказыВПосылках.КодЗаказа = &КодЗаказа
		|	И ЗаказыВПосылках.ВидДвижения = &ВидДвижения";
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("КодЗаказа", КодЗаказа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Посылка;	
	КонецЕсли;
	Возврат Неопределено;
КонецФункции	
				


//Процедура УдалитьДвижениеТовара(ПокупкиДляУдаления, УчастникДляУдаления, ПунктВыдачиГруппыДоставки)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//		"ВЫБРАТЬ
//		|	ОстаткиТоваров.Регистратор
//		|ИЗ
//		|	РегистрНакопления.ОстаткиТоваров КАК ОстаткиТоваров
//		|ГДЕ
//		|	ОстаткиТоваров.Участник = &УчастникДляУдаления
//		|	И ОстаткиТоваров.Покупка.Покупка В (&ПокупкиДляУдаления)
//		|	И ТИПЗНАЧЕНИЯ(ОстаткиТоваров.Регистратор) = ТИП(Документ.Движение)
//		|	И ОстаткиТоваров.Регистратор.ТочкаНазначения = &ПунктВыдачиГруппыДоставки
//		|СГРУППИРОВАТЬ ПО
//		|	ОстаткиТоваров.Регистратор";
//	
//	Запрос.УстановитьПараметр("УчастникДляУдаления", УчастникДляУдаления);
//	Запрос.УстановитьПараметр("ПокупкиДляУдаления", ПокупкиДляУдаления);
//	Запрос.УстановитьПараметр("ПунктВыдачиГруппыДоставки", ПунктВыдачиГруппыДоставки);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		докДвижения	= Выборка.Регистратор.ПолучитьОбъект();
//		строкиДляУдаления	= новый Массив();
//		Для каждого элем из докДвижения.покупки Цикл
//			Если 	элем.Участник = УчастникДляУдаления и
//					ПокупкиДляУдаления.найти(элем.покупка.покупка)<>Неопределено Тогда
//				строкиДляУдаления.Добавить(элем);						
//			КонецЕсли;
//		КонецЦикла;
//		Для каждого заказ из строкиДляУдаления Цикл
//			докДвижения.покупки.Удалить(заказ);
//		КонецЦикла;
//			докДвижения.Записать(РежимЗаписиДокумента.Проведение)
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура УдалитьЗаказы(КодыЗаказаДляУдаления,УчастникДляУдаления, ГруппаДоставки)
//	
//	СтрокаПротокола						= 	новый Структура ("ДатаНачала, ДатаОкончания,Отправили, Результат, ПолученныеДанные");
//	СтрокаПротокола.Отправили			= 	ПолучитьТекстЗапросаУдаленияЗаказаИзГруппы(КодыЗаказаДляУдаления,УчастникДляУдаления, ГруппаДоставки);
//	СтрокаПротокола.ДатаНачала			=	ТекущаяДата();

//	Параметры    						= новый Структура;
//	АдресСкрипта 						= Константы.АдресВыгрузкиНасайт.Получить();
//	Параметры.Вставить("token",	Константы.Токен.Получить());
//	Параметры.Вставить("xml", 	СтрокаПротокола.Отправили);

//	ПолученныйФайл						= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры,АдресСкрипта);
//	
//	Если ПолученныйФайл=Неопределено Тогда 		
//		СтрокаПротокола.Результат		= "Не удалось соеденится с сайтом"; 
//		СтрокаПротокола.ДатаОкончания	= ТекущаяДата();
//		Возврат;	
//	КонецЕсли; 
//	Если аспПроцедурыОбменаДанными.АвторизацияВыполнена(ПолученныйФайл) Тогда
//		СтрокаПротокола.Результат="Авторизация выполнена";
//	Иначе
//		СтрокаПротокола.Результат="Авторизация не выполнена";
//	КонецЕсли;	
//	
//	СтрокаПротокола.ПолученныеДанные	= СтоСПОбмен_Общий.ФайлВСтроку(ПолученныйФайл);
//	СтрокаПротокола.ДатаОкончания		= ТекущаяДата();
//	//СтоСПОбмен_Выгрузка100сп.СохранитьПротоколОбмена(СтрокаПротокола,ДокументПротокола);
//	
//КонецПроцедуры

//функция   ПолучитьТекстЗапросаУдаленияЗаказаИзГруппы(КодыЗаказаДляУдаления,УчастникДляУдаления, ГруппаДоставки)
//	 ЗаписьXML=новый ЗаписьXML;
//	 ЗаписьXML.УстановитьСтроку("UTF-8");
//	 ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
//	 
//	 ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
//	 ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd","http://www.w3.org/2001/XMLSchema");
//	 	
//	 Для каждого стр из КодыЗаказаДляУдаления Цикл 
//		 ЗаписьXML.ЗаписатьНачалоЭлемента("groupsUnlink");
//			 ЗаписьXML.ЗаписатьНачалоЭлемента("group");
//			 
//					 ЗаписьXML.ЗаписатьНачалоЭлемента("delivery_group_id");
//					 	ЗаписьXML.ЗаписатьТекст(Формат(Число(СтрЗаменить(ГруппаДоставки.Код,"гд_","")),"ЧГ=0"));
//					 ЗаписьXML.ЗаписатьКонецЭлемента();
//					 
//					 ЗаписьXML.ЗаписатьНачалоЭлемента("orderType");
//					 	ЗаписьXML.ЗаписатьТекст("sp");
//					 ЗаписьXML.ЗаписатьКонецЭлемента();
//					 

//						 ЗаписьXML.ЗаписатьНачалоЭлемента("orderId");
//						 ЗаписьXML.ЗаписатьТекст(Формат(стр,"ЧГ=0"));
//						 ЗаписьXML.ЗаписатьКонецЭлемента();
//					 
//					 ЗаписьXML.ЗаписатьНачалоЭлемента("uid");
//					 	ЗаписьXML.ЗаписатьТекст(Формат(УчастникДляУдаления.Код,"ЧГ=0"));
//					 ЗаписьXML.ЗаписатьКонецЭлемента();
//					 
//					 
//			 
//			 ЗаписьXML.ЗаписатьКонецЭлемента();
//		 ЗаписьXML.ЗаписатьКонецЭлемента();		 
//		 
//	КонецЦикла;	
//	 ЗаписьXML.ЗаписатьКонецЭлемента();	
//	 
//	ОтправленныеДанные = ЗаписьXML.Закрыть();	
//	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
//	Возврат ОтправленныеДанные;
//КонецФункции	

//	
#КонецОбласти

