
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Заполнение доступных полей
	СхемаКомпоновкиДанных = Обработки.ПечатьСправочников.ПолучитьМакет("ПоляШаблона");
	АдресВХранилище = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВХранилище));
	
	СтруктураШаблона = СтруктураШаблона();
	
	Если СтруктураШаблона <> Неопределено Тогда
		// Загрузка шаблона.
		СтруктураШаблона.Свойство("РедакторТабличныйДокумент", ПолеТабличногоДокумента);
		СтруктураШаблона.Свойство("КоличествоПоВертикали"    , КоличествоПоВертикали);
		СтруктураШаблона.Свойство("КоличествоПоГоризонтали"  , КоличествоПоГоризонтали);
		СтруктураШаблона.Свойство("ТипКода"                  , ТипКода);
		СтруктураШаблона.Свойство("РазмерШрифта"             , РазмерШрифта);
		СтруктураШаблона.Свойство("ОтображатьТекст"          , ОтображатьТекст);
		СтруктураШаблона.Свойство("УголПоворота"             , УголПоворота);
	Иначе
		// Создание нового шаблона.
		ПолеТабличногоДокумента = Новый ТабличныйДокумент;
		ПолеТабличногоДокумента.ОбластьПечати = ПолеТабличногоДокумента.Область("R2C2:R20C5");
		РедкийПунктир = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
		ПолеТабличногоДокумента.ОбластьПечати.Обвести(РедкийПунктир,РедкийПунктир,РедкийПунктир,РедкийПунктир);
		КоличествоПоГоризонтали = 1;
		КоличествоПоВертикали   = 1;
		ТипКода                 = 99; // Автоматическое определение
		ОтображатьТекст         = Истина;
		РазмерШрифта            = 12;
		УголПоворота            = 0;
	КонецЕсли;
	
	Элементы.РазмерШрифта.Доступность = ОтображатьТекст;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ПолеТабличногоДокумента.ОбластьПечати = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не установлена область печати'"), ЭтаФорма, "ПолеТабличногоДокумента",,Отказ);
		возврат;
	КонецЕсли;
	
	АдресШаблона = СохранитьЗакрытьСервер(Отказ);
	
	Если НЕ Отказ Тогда
		Оповестить("ИзмененШаблон", АдресШаблона, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтображатьТекстПриИзменении(Элемент)
	Элементы.РазмерШрифта.Доступность = ОтображатьТекст;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ "ДоступныеПоля"

&НаКлиенте
Процедура ДоступныеПоляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЭтаФорма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	Модифицированность = Истина;
	ВыбратьДоступнуюСтрокуВШаблон(ВыбраннаяСтрока);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Процедура устанавливает область печати в табличном документе и рисует по краю пунктирную рамку.
//
&НаКлиенте
Процедура УстановитьОбластьПечати(Команда)
	
	Если (ПолеТабличногоДокумента.ВыделенныеОбласти[0].Лево <> 0 И ПолеТабличногоДокумента.ВыделенныеОбласти[0].Верх <> 0)
		И ПолеТабличногоДокумента.ВыделенныеОбласти.Количество() = 1
		И ТипЗнч(ПолеТабличногоДокумента.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		УстановитьОбластьПечатиНаСервере(ПолеТабличногоДокумента.ВыделенныеОбласти[0].Имя);
		
	Иначе
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область печати'");
		Сообщение.Поле = "ПолеТабличногоДокумента";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШаблонЭтикеткиПоУмолчанию(Команда)
	
	Результат = Вопрос(НСтр("ru = 'Редактируемый шаблон будет заменен на шаблон по умолчанию, продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПоместитьВТабличныйДокументШаблонПоУмолчанию("ШаблонЭтикеткиПоУмолчанию");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШаблонЦенникаПоУмолчанию(Команда)
	
	Результат = Вопрос(НСтр("ru = 'Редактируемый шаблон будет заменен на шаблон по умолчанию, продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПоместитьВТабличныйДокументШаблонПоУмолчанию("ШаблонЦенникаПоУмолчанию");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьОбластьЯчеекШаблона(Команда)
	
	Если ПолеТабличногоДокумента.ВыделенныеОбласти.Количество() = 1
		И ТипЗнч(ПолеТабличногоДокумента.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ТекущаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
		ОбъединитьОбластьЯчеекШаблонаСервер(ТекущаяОбласть.Имя);
		
	Иначе
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область!'");
		Сообщение.Поле = "ПолеТабличногоДокумента";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазъединитьОбластьЯчеекШаблона(Команда)
	
	Если ПолеТабличногоДокумента.ВыделенныеОбласти.Количество() = 1
		И ТипЗнч(ПолеТабличногоДокумента.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ТекущаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
		РазъединитьОбластьЯчеекШаблонаСервер(ТекущаяОбласть.Имя);
		
	Иначе
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область!'");
		Сообщение.Поле = "ПолеТабличногоДокумента";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВШаблонДоступнуюСтроку(Команда)
	
	ТекущаяСтрока = Элементы.ДоступныеПоля.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ВыбратьДоступнуюСтрокуВШаблон(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗакрыть(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьШаблонИзФайла(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		Ответ = Вопрос("Текущий шаблон будет потерян. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		
		ДиалогОткрытияФайла.Заголовок = "Открыть шаблон";
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.ПредварительныйПросмотр = Ложь;
		ДиалогОткрытияФайла.Фильтр = "Шаблоны|*.mxl";
		
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ИмпортироватьШаблонИзФайлаКлиент(ДиалогОткрытияФайла.ПолноеИмяФайла);
		КонецЕсли;
		
	#Иначе
		РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
		
		Если РежимРаботы.КлиентСерверный Тогда
			Предупреждение(НСтр("ru='Для того, чтобы импортировать файл, необходимо запустить конфигурацию в режиме толстого клиента.'"));
		Иначе
			
			Ответ = Вопрос("Текущий шаблон будет потерян. Продолжить?", РежимДиалогаВопрос.ДаНет);
			
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Режим = РежимДиалогаВыбораФайла.Открытие;
			ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
			
			ДиалогОткрытияФайла.Заголовок = "Открыть шаблон";
			ДиалогОткрытияФайла.ПолноеИмяФайла = "";
			ДиалогОткрытияФайла.ПредварительныйПросмотр = Ложь;
			ДиалогОткрытияФайла.Фильтр = "Шаблоны|*.mxl";
			
			Если ДиалогОткрытияФайла.Выбрать() Тогда
				ИмпортироватьШаблонИзФайлаСервер(ДиалогОткрытияФайла.ПолноеИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортШаблонаВФайл(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(Режим);
	
	ДиалогСохраненияФайла.Заголовок = "Сохранить шаблон";
	ДиалогСохраненияФайла.ПолноеИмяФайла = "";
	ДиалогСохраненияФайла.ПредварительныйПросмотр = Ложь;
	ДиалогСохраненияФайла.Фильтр = "Шаблоны|*.mxl";
	
	Если ДиалогСохраненияФайла.Выбрать() Тогда
		
		ЭкспортШаблонаВФайлСервер(ДиалогСохраненияФайла.ПолноеИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция СтруктураШаблона()
	
	ШаблонОбъекта = ?(ПустаяСтрока(Параметры.АдресШаблона), Неопределено, ПолучитьИзВременногоХранилища(Параметры.АдресШаблона));
	
	СтруктураШаблона = Неопределено;
		
	Если ТипЗнч(ШаблонОбъекта) = Тип("Структура") Тогда
		СтруктураШаблона = ШаблонОбъекта;
	Иначе
		ЗначениеКопирования = Неопределено;
		Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования);
		Если ЗначениеКопирования <> Неопределено Тогда
			СтруктураШаблона = ЗначениеКопирования.Шаблон.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураШаблона;
	
КонецФункции

// Возвращает параметры из строки-шаблона табличного документа.
//
&НаСервере
Функция ПозицииПараметров(ТекстЯчейки)
	
	Массив = Новый Массив;
	
	Начало = -1;
	Конец  = -1;
	СчетчикСкобокОткрывающих = 0;
	СчетчикСкобокЗакрывающих = 0;
	
	Для Индекс = 1 По СтрДлина(ТекстЯчейки) Цикл
		Симв = Сред(ТекстЯчейки, Индекс, 1);
		Если Симв = "[" Тогда
			СчетчикСкобокОткрывающих = СчетчикСкобокОткрывающих + 1;
			Если СчетчикСкобокОткрывающих = 1 Тогда
				Начало = Индекс;
			КонецЕсли;
		ИначеЕсли Симв = "]" Тогда
			СчетчикСкобокЗакрывающих = СчетчикСкобокЗакрывающих + 1;
			Если СчетчикСкобокЗакрывающих = СчетчикСкобокОткрывающих Тогда
				Конец = Индекс;
				
				Массив.Добавить(Новый Структура("Начало, Конец", Начало, Конец));
				
				Начало = -1;
				Конец  = -1;
				СчетчикСкобокОткрывающих = 0;
				СчетчикСкобокЗакрывающих = 0;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Возвращает структуру макета шаблона ценников и этикеток.
//
&НаСервере
Функция СтруктураМакетаШаблона()
	
	СтруктураМакетаШаблона = Новый Структура;
	ПараметрыШаблона       = Новый Соответствие;
	СчетчикПараметров      = 0;
	ПрефиксИмениПараметра  = "ПараметрМакета";
	
	ОбластьМакетаЭтикетки = ПолеТабличногоДокумента.ПолучитьОбласть();
	
	// Копирование настроек табличного документа.
	ЗаполнитьЗначенияСвойств(ОбластьМакетаЭтикетки, ПолеТабличногоДокумента);
	
	Для НомерКолонки = 1 По ОбластьМакетаЭтикетки.ШиринаТаблицы Цикл
		
		Для НомерСтроки = 1 По ОбластьМакетаЭтикетки.ВысотаТаблицы Цикл
			
			Ячейка = ОбластьМакетаЭтикетки.Область(НомерСтроки, НомерКолонки);
			Если Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
				
				МассивПараметров = ПозицииПараметров(Ячейка.Текст);
				
				КоличествоПараметров = МассивПараметров.Количество();
				Для Индекс = 0 По КоличествоПараметров - 1 Цикл
					
					Структура = МассивПараметров[КоличествоПараметров - 1 - Индекс];
					
					ИмяПараметра = Сред(Ячейка.Текст, Структура.Начало + 1, Структура.Конец - Структура.Начало - 1);
					Если Найти(ИмяПараметра, ПрефиксИмениПараметра) = 0 Тогда
						
						ЛеваяЧасть = Лев(Ячейка.Текст, Структура.Начало);
						ПраваяЧасть = Прав(Ячейка.Текст, СтрДлина(Ячейка.Текст) - Структура.Конец+1);
						
						СохраненноеИмяПараметраМакета = ПараметрыШаблона.Получить(ИмяПараметра);
						Если СохраненноеИмяПараметраМакета = Неопределено Тогда
							СчетчикПараметров = СчетчикПараметров + 1;
							Ячейка.Текст = ЛеваяЧасть + (ПрефиксИмениПараметра + СчетчикПараметров) + ПраваяЧасть;
							ПараметрыШаблона.Вставить(ИмяПараметра, ПрефиксИмениПараметра + СчетчикПараметров);
						Иначе
							Ячейка.Текст = ЛеваяЧасть + (СохраненноеИмяПараметраМакета) + ПраваяЧасть;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
				
				Если Найти(Ячейка.Параметр, ПрефиксИмениПараметра) = 0 Тогда
					СохраненноеИмяПараметраМакета = ПараметрыШаблона.Получить(Ячейка.Параметр);
					Если СохраненноеИмяПараметраМакета = Неопределено Тогда
						СчетчикПараметров = СчетчикПараметров + 1;
						ПараметрыШаблона.Вставить(Ячейка.Параметр, ПрефиксИмениПараметра + СчетчикПараметров);
						Ячейка.Параметр = ПрефиксИмениПараметра + СчетчикПараметров;
					Иначе
						Ячейка.Параметр = СохраненноеИмяПараметраМакета;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Вставляем в параметры штрихкод
	Если ПараметрыШаблона.Получить(ИмяПараметраШтрихкод()) = Неопределено Тогда
		Для Каждого Рисунок Из ОбластьМакетаЭтикетки.Рисунки Цикл
			Если Лев(Рисунок.Имя,8) = ИмяПараметраШтрихкод() Тогда
				ПараметрыШаблона.Вставить(ИмяПараметраШтрихкод(), ПрефиксИмениПараметра + (СчетчикПараметров+1));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Заменяем на пустую картинку.
	Для Каждого Рисунок Из ОбластьМакетаЭтикетки.Рисунки Цикл
		Если Лев(Рисунок.Имя,8) = ИмяПараметраШтрихкод() Тогда
			Рисунок.Картинка = Новый Картинка;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураМакетаШаблона.Вставить("МакетЭтикетки"              , ОбластьМакетаЭтикетки);
	СтруктураМакетаШаблона.Вставить("ИмяОбластиПечати"           , ПолеТабличногоДокумента.ОбластьПечати.Имя);
	СтруктураМакетаШаблона.Вставить("ТипКода"                    , ТипКода);
	СтруктураМакетаШаблона.Вставить("РазмерШрифта"               , РазмерШрифта);
	СтруктураМакетаШаблона.Вставить("ОтображатьТекст"            , ОтображатьТекст);
	СтруктураМакетаШаблона.Вставить("ПараметрыШаблона"           , ПараметрыШаблона);
	СтруктураМакетаШаблона.Вставить("РедакторТабличныйДокумент"  , ПолеТабличногоДокумента);
	СтруктураМакетаШаблона.Вставить("КоличествоПоВертикали"      , КоличествоПоВертикали);
	СтруктураМакетаШаблона.Вставить("КоличествоПоГоризонтали"    , КоличествоПоГоризонтали);
	СтруктураМакетаШаблона.Вставить("УголПоворота"               , УголПоворота);
	
	Возврат СтруктураМакетаШаблона;
	
КонецФункции

// Выполняет проверку размещения ценников и этикеток на листе с заданными параметрами.
//
&НаСервере
Процедура ПроверитьУмещение(Отказ)
	
	ОбластьМакета = ПолеТабличногоДокумента.ПолучитьОбласть(ПолеТабличногоДокумента.ОбластьПечати.Имя);
	НовыйТабличныйДокумент = Новый ТабличныйДокумент;
	НовыйТабличныйДокумент.ПолеСверху=0;
	НовыйТабличныйДокумент.ПолеСнизу=0;
	НовыйТабличныйДокумент.ПолеСлева=0;
	НовыйТабличныйДокумент.ПолеСправа=0;
	
	
	Если НЕ (ПолеТабличногоДокумента.ОбластьПечати.Лево = 0 И ПолеТабличногоДокумента.ОбластьПечати.Право = 0) Тогда
		
		МассивТаблиц = Новый Массив;
		Для Инд = 1 По КоличествоПоГоризонтали Цикл
			МассивТаблиц.Добавить(ОбластьМакета);
		КонецЦикла;
		
		Пока НЕ НовыйТабличныйДокумент.ПроверитьПрисоединение(МассивТаблиц) Цикл
			МассивТаблиц.Удалить(МассивТаблиц.Количество()-1);
		КонецЦикла;
		
		Если КоличествоПоГоризонтали <> МассивТаблиц.Количество() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Максимальное количество по горизонтали:'") + " " + МассивТаблиц.Количество();
			Сообщение.Поле  = "КоличествоПоГоризонтали";
			Сообщение.Сообщить();
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ (ПолеТабличногоДокумента.ОбластьПечати.Верх = 0 И ПолеТабличногоДокумента.ОбластьПечати.Низ = 0) Тогда
		
		МассивТаблиц = Новый Массив;
		Для Инд = 1 По КоличествоПоВертикали Цикл
			МассивТаблиц.Добавить(ОбластьМакета);
		КонецЦикла;
		
		Пока НЕ НовыйТабличныйДокумент.ПроверитьВывод(МассивТаблиц) Цикл
			МассивТаблиц.Удалить(МассивТаблиц.Количество()-1);
		КонецЦикла;
		
		Если КоличествоПоВертикали <> МассивТаблиц.Количество() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Максимальное количество по вертикали:'") +" " + МассивТаблиц.Количество();
			Сообщение.Поле  = "КоличествоПоВертикали";
			Сообщение.Сообщить();
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает область печати в табличном документе и рисует по краю пунктирную рамку.
//
&НаСервере
Процедура УстановитьОбластьПечатиНаСервере(ИмяОбласти)
	
	ВыделеннаяОбласть = ПолеТабличногоДокумента.Область(ИмяОбласти);
	
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
	РедкийПунктир = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
	
	Если ПолеТабличногоДокумента.ОбластьПечати <> Неопределено Тогда
		ПолеТабличногоДокумента.ОбластьПечати.Обвести(НетЛинии,НетЛинии,НетЛинии,НетЛинии);
	КонецЕсли;
	
	ПолеТабличногоДокумента.ОбластьПечати = ВыделеннаяОбласть;
	ПолеТабличногоДокумента.ОбластьПечати.Обвести(РедкийПунктир,РедкийПунктир,РедкийПунктир,РедкийПунктир);
	
	ПолеТабличногоДокумента.ОбластьПечати.АвтоВысотаСтроки = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьВШаблонРисунокШтрихкода(ИмяТекущейОбласти)
	
	//получим рисунок штрихкода из дополнительного макета
	МакетШтрихкода = Новый Картинка(Справочники.ХранилищеШаблонов.ПолучитьМакет("КартинкаШтрихкода"));
	
	РисунокШтрихкода = ПолеТабличногоДокумента.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Индекс = ПолеТабличногоДокумента.Рисунки.Индекс(РисунокШтрихкода);
	ПолеТабличногоДокумента.Рисунки[Индекс].Картинка = МакетШтрихкода;
	ПолеТабличногоДокумента.Рисунки[Индекс].Имя = ИмяПараметраШтрихкод()+СтрЗаменить(Новый УникальныйИдентификатор,"-","_");
	ПолеТабличногоДокумента.Рисунки[Индекс].РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	ПолеТабличногоДокумента.Рисунки[Индекс].Расположить(ПолеТабличногоДокумента.Область(ИмяТекущейОбласти));
	
КонецПроцедуры

// Возвращает строку с именем параметра штрихкода для передачи в СКД (Схему Компоновки Данных).
//
&НаКлиентеНаСервереБезКонтекста
Функция ИмяПараметраШтрихкод()
	
	Возврат "Штрихкод";
	
КонецФункции

&НаСервере
Процедура ОбъединитьОбластьЯчеекШаблонаСервер(ИмяОбласти)
	
	Область = ПолеТабличногоДокумента.Область(ИмяОбласти);
	Область.Объединить();
	
КонецПроцедуры

&НаСервере
Процедура РазъединитьОбластьЯчеекШаблонаСервер(ИмяОбласти)
	
	Область = ПолеТабличногоДокумента.Область(ИмяОбласти);
	Область.Разъединить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДоступнуюСтрокуВШаблон(ВыбраннаяСтрока)
	
	// Перед началом добавления необходимо выделить область в табличном документе.
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Предупреждение(НСтр("ru = 'Для переноса поля шаблона нужно выделить ячейку или область ячеек!'"));
		Возврат;
	Иначе
		ТекущаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
		ОбъединитьОбластьЯчеекШаблонаСервер(ТекущаяОбласть.Имя);
	КонецЕсли;

	// Подготовка данных.
	ИмяПоляВШаблоне = Строка(КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока).Поле);
	
	// Размещение поля в шаблоне.
	Если ИмяПоляВШаблоне = ИмяПараметраШтрихкод() Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Добавить штрихкод, как картинку?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ВставитьВШаблонРисунокШтрихкода(ТекущаяОбласть.Имя);
			
		Иначе
			
			ТекущаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
			ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + "["+ИмяПоляВШаблоне+"]";
			
		КонецЕсли;
		
	Иначе
		
		ТекущаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
		ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + "["+ИмяПоляВШаблоне+"]";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВТабличныйДокументШаблонПоУмолчанию(ИмяШаблона)
	
	ШаблонПоУмолчанию = Справочники.ХранилищеШаблонов.ПолучитьМакет(ИмяШаблона);
	
	ПолеТабличногоДокумента = ШаблонПоУмолчанию;
	
КонецПроцедуры

&НаСервере
Функция СохранитьЗакрытьСервер(Отказ)
	
	ПроверитьУмещение(Отказ);
	Возврат ПоместитьВоВременноеХранилище(СтруктураМакетаШаблона(), Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ИмпортироватьШаблонИзФайлаКлиент(ИмяФайла)
	
	ПолеТабличногоДокумента.Очистить();
	ПолеТабличногоДокумента.Прочитать(ИмяФайла);
	
КонецПроцедуры

&НаСервере
Процедура ИмпортироватьШаблонИзФайлаСервер(ИмяФайла)
	
	ПолеТабличногоДокумента.Очистить();
	ПолеТабличногоДокумента.Прочитать(ИмяФайла);
	
КонецПроцедуры


&НаКлиенте
Процедура ЭкспортШаблонаВФайлСервер(ИмяФайла)
	
	ПолеТабличногоДокумента.Записать(ИмяФайла);
	
КонецПроцедуры
