
&НаКлиенте
Процедура ШаблонЗагрузкиПриИзменении(Элемент)
	ШаблонЗагрузкиПриИзмененииНаСервере();
КонецПроцедуры

Процедура УстановитьДоступность()
	Если не РольДоступна("ПолныеПрава") и ЗначениеЗаполнено(ШаблонЗагрузки) Тогда
		Элементы.ШаблонЗагрузки.Доступность=Ложь;
	КонецЕсли;
КонецПроцедуры	


&НаСервере
Процедура ШаблонЗагрузкиПриИзмененииНаСервере()
	ТЗ_рез = РеквизитФормыВЗначение("ДанныеФайла");
    МассивРеквизитов = Новый Массив;
    
    //Удалим ранее созданные колонки в ТЗ    
    Для Каждого Колонка Из ТЗ_рез.Колонки Цикл
        МассивРеквизитов.Добавить("ДанныеФайла." + Колонка.Имя);        
    КонецЦикла;
    ИзменитьРеквизиты(,МассивРеквизитов);	
	
	//Удалим отображение таблицы на форме и создадим новую
	ЭлементТаблица = Элементы.Найти("ДанныеФайла");
    Если ЭлементТаблица <> Неопределено Тогда
        Элементы.Удалить(ЭлементТаблица);        
	КонецЕсли;  
	
	
        ЭлементТаблица=Элементы.Добавить("ДанныеФайла",Тип("ТаблицаФормы"),Элементы.ГруппаДанныеФайла);
        ЭлементТаблица.ПутьКДанным = "ДанныеФайла";
        ЭлементТаблица.Отображение = ОтображениеТаблицы.Список;
	
		
		
    //Создадим реквизиты ТЗ
    МассивРеквизитов.Очистить();
	
    Для Каждого Колонка ИЗ ШаблонЗагрузки.Колонки Цикл
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип(Колонка.Тип));
        НоваяКолонка = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов(МассивТипов), "ДанныеФайла");
        МассивРеквизитов.Добавить(НоваяКолонка);
	КонецЦикла; 
    ИзменитьРеквизиты(МассивРеквизитов);  
   // ЗначениеВРеквизитФормы(ТЗ_рез, "ДанныеФайла");
	
    //Создаем элементы на форме для отображения колонок
    ЭлементТЗ = Элементы.ДанныеФайла;
    Для Каждого Колонка ИЗ ШаблонЗагрузки.Колонки Цикл
        НовыйЭлементФормы = Элементы.Добавить("ДанныеФайла"+Колонка.Имя, Тип("ПолеФормы"), ЭлементТЗ);
        НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
        НовыйЭлементФормы.ПутьКДанным = "ДанныеФайла." + Колонка.Имя;
    КонецЦикла;
        	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.Открытие; 
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытияФайла.ПолноеИмяФайла = ""; 
	Текст = "ru = ""Файл xls""; en = ""file xls"""; 
	Фильтр = НСтр(Текст)+"(*.xls)|*.xls"; 
	ДиалогОткрытияФайла.Фильтр = Фильтр; 
	ДиалогОткрытияФайла.МножественныйВыбор = ложь; 
	ДиалогОткрытияФайла.Заголовок = "Выберите файл"; 
	Если ДиалогОткрытияФайла.Выбрать() Тогда 
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы; 
		Для Каждого ИмяФайла Из МассивФайлов Цикл 
			ВыбФайл = Новый Файл(ИмяФайла); 
			Файл=ИмяФайла; 
		КонецЦикла; 
	Иначе 
		Текст = "ru = ""Файл(ы) не выбран!""; en = ""File(s) not selected!"""; 
		Предупреждение(НСтр(Текст)); 
	КонецЕсли; 
КонецПроцедуры


Функция ПолучитьШаблонФайла()
	масс=Новый массив;	
	Для каждого стр из ШаблонЗагрузки.Колонки Цикл
		масс.Добавить(новый Структура("Имя,Номер,Тип,ДопВыражение",стр.Имя,Стр.Номер,Стр.Тип,Стр.ДопВыражение));
	КонецЦикла;
	Возврат масс;
КонецФункции	


&НаКлиенте
Процедура ПрочитатьИзФайла(Команда)
	стрФайла=ПолучитьШаблонФайла();

	ВыбФайл = Новый Файл(Файл);
	Состояние("Обработка файла Microsoft Excel...");
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат;
	КонецЕсли;	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ЭтаФорма.Файл); 
			
		ExcelЛист = Excel.Sheets(1); 
	Исключение
		Сообщить("Ошибка. Возможно неверно указан номер листа книги Excel.");
		Возврат ;
		
	КонецПопытки;	
	xlLastCell = 11;
	
	ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);
	RowCount = ActiveCell.Row; //Строчек
	ColumnCount = ActiveCell.Column; //Столбцов	
	
	Для Row = 2 По RowCount Цикл 
		стрТЗ=ДанныеФайла.Добавить();
		Для каждого стр из стрФайла Цикл
			Если стр.Тип="Строка" Тогда
				Если стр.ДопВыражение<>"" Тогда
					Попытка
						стрТЗ[стр.Имя]=Вычислить(СтрЗаменить(стр.ДопВыражение,"&"+стр.Имя,ExcelЛист.Cells(Row,стр.Номер).Text));
					Исключение
					    стрТЗ[стр.Имя]=ExcelЛист.Cells(Row,стр.Номер).Text;
					КонецПопытки;
				Иначе	
					стрТЗ[стр.Имя]=ExcelЛист.Cells(Row,стр.Номер).Text;
				КонецЕсли;
			Иначе
				стрТЗ[стр.Имя]=ExcelЛист.Cells(Row,стр.Номер).Value;	
			КонецЕсли;	
		КонецЦикла;	
		//Для каждого стр из ДанныеФайла.кол
		//Наим = ExcelЛист.Cells(Row,1).Text;
		//ДатаР = ExcelЛист.Cells(Row,2).Text;
		//ИНН = ExcelЛист.Cells(Row,3).Text;
		//СНИЛС = ExcelЛист.Cells(Row,4).Text;
		//Передаем данные в процедуру записи данных
		//
		//
		//
		//ЗагрузитьЗаписать(Наим,ДатаР,ИНН,СНИЛС)
		
	КонецЦикла;	
	
КонецПроцедуры

Функция СохранитьФайлНаСервере(АдресХранилища, Путь, НовоеИмя = Неопределено)  
    ФайлИзХранилища = ПолучитьИзВременногоХранилища(Строка(АдресХранилища));
    ФайлИзХранилища.Записать(Путь+НовоеИмя);
    //КопироватьФайл(ФайлИзХранилища,Путь+НовоеИмя);
    СуществованиеФайла = Новый Файл(Путь+НовоеИмя);
    ЕстьФайл = СуществованиеФайла.Существует();
    Если ЕстьФайл Тогда 
        Возврат НовоеИмя;
    Иначе 
        Возврат ЕстьФайл;   
    КонецЕсли;
    
КонецФункции

&НаСервере
Процедура СопоставитьНаСервере()
	
	
	ТекстСхемы = ШаблонЗагрузки.СКД;
	Если ТекстСхемы <> "" Тогда 
		ТЗ_рез = РеквизитФормыВЗначение("ИтоговаяТЗ");

		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстСхемы);
		Схема= СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СхемаКомпоновкиДанных"));
	
    МассивРеквизитов = Новый Массив;
    
    //Удалим ранее созданные колонки в ТЗ    
    Для Каждого Колонка Из ТЗ_рез.Колонки Цикл
        МассивРеквизитов.Добавить("ИтоговаяТЗ." + Колонка.Имя);        
    КонецЦикла;
    ИзменитьРеквизиты(,МассивРеквизитов);	
	
	//Удалим отображение таблицы на форме и создадим новую
	ЭлементТаблица = Элементы.Найти("ИтоговаяТЗ");
    Если ЭлементТаблица <> Неопределено Тогда
        Элементы.Удалить(ЭлементТаблица);        
	КонецЕсли; 		
		
        ЭлементТаблица=Элементы.Добавить("ИтоговаяТЗ",Тип("ТаблицаФормы"),Элементы.ГруппаДляЗагрузки);
        ЭлементТаблица.ПутьКДанным = "ИтоговаяТЗ";
        ЭлементТаблица.Отображение = ОтображениеТаблицы.Список;
		
    //Создадим реквизиты ТЗ
    МассивРеквизитов.Очистить();
		ТЗ_рез=ПолучитьИтоговуюТЗ(Схема);
		
    Для Каждого Колонка ИЗ ТЗ_рез.Колонки Цикл
        НоваяКолонка = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ИтоговаяТЗ");
        МассивРеквизитов.Добавить(НоваяКолонка);
	КонецЦикла; 
    ИзменитьРеквизиты(МассивРеквизитов);  
   // ЗначениеВРеквизитФормы(ТЗ_рез, "ДанныеФайла");
	
    //Создаем элементы на форме для отображения колонок
    ЭлементТЗ = Элементы.ИтоговаяТЗ;
    Для Каждого Колонка ИЗ ТЗ_рез.Колонки Цикл
        НовыйЭлементФормы = Элементы.Добавить("ИтоговаяТЗ"+Колонка.Имя, Тип("ПолеФормы"), ЭлементТЗ);
        НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
        НовыйЭлементФормы.ПутьКДанным = "ИтоговаяТЗ." + Колонка.Имя;
    КонецЦикла;
        	
	ЗначениеВРеквизитФормы(ТЗ_рез,"ИтоговаяТЗ");
		
	Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаДляЗагрузки;	
		
	Иначе		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задана схема сопоставления");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сопоставить(Команда)
	СопоставитьНаСервере();
КонецПроцедуры



Функция ПолучитьИтоговуюТЗ(СКД)
		
	КомпоновщикН=новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикН.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	КомпоновщикН.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	
	//Для каждого пар из СКД.Параметры Цикл
	//	злПарам=КомпоновщикН.Настройки.ПараметрыДанных.Элементы.Найти(пар.Имя);
	//	злПарам.Значение=пар.Значение;
	//	злПарам.Использование=Истина;
	//	
	//КонецЦикла;	
	//
	//Для каждого СтрПарам Из КомпоновщикН.Настройки.ПараметрыДанных.Элементы Цикл
	//	ЭлПарам = КомпоновщикН.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(СтрПарам.Параметр);
	//	Если ЭлПарам <> Неопределено Тогда
	//		Если ЭлПарам.Заголовок = "Начало периода" Тогда
	//			СтрПарам.Значение = НачалоМесяца(ПериодРегистрации);
	//			СтрПарам.Использование = Истина;
	//		ИначеЕсли ЭлПарам.Заголовок = "Конец периода" Или ЭлПарам.Заголовок = "Период" Тогда
	//			СтрПарам.Значение = КонецМесяца(ПериодРегистрации);
	//			СтрПарам.Использование = Истина;
	//		КонецЕсли; 
	//	КонецЕсли;                                             
	//КонецЦикла;
	
	
	//Из схемы возьмем настройки по умолчанию
	Настройки = КомпоновщикН.Настройки;
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД,
	Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,новый Структура("ДанныеФайла",ДанныеФайла.Выгрузить()),);
	
	//Очищаем поле табличного документа
	//Выводим результат в табличный документ
	//ТаблицаНоменклатуры.Очистить();
    //ТЗРезультат=новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	тзИтоговая=новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(тзИтоговая);

	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Возврат тзИтоговая;
КонецФункции

&НаКлиенте
Процедура Загрузить(Команда)
	ОповеститьОВыборе(ИтоговаяТЗ);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ШаблонЗагрузки) Тогда
		ШаблонЗагрузкиПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ШаблонЗагрузки=Справочники.остШаблоныЗагрузки.НайтиПоНаименованию(Параметры.НаименованиеШаблона);
КонецПроцедуры



