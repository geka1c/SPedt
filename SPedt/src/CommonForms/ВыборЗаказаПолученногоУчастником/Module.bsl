
&НаКлиенте
Процедура ПолучитьЗаказы(Команда)
	Посылки.Очистить();
	Если ЗначениеЗаполнено(Посылка) Тогда
		СписокПосылок = ЗаполнитьЗаказамиВыданнымиУчастникуДанныеСайта_ПоПосылке(Посылка);
		Для Каждого элем из СписокПосылок Цикл
			ОповеститьОбИзменении(элем.Значение);
		КонецЦикла;	
	 	
	
	ИначеЕсли Локально Тогда
		Отказ = Ложь;
		Если не ЗначениеЗаполнено(Участник) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо указать ""Участника""",,"Участник");
			Отказ = истина;
		КонецЕсли;	
		Если не ЗначениеЗаполнено(ДатаВыдачи) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо указать ""ДатаВыдачи""",,"ДатаВыдачи");
			Отказ = истина;
		КонецЕсли;	
		Если отказ тогда Возврат КонецЕсли;	
		ЗаполнитьЗаказамиВыданнвмиУчастникуЛокально();
	Иначе
		СписокПосылок = ЗаполнитьЗаказамиВыданнымиУчастникуДанныеСайта();
		Для Каждого элем из СписокПосылок Цикл
			ОповеститьОбИзменении(элем.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ЗаполнитьПустыеШтрихКоды();
	Если не ВозвратыБезДетализации Тогда
		ПолучитьТоварыНаСервере();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеТовары(Команда)
	Элементы.Товары.ОтборСтрок	= Неопределено;
КонецПроцедуры


Процедура ЗаполнитьПустыеШтрихКоды()
	строки_безШК	= Посылки.НайтиСтроки(новый Структура("ШК",Справочники.Мегаордера.ПустаяСсылка()));	
	Для каждого стр из строки_безШК Цикл
		стр.ШК=СП_Штрихкоды.ПолучитьМегаордер(стр.Посылка);
	КонецЦикла;	
КонецПроцедуры	


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВозвратыБезДетализации 	= Константы.ВозвратыБезДетализации.Получить();
	ДниВозврата 			= Константы.ДниВозврата.Получить();
	Участник 				= Параметры.Участник;
	Локально 				= Параметры.Локально;
	Если ЗначениеЗаполнено(Параметры.ДанныеШК) Тогда
		Посылка = Параметры.ДанныеШК.Посылка;
	ИначеЕсли ЗначениеЗаполнено(Параметры.ДатаВыдачи) Тогда
		ДатаВыдачи = параметры.ДатаВыдачи;
	Иначе
		ДатаВыдачи = ТекущаяДата() - ДниВозврата* 24*60*60;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсеТовары(Команда)
	ОтборПосылки = Элементы.Посылки.ТекущиеДанные.Посылка;
	
	Для каждого стр из Товары Цикл
		Если ЗначениеЗаполнено(ОтборПосылки) и стр.Посылка = ОтборПосылки Тогда
			стр.Подбор=Истина;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура Картинка(Команда)
	Если элементы.Товары.ТекущиеДанные <> неопределено Тогда
		ЗапуститьПриложение(элементы.Товары.ТекущиеДанные.Картинка);
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура СнятьВсеПометкиТовары(Команда)
	ОтборПосылки = Элементы.Посылки.ТекущиеДанные.Посылка;
	
	Для каждого стр из Товары Цикл
		Если ЗначениеЗаполнено(ОтборПосылки) и стр.Посылка = ОтборПосылки Тогда
			стр.Подбор=Ложь;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры



функция ЗаполнитьЗаказамиВыданнымиУчастникуДанныеСайта_ПоПосылке(Посылка)
	СписокПосылок = Новый СписокЗначений();

	новаяСтрока	= Посылки.Добавить();
	новаяСтрока.Посылка 	= Посылка;
//	новаяСтрока.ДатаВыдачи 	= элем.ДатаВыдачи;
//				новаяСтрока.ПунктВыдачи = элем.ПунктВыдачи;
	Если 	Не 	ЗначениеЗаполнено(Посылка.Организатор) 
			Или Посылка.Организатор	= Справочники.Организаторы.нулевой Тогда
			СписокПосылок.Добавить(Посылка);
	КонецЕсли;
	Если СписокПосылок.Количество()>0 Тогда
			СтоСПОбмен_Посылки.Загрузить_СоставПосылкиПоКодам(СписокПосылок);
	КонецЕсли;	
	Участник = Посылка.Участник;
	Возврат СписокПосылок;	
КонецФункции


функция ЗаполнитьЗаказамиВыданнымиУчастникуДанныеСайта()
	СписокПосылок = Новый СписокЗначений();
	ВыданныеПокупки_ССайта=СтоСПОбмен_Возвраты.Загрузить_ВыданныеПокупки(Участник, ДатаВыдачи);
	Если ВыданныеПокупки_ССайта.авторизацияВыполнена Тогда
		тз =  ВыданныеПокупки_ССайта.результат;
		тз.Сортировать("ДатаВыдачи Убыв");
		
		Для Каждого элем Из тз Цикл
			Если ТипЗнч(элем.Покупка) = Тип("СправочникСсылка.Посылки") Тогда
				новаяСтрока	= Посылки.Добавить();
				новаяСтрока.Посылка 	= элем.Покупка;
//				новаяСтрока.Организатор = элем.Покупка.Организатор;
				новаяСтрока.ДатаВыдачи 	= элем.ДатаВыдачи;
				новаяСтрока.ПунктВыдачи = элем.ПунктВыдачи;
				Если 	Не 	ЗначениеЗаполнено(элем.Покупка.Организатор) 
						Или элем.Покупка.Организатор	= Справочники.Организаторы.нулевой Тогда
					СписокПосылок.Добавить(новаяСтрока.посылка);
				КонецЕсли;
			ИначеЕсли ТипЗнч(элем.Покупка) = Тип("СправочникСсылка.Покупки") Тогда
				Результат	= СтоСПОбмен_Посылки_ПоЗакзу.Загрузить(элем.Покупка, Участник);	// Вставить содержимое обработчика.
				Если 	Результат <> Неопределено и
						Результат.авторизацияВыполнена и
						Результат.Результат.Количество()>0	Тогда

					Для каждого элемПосылка из Результат.Результат[0].Посылки Цикл 
						новая_Посылка			= Посылки.Добавить();
						новая_Посылка.Посылка	= элемПосылка.значение;
						новая_Посылка.ШК		= элемПосылка.значение.ШК;
						новая_Посылка.ДатаВыдачи  = элем.ДатаВыдачи;
						новая_Посылка.ПунктВыдачи = элем.ПунктВыдачи;
						
						СП_РаботаСоСправочниками.ОбновитьМегаордерПосылки(новая_Посылка.ШК,новая_Посылка.Посылка);
			
					КонецЦикла;
			КонецЕсли;					
				
			Иначе	
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(элем.Покупка);
			КонецЕсли;
		КонецЦикла;
		Если СписокПосылок.Количество()>0 Тогда
			СтоСПОбмен_Посылки.Загрузить_СоставПосылкиПоКодам(СписокПосылок);
		КонецЕсли;	

	КонецЕсли;
	Возврат СписокПосылок;	
КонецФункции

&НаКлиенте
Процедура ПолучитьТовары(Команда)
	ПолучитьТоварыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьТоварыНаСервере()
	результат = СтоСПОбмен_Возвраты.ТоварыВЗаказе(Посылки.Выгрузить().ВыгрузитьКолонку("Посылка"));
	Если результат.Данные <> Неопределено Тогда
		Товары.Загрузить(результат.Данные);
	КонецЕсли;	
КонецПроцедуры
	

Процедура ЗаполнитьЗаказамиВыданнвмиУчастникуЛокально()	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиТоваровОбороты.Покупка КАК Посылка,
		|	ОстаткиТоваровОбороты.Период КАК ДатаВыдачи
		|ПОМЕСТИТЬ втСбор
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваров.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Участник = &Участник) КАК
		|		ОстаткиТоваровОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТранзитОбороты.ПокупкаСсылка,
		|	ТранзитОбороты.Период
		|ИЗ
		|	РегистрНакопления.Транзит.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Участник = &Участник) КАК ТранзитОбороты
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСбор.Посылка КАК Посылка,
		|	втСбор.Посылка.Организатор КАК Организатор,
		|	МАКСИМУМ(втСбор.ДатаВыдачи) КАК ДатаВыдачи,
		|	втСбор.Посылка.ПунктВыдачи КАК ПунктВыдачи
		|ИЗ
		|	втСбор КАК втСбор
		|СГРУППИРОВАТЬ ПО
		|	втСбор.Посылка,
		|	втСбор.Посылка.Организатор,
		|	втСбор.Посылка.ПунктВыдачи
		|УПОРЯДОЧИТЬ ПО
		|	МАКСИМУМ(втСбор.ДатаВыдачи) УБЫВ";

	Запрос.УстановитьПараметр("Участник", 		Участник);
    Запрос.УстановитьПараметр("ДатаНачала", 	ДатаВыдачи);                                       
	Запрос.УстановитьПараметр("ДатаОкончания",	КонецДня(ТекущаяДата()));
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

    Посылки.Загрузить(Результат.Выгрузить());
КонецПроцедуры


Процедура УстановитьВидимость()
	Элементы.Товары.Видимость = не ВозвратыБезДетализации;	
КонецПроцедуры	


&НаКлиенте
Процедура Выбрать(Команда)
	Если ВозвратыБезДетализации Тогда
		Если элементы.посылки.ТекущиеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо выбрать посылку!");
			Возврат;
		КонецЕсли;
		Закрыть(Элементы.Посылки.ТекущиеДанные.ШК);
	Иначе	
		ВыбранныеТовары	= ВыбранныеТовары();
		Закрыть(ВыбранныеТовары);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
	ПолучитьЗаказы(Неопределено);
КонецПроцедуры


//
Функция ВыбранныеТовары()
	списокПосылок	=	Новый СписокЗначений();
	тзПосылок = Товары.Выгрузить(новый Структура("Подбор", Истина));

	
	Для каждого элем из тзПосылок Цикл
		стрТовар	= новый Структура;
		Для каждого Колонка Из тзПосылок.Колонки Цикл
	  		стрТовар.Вставить(Колонка.Имя, элем[Колонка.Имя]);
		КонецЦикла;
		найдено = Посылки.НайтиСтроки(Новый структура("Посылка", элем.Посылка));
		стрТовар.Вставить("ШК", найдено[0].ШК);
		списокПосылок.Добавить(стрТовар);
	КонецЦикла;
	
	Возврат списокПосылок;
КонецФункции

Функция СтруктураИзСтроки(Строка)
	
	
КонецФункции	


//


&НаКлиенте
Процедура ПосылкиПриАктивизацииСтроки(Элемент)
	Если Элемент.текущиеДанные	= неопределено Тогда Возврат; КонецЕсли;
	Элементы.Товары.ОтборСтрок	= новый ФиксированнаяСтруктура("Посылка",Элемент.текущиеДанные.Посылка);


	
//	УстановитьВидимость();
КонецПроцедуры


