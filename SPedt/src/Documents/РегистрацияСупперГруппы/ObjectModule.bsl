

#Область ЗагрузкаСоставаГруппы

Процедура  СериолизоватьВХМЛ() Экспорт
	ПолученныеДанные="";
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd","http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьНачалоЭлемента("superGroups");
	Для каждого стр из Группы Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("superGroup");
		ЗаписьXML.ЗаписатьТекст(Стр.СупперГруппа.Код);
		ЗаписьXML.ЗаписатьКонецЭлемента();  
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьКонецЭлемента();	//groups
	ОтправленныеДанные= ЗаписьXML.Закрыть();
КонецПроцедуры

Процедура  ОтправитьНаСайт() Экспорт
	ПолученныеДанные="";
	СтрокаПротокола=ПротоколыПередач.Добавить();
	СтрокаПротокола.ДатаНачала=ТекущаяДата();
	ИмяФайлаОтвета=ОбменССайтом();
	Если аспПроцедурыОбменаДанными.АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		СтрокаПротокола.Результат="Авторизация выполнена";
	Иначе
		СтрокаПротокола.Результат="Авторизация не выполнена";
	КонецЕсли;	 
	Если ЗначениеЗаполнено(ИмяФайлаОтвета) Тогда
		ПолученныеДанные=аспПроцедурыОбменаДанными.ФайлВСтроку(ИмяФайлаОтвета);
		ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"www.100sp.ru","www.100sp.ru/api/distributor/upload/back");

	Иначе
		СтрокаПротокола.Результат="Нет ответа";
	КонецЕсли;
	СтрокаПротокола.ДатаОкончания=ТекущаяДата();
//	ОбработатьПолученныеДанные(отказ);
КонецПроцедуры

Функция ОбменССайтом() 
	Параметры    = новый Структура;
	Параметры.Вставить("token",Константы.Токен.Получить());
	Параметры.Вставить("xml",  СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ",""));
	АдресСкрипта = Константы.АдресЗагрузкиССайта.Получить();
	ПолученныйФайл=СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры,АдресСкрипта);
	Возврат ПолученныйФайл;		
КонецФункции

Процедура ДеСериализоватьИзХМЛ() Экспорт
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Структураincomes=новый Структура(
	"orderType,uid,pid,orderId,stickerId,groupCode,date,arrivalNumber,firstIncomeCode ,message,result",
	"Строка","Число","Число","Строка","Строка","Строка","Дата","Строка","Число","Строка","Строка");
	
	ТЗРезультат=аспПроцедурыОбменаДанными.ТЗпоСтруктуре(Структураincomes);											
	
	Тип_distributors=ФабрикаXDTO.Тип("http://www.100sp.ru/api/distributor/upload/back", "distributors");
	
	структураXDTO= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	Если структураXDTO.auth.result="ok" Тогда
		авторизацияВыполнена=истина;
		Состав.Очистить();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не пройдена аутентификация!");
	КонецЕсли;
	
	Если структураXDTO.superGroups<>Неопределено Тогда
		Для каждого стр из структураXDTO.superGroups.superGroup Цикл
			СуперГруппа	= СП_Штрихкоды.ПолучитьДанныеПоШК(стр.documentNumber).ШК;	
			Если не ЗначениеЗаполнено(СуперГруппа) Тогда Продолжить; КонецЕсли;
			Если стр.orders<>Неопределено Тогда
				Для каждого заказ из стр.orders.order Цикл
					СтрокаЗаказов				= Состав.Добавить();
					СтрокаЗаказов.СупперГруппа	= СуперГруппа;
					Если 	  заказ.orderType	= "package" Тогда    
						СтрокаЗаказов.Покупка 	= СП_РаботаСоСправочниками.ПолучитьПосылкуПо_Коду(заказ.packageId);
						СтрокаЗаказов.Участник	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(заказ.receiverUid);
					ИначеЕсли 	  заказ.orderType	= "sp" Тогда    
						СтрокаЗаказов.Покупка 	= СП_РаботаСоСправочниками.ПолучитьПокупкуПо_Коду(заказ.pid);
						СтрокаЗаказов.Участник	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(заказ.uid);
					ИначеЕсли заказ.orderType	= "shop" Тогда	
						СтрокаЗаказов.Покупка 	= СП_РаботаСоСправочниками.ПолучитьЗаказПо_Коду(заказ.orderId);
						СтрокаЗаказов.Участник	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(заказ.uid);
					ИначеЕсли заказ.orderType	= "bulletin" Тогда	
						СтрокаЗаказов.Покупка 	= СП_РаботаСоСправочниками.ПолучитьПристройПо_Коду(заказ.orderId);
						СтрокаЗаказов.Участник	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(заказ.uid);;
					ИначеЕсли заказ.orderType	= "group" Тогда	
						СтрокаЗаказов.Покупка 	= СП_РаботаСоСправочниками.ПолучитьКоробкуПо_Коду(заказ.groupCode);
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	
	Для Каждого стр Из Группы Цикл
		обСупергруппа=стр.СупперГруппа.ПолучитьОбъект();
		ВсегоКолен=обСупергруппа.Маршрут.Количество();
		обСупергруппа.Маршрут[ВсегоКолен-1].ДатаДоставкиФакт=Дата;
		Попытка
			обСупергруппа.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать дату доставки в Суппергруппу: "+обСупергруппа.Ссылка);		
		КонецПопытки;
	КонецЦикла;	
	
	#Область ПравильноеПроведение
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.РегистрацияСупперГруппы.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	//СтоСПОбмен_Общий.ОтразитьСтоСПОбмен(ДополнительныеСвойства, Движения, Отказ);
	СтоСПОбмен_Общий.ОтразитьСтоСПОбмен_РН(ДополнительныеСвойства, Движения, Отказ);

	#КонецОбласти	
	//ДвиженияСпОбмен(Отказ, РежимПроведения);

КонецПроцедуры


#Область Обмен100СП


#КонецОбласти
