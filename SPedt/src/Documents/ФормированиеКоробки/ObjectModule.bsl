перем мТекущийПользователь;


Функция ВсеПартииЗаполнены()
	пустыеГабариты=Покупки.НайтиСтроки(новый Структура("Габарит",Справочники.Габариты.ПустаяСсылка()));
	пустыеМестаХранения=Покупки.НайтиСтроки(новый Структура("МестоХранения",Справочники.МестаХранения.ПустаяСсылка()));
	КоличествоПустыхПартий=0;
	Ошибки=Неопределено;
	Для каждого стр из Покупки Цикл
		Если не ЗначениеЗаполнено(стр.Партия) Тогда
			КоличествоПустыхПартий=КоличествоПустыхПартий+1;
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,"Объект.Покупки[%1].Партия","Данный заказ не найден на складе",,стр.НомерСтроки-1);
		КонецЕсли;
	КонецЦикла;	
	ВсеПартииЗаполнены=пустыеГабариты.Количество()=0 и пустыеМестаХранения.Количество()=0 и КоличествоПустыхПартий=0;
	Если не ВсеПартииЗаполнены Тогда
		ОтправленныеДанные="";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе присутствуют заказы не найденные на складе: ");
	КонецЕсли;	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	Возврат ВсеПартииЗаполнены;
КонецФункции



Процедура  СериолизоватьВХМЛ(отказ) Экспорт
	
	Если не ВсеПартииЗаполнены() Тогда отказ=истина; Возврат; КонецЕсли;
	ПолученныеДанные="";
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd","http://www.w3.org/2001/XMLSchema");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("groups");
	ЗаписьXML.ЗаписатьНачалоЭлемента("group");
	Если ВидОперации=Перечисления.ВидыОперацийФормированияКоробки.НаОднуТочку Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("distributorCode");
		ЗаписьXML.ЗаписатьТекст(ТочкаНазначения.Код);
		ЗаписьXML.ЗаписатьКонецЭлемента();  //distributorCode
	КонецЕсли;
	ЗаписьXML.ЗаписатьНачалоЭлемента("uniqueKey");
	ЗаписьXML.ЗаписатьТекст(Номер);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("name");
	ЗаписьXML.ЗаписатьТекст(НазваниеКоробки);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
	ТЗ=РазобратьКоробку();  
		ДобавитьСписоквХМЛизТЗ(ЗаписьXML,"items","item",ТЗ);
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	ЗаписьXML.ЗаписатьКонецЭлемента();	//groups
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ОтправленныеДанные= ЗаписьXML.Закрыть();
	Статус=Перечисления.СтатусОтпавкиНаСайт.Сформирован;
КонецПроцедуры

					   
Функция РазобратьКоробку()  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ФормированиеКоробкиПокупки.Покупка) = ТИП(Справочник.Покупки)
		|			ТОГДА ВЫРАЗИТЬ(ФормированиеКоробкиПокупки.Покупка.Код КАК ЧИСЛО)
		|	КОНЕЦ КАК pid,
		|	ФормированиеКоробкиПокупки.Участник.Код КАК uid,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ФормированиеКоробкиПокупки.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ФормированиеКоробкиПокупки.Покупка.Код
		|	КОНЕЦ КАК groupCode,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ФормированиеКоробкиПокупки.Покупка) = ТИП(Справочник.Заказы)
		|			ТОГДА ФормированиеКоробкиПокупки.Покупка.Код
		|	КОНЕЦ КАК orderId,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ФормированиеКоробкиПокупки.Покупка) = ТИП(Справочник.Посылки)
		|			ТОГДА ФормированиеКоробкиПокупки.Покупка.Код
		|	КОНЕЦ КАК packageId,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ФормированиеКоробкиПокупки.Покупка) = ТИП(Справочник.Покупки)
		|			ТОГДА ""sp""
		|		КОГДА ТИПЗНАЧЕНИЯ(ФормированиеКоробкиПокупки.Покупка) = ТИП(Справочник.Заказы)
		|			ТОГДА ""shop""
		|		КОГДА ТИПЗНАЧЕНИЯ(ФормированиеКоробкиПокупки.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ""group""
		|		КОГДА ТИПЗНАЧЕНИЯ(ФормированиеКоробкиПокупки.Покупка) = ТИП(Справочник.Посылки)
		|			ТОГДА ""package""
		|	КОНЕЦ КАК orderType,
		|	ФормированиеКоробкиПокупки.Ссылка КАК Документ,
		|	ФормированиеКоробкиПокупки.Покупка КАК Покупка
		|ПОМЕСТИТЬ Пред
		|ИЗ
		|	(ВЫБРАТЬ
		|		вз1.Ссылка КАК Ссылка,
		|		вз1.Покупка КАК Покупка,
		|		вз1.Участник КАК Участник,
		|		вз1.Подбор КАК Подбор
		|	ИЗ
		|		Документ.ФормированиеКоробки.Покупки КАК вз1
		|	ГДЕ
		|		вз1.Ссылка = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ФормированиеКоробкиНовыеПокупки.Ссылка,
		|		ФормированиеКоробкиНовыеПокупки.Покупка,
		|		ФормированиеКоробкиНовыеПокупки.Участник,
		|		ИСТИНА
		|	ИЗ
		|		Документ.ФормированиеКоробки.НовыеПокупки КАК ФормированиеКоробкиНовыеПокупки
		|	ГДЕ
		|		ФормированиеКоробкиНовыеПокупки.Ссылка = &Ссылка) КАК ФормированиеКоробкиПокупки
		|ГДЕ
		|	ФормированиеКоробкиПокупки.Подбор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пред.pid,
		|	Пред.uid,
		|	Пред.groupCode,
		|	Пред.orderId,
		|	Пред.packageId,
		|	Пред.orderType
		|ИЗ
		|	Пред КАК Пред";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();

	тз=Результат.Выгрузить();
	ТЗ.Колонки.pid.Имя  		="pidint";
	ТЗ.Колонки.packageId.Имя 	="packageIdint";
	ТЗ.Колонки.orderId.Имя 		="orderIdint";
	ТЗ.Колонки.groupCode.Имя  	="groupCodeint";

	ТЗ.Колонки.uid.Имя  ="uidint";
	ТЗ.Колонки.Добавить("pid", 			Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("packageId", 	Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("orderId", 		Новый ОписаниеТипов("Строка")); 
	ТЗ.Колонки.Добавить("groupCode", 	Новый ОписаниеТипов("Строка")); 
	ТЗ.Колонки.Добавить("uid", Новый ОписаниеТипов("Строка"));
	
	Для каждого стр из тз Цикл
		
		стр.pid				= Формат(стр.pidint,"ЧГ=0");
		стр.packageId		= Формат(стр.packageIdint,"ЧГ=0");
		стр.orderId			= ?(стр.orderIdint =null,"",  Формат(Число(стр.orderIdint),"ЧГ=0"));
		стр.groupCode		= ?(стр.groupCodeint =null,"",  Формат(Число(стр.groupCodeint),"ЧГ=0"));

		стр.uid		= Формат(стр.uidint,"ЧГ=0");
	КонецЦикла;	
	тз.Колонки.Удалить("pidint");
	тз.Колонки.Удалить("packageIdint");
	тз.Колонки.Удалить("orderIdint");
	тз.Колонки.Удалить("groupCodeint");
	тз.Колонки.Удалить("uidint");
	
    Возврат тз;
	

КонецФункции

Процедура ДобавитьСписоквХМЛизТЗ(ЗаписьXML,ИмяСписка,ИмяЭлементаСписка,ТЗ)
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяСписка);
	Для каждого стр из ТЗ Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлементаСписка);
		Для каждого стрКолонка из ТЗ.колонки Цикл
			Если стр[стрКолонка.Имя]<>""  Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(стрКолонка.Имя);
				ЗаписьXML.ЗаписатьТекст(Строка(стр[стрКолонка.Имя]));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КОнецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры	



Процедура ОбработкаПроведения(Отказ, Режим)
	#Область ПравильноеПроведение
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, Режим);
	Документы.ФормированиеКоробки.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	//СтоСПОбмен_Общий.ОтразитьСтоСПОбмен(ДополнительныеСвойства, Движения, Отказ);
	СтоСПОбмен_Общий.ОтразитьСтоСПОбмен_РН(ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("ШтрафныеЗаказы", ДополнительныеСвойства, Движения, Отказ);	
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("ОборотнаяТара", ДополнительныеСвойства, Движения, Отказ);	
	#КонецОбласти 
	
	
	движения.ДанныеЗаказовСайт.Записывать = истина;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФормированиеКоробкиПокупки.Покупка КАК Покупка,
		|	1 КАК КоличествоВсего,
		|	ЕСТЬNULL(ДанныеЗаказовСайт.КоличествоКомпенсироаннаДоставка, 0) КАК КоличествоКомпенсироаннаДоставка,
		|	ФормированиеКоробкиПокупки.Ссылка.Коробка КАК Коробка
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Документ.ФормированиеКоробки.Покупки КАК ФормированиеКоробкиПокупки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗаказовСайт КАК ДанныеЗаказовСайт
		|		ПО ФормированиеКоробкиПокупки.Покупка = ДанныеЗаказовСайт.Заказ
		|			И ФормированиеКоробкиПокупки.Партия = ДанныеЗаказовСайт.Партия
		|ГДЕ
		|	ФормированиеКоробкиПокупки.Подбор
		|	И ФормированиеКоробкиПокупки.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(вт.КоличествоВсего) КАК КоличествоВсего,
		|	СУММА(вт.КоличествоКомпенсироаннаДоставка) КАК КоличествоКомпенсироаннаДоставка,
		|	вт.Коробка КАК Коробка
		|ПОМЕСТИТЬ втКоробка
		|ИЗ
		|	вт КАК вт
		|
		|СГРУППИРОВАТЬ ПО
		|	вт.Коробка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКоробка.КоличествоВсего КАК КоличествоВсего,
		|	втКоробка.КоличествоКомпенсироаннаДоставка КАК КоличествоКомпенсироаннаДоставка,
		|	втКоробка.Коробка КАК Заказ,
		|	втКоробка.Коробка.ТочкаНазначения КАК ПунктВыдачи,
		|	&Ссылка КАК Партия,
		|	втКоробка.Коробка.ПерваяТочка КАК ПерваяТочка,
		|	втКоробка.Коробка.ПерваяТочка КАК АктуальнаяПерваяТочка,
		|	втКоробка.Коробка.Организатор КАК Организатор
		|ИЗ
		|	втКоробка КАК втКоробка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		движение = движения.ДанныеЗаказовСайт.Добавить();
		ЗаполнитьЗначенияСвойств(движение,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	
	//ДвиженияСпОбмен(Отказ, Режим);
	Движения.Транзит.Записывать = Истина;
	Для Каждого ТекСтрокаПокупки Из Покупки Цикл
		Если не ТекСтрокаПокупки.Подбор Тогда Продолжить; КонецЕсли;
		Движение = Движения.Транзит.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Габарит = ТекСтрокаПокупки.Габарит;
		Движение.Участник = ТекСтрокаПокупки.Участник;
		Движение.МестоХранения = ТекСтрокаПокупки.МестоХранения;
		Движение.Партия = ТекСтрокаПокупки.Партия;
		Движение.ПокупкаСсылка = ТекСтрокаПокупки.Покупка;
		Движение.Точка = ТочкаНазначения;
		Движение.Количество = 1;
					
		
	КонецЦикла;
	
	Для Каждого ТекСтрокаПокупки Из НовыеПокупки Цикл
		Движение = Движения.Транзит.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Габарит = Справочники.Габариты.нулевой;
		Движение.Участник = ТекСтрокаПокупки.Участник;
		Движение.МестоХранения = МестоХранения;
		Движение.Партия = Ссылка;
		Движение.ПокупкаСсылка = ТекСтрокаПокупки.Покупка;
		Движение.Точка = ТочкаНазначения;
		Движение.Количество = 1;
		
		Движение = Движения.Транзит.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Габарит = Справочники.Габариты.нулевой;
		Движение.Участник = ТекСтрокаПокупки.Участник;
		Движение.МестоХранения = МестоХранения;
		Движение.Партия = Ссылка;
		Движение.ПокупкаСсылка = ТекСтрокаПокупки.Покупка;
		Движение.Точка = ТочкаНазначения;
		Движение.Количество = 1;
		
		

		
	КонецЦикла;
	
	
	Если 		Статус=Перечисления.СтатусОтпавкиНаСайт.Отправлен и 
				ЗначениеЗаполнено(Коробка) и 
				не Константы.НеСтавитьНаТранзитСформированнуюКоробку.Получить()  Тогда
				
		Движение = Движения.Транзит.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Габарит = Габарит;
		Движение.Участник = Справочники.Участники.нулевой;
		Движение.МестоХранения = МестоХранения;
		Движение.Партия = Ссылка;
		Движение.ПокупкаСсылка = Коробка;
		Движение.Точка = ТочкаНазначения;
		Движение.Количество = 1;
		
		//Движение 				= Движения.Приход.Добавить();
		//Движение.Период 		= Дата;
		//Движение.Организатор	= Коробка.Организатор;
		//Движение.Габарит 	 	= Габарит;
		//Движение.Коробка		= Коробка;
		//Движение.ТипПрихода		= Перечисления.ТипыПриходов.НаТранзит;
		//
		//Движение.Покупка 		= Коробка;
		//Движение.ПокупкаСпр		= Коробка.Код;
		//Движение.Количество 	= 1;
		
	КонецЕсли;	
	
	ДвиженияСтатусыДоставки(Отказ, Режим);
	ДвиженияСтатусыДоставкиСвернуто(Отказ, Режим);
	
		
КонецПроцедуры




Процедура ДвиженияСтатусыДоставки(Отказ, Режим)
	Если не ЗначениеЗаполнено(Коробка) Тогда Возврат КонецЕсли;
	Движения.СтатусыДоставки.Записывать = Истина;
	
	Движение = Движения.СтатусыДоставки.Добавить();
	Движение.Период = Дата;
	Движение.Груз = Коробка;
	Движение.Статус = Перечисления.СтатусыОтправкиГруза.НаСкладе;
КонецПроцедуры

Процедура ДвиженияСтатусыДоставкиСвернуто(Отказ, Режим)
	
	Движения.СтатусыДоставкиСвернуто.Записывать = Истина;
	масСтрок=Покупки.НайтиСтроки(новый структура("Подбор",Истина));
	Если Статус=перечисления.СтатусОтпавкиНаСайт.Отправлен Тогда
		Движение = Движения.СтатусыДоставкиСвернуто.Добавить();
		Движение.Период = Дата;
		Движение.Статус = Перечисления.СтатусыОтправкиГруза.НаСкладе;
		Движение.ЗаявкаВТК=Документы.ЗаявкаВТранспортнуюКомпанию.ПустаяСсылка();
		Движение.Количество=масСтрок.Количество()+НовыеПокупки.Количество();
		Движение.КоличествоГС=1;
		Движение.КоличествоМест=0;
	КонецЕсли;
КонецПроцедуры




Процедура  ОтправитьНаСайт(отказ) Экспорт
	ПолученныеДанные="";
	Если не Статус=Перечисления.СтатусОтпавкиНаСайт.Сформирован Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не верный статус документа!");
		Отказ=истина;
		Возврат ;
	КонецЕсли;
	СтрокаПротокола				= ПротоколыПередач.Добавить();
	СтрокаПротокола.ДатаНачала	= ТекущаяДата();
	ИмяФайлаОтвета				= ОбменССайтом(Отказ);
	Если аспПроцедурыОбменаДанными.АвторизацияВыполнена(ИмяФайлаОтвета) Тогда
		СтрокаПротокола.Результат	= "Авторизация выполнена";
	Иначе
		СтрокаПротокола.Результат	= "Авторизация не выполнена";
	КонецЕсли;	 
	Если ЗначениеЗаполнено(ИмяФайлаОтвета) Тогда
		ПолученныеДанные			= ФайлВСтроку(ИмяФайлаОтвета);
	Иначе
		СтрокаПротокола.Результат	= "Нет ответа";
	КонецЕсли;
	СтрокаПротокола.ДатаОкончания	= ТекущаяДата();
	ОбработатьПолученныеДанные(отказ);
КонецПроцедуры


Процедура ОбработатьПолученныеДанные(отказ) Экспорт 
	Если отказ Тогда Возврат; КонецЕсли;
	тз	= аспПроцедурыОбменаДанными.ОбработатьСозданныеНаСайтеКоробки(ПолученныеДанные);
	масс=тз.найтиСтроки(новый структура("uniqueKey",Номер));
	Если масс.Количество()>0 и ЗначениеЗаполнено(масс[0].Ссылка) Тогда
		ДатаСоздания	=	СтоСПОбмен_Общий.ДатаИзСтроки(масс[0].CreatedAt);	
		Штрихкод		= 	масс[0].barcode;
		НазваниеКоробки	= 	масс[0].name;
		Коробка			=	масс[0].Ссылка;
		
		СП_Штрихкоды.ПолучитьДанныеПоШК(Штрихкод);
	Иначе
		отказ			=	истина;
	КонецЕсли;	
	
	Если не отказ Тогда
		Статус			=	Перечисления.СтатусОтпавкиНаСайт.Отправлен;	
	КонецЕсли;		
КонецПроцедуры	



Функция ОбменССайтом(отказ) 
	Параметры    = новый Структура;
	Параметры.Вставить("token",Константы.Токен.Получить());
	Параметры.Вставить("xml",  СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ",""));
	АдресСкрипта = Константы.АдресФормированияКоробок.Получить();

	ПолученныйФайл=СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры,АдресСкрипта);
	Возврат ПолученныйФайл;	
КонецФункции

Функция ФайлВСтроку(ИмяФайлаОтвета)
		ТекстФайла="";
		Текст=Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаОтвета,КодировкаТекста.UTF8);
		Стр = Текст.ПрочитатьСтроку();
		Пока Стр <> Неопределено Цикл 
			ТекстФайла=ТекстФайла+Стр;
			Стр = Текст.ПрочитатьСтроку();
		КонецЦикла;
		/////
		ТекстФайла=СтрЗаменить(ТекстФайла,"<auth>","<auth>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</auth>","</auth>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"<groups>","<groups>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</groups>","</groups>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</barcode>","</barcode>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</distributorName>","</distributorName>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</ownerName>","</ownerName>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</ordersNumber>","</ordersNumber>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</code>","</code>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</createdAt>","</createdAt>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</name>","</name>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</result>","</result>"+Символы.ПС);
		Возврат ТекстФайла ;
КонецФункции


Процедура ЗаполнитьПоТочкеНазначения(Точка) Экспорт
	МХПользователя=мТекущийПользователь.МестоХранения;
	ОтбиратьПоМХ=(Константы.ОтборПоСкладуПользователяПриЗаполненииНовойКоробки.Получить()=истина и ЗначениеЗаполнено(МХПользователя));
	
	
	ТочкаНазначения=Точка;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТранзитОстатки.ПокупкаСсылка КАК Покупка,
	|	ТранзитОстатки.Габарит,
	|	ТранзитОстатки.Участник,
	|	ТранзитОстатки.МестоХранения,
	|	ТранзитОстатки.Партия,
	|	ТранзитОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.Транзит.Остатки(
	|			,
	|			Точка = &Точка 
	|		"+?(ОтбиратьПоМХ," И МестоХранения = &МестоХранения ","")+ "
	|				И ТИПЗНАЧЕНИЯ(ПокупкаСсылка) <> ТИП(Справочник.Коробки) ) КАК ТранзитОстатки";
	
	Если ОтбиратьПоМХ Тогда
		Запрос.УстановитьПараметр("МестоХранения", МХПользователя);
	КонецЕсли;		
	Запрос.УстановитьПараметр("Точка", Точка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Для инд=1 по Выборка.Количество Цикл
			СтрПокупки=Покупки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрПокупки,Выборка);
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры	



Процедура ЗаполнитьОргов() Экспорт
	
	
	ТЗКодов=новый ТаблицаЗначений;
	ТЗКодов.Колонки.Добавить("Организатор",новый ОписаниеТипов("СправочникСсылка.Участники"));
	ТЗКодов.Колонки.Добавить("Количество",новый ОписаниеТипов("Число"));
	
	
	Для каждого стр из Покупки Цикл
		Если не стр.подбор тогда продолжить; КонецЕсли;
		стрТЗ=ТЗКодов.Добавить();
		стрТЗ.Организатор=стр.Покупка.Организатор;
		стрТЗ.количество=1;
	КонецЦикла;
	Для каждого стр из НовыеПокупки Цикл
		стрТЗ=ТЗКодов.Добавить();
		стрТЗ.Организатор=стр.Покупка.Организатор;
		стрТЗ.количество=1;
	КонецЦикла;
	ТЗКодов.Свернуть("Организатор","Количество");
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Участники.Ссылка КАК Организатор
	//	|ИЗ
	//	|	Справочник.Участники КАК Участники
	//	|ГДЕ
	//	|	Участники.Код В(&СписокКодов)";
	//
	//Запрос.УстановитьПараметр("СписокКодов", СписокКодов);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Для каждого стр из ТЗКодов Цикл
		МассивОргов=Организаторы.НайтиСтроки(новый структура("Организатор", стр.Организатор));
		Если МассивОргов.Количество()=0 Тогда
			новаяСтрока=Организаторы.Добавить();	
			новаяСтрока.Организатор=стр.Организатор;
			новаяСтрока.Количество=стр.Количество;
		Иначе	
			МассивОргов[0].Организатор=стр.Организатор;
			МассивОргов[0].Количество=стр.Количество;
		КонецЕсли;	
	КонецЦикла;
	
	УстановитьПроценты();
КонецПроцедуры	

Процедура УстановитьПроценты() Экспорт
	массивВесПроцент=Организаторы.ВыгрузитьКолонку("ВесПроцент");
	Если Организаторы.Итог("ВесПроцент")=0 и массивВесПроцент.количество()>0 Тогда
		Для инд=0 по массивВесПроцент.количество()-1 цикл
			массивВесПроцент[инд]=1;
		КонецЦикла;	
		массИтог= аСПНаСервере.РаспределитьПропорционально(100,массивВесПроцент);
		Организаторы.ЗагрузитьКолонку(массИтог,"ВесПроцент");
	КонецЕсли;
	массИтог= аСПНаСервере.РаспределитьПропорционально(Вес,Организаторы.ВыгрузитьКолонку("ВесПроцент"));
	Если   массИтог<>неопределено Тогда  
		Организаторы.ЗагрузитьКолонку(массИтог,"Вес");
	КонецЕсли;
	
	
	массивОбъемПроцент=Организаторы.ВыгрузитьКолонку("ОбъемПроцент");
	Если Организаторы.Итог("ОбъемПроцент")=0 и массивОбъемПроцент.количество()>0 Тогда
		Для инд=0 по массивОбъемПроцент.количество()-1 цикл
			массивОбъемПроцент[инд]=1;
		КонецЦикла;	
		массИтог= аСПНаСервере.РаспределитьПропорционально(100,массивОбъемПроцент);
		Организаторы.ЗагрузитьКолонку(массИтог,"ОбъемПроцент");
	КонецЕсли;	
	массИтог= аСПНаСервере.РаспределитьПропорционально(Объем,Организаторы.ВыгрузитьКолонку("ОбъемПроцент"));
	Если   массИтог<>неопределено Тогда  
		Организаторы.ЗагрузитьКолонку(массИтог,"Объем");
	КонецЕсли;
	
	массивКоличество=Организаторы.ВыгрузитьКолонку("Количество");
	Если Организаторы.Итог("КоличествоПроцент")=0 и массивКоличество.количество()>0 Тогда
		массИтог= аСПНаСервере.РаспределитьПропорционально(100,массивКоличество);
		Организаторы.ЗагрузитьКолонку(массИтог,"КоличествоПроцент");
	КонецЕсли;	
КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОргов();
	Если ЗначениеЗаполнено(Коробка) 
		//и (Объект.Коробка.Вес<>Объект.Вес или  Объект.Коробка.Объем<>Объект.Объем) 
		Тогда
		об=Коробка.ПолучитьОбъект();
		об.Вес=Вес;
		об.Объем=Объем;
		об.Количество=Количество;
		об.ТочкаНазначения=ТочкаНазначения;
		об.Организаторы.Загрузить(Организаторы.Выгрузить());
		Попытка
			об.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;		
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если Организаторы.Итог("ВесПроцент")<>100 или Организаторы.Итог("ОбъемПроцент")<>100 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сумма процентов Всех оргов отличается от 100%",,,,Отказ);
	КонецЕсли;
КонецПроцедуры


мТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();