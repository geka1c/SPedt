

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	  // Опись коробки
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати = "Документ.ФормированиеКоробки";
    КомандаПечати.Идентификатор = "Опись";
	КомандаПечати.Картинка = БиблиотекаКартинок.ТекстовыйФайл;
    КомандаПечати.Представление = НСтр("ru = 'Опись коробки'");
    КомандаПечати.ПроверкаПроведенияПередПечатью = Истина; 
	
	//Групповые стикеры
	
	
	КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати = "Обработка.ПечатьСтикеровДляКоробок";
    КомандаПечати.Идентификатор = "ГрупповойСтикер";
    КомандаПечати.Представление = НСтр("ru = 'Групповой стикер'");
    КомандаПечати.Картинка = БиблиотекаКартинок.НовыйПоШтрихкоду;
    КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	
	КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати = "Обработка.ПечатьСтикеровДляКоробок";
    КомандаПечати.Идентификатор = "ГрупповойСтикерНаПринтер";
    КомандаПечати.Представление = НСтр("ru = 'Групповой стикер на принтер'");
    КомандаПечати.Картинка = БиблиотекаКартинок.НовыйПоШтрихкоду;
    КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.СразуНаПринтер=истина;
	
   // КомандаПечати.Обработчик = "СПСтандартныеПодсистемыКлиент.ПечатьГрупповыхСтикеров"
	
	
КонецПроцедуры


Функция ПечатьОписиКоробки(МассивОбъектов, ОбъектыПечати)
	#Если Сервер Тогда
     // Создаем табличный документ и устанавливаем имя параметров печати.
     ТабличныйДокумент = Новый ТабличныйДокумент;
     ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ОписьКоробки";
	 Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ФормированиеКоробки.ПФ_MXL_ОписьКоробок");
     // Получаем запросом необходимые данные.
     Запрос = Новый Запрос();
     Запрос.Текст =
	 "ВЫБРАТЬ
	 |	ФормированиеКоробки.Ссылка,
	 |	ФормированиеКоробки.Номер,
	 |	ФормированиеКоробки.Дата,
	 |	ФормированиеКоробки.ТочкаОтправитель,
	 |	ФормированиеКоробки.ТочкаНазначения,
	 |	ФормированиеКоробки.Коробка,
	 |	ФормированиеКоробки.ВидОперации,
	 |	ФормированиеКоробки.НовыеПокупки.(
	 |		Ссылка,
	 |		НомерСтроки,
	 |		Покупка,
	 |		Участник,
	 |		Предупреждение,
	 |		Точка,
	 |		1 КАК Количество
	 |	),
	 |	ФормированиеКоробки.Покупки.(
	 |		Ссылка,
	 |		НомерСтроки,
	 |		Покупка,
	 |		Габарит,
	 |		Участник,
	 |		МестоХранения,
	 |		Предупреждение,
	 |		Партия,
	 |		Подбор,
	 |		Точка,
	 |		1 КАК Количество
	 |	),
	 |	ФормированиеКоробки.НазваниеКоробки
	 |ИЗ
	 |	Документ.ФормированиеКоробки КАК ФормированиеКоробки
	 |ГДЕ
	 |	ФормированиеКоробки.Ссылка В(&МассивОбъектов)
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ФормированиеКоробки.МоментВремени";
     Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
     Шапка = Запрос.Выполнить().Выбрать();
     ПервыйДокумент = Истина;
	 
     Пока Шапка.Следующий() Цикл
         Если Не ПервыйДокумент Тогда
             // Все документы нужно выводить на разных страницах.
             ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
         КонецЕсли;
         ПервыйДокумент = Ложь;
         // Запомним номер строки, с которой начали выводить текущий документ.
         НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		 
		 ДанныеПечати = Новый Структура;
		 ТекстЗаголовка = "Опись "+Шапка.Коробка+", "+Шапка.НазваниеКоробки;
		 ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		 ДанныеПечати.Вставить("ТочкаОтправитель", Шапка.ТочкаОтправитель);
		 ДанныеПечати.Вставить("ТочкаНазначения", Шапка.ТочкаНазначения);
		 предТаблицаПокупки=Шапка.Покупки.Выгрузить();
		 ТаблицаПокупки=предТаблицаПокупки.скопировать(новый структура("Подбор",истина));
		 ТаблицаПокупки.Сортировать("НомерСтроки");
		 ТаблицаНовыеПокупки=Шапка.НовыеПокупки.Выгрузить();
		 ТаблицаНовыеПокупки.Сортировать("НомерСтроки");

		 ДанныеПечати.Вставить("Всего", ТаблицаПокупки.Итог("Количество")+ТаблицаНовыеПокупки.Итог("Количество"));
		 
		 МассивОбластейМакета = Новый Массив;
		 МассивОбластейМакета.Добавить("Заголовок");
		 МассивОбластейМакета.Добавить("Поставщик");
		 МассивОбластейМакета.Добавить("Покупатель");
		 МассивОбластейМакета.Добавить("ШапкаТаблицы");
		 МассивОбластейМакета.Добавить("Строка");
		 МассивОбластейМакета.Добавить("Итого");
		 
		 Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			 ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			 Если ИмяОбласти <> "Строка" Тогда
				 ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				 ТабличныйДокумент.Вывести(ОбластьМакета);
			 Иначе
				 Для Каждого СтрокаТаблицы Из ТаблицаПокупки Цикл
					 Если не СтрокаТаблицы.Подбор Тогда Продолжить КонецЕсли;
					 ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					 ТабличныйДокумент.Вывести(ОбластьМакета);
				 КонецЦикла;
				 Для Каждого СтрокаТаблицы Из ТаблицаНовыеПокупки Цикл
					 ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
					 ТабличныйДокумент.Вывести(ОбластьМакета);
				 КонецЦикла;
			 КонецЕсли;
		 КонецЦикла;


         УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
             НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
     КонецЦикла;
     Возврат ТабличныйДокумент;
	 #КонецЕсли
 КонецФункции
 
 

 
 
 // Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  – Массив    – ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати – Структура – дополнительные настройки печати;
//  КоллекцияПечатныхФорм – ТаблицаЗначений – сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         – СписокЗначений  – значение – ссылка на объект;
//                                            представление – имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       – Структура       – дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
#Если Сервер Тогда	
   НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Опись");
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        "Опись",
        НСтр("ru = 'Опись коробки'"),
        ПечатьОписиКоробки(МассивОбъектов, ОбъектыПечати),
        ,
        "Документ.ФормированиеКоробки.ПФ_MXL_ОписьКоробок");
	КонецЕсли;	
	
	 НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГрупповойСтикер");
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        "ГрупповойСтикер",
        НСтр("ru = 'Опись коробки'"),"",""
        ,
        "");
	КонецЕсли;
#КонецЕсли	
КонецПроцедуры




#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	ТекстыЗапроса = Новый СписокЗначений;
	СтоСПОбмен_Общий.Получить_ТекстЗапроса_Обмен100сп (Запрос, ТекстыЗапроса, Регистры);
	СтоСПОбмен_Общий.Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_ШтрафныеЗаказы(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_ОборотнаяТара(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Проведен КАК Проведен
	|ИЗ
	|	Документ.ФормированиеКоробки КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                        Реквизиты.Период);
	Запрос.УстановитьПараметр("Номер",                         Реквизиты.Номер);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("ПометкаУдаления",               Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                      Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ЗаказовВКоробке",               ДокументСсылка.Покупки.НайтиСтроки(новый структура("Подбор", Истина)).Количество() + ДокументСсылка.НовыеПокупки.Количество());
КонецПроцедуры


Функция Получить_ТекстЗапроса_ШтрафныеЗаказы(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ШтрафныеЗаказы";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ФормированиеКоробки") Тогда
		
		ТекстЗапроса = 
		
		"ВЫБРАТЬ
		|	ФормированиеКоробки.Ссылка.Дата как Период,
		|	ФормированиеКоробки.Коробка как Коробка,
		|	ФормированиеКоробки.Коробка.Организатор как Организатор,
		|	ФормированиеКоробки.ТочкаНазначения как ПунктВыдачи,
		|	0 КАК Разобрано,
		|	0 КАК Штраф,
		|	0 КАК ГруппыНаТранзит,
		|	0 КАК Одиночные,
		|	&ЗаказовВКоробке как УпакованоВГруппу
		|ИЗ
		|	Документ.ФормированиеКоробки КАК ФормированиеКоробки
		|ГДЕ
		|	ФормированиеКоробки.Ссылка = &Ссылка";
	КонецЕсли;
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции


Функция Получить_ТекстЗапроса_ОборотнаяТара(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ОборотнаяТара";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ФормированиеКоробки") Тогда
		
		ТекстЗапроса = 
		
		"ВЫБРАТЬ
		|	ФормированиеКоробки.Дата как Период,
		|	ФормированиеКоробки.Коробка как Коробка,
		|	ФормированиеКоробки.ОборотнаяТара как Тара
		|ИЗ
		|	Документ.ФормированиеКоробки КАК ФормированиеКоробки
		|ГДЕ
		|	ФормированиеКоробки.Ссылка = &Ссылка и
		|	ФормированиеКоробки.ТараПривязана ";
	КонецЕсли;
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции



#КонецОбласти


#Область Обмен100сп
Функция ПолучитьТэг_Income(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ

		|	ПриходнаяПокупки.Ссылка.Дата КАК Дата,
		|	ПриходнаяПокупки.ШК КАК ШК,
		|	ПриходнаяПокупки.ОргСбор КАК ОргСбор,
		|	ПриходнаяПокупки.Ссылка.Номер КАК Номер
		|ИЗ
		|	Документ.ФормированиеКоробки.НовыеПокупки КАК ПриходнаяПокупки
		|ГДЕ
		|	ПриходнаяПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И ПриходнаяПокупки.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("income");
		СтоСП.Вставить_Тэг(ЗаписьXML,"paid"	,				1);
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				Выборка.Дата);
		СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.ШК.Участник.Код),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(Выборка.ШК.Организатор.Код),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"sizedCategoryName",     "нет_ФК");
		СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber",         Прав(Выборка.Номер,(СтрДлина(Выборка.Номер)-3)));
		СтоСП.Вставить_Тэг(ЗаписьXML,"sizedCategoryNumber",   "");
		СтоСП.Вставить_Тэг(ЗаписьXML,"transit",               1);
		СтоСП.Вставить_Тэг(ЗаписьXML,"isBig",                 0);
		СтоСП.Вставить_Тэг(ЗаписьXML,"isFree",                0);
		СтоСП.Вставить_Тэг(ЗаписьXML,"DistributorFee",        ?(Выборка.ОргСбор,1,0));
		СтоСПОбмен_Общий.ЗаполнитьТэгиЗаказаПо_ШК(Выборка.ШК,ЗаписьXML);	
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
КонецФункции
#КонецОбласти


Функция ПолноеИмяОбъекта()
	Возврат "Документ.ФормированиеКоробки";
КонецФункции
