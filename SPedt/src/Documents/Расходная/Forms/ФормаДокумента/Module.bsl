#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура 	ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если 	ИмяСобытия 	= "ScanData"					и
			Источник 	= "ПодключаемоеОборудование" 	и
			Параметр.Найти("Обработано") 	= Неопределено и
	   		ВводДоступен()   Тогда
			
			ШКод = СтоСП_Клиент.ПолучитьШКизПараметров(Параметр);
			ОбработатьШКнаКлиенте(ШКод);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)


    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	Если не ЗначениеЗаполнено(Объект.КартаУчастника) Тогда
		ТекущийЭлемент=Элементы.ПоискЗаказа;
	 	Элементы.ПоискЗаказа.АктивизироватьПоУмолчанию=Истина;
	Иначе	
		ТекущийЭлемент=Элементы.ОплатитьНаличными;
	 	Элементы.ОплатитьНаличными.АктивизироватьПоУмолчанию=Истина;
	КонецЕсли;
	Элементы.ПокупкиГруппаРассчетСтоимости.Видимость = Ложь;
	Элементы.ПокупкиОписание.Видимость = Ложь;
	
	//Сканер штрихкода
	СтоСП_Клиент.ПодключитьСканерШК(УникальныйИдентификатор);
	
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)  

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Элементы.гпОплата.Видимость = Константы.ИспользоватьПризнакОплаты.Получить();
	Элементы.ПокупкиГруппаФлажки.Видимость = Константы.РасходнаяПомечатьВсе.Получить();
	

	ЗаполнитьОстатками(Параметры.ЗаполнятьПоУчастнику);
	
	ПерезаполнитьКоды();
	ИспользоватьПодключаемоеОборудование 	= ПодключаемоеОборудованиеВызовСервера.ИспользоватьПодключаемоеОборудование();
	УстройствоПечати 						= ПодключаемоеОборудованиеВызовСервера.ВернутьИдентификаторУстройстваДляПечатиДокументов();
	ПодсветкаКодовЗаказа();
	ПодсветкаСтрок();
	
	Параметры.Свойство("ОткрытьДляОплаты",ОткрытоДляОплаты);
	ДвухЭтапнаяВыдача	= ПолучитьФункциональнуюОпцию("ИспользоватьДвухЭтапнуюВыдачуЗаказа");
	ЗакрытьПослеОплаты	= константы.ЗакрыватьДокументПослеОплаты.Получить();                  
	ПлатежныйТерминалБезПодключения = Константы.ПлатежныйТерминалБезПодключения.Получить();
	
	Если Константы.ЧекСборкиНеПечатать.Получить() Тогда
		Объект.Напечатано = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если		аСПСлужебные.ПроверятьОтветственного() 					и  
			не 	ПараметрыЗаписи.свойство("НеПроверятьОтветственного") 	и
			не ЗначениеЗаполнено(Объект.Ответственный) 						Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо установить ответственного за выдачу!!!");
		отказ=Истина;
	КонецЕсли;	
	
	Если 	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение и
		не 	ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран вид оплаты!");
		отказ=Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если не ЗначениеЗаполнено(Объект.КартаУчастника) и Объект.Покупки.Количество() > 0 Тогда
		ВсеКоды="";
		Для каждого стр из Объект.Покупки Цикл
			Если стр.КодЗаказа<>"Нет кода!" Тогда
				ВсеКоды=ВсеКоды+","+стр.КодЗаказа;
			Конецесли;	
		КонецЦикла;
		МассКодов=СтрРазделить(ВсеКоды,",",Ложь);
		если  массКодов.Найти(Объект.ПоискЗаказа)=Неопределено и не Константы.РазрешитьВыдачуБезСверкиКодов.Получить() Тогда
			отказ= Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нужно подтвердить хотя бы один заказ!");
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если 	Объект.ОплатаВыполнена и
			Объект.НомерСменыККМ =  0 Тогда
			
		ТекстПредупреждения =	"Выплнена безналичная оплата, а чек не фискализирован!!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Отказ = Истина;
		
	КонецЕсли;	
	Оповестить("ЗакрытаРасходная");
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Оповестить("ЗакрытаРасходная");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы


&НаКлиенте
Процедура ПоискЗаказаПриИзменении(Элемент)
	ТекущийЭлемент=Элементы.ОплатитьНаличными;
 	Элементы.ОплатитьНаличными.АктивизироватьПоУмолчанию=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоискНикаСтоимостьПриИзменении(Элемент)
	РассчитатьСтоимость();
КонецПроцедуры

&НаКлиенте
Процедура СписатьПриИзменении(Элемент)
	РассчитатьСтоимость();
КонецПроцедуры
#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыПокупки
&НаКлиенте
Процедура ПокупкиПодборПриИзменении(Элемент)
	РассчитатьСтоимость();
КонецПроцедуры

&НаКлиенте
Процедура ПокупкиПриИзменении(Элемент)
	РассчитатьСтоимость();
КонецПроцедуры


#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоЦенаПриИзменении(Элемент)
	Элементы.Товары.ТекущиеДанные.Сумма = Элементы.Товары.ТекущиеДанные.Цена * Элементы.Товары.ТекущиеДанные.Количество;
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РассчитатьСтоимость();
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьПартиюПосылки(Команда)
	Если Элементы.Покупки.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,Элементы.Покупки.ТекущиеДанные.Партия);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьУчастника(Команда)
	ОбновитьУчастникаНаСервере();
	ОповеститьОбИзменении(Объект.Участник);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасчетСтоимости(Команда)
	Элементы.ПокупкиГруппаРассчетСтоимости.Видимость 	= не Элементы.ПокупкиГруппаРассчетСтоимости.Видимость;
	Элементы.ПокупкиОписание.Видимость 					= не Элементы.ПокупкиОписание.Видимость;
КонецПроцедуры



&НаКлиенте
Процедура Корректировка(Команда)
	КорректируемыеЗаказы = Новый СписокЗначений;

	Для каждого элем из Элементы.Покупки.ВыделенныеСтроки Цикл
		строка = Объект.Покупки.НайтиПоИдентификатору(элем);
		корректируемыеЗаказы.Добавить(строка.Покупка);
	КонецЦикла;	
	
	Если Объект.Проведен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ проведен корректировка не возможна");
		Возврат;
	КонецЕсли;
	ПараметрыЗаполнения= Новый Структура();
	ПараметрыЗаполнения.Вставить("ДатаОтчета", 		ОбщегоНазначенияКлиент.ДатаСеанса());
	ПараметрыЗаполнения.Вставить("Покупка", 		новый структура("ПравоеЗначение, Использование, ВидСравнения",корректируемыеЗаказы, Истина, ВидСравненияКомпоновкиДанных.ВСписке) );
	//		ПараметрыЗаполнения.Вставить("Партия", 			Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КорректировкаЗавершение",ЭтотОбъект);
	
	ОткрытьФорму("Документ.Движение.ФормаОбъекта",Новый структура("ПараметрыЗаполнения",ПараметрыЗаполнения) ,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца  );
КонецПроцедуры


&НаКлиенте
Процедура СверкаИтогов(Команда)
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("СверкаИтоговЗавершение", ЭтотОбъект);
	ТекстВопроса = "Вы уверенны что необходимо выполнить сверку итогов?";
	ПоказатьВопрос(Оповещение, ТекстВопроса , РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратОплатыКартой(Команда)
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ВозвратОплатыКартойЗавершение", ЭтотОбъект);
	ТекстВопроса = "Вы уверенны что необходимо Вернуть оплату по карте?";
	ПоказатьВопрос(Оповещение, ТекстВопроса , РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ОтменаОплатыКартой(Команда)
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ОтменаОплатыКартойЗавершение", ЭтотОбъект);
	ТекстВопроса = "Вы уверенны что необходимо отменить оплату по карте?";
	ПоказатьВопрос(Оповещение, ТекстВопроса , РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура 	ВвестиШтрихКодВручную(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаВводаШК",,ЭтотОбъект,,,,Новый ОписаниеОповещения("ВвестиШтрихКодВручную_Завершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПодгрузитьПокупки(Команда)
	ПерезаполнитьКоды();
КонецПроцедуры

&НаКлиенте
Процедура ИсторияДоставки(Команда)
	ОткрытьФорму(	"Отчет.ИсторияЗаказов.Форма.ФормаОтчета",
					новый структура("мегаордер, СформироватьПриОткрытии",Элементы.Покупки.ТекущиеДанные.ШК, истина),
					ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Оплатить(Команда)
	Элементы.ГруппаОплата.Видимость = истина;
КонецПроцедуры

&НаКлиенте
Процедура  ЧекНЗ(Команда) Экспорт
	СтоСП_Печать_Клиент.ЧекНЗРасходная(новый Структура("Форма", этотОбъект),Истина);
КонецПроцедуры

&НаКлиенте
Процедура 	ФискализироватьЧекВыполнить(Команда)
	Если Объект.СсылочныйНомер <> "" Тогда
		Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта");
	КонецЕсли;	
	Записать( Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Если не Объект.Проведен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не проведен!");
		Возврат;
	КонецЕсли;	
	Если 	ПроверитьЗаполнение() 				Тогда
		
		ОчиститьСообщения();
		Если Объект.СтатусККМ <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Фискализирован") Тогда
			ФискализацияЧека(Истина);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Чек уже фискализирован на фискальном устройстве'");
			ПоказатьПредупреждение( , ТекстПредупреждения, 10);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЧекОтмены(Команда)
	Если Объект.СтатусККМ <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Фискализирован") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отменить можно только фискализарованный чек!");
		возврат;
	КонецЕсли;	
	
	Данныеформы				= Объект;
	ОбщиеПараметры = СП_ККТ.ПолучитьШаблонЧекаКоррекции(УстройствоПечати, данныеформы);
	
	
	Оповещение = Новый ОписаниеОповещения("НапечататьЧекКоррекции_Завершение", ЭтотОбъект, ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(Оповещение, УникальныйИдентификатор, ОбщиеПараметры, ?(УстройствоПечати.Пустая(), Неопределено, УстройствоПечати)); 
		
КонецПроцедуры


&НаКлиенте
Процедура ОплатитьНаличными(Команда)
	ВидОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличные");
	ПроверитьВыбранныеПосылки(ВидОплаты);
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартой(Команда)
	ВидОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта");
	ПроверитьВыбранныеПосылки(ВидОплаты);
КонецПроцедуры
	
&НаКлиенте
Процедура ОплатаQR(Команда)
	ВидОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ОплатаQR");
	ПроверитьВыбранныеПосылки(ВидОплаты);
КонецПроцедуры

&НаКлиенте
Процедура СобратьЗаказ(Сотрудник = Неопределено, ЗакрыватьДокумент = ложь)
	Если ПроверитьЗаполнение() Тогда
		Объект.Напечатано	= Истина;
		Если СП_РаботаСДокументами_Клиент.ЗаписатьДокумент(этотОбъект,Новый структура("РежимЗаписи", РежимЗаписиДокумента.Запись),Сотрудник) Тогда
			спПочтовыеСообщения.ОтправитьЧекРасходной(объект.Ссылка);
			Чеков	= КолвоЧеков();
			Для инд = 1 по чеков Цикл 
				командаПечати		= ПолучитьКомандуПечати("Чек");
				ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект,Команды[командаПечати] , Объект);
				//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команды[командаПечати], ЭтотОбъект, Объект);
			КонецЦикла;
			Если ЗакрыватьДокумент Тогда
				Закрыть();
			КонецЕсли
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для каждого элем из   объект.Покупки Цикл
		элем.Подбор = Истина;		
	КонецЦикла;	 
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для каждого элем из   объект.Покупки Цикл
		элем.Подбор = Ложь;		
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактирование(Команда)
	//ОткрытьФорму("ОбщаяФорма.ФормаОжиданиеВводаШтрихкода",,ЭтотОбъект,,,,Новый ОписаниеОповещения("ВвестиШтрихКодАдминистратора_Завершение", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("ОбщаяФорма.РозрещениеРедактирования",новый структура("Документ", Объект.Ссылка),ЭтотОбъект,,,,Новый ОписаниеОповещения("ВвестиШтрихКодАдминистратора_Завершение", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьЧек(Команда)
	
	если ЗначениеЗаполнено(Объект.Ответственный)  Тогда
		спПочтовыеСообщения.ОтправитьЧекРасходной(объект.Ссылка);
	Иначе
		ТекстСообщения = "Необходимо указать ответственного. У ответственного должна быт заполнена лектронная почта";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти //ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РассчитатьСтоимость()
	Объект.СтоимостьИтого	= 0;
	Объект.ПредоплатаОрганизатор=0;							         
	Объект.ПредоплатаУчастник = 0;
	ВыбранныеПосылки = Объект.Покупки.найтистроки(Новый Структура("Подбор", Истина));
	
	Для каждого стр из ВыбранныеПосылки Цикл
		
		Объект.СтоимостьИтого	= Объект.СтоимостьИтого + 	стр.ОплачиваетУчастник;
		Если стр.БесплатнаяВыдача Тогда
			Если стр.ОплаченоУчастником Тогда
				Объект.ПредоплатаУчастник = Объект.ПредоплатаУчастник+ стр.ОплачиваетОрганизатор;	
			Иначе
				Объект.ПредоплатаОрганизатор = Объект.ПредоплатаОрганизатор+ стр.ОплачиваетОрганизатор;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого стр из Объект.Товары Цикл	
		Объект.СтоимостьИтого	= Объект.СтоимостьИтого + стр.Сумма;
	КонецЦикла;	
	ВыбранныеПосылки = Объект.Покупки.найтистроки(Новый Структура("Подбор", Истина));
	Если ВыбранныеПосылки.Количество()>0 Тогда
		Объект.СтоимостьИтого	= Объект.СтоимостьИтого + Объект.ПоискНикаСтоимость;
	КонецЕсли;		
	Если Объект.Списать Тогда
		Объект.СтоимостьИтого	= 0;
	КонецЕсли;	
	Объект.КоличествоПомеченныхСтрок	= ВыбранныеПосылки.Количество();
КонецПроцедуры


&НаСервере
Процедура ПодсветкаСтрок()

    УсловноеОформление.Элементы.Очистить();
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Покупки");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Покупки.Оплачен");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ложь;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Желтый);	
	
	ЭлементУсловногоОформления 		= УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Покупки");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Покупки.Подбор");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение 	= истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);	
	
	Если не ЗначениеЗаполнено(Объект.КартаУчастника) Тогда

		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Покупки");
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Покупки.КодЗаказа");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение =  Новый ПолеКомпоновкиДанных("Объект.ПоискЗаказа");
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.КрасноФиолетовый);	
	КонецЕсли;

	
КонецПроцедуры // ПодсветкаСтрок()
 
&НаСервере
Процедура ПодсветкаКодовЗаказа()

	УсловноеОформление.Элементы.Очистить();
	ЭлементУсловногоОформления 				= УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле 						= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 					= Новый ПолеКомпоновкиДанных("КодыЗаказов");
	ЭлементОтбора 							= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 			= Новый ПолеКомпоновкиДанных("Объект.Покупки.КодЗаказа");
	ЭлементОтбора.ВидСравнения 				= ВидСравненияКомпоновкиДанных.НачинаетсяС;
	ЭлементОтбора.ПравоеЗначение 			=  Новый ПолеКомпоновкиДанных("Объект.ПоискЗаказа");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.КрасноФиолетовый);	
КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимость()

	
	Если 	не ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
		Элементы.ГруппаСборЗаказа.Видимость 	= 	ДвухЭтапнаяВыдача 	и 	не 	ОткрытоДляОплаты ;
		Элементы.ГруппаОплата.Видимость 		= 	не ДвухЭтапнаяВыдача или 	ОткрытоДляОплаты;
	Иначе	
		Элементы.ГруппаСборЗаказа.Видимость 	= 	Ложь;
		Элементы.ГруппаОплата.Видимость 		= 	не ДвухЭтапнаяВыдача;
	КонецЕсли;
	
	элементы.гпКодЗаказа.Видимость					= не ЗначениеЗаполнено(Объект.КартаУчастника);
	элементы.ПоискЗаказа.Видимость					= не ЗначениеЗаполнено(Объект.КартаУчастника) и не Константы.РазрешитьВыдачуБезСверкиКодов.Получить();
	

	ТолькоПросмотр = Объект.Проведен;	
	
	Элементы.ФормаРазрешитьРедактирование.Видимость = ТолькоПросмотр;
	Элементы.УчастникРэйтинг.Видимость				= аСПНаСервере.ПоказыватьРейтингУчастника();
	
	ВсегоПокупок = Объект.Покупки.Итог("Количество");
	Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.гпДокумент.Заголовок=?(всегоПокупок=0,"Заказы","Заказы ("+всегоПокупок+")");
	
	ВсегоТоваров = Объект.Товары.Итог("Количество");
	Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.гпТовары.Заголовок=?(всегоТоваров=0,"Товары","Товары ("+всегоТоваров+")");
	
	Элементы.ОплатаQR.Видимость = Константы.ОплатаQRкодом.Получить()
КонецПроцедуры	


&НаСервере
Процедура ЗаполнитьОстатками(ЗаполнятьПоУчастнику = Истина)
	Если ЗаполнятьПоУчастнику Тогда
		Объект.Участник = Параметры.участник;
		Объект.Дата		= ТекущаяДатаСеанса();
		Объект.ПоискНикаСтоимость = Параметры.ПоискНикаСтоимость;
		Объект.КартаУчастника = Параметры.КартаУчастника;

		ДокументОбъект 	= РеквизитФормыВЗначение("Объект");
		документОбъект.Заполнитьостатками();
		ЗначениеВДанныеФормы(документОбъект, Объект);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВвестиШтрихКодАдминистратора_Завершение(ШКод, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ШКод) =  Тип("Структура") и
		 ШКод.Свойство("Администратор")	и
		 ШКод.Администратор         			Тогда
		ТолькоПросмотр 									= Ложь;
		Если (Объект.НомерЧекаККМ <> 0) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для документа зарегистрирован фискальный чек!");
		КонецЕсли;	
	 КонецЕсли;	 
КонецПроцедуры	

&НаСервере
Процедура ОбновитьУчастникаНаСервере()
	аспПроцедурыОбменаДанными.ПолучитьУчастниковПоКодам(Объект.Участник);// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ЗаполнитьОстатками();
КонецПроцедуры	

#Область ШтрихКоды

&НаКлиенте
Процедура 	ОбработатьШКНаКлиенте(ШКод)
	ДанныеШК    = СП_Штрихкоды.ПолучитьДанныеПоШК(ШКод);
	Если ДанныеШК = неопределено Тогда Возврат; КонецЕсли;
	Если Строка(ДанныеШК.Тип) 	= "Карта участника (22)" Тогда
		Если Строка(ДанныеШК.Статус) <> "Не зарегистрирована" Тогда	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Продать можно только не зарегестрированную карту."+Символы.ПС+
															  "карта: "		+ ДанныеШК.КартаУчастника+символы.ПС+
															  "участника: "	+ ДанныеШК.Владелец+ символы.ПС+		
															  "в статусе: " + Строка(ДанныеШК.Статус));
			ТоварДобавлен	= Ложь; 
		ИначеЕсли ЗначениеЗаполнено(ДанныеШК.Владелец) и
				  ДанныеШК.Владелец <> Объект.Участник	Тогда		
				  
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Карта уже привязана к другому участнику."+Символы.ПС+
															  "карта: "		+ ДанныеШК.КартаУчастника+символы.ПС+
															  "участника: "	+ ДанныеШК.Владелец+ символы.ПС+		
															  "в статусе: " + Строка(ДанныеШК.Статус));
			ТоварДобавлен	= Ложь; 
				
		иначе 
			СП_РаботаСоСправочниками.ОбновитьКартуУчастника(ДанныеШК.КартаУчастника, 
														новый структура("Участник, Владелец",Объект.Участник, Объект.Участник) );
	
			ТоварДобавлен	= ДобавитьТовар(ДанныеШК.КартаУчастника);
		КонецЕсли;	
		Если ТоварДобавлен Тогда
			СтоСП_Клиент.СигналДинамика();
			Элементы.ГруппаСтраницы.ТекущаяСтраница	= Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.гпТовары;
		КОнецЕсли;	
	ИначеЕсли 	Строка(ДанныеШК.Тип) = "Посылка (12)" Тогда
		
		ПометитьПокупку(ДанныеШК);	
	ИначеЕсли Строка(ДанныеШК.Тип) 	= "Номенклатура (61)" Тогда	
		ТоварДобавлен	= ДобавитьТовар(ДанныеШК.Номенклатура);
		Если ТоварДобавлен Тогда
			СтоСП_Клиент.СигналДинамика();
			Элементы.ГруппаСтраницы.ТекущаяСтраница	= Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.гпТовары;
		КОнецЕсли;
	ИначеЕсли Строка(ДанныеШК.Тип) = "Действие по ШК (66)"   Тогда
		Если ТолькоПросмотр тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ уже оплачен!"); 
			Возврат; 
		КонецЕсли;
		Если	  ДанныеШК.Действие =  "ОплатаБезНаличная" Тогда	
 			ОплатитьКартой(Неопределено);
 		ИначеЕсли ДанныеШК.Действие =  "ОплатаНаличная" Тогда
			ОплатитьНаличными(Неопределено);
		ИначеЕсли ДанныеШК.Действие =  "НапечататьЧекРасходной" Тогда	
			СтоСП_Печать_Клиент.ЧекНЗРасходная(новый Структура("Форма", этотОбъект),Истина);
		КонецЕсли;			
	ИначеЕсли Строка(ДанныеШК.Тип) = "Сотрудник (55)" 		Тогда	
		ЗакрыватьДокумент = (сред(ШКод,8,2) = "01");
		Если ДвухЭтапнаяВыдача Тогда
			СобратьЗаказ(ДанныеШК.Сотрудник, ЗакрыватьДокумент);
		Иначе
			Объект.Ответственный = ДанныеШК.Сотрудник;
			ОплатитьНаличными(Неопределено);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры // ОбработатьШКНаКлиенте()

&НаКлиенте
Процедура ПометитьПокупку(ДанныеШК)

	СтрокаОтбора 		 	= Новый Структура;
	СтрокаОтбора.Вставить("Покупка", ДанныеШК.Заказ);
	МассивСтрок	= Объект.Покупки.НайтиСтроки(СтрокаОтбора);
	
	Если МассивСтрок.Количество()	= 0 Тогда
		ТекстСообщения="Не найдено в документе: "+Символы.ПС+
						"посылка:  "+ДанныеШК.Заказ+".";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли МассивСтрок[0].Подбор	= Истина Тогда
		ТекстСообщения="Строка №"+МассивСтрок[0].НомерСтроки+" уже помечена: "+Символы.ПС+
						"посылка:  "+ДанныеШК.Заказ+".";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Покупки["+(МассивСтрок[0].НомерСтроки-1)+"].Покупка");
		Возврат;
	Иначе
		МассивСтрок[0].Подбор	= Истина;
	КонецЕсли;	
	РассчитатьСтоимость();

#Если НЕ ВебКлиент Тогда
	сигнал();
#КонецЕсли
КонецПроцедуры

&НаСервере
Функция ДобавитьТовар(ПараметрыТовара)
	Док=РеквизитФормыВЗначение("Объект");
	ТоварДобавлен = Док.ДобавитьТовар(ПараметрыТовара);
	ЗначениеВДанныеФормы(Док,Объект);
	Возврат ТоварДобавлен;
КонецФункции	

&НаКлиенте
Процедура 	ВвестиШтрихКодВручную_Завершение(ШКод, ДополнительныеПараметры) Экспорт
	ОбработатьШКнаКлиенте(ШКод);
КонецПроцедуры	

#КонецОбласти //ШтрихКоды

#Область Печать
&НаСервере
Функция  ПолучитьКомандуПечати(ИмяКоманды)
	Для каждого ком из Команды Цикл
		Если ком.Заголовок=ИмяКоманды Тогда
			Возврат ком.Имя;
		КонецЕсли;
	КонецЦикла;	
КонецФункции

&НаСервереБезКонтекста
Функция КолвоЧеков()
	Если Константы.ЧекСборкиНеПечатать.Получить() Тогда
		Возврат 0;
	КонецЕсли;	
	Колво=Константы.КоличествоЧековВыдачи.Получить();
	колво=?(Колво=0,1,колво);
	Возврат колво;
КонецФункции // КолвоЧеков()

 #КонецОбласти

#Область ФискализацияЧека 

&НаКлиенте
Процедура 	ФискализироватьЧекАвтоПослеЗаписи()
	Сумма 		= Объект.СтоимостьИтого;
	
	ДанныеФормы	= Объект;
	Если Сумма=0 тогда Возврат КонецЕсли;
	Если 	ПроверитьЗаполнениеДокумента()	и 
			ПроверитьЗаполнение() 			и  
			СП_ККТ.НужноПечататьЧек(ДанныеФормы)  	Тогда
		
		ОчиститьСообщения();
		
		Если Объект.СтатусККМ <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Фискализирован") Тогда
			ФискализацияЧека();
		Иначе
 			//Проверка Печати фискального чека после опаты
			ТекстОшибки	=	"Ошибка 4 (проверка оплат). Сообщите Администратору";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	ИначеЕсли Объект.СсылочныйНомер <>	"" Тогда
		//Проверка Печати фискального чека после опаты
		ТекстОшибки	=	"Ошибка 3 (проверка оплат). Сообщите Администратору";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура 	ФискализацияЧека(Печатать = Ложь) Экспорт

	Если Объект.Списать Тогда 
		//Проверка Печати фискального чека после опаты
		ТекстОшибки	=	"Ошибка 5 (проверка оплат). Сообщите Администратору";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
		Возврат 
	
	КонецЕсли;
	Доступность 	= Ложь;
	
	Данныеформы				= Объект;
	ОбщиеПараметры 		 	= СП_ККТ.ПолучитьШаблонЧека(УстройствоПечати, данныеформы, Печатать);
	Если ОбщиеПараметры = неопределено Тогда Возврат; КонецЕсли;
	ОписаниеОповещения 		= Новый ОписаниеОповещения("ФискализацияЧека_Завершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(ОписаниеОповещения, УникальныйИдентификатор, ОбщиеПараметры, ?(УстройствоПечати.Пустая(), Неопределено, УстройствоПечати));

КонецПроцедуры

&НаКлиенте
Процедура 	ФискализацияЧека_Завершение(РезультатВыполнения, Параметры) Экспорт
	Доступность = Истина;
	Если РезультатВыполнения.Результат Тогда
		Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
		Объект.НомерЧекаККМ  = РезультатВыполнения.ВыходныеПараметры[1];
		Объект.СтатусККМ 		 = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Фискализирован");
		Объект.Дата   		 = МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса();
		Если Не ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
			
		СП_РаботаСДокументами_Клиент.ЗаписатьДокумент(ЭтотОбъект);
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура 	НапечататьЧекКоррекции_Завершение(РезультатВыполнения, Параметры) Экспорт
	//ЭтаФорма.Доступность = Истина;
	//Если РезультатВыполнения.Результат Тогда
	//	Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
	//	Объект.НомерЧекаККМ  = РезультатВыполнения.ВыходныеПараметры[1];
	//	Объект.Статус 		 = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Фискализирован");
	//	Объект.Дата   		 = МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса();
	//	Если Не ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
	//		Объект.НомерЧекаККМ = 1;
	//	КонецЕсли;
	//		
	//	СП_РаботаСДокументами_Клиент.ЗаписатьДокумент(ЭтотОбъект);
	//Иначе
	//	ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
	//	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры



#КонецОбласти //ФискализацияЧека

#Область Эквайринг

&НаКлиенте
Процедура ВозвратОплатыКартойЗавершение(Результат, ДопаолнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Конецесли;

	Сумма = Объект.СтоимостьИтого;
	Если Не Объект.ОплатаВыполнена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
			"ru='Для данного документа не выполнена оплата платежной картой.'"));
		Возврат;
	КонецЕсли;

	ПараметрыОперации=МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции		= "AuthorizeRefund";
	ПараметрыОперации.СуммаОперации 	= Сумма;
	ПараметрыОперации.НомерЧека			= "";
	ПараметрыОперации.НомерЧекаЭТ		= "";
	ПараметрыОперации.НомерКарты		= Объект.НомерКарты;
	ПараметрыОперации.СсылочныйНомер 	= Объект.СсылочныйНомер;
	МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(
		Новый ОписаниеОповещения("ОплатитьКартойПредложитьВыбратьЭквайринговыйТерминалЗавершение", ЭтотОбъект,
		ПараметрыОперации), "ЭквайринговыйТерминал", НСтр("ru='Выберите эквайринговый терминал'"), НСтр(
		"ru='Эквайринговый терминал не подключен'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаОплатыКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Сумма = Объект.СтоимостьИтого;
	Если Не Объект.ОплатаВыполнена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
			"ru='Для данного документа не выполнена оплата платежной картой.'"));
		Возврат;
	КонецЕсли;

	ПараметрыОперации=МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции		= "AuthorizeVoid";
	ПараметрыОперации.СуммаОперации 	= Сумма;
	ПараметрыОперации.НомерЧека			= "";
	ПараметрыОперации.НомерЧекаЭТ		= "7";
	ПараметрыОперации.НомерКарты		= Объект.НомерКарты;
	ПараметрыОперации.СсылочныйНомер 	= Объект.СсылочныйНомер;
	МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(
		Новый ОписаниеОповещения("ОплатитьКартойПредложитьВыбратьЭквайринговыйТерминалЗавершение", ЭтотОбъект,
		ПараметрыОперации), "ЭквайринговыйТерминал", НСтр("ru='Выберите эквайринговый терминал'"), НСтр(
		"ru='Эквайринговый терминал не подключен'"));
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОплату(ВидОпреации)
		Если аСППрверки.ПроверитьБлокировкуУчастника(объект.Участник) = ложь Тогда
		Объект.ВидОплаты = ВидОпреации;
		Если СП_РаботаСДокументами_Клиент.ЗаписатьДокумент(ЭтотОбъект) Тогда	
			ПослеОплаты();
			спПочтовыеСообщения.ОтправитьЧекРасходной(объект.Ссылка)
		КонецЕсли;	
	КОнецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ОплатитьБезнал(ВидОперации)

	Если Объект.НомерЧекаККМ <> 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Уже распечатан фискальняй чек. Оплата не выполнена!");
		Возврат;
	КонецЕсли;	
	
	
	Если не  ПроверитьЗаполнение() Тогда Возврат; КонецЕсли;

	Сумма 				= Объект.СтоимостьИтого;//Объект.Покупки.Итог("СтоимостьИтого")+Объект.ПоискНикаСтоимость;
	Объект.ВидОплаты 	= ВидОперации;
	ОчиститьСообщения();

	Если Объект.ОплатаВыполнена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для данного документа уже выполнена оплата платежной картой.'"));
		Возврат;
	КонецЕсли;

		ПараметрыОперации					= МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции		= "AuthorizeSales";
		ПараметрыОперации.СуммаОперации 	= Сумма;
		ПараметрыОперации.НомерЧека			= "";
		ПараметрыОперации.СсылочныйНомер 	= "";

	МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(
		Новый ОписаниеОповещения("ОплатитьКартойПредложитьВыбратьЭквайринговыйТерминалЗавершение", ЭтотОбъект, ПараметрыОперации),
		"ЭквайринговыйТерминал",
		НСтр("ru='Выберите эквайринговый терминал'"),
		НСтр("ru='Эквайринговый терминал не подключен'"));

КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойПредложитьВыбратьЭквайринговыйТерминалЗавершение(ИдентификаторУстройстваЭТ, ПараметрыОперации) Экспорт
	
	Если ИдентификаторУстройстваЭТ <> Неопределено Тогда
		
		Доступность=Ложь;
		
		Оповещение = новый ОписаниеОповещения("ОплатитьКартойЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,УникальныйИдентификатор,
			ИдентификаторУстройстваЭТ,, ПараметрыОперации);	
		
		
		ОписаниеОшибки = "";
		МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
		                                                                                ИдентификаторУстройстваЭТ,
		                                                                                ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Доступность = Истина;
	Если Результат.Результат Тогда
		Если 		Результат.ТипТранзакции = "AuthorizeSales" Тогда
			Объект.ОплатаВыполнена 	= Истина;
			Объект.СсылочныйНомер 	= Результат.СсылочныйНомер;
			Объект.НомерКарты 		= Результат.НомерКарты;
			Если не СП_РаботаСДокументами_Клиент.ЗаписатьДокумент(ЭтотОбъект) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не записан.Оплата не выполнена!");
				Возврат;
			КонецЕсли;
			//ФискализироватьЧекАвтоПослеЗаписи();
		ИначеЕсли 	Результат.ТипТранзакции = "AuthorizeVoid" или 
					Результат.ТипТранзакции = "AuthorizeRefund" Тогда
			Объект.ОплатаВыполнена 	= Ложь;
			Объект.СсылочныйНомер 	= Результат.СсылочныйНомер;
			Объект.НомерКарты 		= Результат.НомерКарты;
			Объект.ВидОплаты 		= ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличные");
			
			//Проверка Печати фискального чека после опаты
			ТекстОшибки	=	"Ошибка 1 (проверка оплат). Сообщите Администратору";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
		КонецЕсли;
		
		

		Если Результат.ТипТранзакции = "AuthorizeSales" Тогда
			ПослеОплаты();
				//НапечататьЧекПослеЗаписи();
				//ФискализироватьЧекАвтоПослеЗаписи();
				//ОповеститьОбИзменении(Объект.Ссылка);
				//Закрыть();//Элементы.ФискализацияЧека.Доступность = Ложь;
		КонецЕсли;
		//Сообщить("ОперацияВыполнена");
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При выполнении операции произошла ошибка "+Результат.ОписаниеОшибки);
		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СверкаИтоговЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Конецесли;
	
	Если Объект.ОплатаВыполнена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
			"ru='Для данного документа уже выполнена оплата платежной картой.'"));
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(
		Новый ОписаниеОповещения("ВыполнениеСверкиИтоговНаЭквайринговомТерминале", ЭтотОбъект, ДополнительныеПараметры),
		"ЭквайринговыйТерминал", НСтр("ru='Выберите эквайринговый терминал'"), НСтр(
		"ru='Эквайринговый терминал не подключен'"));	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнениеСверкиИтоговНаЭквайринговомТерминале(ИдентификаторУстройстваЭТ, ДополнительныеПараметры) экспорт

	Если ИдентификаторУстройстваЭТ <> Неопределено Тогда
		
		Доступность = Ложь;
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыполнениеСверкиИтоговНаЭквайринговомТерминалеЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОповещениеПриЗавершении, УникальныйИдентификатор, 
		ИдентификаторУстройстваЭТ, );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеСверкиИтоговНаЭквайринговомТерминалеЗавершение(РезультатВыполнения, Параметры) Экспорт
 
   Доступность = Истина;

   Если РезультатВыполнения.Результат Тогда
      ТекстСообщения = НСтр("ru = 'Операция завершена.'");
      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
   Иначе 
      ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
   КонецЕсли;

КонецПроцедуры


#КонецОбласти



&НаСервере
Процедура ПерезаполнитьКоды()
	
	СписокКодовПокупок= новый СписокЗначений;
	СписокКодовЗаказов= новый СписокЗначений;
	Для каждого Стр из объект.Покупки Цикл
		Если ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Покупки") Тогда
			СписокКодовПокупок.Добавить(Строка(стр.Покупка.Код));
		ИначеЕсли ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Заказы") Тогда
			СписокКодовЗаказов.Добавить(Строка(стр.Покупка.Код));
		КонецЕсли;	
	КонецЦикла;

	Если СписокКодовПокупок.Количество()>0 Тогда
		СтоСПОбмен_Покупки.Загрузить(СписокКодовПокупок);
	КонецЕсли;
	Если СписокКодовЗаказов.Количество()>0 Тогда
		аспПроцедурыОбменаДанными.ПолучитьЗапросомЗаказы(СписокКодовЗаказов);
	КонецЕсли;
	
	Док=РеквизитФормыВЗначение("Объект");
	Док.заполнениеКодов();
	ЗначениеВДанныеФормы(Док,Объект);
	
КонецПроцедуры	

&НаКлиенте
Функция 	ПроверитьЗаполнениеДокумента()
	
	Результат = Истина;
	
	ВыбранныеПосылки = Объект.Покупки.НайтиСтроки(новый структура("Подбор", Истина));
	Текст = "";
	Если ВыбранныеПосылки.Количество() = 0 и  Объект.Товары.Количество()=0 Тогда
		Текст = Текст + НСтр("ru = 'Не выбрано ни одного заказа'");
		Результат = Ложь;
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
		Текст = Текст + НСтр("ru = 'Не выбран вид оплаты'");
		Результат = Ложь;
	КонецЕсли;
	
	Если Текст <> "" Тогда
		ТекстЗаголовка = НСтр("ru = 'Ошибка заполнения'");
		ПоказатьПредупреждение(, Текст, 10 ,ТекстЗаголовка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


&НаКлиенте
Процедура ПослеОплаты()
	
	Если не ДвухЭтапнаяВыдача и не Объект.Напечатано Тогда
		Чеков	= КолвоЧеков();
		Для инд = 1 по чеков Цикл 
			командаПечати		= ПолучитьКомандуПечати("Чек");
			ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, командаПечати , Объект);
			//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(ЭтаФорма.Команды[командаПечати], ЭтотОбъект, Объект);
		КонецЦикла;
		Если не Объект.Напечатано Тогда
			Объект.Напечатано	= Истина;
			СП_РаботаСДокументами_Клиент.ЗаписатьДокумент(ЭтотОбъект);
		КонецЕсли;	
	КонецЕсли;
	
	ОповеститьОбИзменении(Объект.Ссылка);
	ФискализироватьЧекАвтоПослеЗаписи();
	УстановитьВидимость();
	Если ЗакрытьПослеОплаты Тогда
		Закрыть();
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьВыбранныеПосылки(ВидОплаты)
	Объект.ВидОплаты = ВидОплаты;
	Если не  ПроверитьЗаполнениеДокумента() Тогда Возврат; КонецЕсли;    
	Если Модифицированность и ВидОплаты <> ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда 
//		Если не СП_РаботаСДокументами_Клиент.ЗаписатьДокумент(ЭтотОбъект) Тогда
//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не записан.Оплата не выполнена!");
//			Возврат;
//		КонецЕсли;
	КонецЕсли;	 

	ВыбранныеСтроки = Объект.Покупки.НайтиСтроки(новый Структура("Подбор", Истина));
	ВыбраноПосылок =ВыбранныеСтроки.Количество();
	ВсегоПосылок = ОБъект.Покупки.Количество();
	
	
	Если ВыбраноПосылок <> ВсегоПосылок Тогда
		Оповещение = новый ОписаниеОповещения("ЗавершениеОплаты",ЭтотОбъект,ВидОплаты);
		ПоказатьВопрос(оповещение, СтрШаблон("В докумнте %1 заказов из них выбрано %2. Продолжить оплату?",
												ВсегоПосылок,ВыбраноПосылок),РежимДиалогаВопрос.ДаНет);
	Иначе	
		ЗавершениеОплаты(КодВозвратаДиалога.Да, ВидОплаты);
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОплаты(Результат, ВидОплаты) Экспорт
	Если результат = КодВозвратаДиалога.нет Тогда Возврат; КонецЕсли;	
	Если ВидОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличные") Тогда
		ПринятьОплату(ВидОплаты);
	ИначеЕсли ВидОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда		
		Если ПлатежныйТерминалБезПодключения Тогда
			ПринятьОплату(ВидОплаты);		
		Иначе	
			ОплатитьБезнал(ВидОплаты);
		КонецЕсли;	
	ИначеЕсли ВидОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ОплатаQR")  Тогда
		ПринятьОплату(ВидОплаты);		
	КонецЕсли;	
КонецПроцедуры


#КонецОбласти //СлужебныеПроцедурыИФункции

#Область СтандартныеПодсистемыПодключаемыеКоманды
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
    УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры



#КонецОбласти



//Процедура ОтправитьЧекЗавершение(Результат, ДополнительныеПараметры)  Экспорт
//	
//   // ЗаполнитьПисьмоСчеком();
//   // 
//   //ИмяМетода = Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем.ИмяМетода;
//   //Отбор = Новый Структура;
//   //Отбор.Вставить("ИмяМетода", ИмяМетода);
//   //Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
//   //ФоновыеЗаданияОчистки = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
//   //Если ФоновыеЗаданияОчистки.Количество() = 0 Тогда
//   //   НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//   //     НСтр("ru = 'Запуск вручную: %1'"), Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем.Синоним);
//   //   ФоновыеЗадания.Выполнить(ИмяМетода,,, НаименованиеФоновогоЗадания);
//   //КонецЕсли;	
//	
//КонецПроцедуры	
//
//
//

