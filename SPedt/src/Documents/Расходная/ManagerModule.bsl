// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт  
	Настройки.ПриПолученииСлужебныхРеквизитов = Истина;
КонецПроцедуры                       

Процедура ПриПолученииСлужебныхРеквизитов(Реквизиты) Экспорт
 //   Реквизиты.Добавить("ИмяРеквизита"); // реквизит объекта
  //  Реквизиты.Добавить("ИмяТабличнойЧасти.*"); // табличная часть объекта
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


#Область ПрограммныйИнтерфейс


Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати 					= КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати 	= "Документ.Расходная";
	КомандаПечати.Идентификатор 	= "СписокЗаказов";
	КомандаПечати.Картинка 			= БиблиотекаКартинок.Печать;
	КомандаПечати.Представление 	= НСтр("ru = 'Список заказов'");

	
	КомандаПечати 					= КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати 	= "Документ.Расходная";
	КомандаПечати.Идентификатор 	= "ЧекПросмотр";
	КомандаПечати.Картинка 			= БиблиотекаКартинок.Печать;
	КомандаПечати.Представление 	= НСтр("ru = 'Чек просмотр'");
	
	КомандаПечати 					= КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати 	= "Документ.Расходная";
	КомандаПечати.Идентификатор 	= "Чек";
	КомандаПечати.Картинка 			= БиблиотекаКартинок.ПечатьСразу;
	КомандаПечати.Представление 	= НСтр("ru = 'Чек'");
	КомандаПечати.СразуНаПринтер	= истина;
	
	КомандаПечати 							= КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати 			= "Документ.Расходная";
	КомандаПечати.Идентификатор 			= "ЧекНЗ";
	КомандаПечати.Картинка 					= БиблиотекаКартинок.Печать;
	КомандаПечати.обработчик				= "СтоСП_Печать_Клиент.ЧекНЗРасходная";
	КомандаПечати.Представление 			= НСтр("ru = 'Чек НЗ'");
	КомандаПечати.НеВыполнятьЗаписьВФорме	= Истина;
	
	
КонецПроцедуры
// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  – Массив    – ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати – Структура – дополнительные настройки печати;
//  КоллекцияПечатныхФорм – ТаблицаЗначений – сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         – СписокЗначений  – значение – ссылка на объект;
//                                            представление – имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       – Структура       – дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	#Если Сервер Тогда	
		НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокЗаказов");
		
		Если НужноПечататьМакет Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СписокЗаказов",
			НСтр("ru = 'Список заказов'"),
			СписокЗаказов(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.Расходная.ПФ_MXL_Чек");
		КонецЕсли;		
		
		НужноПечататьМакет 		= УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Чек");
		
		Если НужноПечататьМакет Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Чек",
			НСтр("ru = 'Чек'"),
			ПечатьЧек(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.Расходная.ПФ_MXL_Чек");
		КонецЕсли;	
		
		НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЧекПросмотр");
		
		Если НужноПечататьМакет Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЧекПросмотр",
			НСтр("ru = 'Чек просмотр'"),
			ПечатьЧек(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.Расходная.ПФ_MXL_Чек");
		КонецЕсли;	
		
		НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЧекНЗ");
		
		Если НужноПечататьМакет Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЧекНЗ",
			НСтр("ru = 'Чек НЗ'"),
			ПечатьЧек(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.Расходная.ПФ_MXL_Чек");
		КонецЕсли;	
		
	#КонецЕсли	
КонецПроцедуры

Функция ПечатьЧек(МассивОбъектов, ОбъектыПечати) Экспорт 
	#Если Сервер Тогда
		// Создаем табличный документ и устанавливаем имя параметров печати.
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.АвтоМасштаб=Истина;
		ТабличныйДокумент.ПолеСлева=0;
		ТабличныйДокумент.ПолеСправа=0;	 
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_Чек";
		
		сжатыйЧек = Константы.СжатыйЧекВыдачи.Получить();
		Если сжатыйЧек Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Расходная.ПФ_MXL_ЧекСжатый");	
		Иначе	
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Расходная.ПФ_MXL_Чек");
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Расходная.Дата КАК Дата,
		|	Расходная.Номер КАК Номер,
		|	Расходная.Участник КАК Участник,
		|	Расходная.Участник.Код КАК КодУчастника,
		|	Расходная.ПоискНикаСтоимость КАК ЗаПоискНика,
		|	Расходная.Покупки.(
		|		Покупка КАК Покупка,
		|		БесплатнаяВыдача КАК БесплатнаяВыдача,
		|		ЕСТЬNULL(Расходная.Покупки.МестоХранения.Родитель.Наименование, """") + ""   \   "" + Расходная.Покупки.МестоХранения.Наименование КАК МестоХранения,
		|		ПокупкаСпр КАК ПокупкаСпр,
		|		Партия КАК Партия,
		|		ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(Расходная.Покупки.Покупка) = ТИП(Справочник.Покупки)
		|				ТОГДА Расходная.Покупки.Покупка.Владелец
		|			ИНАЧЕ Расходная.Покупки.Покупка.Организатор
		|		КОНЕЦ КАК Организатор,
		|		ВремяХранения КАК ВремяХранения,
		|		СтоимостьХранения КАК СтоимостьХранения,
		|		Габарит КАК Габарит,
		|		Количество КАК Количество,
		|		СтоимостьДоставки КАК СтоимостьДоставки,
		|		СтоимостьИтого КАК СтоимостьИтого,
		|		ОплачиваетУчастник КАК ОплачиваетУчастник,
		|		ОплачиваетОрганизатор КАК ОплачиваетОрганизатор,
		|		МестоХранения.Родитель КАК МестоХраненияРодитель,
		|		ОплаченоУчастником КАК ОплаченоУчастником
		|	) КАК Покупки,
		|	ВЫБОР
		|		КОГДА Расходная.КартаУчастника = ЗНАЧЕНИЕ(Справочник.КартыУчастников.ПустаяСсылка)
		|			ТОГДА ""без карты""
		|		ИНАЧЕ Расходная.КартаУчастника
		|	КОНЕЦ КАК КартаУчастника,
		|	Расходная.Товары.(
		|		Номенклатура КАК Номенклатура,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК СтоимостьИтого
		|	) КАК Товары,
		|	Расходная.ПредоплатаОрганизатор КАК ПредоплатаОрганизатор,
		|	Расходная.ПредоплатаУчастник КАК ПредоплатаУчастник
		|ИЗ
		|	Документ.Расходная КАК Расходная
		|ГДЕ
		|	Расходная.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МестоХраненияРодитель,
		|	МестоХранения";
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Выборка = Запрос.Выполнить().Выбрать();
		ПервыйДокумент = Истина;
		
		ОбластьШтрихКод		= Макет.ПолучитьОбласть("ШтрихКод"); 
		ОбластьШапка 		= Макет.ПолучитьОбласть("Шапка");
		ОбластьЗаПоискНика 	= Макет.ПолучитьОбласть("ЗаПоискНика");
		ОбластьПокупки 		= Макет.ПолучитьОбласть("Покупки");
		ОбластьПокупкиБВ	= Макет.ПолучитьОбласть("ПокупкиБВ");
		ОбластьТовары  		= Макет.ПолучитьОбласть("Товары");
		ОбластьПредоплатаИтог 	= Макет.ПолучитьОбласть("Предоплата");
		ОбластьПодвал 		= Макет.ПолучитьОбласть("Подвал");
		
		
		
		ВставлятьРазделительСтраниц = Ложь;
		Итого=0;
		бесплатнаяВыдача = 0;
		Пока Выборка.Следующий() Цикл
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			
			префикс	= Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
			ПоказыватьШтрихкод = Константы.ИспользоватьДвухЭтапнуюВыдачуЗаказа.Получить() или Константы.ПоказыватьШтрихкодВРасходной.Получить();
			Если ПоказыватьШтрихкод Тогда
				ШтрихКодДокумента = "68" + Прав(Выборка.Номер, СтрДлина(Выборка.Номер)
					- 3);

				ПараметрыШтрихкода = Новый Структура;
				ПараметрыШтрихкода.Вставить("Ширина", 450);
				ПараметрыШтрихкода.Вставить("Высота", 120);
				ПараметрыШтрихкода.Вставить("Штрихкод", ШтрихКодДокумента);
				ПараметрыШтрихкода.Вставить("ТипКода", 4);
				ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
				ПараметрыШтрихкода.Вставить("РазмерШрифта", 10);
				ПараметрыШтрихкода.Вставить("УголПоворота", 0); //Одно из следующих значений: 0, 90, 180, 270.
				ПараметрыШтрихкода.Вставить("ПрозрачныйФон", Истина);
				ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0); //Одно из следующих значений: //0, 1, 2, 3. Соответствует: L, M, Q, H.
				РисунокШтрихкод = ОбластьШтрихКод.Рисунки.РисунокШтрихкод;
				РисунокШтрихкод.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				РисунокШтрихкод.РазмерКартинки = РазмерКартинки.Пропорционально; 
				РисунокШтрихкод.Расположить(ОбластьШтрихКод.Области.ШтрихКод);
				ТабличныйДокумент.Вывести(ОбластьШтрихКод, Выборка.Уровень());
			КонецЕсли;
			ОбластьШапка.Параметры.Заполнить(Выборка);
			ОбластьШапка.Параметры.Участник = Выборка.Участник.Наименование + " ("+Выборка.Участник.Код+")";
			Если не сжатыйЧек Тогда
				ОбластьШапка.Параметры.Дата=Формат(Выборка.Дата,"ДЛФ=ДД");
				ОбластьШапка.Параметры.НазваниеОрганизации=Константы.НазваниеОрганизации.Получить();
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьШапка, Выборка.Уровень());
			
			//ТабДок.Вывести(ОбластьПокупкиШапка);
			нпп=1;
			СтоимостьПоиска=Выборка.ЗаПоискНика;
			
			ВыборкаПокупки = Выборка.Покупки.Выбрать();
			Пока ВыборкаПокупки.Следующий() Цикл
				
				Если ВыборкаПокупки.БесплатнаяВыдача Тогда
					ОбластьВыводаПокупки = ОбластьПокупкиБВ;
					ОбластьВыводаПокупки.Параметры.ОплачиваетУчастник	= ВыборкаПокупки.ОплачиваетУчастник;
					ОбластьВыводаПокупки.Параметры.СтоимостОрганизатор	= ВыборкаПокупки.ОплачиваетОрганизатор;    
					Если ВыборкаПокупки.ОплачиваетУчастник Тогда
						ОбластьВыводаПокупки.Параметры.ВидПредоплаты			= "предоп. уч.";    	
					Иначе
						ОбластьВыводаПокупки.Параметры.ВидПредоплаты			= "предоп. орг.";    				
					КонецЕсли;
				Иначе	 
					ОбластьВыводаПокупки = ОбластьПокупки;
					ОбластьВыводаПокупки.Параметры.СтоимостьИтого	= ВыборкаПокупки.ОплачиваетОрганизатор + ВыборкаПокупки.ОплачиваетУчастник;
				КонецЕсли;	
				ОбластьВыводаПокупки.Параметры.Заполнить(ВыборкаПокупки);
				ОбластьВыводаПокупки.Параметры.нпп				= нпп;
				ОбластьВыводаПокупки.Параметры.Организатор		= ВыборкаПокупки.Организатор;
				
				ТабличныйДокумент.Вывести(ОбластьВыводаПокупки , ВыборкаПокупки.Уровень());
				
				Итого				= Итого				+ ВыборкаПокупки.ОплачиваетУчастник;
				бесплатнаяВыдача 	= бесплатнаяВыдача	+ ВыборкаПокупки.ОплачиваетОрганизатор; 
				нпп=нпп+1;
				

			КонецЦикла;
			
			ВыборкаТовары = Выборка.Товары.Выбрать();
			Пока ВыборкаТовары.Следующий() Цикл
				ОбластьТовары.Параметры.Заполнить(ВыборкаТовары);
				ТабличныйДокумент.Вывести(ОбластьТовары);
				
				Итого= Итого+ОбластьТовары.Параметры.СтоимостьИтого;
			КонецЦикла;
			
			
			
			Если СтоимостьПоиска<>0 Тогда
				ОбластьЗаПоискНика.Параметры.Заполнить(Выборка);
				ТабличныйДокумент.Вывести(ОбластьЗаПоискНика);
			КонецЕсли;
			
			
			Если Выборка.ПредоплатаОрганизатор >0 Тогда
				ОбластьПредоплатаИтог.Параметры.бесплатнаяВыдача	= Выборка.ПредоплатаОрганизатор;
				ОбластьПредоплатаИтог.Параметры.ВидПредоплаты		= "пледоплата организатор";
				ТабличныйДокумент.Вывести(ОбластьПредоплатаИтог);				
			КонецЕсли;	

			Если Выборка.ПредоплатаУчастник >0 Тогда
				ОбластьПредоплатаИтог.Параметры.бесплатнаяВыдача	= Выборка.ПредоплатаУчастник;
				ОбластьПредоплатаИтог.Параметры.ВидПредоплаты		= "пледоплата участник";
				ТабличныйДокумент.Вывести(ОбластьПредоплатаИтог);				
			КонецЕсли;	
			
			ОбластьПодвал.Параметры.Заполнить(Выборка);
			ОбластьПодвал.Параметры.Итого				= Итого+СтоимостьПоиска;
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		КонецЦикла;
		
		
		Возврат ТабличныйДокумент;
	#КонецЕсли
	
	
КонецФункции



Функция СписокЗаказов(МассивОбъектов, ОбъектыПечати) Экспорт
	#Если Сервер Тогда
		// Создаем табличный документ и устанавливаем имя параметров печати.
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.АвтоМасштаб=Истина;
		ТабличныйДокумент.ПолеСлева=0;
		ТабличныйДокумент.ПолеСправа=0;	 
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_Чек";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Расходная.ПФ_MXL_СписокЗаказов");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Расходная.Дата КАК Дата,
		|	Расходная.Номер КАК Номер,
		|	Расходная.Участник КАК Участник,
		|	Расходная.Участник.Код КАК КодУчастника,
		|	Расходная.ПоискНикаСтоимость КАК ЗаПоискНика,
		|	Расходная.Покупки.(
		|		Покупка КАК Покупка,
		|		БесплатнаяВыдача КАК БесплатнаяВыдача,
		|		ЕСТЬNULL(Расходная.Покупки.МестоХранения.Родитель.Наименование, """") + ""   \   "" + Расходная.Покупки.МестоХранения.Наименование КАК МестоХранения,
		|		ПокупкаСпр КАК ПокупкаСпр,
		|		Партия КАК Партия,
		|		ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(Расходная.Покупки.Покупка) = ТИП(Справочник.Покупки)
		|				ТОГДА Расходная.Покупки.Покупка.Владелец
		|			ИНАЧЕ Расходная.Покупки.Покупка.Организатор
		|		КОНЕЦ КАК Организатор,
		|		ВремяХранения КАК ВремяХранения,
		|		СтоимостьХранения КАК СтоимостьХранения,
		|		Габарит КАК Габарит,
		|		Количество КАК Количество,
		|		СтоимостьДоставки КАК СтоимостьДоставки,
		|		СтоимостьИтого КАК СтоимостьИтого,
		|		ОплачиваетУчастник КАК ОплачиваетУчастник,
		|		ОплачиваетОрганизатор КАК ОплачиваетОрганизатор,
		|		МестоХранения.Родитель КАК МестоХраненияРодитель
		|	) КАК Покупки,
		|	ВЫБОР
		|		КОГДА Расходная.КартаУчастника = ЗНАЧЕНИЕ(Справочник.КартыУчастников.ПустаяСсылка)
		|			ТОГДА ""без карты""
		|		ИНАЧЕ Расходная.КартаУчастника
		|	КОНЕЦ КАК КартаУчастника,
		|	Расходная.Товары.(
		|		Номенклатура КАК Номенклатура,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК СтоимостьИтого
		|	) КАК Товары,
		|	Расходная.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Расходная КАК Расходная
		|ГДЕ
		|	Расходная.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МестоХраненияРодитель,
		|	МестоХранения";
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Выборка = Запрос.Выполнить().Выбрать();
		ПервыйДокумент = Истина;
		
		ОбластьШтрихКод		= Макет.ПолучитьОбласть("ШтрихКод"); 
		ОбластьШапкаДоставки 		= Макет.ПолучитьОбласть("ШапкаДоставки");
//		ОбластьЗаПоискНика 	= Макет.ПолучитьОбласть("ЗаПоискНика");
		ОбластьПокупки 		= Макет.ПолучитьОбласть("Покупки");
		//ОбластьПокупкиБВ	= Макет.ПолучитьОбласть("ПокупкиБВ");
		//ОбластьТовары  		= Макет.ПолучитьОбласть("Товары");
		//ОбластьБВИтог 		= Макет.ПолучитьОбласть("ОплачиваетОрганизатор");
		//ОбластьПодвал 		= Макет.ПолучитьОбласть("Подвал");
		
		
		
		ВставлятьРазделительСтраниц = Ложь;
		Итого=0;
		бесплатнаяВыдача = 0;
		Пока Выборка.Следующий() Цикл
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			//
			//префикс	= Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
			ПоказыватьШтрихкод = Константы.ИспользоватьДвухЭтапнуюВыдачуЗаказа.Получить() или Константы.ПоказыватьШтрихкодВРасходной.Получить();
			Если ПоказыватьШтрихкод Тогда
				ШтрихКодДокумента = СП_Штрихкоды.ШКДокумента(Выборка.Ссылка);
				ПараметрыШтрихкода = Новый Структура;
				ПараметрыШтрихкода.Вставить("Ширина", 450);
				ПараметрыШтрихкода.Вставить("Высота", 120);
				ПараметрыШтрихкода.Вставить("Штрихкод", ШтрихКодДокумента);
				ПараметрыШтрихкода.Вставить("ТипКода", 4);
				ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
				ПараметрыШтрихкода.Вставить("РазмерШрифта", 10);
				ПараметрыШтрихкода.Вставить("УголПоворота", 0); //Одно из следующих значений: 0, 90, 180, 270.
				ПараметрыШтрихкода.Вставить("ПрозрачныйФон", Истина);
				ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0); //Одно из следующих значений: //0, 1, 2, 3. Соответствует: L, M, Q, H.
				РисунокШтрихкод = ОбластьШтрихКод.Рисунки.РисунокШтрихкод;
				РисунокШтрихкод.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				РисунокШтрихкод.РазмерКартинки = РазмерКартинки.Пропорционально; 
				РисунокШтрихкод.Расположить(ОбластьШтрихКод.Области.ШтрихКод);
				//ТабличныйДокумент.Вывести(ОбластьШтрихКод, Выборка.Уровень());
			КонецЕсли;
			//ОбластьШапка.Параметры.Заполнить(Выборка);
			//ОбластьШапка.Параметры.Дата=Формат(Выборка.Дата,"ДЛФ=ДД");
			//ОбластьШапка.Параметры.НазваниеОрганизации=Константы.НазваниеОрганизации.Получить();
			//ТабличныйДокумент.Вывести(ОбластьШапка, Выборка.Уровень());
			
			ОбластьШапкаДоставки.Параметры.Заполнить(Выборка);			
			ТабличныйДокумент.Вывести(ОбластьШапкаДоставки, Выборка.Уровень());
			
			//ТабДок.Вывести(ОбластьПокупкиШапка);
			нпп=1;
			СтоимостьПоиска=Выборка.ЗаПоискНика;
			
			ВыборкаПокупки = Выборка.Покупки.Выбрать();
			Пока ВыборкаПокупки.Следующий() Цикл

					//Если ВыборкаПокупки.БесплатнаяВыдача Тогда
					//	ОбластьВыводаПокупки = ОбластьПокупкиБВ;
					//	ОбластьВыводаПокупки.Параметры.ОплачиваетУчастник	= ВыборкаПокупки.ОплачиваетУчастник;
					//	ОбластьВыводаПокупки.Параметры.СтоимостОрганизатор	= ВыборкаПокупки.ОплачиваетОрганизатор;
					//Иначе	 
						ОбластьВыводаПокупки = ОбластьПокупки;
//						ОбластьВыводаПокупки.Параметры.СтоимостьИтого	= ВыборкаПокупки.ОплачиваетОрганизатор + ВыборкаПокупки.ОплачиваетУчастник;
					//КонецЕсли;	
					ОбластьВыводаПокупки.Параметры.Заполнить(ВыборкаПокупки);
					ОбластьВыводаПокупки.Параметры.нпп				= нпп;
					ОбластьВыводаПокупки.Параметры.Организатор		= ВыборкаПокупки.Организатор;
					
					ТабличныйДокумент.Вывести(ОбластьВыводаПокупки , ВыборкаПокупки.Уровень());
					
					//Итого				= Итого				+ ВыборкаПокупки.ОплачиваетУчастник;
					//бесплатнаяВыдача 	= бесплатнаяВыдача	+ ВыборкаПокупки.ОплачиваетОрганизатор; 
					нпп=нпп+1;


			КонецЦикла;
			ТабличныйДокумент.Вывести(ОбластьШтрихКод, Выборка.Уровень());			
			//ВыборкаТовары = Выборка.Товары.Выбрать();
			//Пока ВыборкаТовары.Следующий() Цикл
			//	ОбластьТовары.Параметры.Заполнить(ВыборкаТовары);
			//	ТабличныйДокумент.Вывести(ОбластьТовары);
			//	
			//	Итого= Итого+ОбластьТовары.Параметры.СтоимостьИтого;
			//КонецЦикла;
			
			
			
			//Если СтоимостьПоиска<>0 Тогда
			//	ОбластьЗаПоискНика.Параметры.Заполнить(Выборка);
			//	ТабличныйДокумент.Вывести(ОбластьЗаПоискНика);
			//КонецЕсли;
			//
			//ОбластьБВИтог.Параметры.бесплатнаяВыдача	= бесплатнаяВыдача;
			//
			//ОбластьПодвал.Параметры.Заполнить(Выборка);
			//ОбластьПодвал.Параметры.Итого				= Итого+СтоимостьПоиска;
			//Если бесплатнаяВыдача >0 Тогда
			//	ТабличныйДокумент.Вывести(ОбластьБВИтог);				
			//КонецЕсли;	
			//ТабличныйДокумент.Вывести(ОбластьПодвал);
		КонецЦикла;
		
		
		Возврат ТабличныйДокумент;
	#КонецЕсли
	
	
КонецФункции



#КонецОбласти


#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	ТекстыЗапроса = Новый СписокЗначений;
	//СтоСПОбмен_Общий.Получить_ТекстЗапроса_Обмен100сп (Запрос, ТекстыЗапроса, Регистры);
	СтоСПОбмен_Общий.Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Продажи(Запрос, ТекстыЗапроса, Регистры); 
	Получить_ТекстЗапроса_ОстаткиТоваров(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Расход(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_ТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры); 
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.Расходная КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                                                         Реквизиты.Период);
	Запрос.УстановитьПараметр("Номер",                         Реквизиты.Номер);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("Комментарий",                   Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",               Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                      Реквизиты.Проведен);
КонецПроцедуры

#КонецОбласти


#Область Обмен100сп
Функция ПолучитьТэг_delivery(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходнаяПокупки.Ссылка.Дата КАК date,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяПокупки.Покупка) = ТИП(Справочник.Посылки)
	|			ТОГДА РасходнаяПокупки.Покупка
	|		ИНАЧЕ РасходнаяПокупки.ШК
	|	КОНЕЦ КАК ШК,
	|	ВЫБОР
	|		КОГДА РасходнаяПокупки.ОплаченоУчастником
	|			ТОГДА 0
	|		ИНАЧЕ РасходнаяПокупки.ОплачиваетОрганизатор
	|	КОНЕЦ КАК ОплачиваетОранизатор,
	|	РасходнаяПокупки.СтоимостьИтого - РасходнаяПокупки.ОплачиваетОрганизатор КАК paidSum,
	|	РасходнаяПокупки.СтоимостьИтого - РасходнаяПокупки.СтоимостьХранения - РасходнаяПокупки.СтоимостьДоставки КАК
	|		СуммаПросрочки,
	|	ПОДСТРОКА(РасходнаяПокупки.Ссылка.Номер, 4, 9) КАК arrivalNumber,
	|	ПОДСТРОКА(РасходнаяПокупки.Партия.Номер, 4, 9) КАК innerId,
	|	РасходнаяПокупки.БесплатнаяВыдача КАК БесплатнаяВыдача,
	|	РасходнаяПокупки.СтоимостьХранения КАК БазаТарифа,
	|	РасходнаяПокупки.СтоимостьДоставки КАК СтоимостьДоставки
	|ИЗ
	|	Документ.Расходная.Покупки КАК РасходнаяПокупки
	|ГДЕ
	|	РасходнаяПокупки.Подбор и
	|	РасходнаяПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
	|	И РасходнаяПокупки.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл     
		
		
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("delivery");
		СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.ШК.Участник.Код),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber"	, 	Выборка.arrivalNumber);
		СтоСП.Вставить_Тэг(ЗаписьXML,"innerId"	, 			Формат(Число(Выборка.innerId),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	, 				Выборка.date);                           
		СтоСП.Вставить_Тэг(ЗаписьXML,"paidSum"	, 		Формат(Выборка.paidSum,		"ЧН=0; ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"delaySum"	, 		Формат(Выборка.СуммаПросрочки,		"ЧН=0; ЧГ=0"));

		СтоСП.Вставить_Тэг(ЗаписьXML,"baseSum"	, 		Формат(Выборка.БазаТарифа,		"ЧН=0; ЧГ=0"));
//		Если Выборка.ОплачиваетОранизатор>0 Тогда
		СтоСП.Вставить_Тэг(ЗаписьXML,"paidSumOrg",			Формат(Выборка.ОплачиваетОранизатор,	"ЧН=0; ЧГ=0"));
//		КонецЕсли;	
		СтоСП.Вставить_Тэг(ЗаписьXML,"destinationSum"	, 		Формат(Выборка.СтоимостьДоставки,		"ЧН=0; ЧГ=0"));
		СтоСПОбмен_Общий.ЗаполнитьТэгиЗаказаПо_ШК(Выборка.ШК,ЗаписьXML);	
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
КонецФункции
#КонецОбласти



Функция Получить_ТекстЗапроса_Продажи(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Продажи";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Расходная") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	РасходнаяТовары.Ссылка.Дата 	КАК Период,
		|	РасходнаяТовары.Номенклатура 	КАК Номенклатура,
		|	РасходнаяТовары.Количество 		КАК Количество,
		|	РасходнаяТовары.Ссылка.Участник КАК Участник,
		|	РасходнаяТовары.Сумма 			КАК Стоимость
		|ИЗ
		|	Документ.Расходная.Товары КАК РасходнаяТовары
		|ГДЕ
		|	РасходнаяТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расходная.Дата,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПоискНикаУчастника),
		|	1,
		|	Расходная.Участник,
		|	Расходная.ПоискНикаСтоимость
		|ИЗ
		|	Документ.Расходная КАК Расходная
		|ГДЕ
		|	Расходная.Ссылка = &Ссылка
		|	И НЕ Расходная.Списать
		|	И Расходная.ПоискНикаСтоимость > 0"
		
	КонецЕсли;	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция Получить_ТекстЗапроса_ОстаткиТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ОстаткиТоваров";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Расходная") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	РасходнаяПокупки.Ссылка.Дата КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	РасходнаяПокупки.Покупка КАК Покупка,
		|	РасходнаяПокупки.Ссылка.Участник КАК Участник,
		|	РасходнаяПокупки.Габарит КАК Габарит,
		|	РасходнаяПокупки.МестоХранения КАК МестоХранения,
		|	РасходнаяПокупки.Партия КАК Партия,
		|	РасходнаяПокупки.Оплачен КАК Оплачен,
		|	РасходнаяПокупки.Количество КАК Количество
		|ИЗ
		|	Документ.Расходная.Покупки КАК РасходнаяПокупки
		|ГДЕ
		|	РасходнаяПокупки.Ссылка = &Ссылка
		|	И РасходнаяПокупки.Подбор"
		
	КонецЕсли;	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция Получить_ТекстЗапроса_Расход(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Расход";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Расходная") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	РасходнаяПокупки.Ссылка.Дата КАК Период,
		               |	РасходнаяПокупки.Покупка КАК Покупка,
		               |	РасходнаяПокупки.Ссылка.Участник КАК Участник,
		               |	РасходнаяПокупки.Габарит КАК Габарит,
		               |	РасходнаяПокупки.МестоХранения КАК МестоХранения,
		               |	РасходнаяПокупки.Ссылка.Списать КАК Списано,
		               |	РасходнаяПокупки.Количество КАК Количество,
		               |	ВЫБОР
		               |		КОГДА РасходнаяПокупки.Ссылка.Списать
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипРасхода.Списано)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипРасхода.Расход)
		               |	КОНЕЦ КАК ТипРасхода,
		               |	ВЫБОР
		               |		КОГДА РасходнаяПокупки.Ссылка.Списать
		               |			ТОГДА 0
		               |		ИНАЧЕ РасходнаяПокупки.СтоимостьИтого - РасходнаяПокупки.ОплачиваетОрганизатор
		               |	КОНЕЦ КАК Сумма,
		               |	РасходнаяПокупки.ОплачиваетОрганизатор КАК Предоплата,
		               |	РасходнаяПокупки.БесплатнаяВыдача КАК БесплатнаяВыдача,
		               |	(РасходнаяПокупки.ОплаченоУчастником или РасходнаяПокупки.Покупка.ПредоплаченоУчастником) КАК ПредоплаченоУчастником,
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяПокупки.Партия) = ТИП(Документ.ПоступлениеПристроя)
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Пристрой,
		               |	РасходнаяПокупки.Партия КАК Партия
		               |ИЗ
		               |	Документ.Расходная.Покупки КАК РасходнаяПокупки
		               |ГДЕ
		               |	РасходнаяПокупки.Ссылка = &Ссылка
		               |	И РасходнаяПокупки.Подбор";
		               //|
		//               |ОБЪЕДИНИТЬ ВСЕ
		//               |
		//               |ВЫБРАТЬ
		//               |	РасходнаяПокупки.Ссылка.Дата,
		//               |	РасходнаяПокупки.Покупка,
		//               |	РасходнаяПокупки.Ссылка.Участник,
		//               |	РасходнаяПокупки.Габарит,
		//               |	РасходнаяПокупки.МестоХранения,
		//               |	РасходнаяПокупки.Ссылка.Списать,
		//               |	0,
		//               |	ВЫБОР
		//               |		КОГДА РасходнаяПокупки.Ссылка.Списать
		//               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипРасхода.Списано)
		//               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипРасхода.Расход)
		//               |	КОНЕЦ,
		//               |	РасходнаяПокупки.ОплачиваетОрганизатор,
		//               |	ИСТИНА,                    
		//			   |	РасходнаяПокупки.Покупка.ПредоплаченоУчастником,
		//               |	ВЫБОР
		//               |		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяПокупки.Партия) = ТИП(Документ.ПоступлениеПристроя)
		//               |			ТОГДА ИСТИНА
		//               |		ИНАЧЕ ЛОЖЬ
		//               |	КОНЕЦ,
		//               |	РасходнаяПокупки.Партия
		//               |ИЗ
		//               |	Документ.Расходная.Покупки КАК РасходнаяПокупки
		//               |ГДЕ
		//               |	РасходнаяПокупки.Ссылка = &Ссылка
		//               |	И ТИПЗНАЧЕНИЯ(РасходнаяПокупки.Покупка) = ТИП(Справочник.Посылки)
		//               |	И РасходнаяПокупки.Покупка.БесплатнаяВыдача"
		//
	КонецЕсли;	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция Получить_ТекстЗапроса_ТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры) 
	
	ИмяРегистра = "ТоварыНаСкладах";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	ТекстЗапроса = 		 "ВЫБРАТЬ
	               		 |	&Период КАК Период,
	               		 |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	               		 |	ТабЧастьДокумента.Номенклатура КАК Номенклатура,
	               		 |	ТабЧастьДокумента.Номенклатура.МестоХранения КАК МестоХранения,
	               		 |	ТабЧастьДокумента.Количество КАК Количество
	               		 |ИЗ
	               		 |	Документ.Расходная.Товары КАК ТабЧастьДокумента
	               		 |ГДЕ
	               		 |	ТабЧастьДокумента.Ссылка = &Ссылка
	               		 |	И ТИПЗНАЧЕНИЯ(ТабЧастьДокумента.Номенклатура) = ТИП(Справочник.Номенклатура)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции



Функция ПолноеИмяОбъекта()
	Возврат "Документ.Расходная";
КонецФункции
