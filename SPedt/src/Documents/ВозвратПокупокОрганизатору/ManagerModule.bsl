
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
    КомандаПечати 					= КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 	= "Документ.ВозвратПокупокОрганизатору";
    КомандаПечати.Идентификатор 	= "ВозвратПокупокОрганизатору";
	КомандаПечати.Картинка 			= БиблиотекаКартинок.Печать;
    КомандаПечати.Представление 	= НСтр("ru = 'Возврат покупок организатору (чек)'");

	
    КомандаПечати 					= КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 	= "Документ.ВозвратПокупокОрганизатору";
    КомандаПечати.Идентификатор 	= "ПечатьСтикеровПосылки";
    КомандаПечати.Представление 	= НСтр("ru = 'Печать cтикеров'");
    КомандаПечати.ПроверкаПроведенияПередПечатью = Истина; 	
	
	
КонецПроцедуры



// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  – Массив    – ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати – Структура – дополнительные настройки печати;
//  КоллекцияПечатныхФорм – ТаблицаЗначений – сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         – СписокЗначений  – значение – ссылка на объект;
//                                            представление – имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       – Структура       – дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	#Если Сервер Тогда 
	ИмяМакета = "ВозвратПокупокОрганизатору";	
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета);
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        ИмяМакета,          
        НСтр("ru = 'Возврат покупок организатору (чек)'"),
        Печать_ЧекПеремещениеВозврата(МассивОбъектов, ОбъектыПечати),
        ,
        "Документ.ПеремещениеВозврата.ПФ_MXL_ЧекПеремещениеВозврата");
	КонецЕсли;  
	
    НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьСтикеровПосылки");
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        "ПечатьСтикеровПосылки",
        НСтр("ru = 'Печать cтикеров (Посылки)'"),
        СтоСП_Печать.ТабДок_СтикерВозврата(МассивОбъектов, ОбъектыПечати),
        ,
        "ОбщиеМакеты.ПФ_MXL_ПосылкаЭтикеткаv2");
		
	КонецЕсли;		
#КонецЕсли 	
КонецПроцедуры






Функция Печать_ЧекПеремещениеВозврата(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб=Истина;
	ТабличныйДокумент.ПолеСлева=0;
	ТабличныйДокумент.ПолеСправа=0;	 


	
	Макет = Документы.ВозвратПокупокОрганизатору.ПолучитьМакет("ПФ_MXL_ЧекВозвратПокупокОрагнизатору");
	
	ОбластьШтрихКод			= Макет.ПолучитьОбласть("ШтрихКод"); 
	ОбластьШтрихКодСтрока	= Макет.ПолучитьОбласть("ШтрихКодСтрока"); 
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	Шапка 					= Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупкиШапка 	= Макет.ПолучитьОбласть("ПокупкиШапка");
	ОбластьПокупки 			= Макет.ПолучитьОбласть("Покупки");
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратПокупокОрганизаторуПокупки.Ссылка КАК Ссылка,
		|	ВозвратПокупокОрганизаторуПокупки.НомерСтроки КАК НомерСтроки,
		|	ВозвратПокупокОрганизаторуПокупки.Организатор КАК Организатор,
		|	ВозвратПокупокОрганизаторуПокупки.Покупка КАК Покупка,
		|	ВозвратПокупокОрганизаторуПокупки.ШК КАК ШК
		|ПОМЕСТИТЬ втВыборка
		|ИЗ
		|	Документ.ВозвратПокупокОрганизатору.Покупки КАК ВозвратПокупокОрганизаторуПокупки
		|ГДЕ
		|	ВозвратПокупокОрганизаторуПокупки.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратПокупокОрганизаторуВозвраты.Ссылка,
		|	ВозвратПокупокОрганизаторуВозвраты.НомерСтроки,
		|	ВозвратПокупокОрганизаторуВозвраты.Организатор,
		|	ВозвратПокупокОрганизаторуВозвраты.Покупка,
		|	ВозвратПокупокОрганизаторуВозвраты.ШК
		|ИЗ
		|	Документ.ВозвратПокупокОрганизатору.Возвраты КАК ВозвратПокупокОрганизаторуВозвраты
		|ГДЕ
		|	ВозвратПокупокОрганизаторуВозвраты.Ссылка В(&Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВыборка.Ссылка КАК Ссылка,
		|	втВыборка.НомерСтроки КАК НомерСтроки,
		|	втВыборка.Организатор КАК Организатор,
		|	втВыборка.Покупка КАК Покупка,
		|	втВыборка.ШК КАК ШК
		|ИЗ
		|	втВыборка КАК втВыборка
		|ИТОГИ ПО
		|	Ссылка";

	Запрос.Параметры.Вставить("Ссылка", МассивОбъектов);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабличныйДокумент.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		Шапка.Параметры.Заполнить(Выборка);
		Шапка.Параметры.Точка="точка:"+Константы.СвояТочка.Получить();
		ТабличныйДокумент.Вывести(Шапка, Выборка.Уровень());

		//ТабДок.Вывести(ОбластьПокупкиШапка);
		ВыборкаПокупки = Выборка.Выбрать();
		Пока ВыборкаПокупки.Следующий() Цикл
			ОбластьПокупки.Параметры.Заполнить(ВыборкаПокупки);
			ТабличныйДокумент.Вывести(ОбластьПокупки, ВыборкаПокупки.Уровень());
			
			Если ЗначениеЗаполнено(ВыборкаПокупки.ШК) Тогда
				ШтрихКод = ВыборкаПокупки.ШК.Код;
				ПараметрыШтрихкода = Новый Структура;
				ПараметрыШтрихкода.Вставить("Ширина", 450);
				ПараметрыШтрихкода.Вставить("Высота", 120);
				ПараметрыШтрихкода.Вставить("Штрихкод", ШтрихКод);
				ПараметрыШтрихкода.Вставить("ТипКода", 4);
				ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
				ПараметрыШтрихкода.Вставить("РазмерШрифта", 10);
				ПараметрыШтрихкода.Вставить("УголПоворота", 0); //Одно из следующих значений: 0, 90, 180, 270.
				ПараметрыШтрихкода.Вставить("ПрозрачныйФон", Истина);
				ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0); //Одно из следующих значений: //0, 1, 2, 3. Соответствует: L, M, Q, H.
				РисунокШтрихкод = ОбластьШтрихКод.Рисунки.РисунокШтрихкод;
				РисунокШтрихкод.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				РисунокШтрихкод.РазмерКартинки = РазмерКартинки.Пропорционально; 
				РисунокШтрихкод.Расположить(ОбластьШтрихКод.Области.ШтрихКод);
				ТабличныйДокумент.Вывести(ОбластьШтрихКод, Выборка.Уровень());
				
				ОбластьШтрихКодСтрока.Параметры.ШтрихКодСтрока = ШтрихКод;
				ТабличныйДокумент.Вывести(ОбластьШтрихКодСтрока, Выборка.Уровень());
			КонецЕсли
			
			
			
		КонецЦикла;

		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =   
	//"ВЫБРАТЬ
	//|	ВозвратПокупокОрганизатору.Дата,
	//|	ВозвратПокупокОрганизатору.Номер,
	//|	ВозвратПокупокОрганизатору.Участник,
	//|	ВозвратПокупокОрганизатору.Покупки.(
	//|		НомерСтроки,
	//|		Организатор,
	//|		Покупка,
	//|		Покупка.Код
	//|	),
	//|	ВозвратПокупокОрганизатору.Участник.Код
	//|ИЗ
	//|	Документ.ВозвратПокупокОрганизатору КАК ВозвратПокупокОрганизатору
	//|ГДЕ
	//|	ВозвратПокупокОрганизатору.Ссылка В(&Ссылка)";
	//Запрос.Параметры.Вставить("Ссылка", МассивОбъектов);
	//Выборка = Запрос.Выполнить().Выбрать();

	//ТабличныйДокумент.Очистить();

	//ВставлятьРазделительСтраниц = Ложь;
	//Пока Выборка.Следующий() Цикл
	//	Если ВставлятьРазделительСтраниц Тогда
	//		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//	КонецЕсли;

	//	ТабличныйДокумент.Вывести(ОбластьЗаголовок);

	//	Шапка.Параметры.Заполнить(Выборка);
	//	Шапка.Параметры.Точка="точка:"+Константы.СвояТочка.Получить();
	//	ТабличныйДокумент.Вывести(Шапка, Выборка.Уровень());

	//	//ТабДок.Вывести(ОбластьПокупкиШапка);
	//	ВыборкаПокупки = Выборка.Покупки.Выбрать();
	//	Пока ВыборкаПокупки.Следующий() Цикл
	//		ОбластьПокупки.Параметры.Заполнить(ВыборкаПокупки);
	//		ТабличныйДокумент.Вывести(ОбластьПокупки, ВыборкаПокупки.Уровень());
	//		
	//		Если ТипЗнч(ВыборкаПокупки.ПОкупка) = Тип("СправочникСсылка.Посылки") Тогда
	//			ШтрихКод = ВыборкаПокупки.ПОкупка.ШК.Код;
	//			ПараметрыШтрихкода = Новый Структура;
	//			ПараметрыШтрихкода.Вставить("Ширина", 450);
	//			ПараметрыШтрихкода.Вставить("Высота", 120);
	//			ПараметрыШтрихкода.Вставить("Штрихкод", ШтрихКод);
	//			ПараметрыШтрихкода.Вставить("ТипКода", 4);
	//			ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
	//			ПараметрыШтрихкода.Вставить("РазмерШрифта", 10);
	//			ПараметрыШтрихкода.Вставить("УголПоворота", 0); //Одно из следующих значений: 0, 90, 180, 270.
	//			ПараметрыШтрихкода.Вставить("ПрозрачныйФон", Истина);
	//			ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0); //Одно из следующих значений: //0, 1, 2, 3. Соответствует: L, M, Q, H.
	//			РисунокШтрихкод = ОбластьШтрихКод.Рисунки.РисунокШтрихкод;
	//			РисунокШтрихкод.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	//			РисунокШтрихкод.РазмерКартинки = РазмерКартинки.Пропорционально; 
	//			РисунокШтрихкод.Расположить(ОбластьШтрихКод.Области.ШтрихКод);
	//			ТабличныйДокумент.Вывести(ОбластьШтрихКод, Выборка.Уровень());
	//			
	//			ОбластьШтрихКодСтрока.Параметры.ШтрихКодСтрока = ШтрихКод;
	//			ТабличныйДокумент.Вывести(ОбластьШтрихКодСтрока, Выборка.Уровень());
	//		КонецЕсли
	//		
	//		
	//		
	//	КонецЦикла;

	//	ВставлятьРазделительСтраниц = Истина;
	//КонецЦикла;
	Возврат ТабличныйДокумент;

КонецФункции


#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	//СтоСПОбмен_Общий.Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Возвраты(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Транзит(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Расход(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Обмен100СПрн_Ошибки(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверСП.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ЭтоНовыйВозврат", (ДокументСсылка.Возвраты.Количество()>0));
	Запрос.УстановитьПараметр("Период", ДокументСсылка.Дата);  
	Запрос.УстановитьПараметр("ДокументОтправления", ДокументСсылка.Основание);  
КонецПроцедуры

Функция Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Обмен100СПрн";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	вз.Ссылка.Дата КАК Период,
	               |	1 КАК КоличествоНеОтправленых,
	               |	вз.Ссылка КАК Партия,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Возврат) КАК ТипОбмена
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВозвратПокупокОрганизаторуПокупки.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Документ.ВозвратПокупокОрганизатору.Покупки КАК ВозвратПокупокОрганизаторуПокупки
	               |	ГДЕ
	               |		ВозвратПокупокОрганизаторуПокупки.Ссылка = &Ссылка
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВозвратПокупокОрганизаторуПокупки.Ссылка) КАК вз";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции


Функция Получить_ТекстЗапроса_Обмен100СПрн_Ошибки (Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "Обмен100СПрн_Ошибки";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	//Если Запрос.Параметры.Статус<>Перечисления.СтатусОтпавкиНаСайт.Отправлен Тогда
	//	Возврат "";
	//КонецЕсли; 
	
	ТекстЗапроса =  "ВЫБРАТЬ
	                |	Возврат.Ссылка.Дата КАК Период,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Возврат) КАК типОбмена,
	                |	Возврат.Ссылка КАК Партия,
	                |	0 КАК СтрокаВПартии,
	                |	ЗНАЧЕНИЕ(Справочник.Мегаордера.ПустаяСсылка) КАК Мегаордер,
	                |	""Не выполнен обмен по документу возврата!"" КАК СообщениеОшибки,
	                |	1 КАК КоличествоНеИсправленных
	                |ИЗ
	                |	Документ.ВозвратПокупокОрганизатору КАК Возврат
	                |ГДЕ
	                |	Возврат.Ссылка = &Ссылка
	                |	И НЕ Возврат.Отправлено
					|	И &ЭтоНовыйВозврат					
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	Возврат.Ссылка.Дата,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Возврат),
	                |	Возврат.Ссылка,
	                |	Возврат.НомерСтроки,
	                |	Возврат.ШК,
	                |	ВЫБОР
	                |		КОГДА Возврат.СообщениеОшибки = """"
	                |			ТОГДА ""не привязан стикер""
	                |		ИНАЧЕ Возврат.СообщениеОшибки
	                |	КОНЕЦ,
	                |	1
	                |ИЗ
	                |	Документ.ВозвратПокупокОрганизатору.Возвраты КАК Возврат
	                |ГДЕ
	                |	Возврат.Ссылка = &Ссылка
	                |	И Возврат.Ссылка.Отправлено
	                |	И НЕ Возврат.Отправлено
					|	И &ЭтоНовыйВозврат";
	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
КонецФункции




Функция Получить_ТекстЗапроса_Возвраты(Запрос, ТекстыЗапроса, Регистры) 
	
	ИмяРегистра = "Возвраты";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	ТекстЗапроса = 
		 "ВЫБРАТЬ
		 |	&Период КАК Период,
		 |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		 |	ВозвратПокупокОрганизаторуПокупки.Организатор КАК Организатор,
		 |	ВозвратПокупокОрганизаторуПокупки.Участник КАК Участник,
		 |	ВозвратПокупокОрганизаторуПокупки.Покупка КАК Покупка,
		 |	ВозвратПокупокОрганизаторуПокупки.МестоХранения КАК МестоХранения,
		 |	1 КАК Количество,
		 |	ВозвратПокупокОрганизаторуПокупки.Ссылка КАК Партия,
		 |	ВозвратПокупокОрганизаторуПокупки.СтоимостьВозврата КАК Сумма
		 |ИЗ
		 |	Документ.ВозвратПокупокОрганизатору.Покупки КАК ВозвратПокупокОрганизаторуПокупки
		 |ГДЕ
		 |	ВозвратПокупокОрганизаторуПокупки.Ссылка = &Ссылка
		 |
		 |ОБЪЕДИНИТЬ ВСЕ
		 |
		 |ВЫБРАТЬ
		 |	&Период,
		 |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		 |	ВозвратПокупокОрганизаторуВозвраты.Организатор,
		 |	ВозвратПокупокОрганизаторуВозвраты.Участник,
		 |	ВозвратПокупокОрганизаторуВозвраты.ШК.Посылка,
		 |	ВозвратПокупокОрганизаторуВозвраты.МестоХранения,
		 |	1,
		 |	ВозвратПокупокОрганизаторуВозвраты.Ссылка,
		 |	ВозвратПокупокОрганизаторуВозвраты.СтоимостьВозврата
		 |ИЗ
		 |	Документ.ВозвратПокупокОрганизатору.Возвраты КАК ВозвратПокупокОрганизаторуВозвраты
		 |ГДЕ
		 |	ВозвратПокупокОрганизаторуВозвраты.Отправлено
		 |	И ВозвратПокупокОрганизаторуВозвраты.Ссылка.Отправлено
		 |	И ВозвратПокупокОрганизаторуВозвраты.Ссылка.Ссылка = &Ссылка";


	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
КонецФункции

Функция Получить_ТекстЗапроса_Транзит(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Транзит";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	ТекстЗапроса = "ВЫБРАТЬ
	               |	&Период КАК Период,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	               |	Транзит.ПокупкаСсылка КАК ПокупкаСсылка,
	               |	Транзит.МестоХранения КАК МестоХранения,
	               |	Транзит.Габарит КАК Габарит,
	               |	Транзит.Участник КАК Участник,
	               |	Транзит.Точка КАК Точка,
	               |	Транзит.Партия КАК Партия,
	               |	Транзит.Количество КАК Количество
	               |ИЗ
	               |	РегистрНакопления.Транзит КАК Транзит
	               |ГДЕ
	               |	Транзит.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ТИПЗНАЧЕНИЯ(Транзит.ПокупкаСсылка) = ТИП(Справочник.Коробки)
	               |	И Транзит.Регистратор = &ДокументОтправления";
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Расход(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Расход";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	ТекстЗапроса = "ВЫБРАТЬ
	               |	&Период КАК Период,
	               |	Транзит.ПокупкаСсылка КАК Покупка,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипРасхода.Возврат) КАК ТипРасхода,
	               |	ИСТИНА КАК Списано,
	               |	Транзит.Габарит КАК Габарит,
	               |	Транзит.Участник КАК Участник,
	               |	Транзит.ПокупкаСсылка.Наименование КАК ПокупкаСпр,
	               |	Транзит.Количество КАК Количество
	               |ИЗ
	               |	РегистрНакопления.Транзит КАК Транзит
	               |ГДЕ
	               |	Транзит.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ТИПЗНАЧЕНИЯ(Транзит.ПокупкаСсылка) = ТИП(Справочник.Коробки)
	               |	И Транзит.Регистратор = &ДокументОтправления";
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти


#Область Обмен100сп

Функция ПолучитьТэг_return(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратПокупокОрганизаторуПокупки.Ссылка.Дата КАК Дата,
		|	ВозвратПокупокОрганизаторуПокупки.Покупка КАК Покупка,
		|	ВозвратПокупокОрганизаторуПокупки.Участник КАК Участник,
		|	ВозвратПокупокОрганизаторуПокупки.КодыТоваров,
		|	ВозвратПокупокОрганизаторуПокупки.ШК КАК ШК
		|ИЗ
		|	Документ.ВозвратПокупокОрганизатору.Покупки КАК ВозвратПокупокОрганизаторуПокупки
		|ГДЕ
		|	ВозвратПокупокОрганизаторуПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И ВозвратПокупокОрганизаторуПокупки.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		//Если ТипЗнч(Выборка.ШК.Покупка)=Тип("СправочникСсылка.Посылки") и Выборка.ШК.Покупка.Состав.Количество()=0 Тогда Продолжить; КонецЕсли;
//		Если ТипЗнч(Выборка.ШК.Покупка)=Тип("СправочникСсылка.Посылки") Тогда
//			ШК = Выборка.ШК.Покупка.Покупка.Состав[0].ШК;
//		Иначе
//			ШК= Выборка.ШК;
//		Конецесли;
		
		ШК= Выборка.ШК;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("return");
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				Выборка.Дата);
		Если Выборка.ШК.типМегаордера = Перечисления.типМегаордера.Посылка Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"packageId",           Формат(Выборка.ШК.Посылка.Код,"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.Участник.Код),"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",           "package");
			СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(?(ЗначениеЗаполнено(ШК.Посылка.Организатор),ШК.Посылка.Организатор.Код,0)),"ЧГ=0"));
				
		Иначе
			СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.ШК.Участник.Код),"ЧГ=0"));
			СтоСПОбмен_Общий.ЗаполнитьТэгиЗаказаПо_ШК(ШК,ЗаписьXML);		
			СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(?(ЗначениеЗаполнено(ШК.Организатор),ШК.Организатор.Код,ШК.Покупка.Организатор.Код)),"ЧГ=0"));
		КонецЕсли;		
		Если Выборка.КодыТоваров <> "" Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML, "ordersIds", Выборка.КодыТоваров);
		КонецЕсли;	
			
			
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
КонецФункции



Функция ПолучитьТэг_return_right(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Возвраты.Ссылка.Дата КАК Дата,
		|	Возвраты.Ссылка.Номер КАК Номер,
		|	Возвраты.Организатор КАК Организатор,
		|	Возвраты.Покупка КАК Покупка,
		|	Возвраты.Участник КАК Участник,
		|	Возвраты.КодЗаказа как КодЗаказа,
		|	Возвраты.ШК КАК ШК
		|ИЗ
		|	Документ.ВозвратПокупокОрганизатору.Возвраты КАК Возвраты
		|ГДЕ
		|	Возвраты.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И Возвраты.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		//Если ТипЗнч(Выборка.ШК.Покупка)=Тип("СправочникСсылка.Посылки") и Выборка.ШК.Покупка.Состав.Количество()=0 Тогда Продолжить; КонецЕсли;
//		Если ТипЗнч(Выборка.ШК.Покупка)=Тип("СправочникСсылка.Посылки") Тогда
//			ШК = Выборка.ШК.Покупка.Покупка.Состав[0].ШК;
//		Иначе
//			ШК= Выборка.ШК;
//		Конецесли;
		
		ШК= Выборка.ШК;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("return");
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				Выборка.Дата);

		СтоСП.Вставить_Тэг(ЗаписьXML,"stickerId",           Формат(Число(Выборка.ШК.Покупка.Код),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.Участник.Код),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",           "sp");
		СтоСП.Вставить_Тэг(ЗаписьXML,"orderId",              Формат(Число(Выборка.КодЗаказа),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber",        Формат(Число(Прав(Выборка.Номер,СтрДлина(Выборка.Номер) - 3)),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(Выборка.Организатор.Код),"ЧГ=0"));
			
			
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
КонецФункции


#КонецОбласти


Функция ПолноеИмяОбъекта()
	Возврат "Документ.ВозвратПокупокОрганизатору";
КонецФункции


Процедура ЗаполнитьПустыеШКвТабЧасти(ОбъектВозврата)  Экспорт 
	//строки_безШК=ОбъектВозврата.Покупки.НайтиСтроки(новый Структура("ШК",Справочники.Мегаордера.ПустаяСсылка()));	
	Для каждого стр из ОбъектВозврата.Покупки Цикл
		стр_Участник = ?(ЗначениеЗаполнено(стр.Участник),стр.Участник,ОбъектВозврата.Участник);
		стр_Покупка  = стр.Покупка;
		
		стр.ШК=СП_Штрихкоды.ПолучитьМегаордер(стр_Покупка,стр_Участник);
		Если не ЗначениеЗаполнено(стр.ШК.Участник) Тогда
			об=стр.ШК.ПолучитьОбъект();
			об.Участник=Справочники.Участники.нулевой   ;
			об.Записать();
		КонецЕсли;
		Если не ЗначениеЗаполнено(стр.ШК.Организатор) Тогда
			об=стр.ШК.ПолучитьОбъект();
			об.Организатор=стр.Организатор   ;
			об.Записать();
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры	
