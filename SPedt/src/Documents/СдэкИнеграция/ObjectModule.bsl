//Функция  ЗаполнитьДляРасчетаТрекНомера(СписокГруппПараметр = Неопределено) Экспорт
//	
//	Если СписокГруппПараметр = Неопределено Тогда
//		списокГрупп =  ПолучитьГруппыДляРасчетаТрекНомеров();
//	Иначе
//		списокВсехГрупп = Новый СписокЗначений;
//		Если ТипЗнч(СписокГруппПараметр) = Тип("Массив") Тогда
//			списокВсехГрупп.ЗагрузитьЗначения(СписокГруппПараметр);
//			
//			Результат = ОтобратьКорректныеГруппДляПолученияТрэкНомера(списокВсехГрупп);
//		КонецЕсли	
//	КонецЕсли;	
//	ЗаполнитьТабчастьТрекНомераПоСпискуГрупп(Результат.ГруппыБезОшибок);	
//	Возврат Результат.Ошибки;
//КонецФункции




Функция ПолучитьГруппыДляРасчетаТрекНомеров() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтправлениеТранзита.Коробка КАК ГруппаДоставки
		|ИЗ
		|	Документ.ОтправлениеТранзита КАК ОтправлениеТранзита
		|ГДЕ
		|	ОтправлениеТранзита.Коробка.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.shipment)
		|	И ОтправлениеТранзита.Коробка.НомерЗаказа = """"
		|	И ОтправлениеТранзита.Проведен 
		|	И ОтправлениеТранзита.ТочкаНазначения В(&СписокТК)";
	СписокТК	= Новый СписокЗначений;
	СписокТК.Добавить(Справочники.ТочкиРаздачи.НайтиПоКоду("0083")); //Пункты выдачи СДЭК
	СписокТК.Добавить(Справочники.ТочкиРаздачи.НайтиПоКоду("0092")); //СДЭК Эконом (Москва)
	Запрос.Параметры.Вставить("СписокТК", СписокТК);
	РезультатЗапроса = Запрос.Выполнить();
	МассивГрупп = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ГруппаДоставки");
	СписокГрупп = Новый СписокЗначений;
	СписокГрупп.ЗагрузитьЗначения(МассивГрупп);
	Возврат СписокГрупп;
КонецФункции	

Процедура ЗаполнитьТабчастьТрекНомераПоСпискуГрупп(списокГрупп) Экспорт
	Разбор = СтоСП_ГруппыДоставки.АнализГруппПередПолучениемТрекНомра(СписокГРупп);
	ТрекНомера.Очистить();
	НетВНаличии.Очистить();
	
	Для каждого элем из Разбор.БезОшибок Цикл
		НоваяСтрока 				= ТрекНомера.Добавить();
		ЗаполнитьСтрокуТабЧасти(НоваяСтрока, элем);	
	КонецЦикла;
	Для каждого элем из Разбор.ТНПолучен Цикл
		НоваяСтрока 				= Квитанции.Добавить();
		ЗаполнитьСтрокуТабЧасти(НоваяСтрока, элем);	
	КонецЦикла;

	
	
	ГруппыСОшибками.Загрузить(Разбор.Ошибки.ВсеОшибки);
	НетВНаличии.Загрузить(Разбор.Ошибки.НетВНаличии);

	
КонецПроцедуры	

Процедура ЗаполнитьСтрокуТабЧасти(НоваяСтрока, Источник)
	Если ТипЗнч(Источник) = Тип("СтрокаТаблицыЗначений") Тогда
		ГруппаДоставки				= Источник.ГруппаДоставки;
	Иначе	
		ГруппаДоставки				= Источник.Значение;
	КонецЕсли;	
	Партия						= ГруппаДоставки.ОтправлениеТранзита;				
	НоваяСтрока.ГруппаДоставки  = ГруппаДоставки;
	НоваяСтрока.Партия		   = Партия;
	Если Партия.Тип = "sdec" Тогда
		НоваяСтрока.Адрес		= Партия.КодПВЗ;
	Иначе
		НоваяСтрока.Адрес		= Партия.Адрес;	
	КонецЕсли;	
	
	НоваяСтрока.вес		   	   					= Партия.вес;
	НоваяСтрока.Высота		   					= Партия.Высота;
	НоваяСтрока.Ширина		   					= Партия.Ширина;
	НоваяСтрока.Длина   	   					= Партия.Длина;
	НоваяСтрока.МетодОплаты	   					= ГруппаДоставки.МетодОплаты;
	НоваяСтрока.ТрекНомер	   					= Партия.НомерЗаказа;
	НоваяСтрока.ИдентификаторЗаказаВТК		   	= Партия.ИдентификаторЗаказаВТК;
	//ИдентификаторКвитанцииВТК	 			  	= Партия.ИдентификаторКвитанцииВТК;
	НоваяСтрока.ОбъявленнаяСтоимость 			= Партия.ОбъявленнаяСтоимость;
	НоваяСтрока.ИтогоСтоимость				 	= Партия.ИтогоСтоимость;
	
	помеченныеСтроки = Партия.РасчетКалькулятораПочта.НайтиСтроки(Новый Структура("ВыбралУчастник",Истина));
	Если Партия.РасчетСтоимостиПоВсемТарифам Тогда
		Если помеченныеСтроки.Количество()>0 Тогда
			НоваяСтрока.ТарифТК							= помеченныеСтроки[0].ТарифТК;
			НоваяСтрока.СтоимостьДоставкиПредоплата 	= помеченныеСтроки[0].СтоимостьПредоплата;
			НоваяСтрока.СтоимостьДоставкиНалПлатеж 		= помеченныеСтроки[0].СтоимостьНалПлатеж;
		КонецЕСли;	
	Иначе
		НоваяСтрока.ТарифТК 	= Партия.ТарифТК;
		НоваяСтрока.СтоимостьДоставкиПредоплата 	= Партия.СтоимостьДоставкиПредоплата;
		НоваяСтрока.СтоимостьДоставкиНалПлатеж 		= Партия.СтоимостьДоставки;
	КонецЕсли
	
	
КонецПроцедуры	
	
	
Функция ОтобратьКорректныеГруппДляПолученияТрэкНомера(списокГрупп)
	СписокТочекСДЭК = Новый СписокЗначений;
	СписокТочекСДЭК.Добавить(Справочники.ТочкиРаздачи.НайтиПоКоду("0092"));
	СписокТочекСДЭК.Добавить(Справочники.ТочкиРаздачи.НайтиПоКоду("0083"));
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	
	//нет документа отпавления
		"ВЫБРАТЬ
		|	Коробки.Ссылка КАК Группа
		|ПОМЕСТИТЬ втГруппыДоставки
		|ИЗ
		|	Справочник.Коробки КАК Коробки
		|ГДЕ
		|	Коробки.Ссылка В(&СписокГрупп)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втГруппыДоставки.Группа КАК Группа,
		|	втГруппыДоставки.Группа.ОтправлениеТранзита = ЗНАЧЕНИЕ(Документ.ОтправлениеТранзита.ПустаяСсылка) КАК ОшибкаНетОтправленияТранзита,
		|	НЕ втГруппыДоставки.Группа.ТочкаНазначения В (&ТочкиСдэк) КАК ОшибкаДругаяТК,
		|	втГруппыДоставки.Группа.ОтправлениеТранзита.НомерЗаказа <> """" КАК ОщибкаТрекНомерУжеПолучен,
		|	втГруппыДоставки.Группа.ОтправлениеТранзита = ЗНАЧЕНИЕ(Документ.ОтправлениеТранзита.ПустаяСсылка)
		|		ИЛИ НЕ втГруппыДоставки.Группа.ТочкаНазначения В (&ТочкиСдэк)
		|		ИЛИ втГруппыДоставки.Группа.ОтправлениеТранзита.НомерЗаказа = """" КАК ЕстьОшибка
		|ПОМЕСТИТЬ втГруппыДокумента
		|ИЗ
		|	втГруппыДоставки КАК втГруппыДоставки";
	Запрос.УстановитьПараметр("ТочкиСдэк", 		СписокТочекСДЭК);
	Запрос.УстановитьПараметр("СписокГрупп", 	СписокГрупп);
	Запрос.Выполнить();
	///Проверяем остатки на складе заказов из групп
	Запрос.Текст =  	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КоробкиСостав.Покупка 	КАК Покупка,
		|	КоробкиСостав.Участник 	КАК Участник,
		|	КоробкиСостав.КодЗаказа КАК КодЗаказа,
		|	КоробкиСостав.Цена 		КАК Цена,
		|	КоробкиСостав.Ссылка 	КАК Группа
		|ПОМЕСТИТЬ втЗаказыВГруппах
		|ИЗ
		|	Справочник.Коробки.Состав КАК КоробкиСостав
		|ГДЕ
		|	КоробкиСостав.Ссылка В
		|			(ВЫБРАТЬ
		|				втГруппыДокумента.Группа КАК Группа
		|			ИЗ
		|				втГруппыДокумента КАК втГруппыДокумента
		|			ГДЕ
		|				НЕ втГруппыДокумента.ЕстьОшибка)
		|	И НЕ КоробкиСостав.Исключить
		|	И НЕ КоробкиСостав.Удалить
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыВПосылкахОстатки.Посылка 	КАК Посылка,
		|	втЗаказыВГруппах.Покупка 		КАК Покупка,
		|	втЗаказыВГруппах.Участник 		КАК Участник,
		|	втЗаказыВГруппах.КодЗаказа 		КАК КодЗаказа,
		|	втЗаказыВГруппах.Цена 			КАК Цена,
		|	втЗаказыВГруппах.Группа 		КАК Группа,
		|	ЛОЖЬ 							КАК ОшибкаНетКодаЗаказа
		|ПОМЕСТИТЬ втПосылкаПоКодуЗаказа
		|ИЗ
		|	втЗаказыВГруппах КАК втЗаказыВГруппах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыВПосылках.Остатки(
		|				,
		|				КодЗаказа В
		|					(ВЫБРАТЬ
		|						втЗаказыВГруппах.КодЗаказа КАК КодЗаказа
		|					ИЗ
		|						втЗаказыВГруппах КАК втЗаказыВГруппах)) КАК ЗаказыВПосылкахОстатки
		|		ПО втЗаказыВГруппах.КодЗаказа = ЗаказыВПосылкахОстатки.КодЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПосылкаПоКодуЗаказа.Посылка 				КАК Посылка,
		|	втПосылкаПоКодуЗаказа.Покупка 				КАК Покупка,
		|	втПосылкаПоКодуЗаказа.Участник 				КАК Участник,
		|	втПосылкаПоКодуЗаказа.КодЗаказа 			КАК КодЗаказа,
		|	втПосылкаПоКодуЗаказа.Цена 					КАК Цена,
		|	втПосылкаПоКодуЗаказа.Группа 				КАК Группа,
		|	ТранзитОстатки.КоличествоОстаток 			КАК КоличествоОстаток,
		|	втПосылкаПоКодуЗаказа.ОшибкаНетКодаЗаказа 	КАК ОшибкаНетКодаЗаказа,
		|	ВЫБОР
		|		КОГДА втПосылкаПоКодуЗаказа.Посылка ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаНетПосылки
		|ПОМЕСТИТЬ втПосылкиНаСкладе
		|ИЗ
		|	втПосылкаПоКодуЗаказа КАК втПосылкаПоКодуЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Транзит.Остатки(
		|				,
		|				ПокупкаСсылка В
		|					(ВЫБРАТЬ
		|						втПосылкаПоКодуЗаказа.Посылка КАК Посылка
		|					ИЗ
		|						втПосылкаПоКодуЗаказа КАК втПосылкаПоКодуЗаказа
		|					ГДЕ
		|						НЕ втПосылкаПоКодуЗаказа.ОшибкаНетКодаЗаказа)) КАК ТранзитОстатки
		|		ПО втПосылкаПоКодуЗаказа.Посылка = ТранзитОстатки.ПокупкаСсылка";
	
	Запрос.Выполнить();
	

	
	
	//Ошибки
	
	Запрос.Текст =  "ВЫБРАТЬ
	                |	втОшибкиГруппы.Группа КАК Группа,
	                |	втОшибкиГруппы.ОшибкаНетОтправленияТранзита КАК ОшибкаНетОтправленияТранзита,
	                |	втОшибкиГруппы.ОшибкаДругаяТК КАК ОшибкаДругаяТК,
	                |	втОшибкиГруппы.ОщибкаТрекНомерУжеПолучен КАК ОщибкаТрекНомерУжеПолучен
	                |ПОМЕСТИТЬ ОшибкиГруппы
	                |ИЗ
	                |	втГруппыДокумента КАК втОшибкиГруппы
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	втПосылкиНаСкладе.Группа КАК Группа,
	                |	втПосылкиНаСкладе.Посылка КАК Посылка,
	                |	втПосылкиНаСкладе.КодЗаказа КАК КодЗаказа,
	                |	втПосылкиНаСкладе.ОшибкаНетКодаЗаказа КАК ОшибкаНетКодаЗаказа,
	                |	втПосылкиНаСкладе.ОшибкаНетПосылки КАК ОшибкаНетПосылки
	                |ПОМЕСТИТЬ ОшибкиЗаказоыГруппы
	                |ИЗ
	                |	втПосылкиНаСкладе КАК втПосылкиНаСкладе
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ОшибкиЗаказоыГруппы.Группа КАК Группа,
	                |	ОшибкиЗаказоыГруппы.Посылка КАК Посылка,
	                |	ОшибкиЗаказоыГруппы.КодЗаказа КАК КодЗаказа,
	                |	ОшибкиЗаказоыГруппы.ОшибкаНетКодаЗаказа КАК ОшибкаНетКодаЗаказа,
	                |	ОшибкиЗаказоыГруппы.ОшибкаНетПосылки КАК ОшибкаНетПосылки,
	                |	ЛОЖЬ КАК ОшибкаНетОтправленияТранзита,
	                |	ЛОЖЬ КАК ОшибкаДругаяТК,
	                |	ЛОЖЬ КАК ОщибкаТрекНомерУжеПолучен
	                |ПОМЕСТИТЬ втВсеЗаказы
	                |ИЗ
	                |	ОшибкиЗаказоыГруппы КАК ОшибкиЗаказоыГруппы
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ОшибкиГруппы.Группа,
	                |	NULL,
	                |	NULL,
	                |	ЛОЖЬ,
	                |	ЛОЖЬ,
	                |	ОшибкиГруппы.ОшибкаНетОтправленияТранзита,
	                |	ОшибкиГруппы.ОшибкаДругаяТК,
	                |	ОшибкиГруппы.ОщибкаТрекНомерУжеПолучен
	                |ИЗ
	                |	ОшибкиГруппы КАК ОшибкиГруппы
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	втВсеЗаказы.Группа КАК Группа,
	                |	втВсеЗаказы.Посылка КАК Посылка,
	                |	втВсеЗаказы.КодЗаказа КАК КодЗаказа,
	                |	втВсеЗаказы.ОшибкаНетКодаЗаказа КАК ОшибкаНетКодаЗаказа,
	                |	втВсеЗаказы.ОшибкаНетПосылки КАК ОшибкаНетПосылки,
	                |	втВсеЗаказы.ОшибкаНетОтправленияТранзита КАК ОшибкаНетОтправленияТранзита,
	                |	втВсеЗаказы.ОшибкаДругаяТК КАК ОшибкаДругаяТК,
	                |	втВсеЗаказы.ОщибкаТрекНомерУжеПолучен КАК ОщибкаТрекНомерУжеПолучен
	                |ИЗ
	                |	втВсеЗаказы КАК втВсеЗаказы
	                |ГДЕ
	                |	(втВсеЗаказы.ОщибкаТрекНомерУжеПолучен
	                |			ИЛИ втВсеЗаказы.ОшибкаДругаяТК
	                |			ИЛИ втВсеЗаказы.ОшибкаНетОтправленияТранзита
	                |			ИЛИ втВсеЗаказы.ОшибкаНетПосылки
	                |			ИЛИ втВсеЗаказы.ОшибкаНетКодаЗаказа)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Группа";
	РезультатОшибки = Запрос.Выполнить();
	
	ОшибочныеГруппы = РезультатОшибки.Выгрузить();
	Если ОшибочныеГруппы.Количество()>0 Тогда
		СхемаКомпоновкиДанных 	= ДОкументы.СдэкИнеграция.ПолучитьМакет("ПолучениеТрекНомераГруппыСОшибками");
		Результат = СП_Отчеты.ПолучитьОтчет(,СхемаКомпоновкиДанных ,"Основной",,,Новый Структура("ОшибочныеГруппы", ОшибочныеГруппы));
		СтрукьураОшибок = Новый Структура("КоличествоПроблемныхПозиций, Результат", ОшибочныеГруппы.Количество(), Результат);
	КонецЕсли;	
	//Ошибки = Неопределено;
	//Выборка = РезультатОшибки.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ТекстОшибки = "";
	//	Если Выборка.ОшибкаНетОтправленияТранзита Тогда
	//		ТекстОшибки = " нет Документа отправления транзита";
	//	ИначеЕсли	Выборка.ОшибкаНетКодаЗаказа Тогда
	//		ТекстОшибки = " нет в наличии посылрк с кодом заказа "+Выборка.КодЗаказа;
	//	ИначеЕсли	Выборка.ОшибкаНетПосылки Тогда
	//		ТекстОшибки = " нет в наличии посылки для кода заказа "+Выборка.КодЗаказа;
	//	КонецЕсли;
	//	
	//	ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,,"Для "+ Выборка.Группа+ " "+ТекстОшибки,,,,);	
	//	
	//КонецЦикла;
	//ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);

	
	///Без ошибок
	Запрос.Текст =  "ВЫБРАТЬ
	                |	втВсеЗаказы.Группа КАК Группа,
	                |	втВсеЗаказы.Посылка КАК Посылка,
	                |	втВсеЗаказы.КодЗаказа КАК КодЗаказа,
	                |	втВсеЗаказы.ОшибкаНетКодаЗаказа КАК ОшибкаНетКодаЗаказа,
	                |	втВсеЗаказы.ОшибкаНетПосылки КАК ОшибкаНетПосылки,
	                |	втВсеЗаказы.ОшибкаНетОтправленияТранзита КАК ОшибкаНетОтправленияТранзита,
	                |	втВсеЗаказы.ОшибкаДругаяТК КАК ОшибкаДругаяТК,
	                |	втВсеЗаказы.ОщибкаТрекНомерУжеПолучен КАК ОщибкаТрекНомерУжеПолучен,
	                |	МАКСИМУМ(втВсеЗаказы.ОшибкаНетКодаЗаказа
	                |			ИЛИ втВсеЗаказы.ОшибкаНетПосылки
	                |			ИЛИ втВсеЗаказы.ОшибкаНетОтправленияТранзита
	                |			ИЛИ втВсеЗаказы.ОшибкаДругаяТК
	                |			ИЛИ втВсеЗаказы.ОщибкаТрекНомерУжеПолучен) КАК ЕстьОшибка
	                |ИЗ
	                |	втВсеЗаказы КАК втВсеЗаказы
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	втВсеЗаказы.Группа,
	                |	втВсеЗаказы.Посылка,
	                |	втВсеЗаказы.КодЗаказа,
	                |	втВсеЗаказы.ОшибкаНетКодаЗаказа,
	                |	втВсеЗаказы.ОшибкаНетПосылки,
	                |	втВсеЗаказы.ОшибкаНетОтправленияТранзита,
	                |	втВсеЗаказы.ОшибкаДругаяТК,
	                |	втВсеЗаказы.ОщибкаТрекНомерУжеПолучен
	                |
	                |ИМЕЮЩИЕ
	                |	МАКСИМУМ(втВсеЗаказы.ОшибкаНетКодаЗаказа
	                |			ИЛИ втВсеЗаказы.ОшибкаНетПосылки
	                |			ИЛИ втВсеЗаказы.ОшибкаНетОтправленияТранзита
	                |			ИЛИ втВсеЗаказы.ОшибкаДругаяТК
	                |			ИЛИ втВсеЗаказы.ОщибкаТрекНомерУжеПолучен) = ЛОЖЬ
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Группа";
	                

	
	РезультатБезОшибок = Запрос.Выполнить();
	Выборка = РезультатБезОшибок.Выбрать();
	
	ГруппыБезОшибок = Новый СписокЗначений;

	Пока Выборка.Следующий() цикл
		ГруппыБезОшибок.Добавить(Выборка.Группа);
	КонецЦикла;

	Возврат Новый Структура("Ошибки, ГруппыБезОшибок", СтрукьураОшибок, ГруппыБезОшибок);
КонецФункции	

Процедура ОбновитьДанныеТКВПартии()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СдэкИнеграцияТрекНомера.ГруппаДоставки КАК ГруппаДоставки,
		|	СдэкИнеграцияТрекНомера.ТрекНомер КАК ТрекНомер,
		|	СдэкИнеграцияТрекНомера.ИдентификаторЗаказаВТК КАК ИдентификаторЗаказаВТК,
		|	СдэкИнеграцияТрекНомера.ИдентификаторКвитанцииВТК КАК ИдентификаторКвитанцииВТК,
		|	СдэкИнеграцияТрекНомера.Партия КАК Партия,
		|	СдэкИнеграцияТрекНомера.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.СдэкИнеграция.ТрекНомера КАК СдэкИнеграцияТрекНомера
		|ГДЕ
		|	СдэкИнеграцияТрекНомера.Ссылка = &Ссылка
		|	И (СдэкИнеграцияТрекНомера.Партия.ИдентификаторЗаказаВТК <> СдэкИнеграцияТрекНомера.ИдентификаторЗаказаВТК
		|			ИЛИ СдэкИнеграцияТрекНомера.Партия.ИдентификаторКвитанцииВТК <> СдэкИнеграцияТрекНомера.ИдентификаторКвитанцииВТК
		|			ИЛИ СдэкИнеграцияТрекНомера.Партия.НомерЗаказа <> СдэкИнеграцияТрекНомера.ТрекНомер)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Отправление 							= Выборка.Партия.ПолучитьОбъект();
		Отправление.ИдентификаторЗаказаВТК 		= Выборка.ИдентификаторЗаказаВТК;
		Отправление.ИдентификаторКвитанцииВТК 	= Выборка.ИдентификаторКвитанцииВТК;
		Отправление.НомерЗаказа			 		= Выборка.ТрекНомер;
		Попытка
		    Отправление.Записать(РежимЗаписиДокумента.Проведение);
			ТрекНомера[Выборка.НомерСтроки].ЗаписаноВПартию = ТекущаяДата();
		Исключение
			ТекстСообщения= ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	
	
КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ОбновитьДанныеТКВПартии();
КонецПроцедуры
