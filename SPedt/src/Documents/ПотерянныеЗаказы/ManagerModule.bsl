#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	ТекстыЗапроса = Новый СписокЗначений;
	
	Получить_ТекстЗапроса_ПотерянныеЗаказы(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_НеВыгруженноНаСайт(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Обмен100СПрн_Ошибки(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.УстановитьПараметр("Период",                        ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("ДатаДокумента",                 НачалоДня(ДокументСсылка.Дата));
	Запрос.УстановитьПараметр("Номер",                         ДокументСсылка.Номер);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));

	Запрос.УстановитьПараметр("ПометкаУдаления",               ДокументСсылка.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                      ДокументСсылка.Проведен); 

	Запрос.УстановитьПараметр("СвойПунктВыдачи",               Константы.СвояТочка.Получить()); 
	
КонецПроцедуры

#КонецОбласти



Функция Получить_ТекстЗапроса_ПотерянныеЗаказы(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ПотерянныеЗаказы";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПотерянныеЗаказыЗаказы.НомерНакладной КАК НомерНакладной,
	               |	ПотерянныеЗаказыЗаказы.ДатаНакладной КАК ДатаНакладной,
	               |	ПотерянныеЗаказыЗаказы.ПунктВыдачи КАК ПунктВыдачи,
	               |	ПотерянныеЗаказыЗаказы.Посылка КАК Посылка,
				   |	ПотерянныеЗаказыЗаказы.Коробка КАК Коробка,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	               |	ПотерянныеЗаказыЗаказы.Ссылка.Дата КАК Период,
	               |	1 КАК Количество
	               |ИЗ
	               |	Документ.ПотерянныеЗаказы.Заказы КАК ПотерянныеЗаказыЗаказы
	               |ГДЕ
	               |	ПотерянныеЗаказыЗаказы.Ссылка = &Ссылка
	               |	И НЕ ПотерянныеЗаказыЗаказы.Остатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПотерянныеЗаказыЗаказы.НомерНакладной,
	               |	ПотерянныеЗаказыЗаказы.ДатаНакладной,
	               |	ПотерянныеЗаказыЗаказы.ПунктВыдачи,
	               |	ПотерянныеЗаказыЗаказы.Посылка,
				   |	ПотерянныеЗаказыЗаказы.Коробка КАК Коробка,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	               |	ПотерянныеЗаказыЗаказы.Ссылка.Дата,
	               |	1
	               |ИЗ
	               |	Документ.ПотерянныеЗаказы.Заказы КАК ПотерянныеЗаказыЗаказы
	               |ГДЕ
	               |	ПотерянныеЗаказыЗаказы.Ссылка = &Ссылка
	               |	И ПотерянныеЗаказыЗаказы.ВопросРешен";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_НеВыгруженноНаСайт(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "НеВыгруженноНаСайт";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ПотерянныеЗаказы") Тогда
		 ТекстЗапроса = "
		 |
		 |ВЫБРАТЬ
		 |	ПотерянныеЗаказыЗаказы.Ссылка.Дата КАК Период,
		 |	ПотерянныеЗаказыЗаказы.Посылка КАК Заказ,
//		 |	ПотерянныеЗаказыЗаказы.Коробка КАК Коробка,
		 |	ПотерянныеЗаказыЗаказы.ПунктВыдачи КАК ПунктВыдачи,
		 |	ПотерянныеЗаказыЗаказы.Ссылка КАК Партия,
		 |	1 КАК Количество
		 |ИЗ
		 |	Документ.ПотерянныеЗаказы.Заказы КАК ПотерянныеЗаказыЗаказы
		 |ГДЕ
		 |	ПотерянныеЗаказыЗаказы.Ссылка = &Ссылка
		 |	И ПотерянныеЗаказыЗаказы.Выгружать
		 |	И НЕ ПотерянныеЗаказыЗаказы.Отправлено
		 |
		 |";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Обмен100СПрн_Ошибки(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "Обмен100СПрн_Ошибки";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 

	
	ТекстЗапроса =  "
					|
					|ВЫБРАТЬ
	                |	ПотерянныеЗаказыЗаказы.Ссылка.Дата КАК Период,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ПотерянныеЗаказы) КАК типОбмена,
	                |	ПотерянныеЗаказыЗаказы.Ссылка КАК Партия,
	                |	ПотерянныеЗаказыЗаказы.НомерСтроки КАК СтрокаВПартии,
	                |	ПотерянныеЗаказыЗаказы.Посылка.ШК КАК Мегаордер,
	                |	""Не выполнен обмен!"" КАК СообщениеОшибки,
	                |	1 КАК КоличествоНеИсправленных
	                |ИЗ
	                |	Документ.ПотерянныеЗаказы.Заказы КАК ПотерянныеЗаказыЗаказы
	                |ГДЕ
	                |	ПотерянныеЗаказыЗаказы.Ссылка = &Ссылка
					|	И ПотерянныеЗаказыЗаказы.Выгружать
	                |	И НЕ ПотерянныеЗаказыЗаказы.Отправлено
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
					|ВЫБРАТЬ
	                |	ПотерянныеЗаказыЗаказы.Ссылка.Дата КАК Период,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ПотерянныеЗаказы) КАК типОбмена,
	                |	ПотерянныеЗаказыЗаказы.Ссылка КАК Партия,
	                |	ПотерянныеЗаказыЗаказы.НомерСтроки КАК СтрокаВПартии,
	                |	ПотерянныеЗаказыЗаказы.Посылка.ШК КАК Мегаордер,
	                |	ПотерянныеЗаказыЗаказы.СообщениеОшибки КАК СообщениеОшибки,
	                |	1 КАК КоличествоНеИсправленных
	                |ИЗ
	                |	Документ.ПотерянныеЗаказы.Заказы КАК ПотерянныеЗаказыЗаказы
	                |ГДЕ
	                |	ПотерянныеЗаказыЗаказы.Ссылка = &Ссылка
					|	И ПотерянныеЗаказыЗаказы.СообщениеОшибки<>""""
	                |	И ПотерянныеЗаказыЗаказы.Отправлено

						|";
	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
КонецФункции





Функция ПолучитьТэг_lostOrder(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПотерянныеЗаказыЗаказы.НомерНакладной 	КАК НомерНакладной,
		|	ПотерянныеЗаказыЗаказы.ДатаНакладной 	КАК ДатаНакладной,
		|	ПотерянныеЗаказыЗаказы.ПунктВыдачи 		КАК ПунктВыдачи,
		|	ПотерянныеЗаказыЗаказы.Посылка 			КАК Посылка,
		|	ПотерянныеЗаказыЗаказы.Коробка 			КАК Коробка,
		|	ПотерянныеЗаказыЗаказы.ВопросРешен 		КАК ВопросРешен,
		|	ПотерянныеЗаказыЗаказы.Комментарий 		КАК Комментарий,
		|	ПотерянныеЗаказыЗаказы.ДатаКомментария 	КАК ДатаКомментария,
		|	ПотерянныеЗаказыЗаказы.Ссылка 			КАК Ссылка,
		|	ПотерянныеЗаказыЗаказы.Остатки 			КАК Остатки
		|ИЗ
		|	Документ.ПотерянныеЗаказы.Заказы КАК ПотерянныеЗаказыЗаказы
		|ГДЕ
		|	(ПотерянныеЗаказыЗаказы.ВопросРешен или
		|	ПотерянныеЗаказыЗаказы.Комментарий 	<> """")
		|	и ПотерянныеЗаказыЗаказы.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И ПотерянныеЗаказыЗаказы.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", 	НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", 		Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("lostOrder");
		СтоСП.Вставить_Тэг(ЗаписьXML,"exchangeNumber"	,	Выборка.Ссылка.Номер);
		СтоСП.Вставить_Тэг(ЗаписьXML,"resolved"	,			?(Выборка.ВопросРешен,1,0));    
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				Выборка.ДатаНакладной);
		СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber",       Выборка.НомерНакладной);
		СтоСП.Вставить_Тэг(ЗаписьXML,"DistributorID",      	Выборка.ПунктВыдачи.Код);                                 
		СтоСП.Вставить_Тэг(ЗаписьXML,"Comment", 			Выборка.Комментарий); 
		СтоСП.Вставить_Тэг(ЗаписьXML,"created_at", 			Выборка.ДатаКомментария); 
		
		СтоСП.Вставить_Тэг(ЗаписьXML,"groupCode", 			Выборка.Коробка.Код);
		СтоСП.Вставить_Тэг(ЗаписьXML,"packageId",           Формат(Выборка.Посылка.Код,"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",           "package");
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	
	Возврат рез;
КонецФункции



Функция ПолноеИмяОбъекта()
	Возврат "Документ.ПотерянныеЗаказы";
КонецФункции

