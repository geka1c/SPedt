#Область ПрограммныйИнтерфейс

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	СтоСП_Печать.ДобавитьКомандыПечатиПоступлений(КомандыПечати);
КонецПроцедуры


#КонецОбласти

#Область Сверка

Функция  	ПолучитьСверкуДокумента(Параметры) Экспорт 
	Результат	= Новый ТабличныйДокумент;
	
	Если ЗначениеЗаполнено(Параметры.Документ_Объект.Супергруппа) Тогда
		ТЗ_Сверка 	= РасщитатьСверкуСупергруппы(Параметры);
		ТЗ_Сверка_2 = РасщитатьСверкуКоробок(Параметры, истина);
		Для каждого Элем из ТЗ_Сверка_2 Цикл
			строкаСверки = ТЗ_Сверка.Добавить();
			ЗаполнитьЗначенияСвойств(строкаСверки, Элем);
		КонецЦикла;
	Иначе
		ТЗ_Сверка	 = РасщитатьСверкуКоробок(Параметры, истина);
	КонецЕсли;	
	
	КоличествоПроблемныхПозиций = 0;
	
	Для каждого элем из ТЗ_Сверка Цикл
		Если элем.Разница = 0 Тогда Продолжить; КонецЕсли;
		КоличествоПроблемныхПозиций = КоличествоПроблемныхПозиций + 1;
	КонецЦикла;	
	
		СхемаКомпоновкиДанных 	= Документы.РазборКоробки.ПолучитьМакет("СверитьСодержимоеСупергруппы");
		КомпоновщикНастроек		= Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек["Основной"].Настройки);
		
		Настройки 			= КомпоновщикНастроек.Настройки;
		КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		Настройки, ,,Тип("ГенераторМакетаКомпоновкиДанных"));
		
		
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("сверка", 	ТЗ_Сверка);
		
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,);
		
		
		Результат.Очистить(); 
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
	Возврат Новый Структура("КоличествоПроблемныхПозиций, Результат", КоличествоПроблемныхПозиций, Результат);
КонецФункции

Функция  	ПолучитьСверкуСупергруппы(Параметры) Экспорт 
	Результат	= Новый ТабличныйДокумент;
	
	ТЗ_Сверка = РасщитатьСверкуСупергруппы(Параметры);
	
	КоличествоПроблемныхПозиций = 0;
	
	Для каждого элем из ТЗ_Сверка Цикл
		Если элем.Разница = 0 Тогда Продолжить; КонецЕсли;
		КоличествоПроблемныхПозиций = КоличествоПроблемныхПозиций + 1;
	КонецЦикла;	
	
		СхемаКомпоновкиДанных 	= Документы.РазборКоробки.ПолучитьМакет("СверитьСодержимоеСупергруппы");
		КомпоновщикНастроек		= Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек["Основной"].Настройки);
		
		Настройки 			= КомпоновщикНастроек.Настройки;
		КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		Настройки, ,,Тип("ГенераторМакетаКомпоновкиДанных"));
		
		
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("сверка", 	ТЗ_Сверка);
		
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,);
		
		
		Результат.Очистить(); 
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
	Возврат Новый Структура("КоличествоПроблемныхПозиций, Результат", КоличествоПроблемныхПозиций, Результат);
КонецФункции

Функция 	РасщитатьСверкуСупергруппы(Параметры) 
	
	ТЧ_изДокумента	= ПолучитьТаблицуИзДокумента(Параметры);

	Для каждого элем из Параметры.Документ_Объект.Коробки Цикл
		Если элем.Коробка = Справочники.Коробки.БезКоробки Тогда Продолжить; КонецЕсли;
		строкаТЧ				= ТЧ_изДокумента.Добавить();
		строкаТЧ.НомерСтроки	= элем.НомерСтроки;
		строкаТЧ.Группа			= Параметры.Документ_Объект.Супергруппа;
		строкаТЧ.Заказ			= элем.Коробка;
		строкаТЧ.Выехало		= 0;
		строкаТЧ.Принято		= 1;
	КонецЦикла;
	КоличествоКоробок	= ТЧ_изДокумента.Количество();
	ОдиночныеЗаказы		= Параметры.Документ_Объект.Посылки.Выгрузить(новый Структура("Коробка",Справочники.Коробки.БезКоробки));
	Для каждого элем из ОдиночныеЗаказы Цикл
		строкаТЧ				= ТЧ_изДокумента.Добавить();
		строкаТЧ.НомерСтроки	= элем.НомерСтроки+КоличествоКоробок;
		строкаТЧ.Группа			= Параметры.Документ_Объект.Супергруппа;
		строкаТЧ.Заказ			= элем.Посылка;
		строкаТЧ.Выехало		= 0;
		строкаТЧ.Принято		= 1;
	КонецЦикла;	
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	втВнешняя.НомерСтроки КАК НомерСтроки,
		|	втВнешняя.Заказ 	КАК Заказ,
		|	втВнешняя.Группа 	КАК Группа,
		|	втВнешняя.Участник 	КАК Участник,
		|	втВнешняя.Выехало 	КАК Выехало,
		|	втВнешняя.Принято 	КАК Принято
		|ПОМЕСТИТЬ заказыИзДокумента
		|ИЗ
		|	&втВнешняя КАК втВнешняя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	0 КАК НомерСтроки,
		|	МегаордераСостав.Заказ  	КАК 	Заказ,
		|	&Супергруппа				КАК 	Группа,
		|	МегаордераСостав.Участник 	КАК 	Участник,
		|	1 КАК Выехало,
		|	0 КАК Принято
		|ПОМЕСТИТЬ Сбор
		|ИЗ
		|	Справочник.Мегаордера.Состав КАК МегаордераСостав
		|ГДЕ
		|	МегаордераСостав.Ссылка = &Супергруппа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	заказыИзДокумента.НомерСтроки,
		|	заказыИзДокумента.Заказ,
		|	заказыИзДокумента.Группа,
		|	заказыИзДокумента.Участник,
		|	заказыИзДокумента.Выехало,
		|	заказыИзДокумента.Принято
		|ИЗ
		|	заказыИзДокумента КАК заказыИзДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Сбор.НомерСтроки) КАК НомерСтроки,
		|	Сбор.Заказ КАК Заказ,
		|	Сбор.Группа КАК Группа,
		|	МАКСИМУМ(Сбор.Участник) КАК Участник,
		|	СУММА(Сбор.Выехало) КАК Выехало,
		|	СУММА(Сбор.Принято) КАК Принято,
		|	СУММА(Сбор.Принято) - СУММА(Сбор.Выехало)   КАК Разница     
		|ИЗ
		|	Сбор КАК Сбор
		|
		|СГРУППИРОВАТЬ ПО
		|	Сбор.Группа,
		|	Сбор.Заказ";
	
	Запрос.УстановитьПараметр("Супергруппа", 	Параметры.Документ_Объект.Супергруппа);
	Запрос.УстановитьПараметр("втВнешняя", 		ТЧ_изДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
КонецФункции

Функция  	ПолучитьСверкуКоробок(Параметры) Экспорт 
	Результат	= Новый ТабличныйДокумент;
	
	ТЗ_Сверка = РасщитатьСверкуКоробок(Параметры);
	
	КоличествоПроблемныхПозиций = 0;
	
	Для каждого элем из ТЗ_Сверка Цикл
		Если элем.Разница = 0 Тогда Продолжить; КонецЕсли;
		КоличествоПроблемныхПозиций = КоличествоПроблемныхПозиций + 1;
	КонецЦикла;	
	
		СхемаКомпоновкиДанных 	= Документы.РазборКоробки.ПолучитьМакет("СверитьСодержимоеСупергруппы");
		КомпоновщикНастроек		= Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек["Основной"].Настройки);
		
		Настройки 			= КомпоновщикНастроек.Настройки;
		КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		Настройки, ,,Тип("ГенераторМакетаКомпоновкиДанных"));
		
		
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("сверка", 	ТЗ_Сверка);
		
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,);
		
		
		Результат.Очистить(); 
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
	Возврат Новый Структура("КоличествоПроблемныхПозиций, Результат", КоличествоПроблемныхПозиций, Результат);
КонецФункции

Функция 	РасщитатьСверкуКоробок(Параметры, ВсеКоробки = ложь) 
	ТЧ_изДокумента	= ПолучитьТаблицуИзДокумента(Параметры);
	
	Если ВсеКоробки Тогда
		ТЧ_Покупки		= Параметры.Документ_Объект.Покупки.Выгрузить(,"НомерСтроки,Покупка,Участник,Количество,Коробка");
		ТЧ_Посылки		= Параметры.Документ_Объект.Посылки.Выгрузить(,"НомерСтроки,Посылка,Коробка");
	Иначе	
		ОтборПоКоробке	= новый структура("Коробка",Параметры.ТекущаяКоробка);
		ТЧ_Покупки		= Параметры.Документ_Объект.Покупки.Выгрузить(ОтборПоКоробке, "НомерСтроки,Покупка,Участник,Количество,Коробка");
		ТЧ_Посылки		= Параметры.Документ_Объект.Посылки.Выгрузить(ОтборПоКоробке, "НомерСтроки,Посылка,Коробка");
	КонецЕсли;
	
	Для каждого элем из ТЧ_Покупки Цикл
		Если элем.Коробка = Справочники.Коробки.БезКоробки Тогда Продолжить; КонецЕсли;
		строкаТЧ				= ТЧ_изДокумента.Добавить();
		строкаТЧ.НомерСтроки	= элем.НомерСтроки;
		строкаТЧ.Группа			= элем.Коробка;
		строкаТЧ.Заказ			= элем.Покупка;
		строкаТЧ.Участник		= элем.Участник;
		строкаТЧ.Выехало		= 0;
		строкаТЧ.Принято		= элем.Количество;
	КонецЦикла;	
	КоличествоЗаказов	= ТЧ_изДокумента.Количество();
	
	Для каждого элем из ТЧ_Посылки Цикл
		Если элем.Коробка = Справочники.Коробки.БезКоробки Тогда Продолжить; КонецЕсли;
		строкаТЧ				= ТЧ_изДокумента.Добавить();
		строкаТЧ.НомерСтроки	= элем.НомерСтроки + КоличествоЗаказов;
		строкаТЧ.Группа			= элем.Коробка;
		строкаТЧ.Заказ			= элем.Посылка;
		строкаТЧ.Участник		= элем.Посылка.Участник;
		строкаТЧ.Выехало		= 0;
		строкаТЧ.Принято		= 1;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	втВнешняя.НомерСтроки КАК НомерСтроки,
		|	втВнешняя.Заказ КАК Заказ,
		|	втВнешняя.Группа КАК Группа,
		|	втВнешняя.Участник КАК Участник,
		|	втВнешняя.Выехало КАК Выехало,
		|	втВнешняя.Принято КАК Принято
		|ПОМЕСТИТЬ заказыИзДокумента
		|ИЗ
		|	&втВнешняя КАК втВнешняя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	заказыИзДокумента.Группа КАК Группа
		|ПОМЕСТИТЬ КоробкиДокумента
		|ИЗ
		|	заказыИзДокумента КАК заказыИзДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	0 КАК НомерСтроки,
		|	КоробкиСостав.Покупка КАК Заказ,
		|	КоробкиСостав.Ссылка  КАК Группа,
		|	КоробкиСостав.Участник КАК Участник,
		|	1 КАК Выехало,
		|	0 КАК Принято
		|ПОМЕСТИТЬ Сбор
		|ИЗ
		|	Справочник.Коробки.Состав КАК КоробкиСостав
		|ГДЕ
		|	КоробкиСостав.Ссылка В
		|			(ВЫБРАТЬ
		|				КоробкиДокумента.Группа КАК Группа
		|			ИЗ
		|				КоробкиДокумента КАК КоробкиДокумента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	заказыИзДокумента.НомерСтроки,
		|	заказыИзДокумента.Заказ,
		|	заказыИзДокумента.Группа,
		|	заказыИзДокумента.Участник,
		|	заказыИзДокумента.Выехало,
		|	заказыИзДокумента.Принято
		|ИЗ
		|	заказыИзДокумента КАК заказыИзДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Сбор.НомерСтроки) КАК НомерСтроки,
		|	Сбор.Заказ КАК Заказ,
		|	Сбор.Группа КАК Группа,
		|	МАКСИМУМ(Сбор.Участник) КАК Участник,
		|	СУММА(Сбор.Выехало) КАК Выехало,
		|	СУММА(Сбор.Принято) КАК Принято,
		|	СУММА(Сбор.Принято) - СУММА(Сбор.Выехало)   КАК Разница
		|ИЗ
		|	Сбор КАК Сбор
		|
		|СГРУППИРОВАТЬ ПО
		|	Сбор.Группа,
		|	Сбор.Заказ";
	

	Запрос.УстановитьПараметр("втВнешняя", 		ТЧ_изДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
КонецФункции


Функция		ПолучитьТаблицуИзДокумента(Параметры)
	массивТиповГруппа	= Новый Массив;
	массивТиповГруппа.Добавить(Тип("СправочникСсылка.Мегаордера"));
	массивТиповГруппа.Добавить(Тип("СправочникСсылка.Коробки"));
	
	ТЧ_изДокумента	= Параметры.Документ_Объект.Супергруппа.Состав.ВыгрузитьКолонки();
	ТЧ_изДокумента.Колонки.Добавить("Выехало",	новый ОписаниеТипов("Число"));
	ТЧ_изДокумента.Колонки.Добавить("Принято",	новый ОписаниеТипов("Число"));
	ТЧ_изДокумента.Колонки.Добавить("Группа", 	Новый ОписаниеТипов(массивТиповГруппа));
	
	Возврат ТЧ_изДокумента;
	
КонецФункции



#КонецОбласти


#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	Получить_ТекстЗапроса_Приход(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_ШтрафныеЗаказы(Запрос, ТекстыЗапроса, Регистры);
	
	//Получить_ТекстЗапроса_ДанныеЗаказов(Запрос, ТекстыЗапроса, Регистры);	
	Получить_ТекстЗапроса_НеВыгруженноНаСайт(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_ОборотнаяТараДвижение(Запрос, ТекстыЗапроса, Регистры);		
	
	СтараяМетодика = (не СинхронизацияПоступлений.НоваяМетодика(ДокументСсылка.Дата));
	Если СтараяМетодика Тогда
		Получить_ТекстЗапроса_Транзит(Запрос, ТекстыЗапроса, Регистры);
		Получить_ТекстЗапроса_ОстаткиТоваров(Запрос, ТекстыЗапроса, Регистры);
		Получить_ТекстЗапроса_ЗаказыВПосылках(Запрос, ТекстыЗапроса, Регистры);
		Получить_ТекстЗапроса_Обмен100СПрн_Ошибки (Запрос, ТекстыЗапроса, Регистры);
		Получить_ТекстЗапроса_ДанныеЗаказовСайт(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазборКоробки.ПометкаУдаления КАК ПометкаУдаления,
	|	РазборКоробки.Номер КАК Номер,
	|	РазборКоробки.Дата КАК Период,
	|	РазборКоробки.Проведен КАК Проведен,
	|	РазборКоробки.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.РазборКоробки КАК РазборКоробки
	|ГДЕ
	|	РазборКоробки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("НачалоДокумента",               ?(ЗначениеЗаполнено(ДокументСсылка.Дата), новый Граница(ДокументСсылка.Дата,ВидГраницы.Исключая), ТекущаяДата()));
	Запрос.УстановитьПараметр("Период",                        Реквизиты.Период);
	Запрос.УстановитьПараметр("Номер",                         Реквизиты.Номер);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("Комментарий",                   Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",               Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("СвойПунктВыдачи",               Константы.СвояТочка.Получить());
	Запрос.УстановитьПараметр("Проведен",                      Реквизиты.Проведен);
	Запрос.УстановитьПараметр("гпНеПринимать",                 Константы.гпНеПринимать.Получить()); 
	Запрос.УстановитьПараметр("ВозможностьИспользоватьТранзит",Константы.ВозможностьПриниматьНаТранзит.Получить());
	Запрос.УстановитьПараметр("Курьер100сп",				   Константы.ПунктВыдачиКурьерскойДоставки.Получить());
	Запрос.УстановитьПараметр("ИгнорироватьОшибкуИзмененияПунктаНазначения",				   Константы.ИгнорироватьОшибкуИзмененияПунктаНазначения.Получить());
	Запрос.УстановитьПараметр("НоваяМетодика", 	    			СинхронизацияПоступлений.НоваяМетодика(Реквизиты.Период));
	
	
КонецПроцедуры

Функция Получить_ТекстЗапроса_Приход(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Приход";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.РазборКоробки") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	РазборКоробкиПосылки.Ссылка.Дата 			КАК Период,
		               |	РазборКоробкиПосылки.Габарит 				КАК Габарит,
		               |	РазборКоробкиПосылки.МестоХранения 			КАК МестоХранения,
		               |	РазборКоробкиПосылки.Посылка.Организатор 	КАК Организатор,
		               |	РазборКоробкиПосылки.Посылка 				КАК Покупка,
		               |	1 											КАК Количество,
		               |	РазборКоробкиПосылки.Коробка 				КАК Коробка,
		               |	ВЫБОР
		               |		Когда 		РазборКоробкиПосылки.Посылка.ПунктВыдачи = &Курьер100сп Тогда
		               |				ЗНАЧЕНИЕ(Перечисление.ТипыПриходов.НаТранзит)
		               |		КОГДА 		НЕ 	РазборКоробкиПосылки.Коробка.КРазбору
		               |					ИЛИ 
		               |						РазборКоробкиПосылки.Коробка.КРазбору
		               |					И 	РазборКоробкиПосылки.ПунктВыдачи = РазборКоробкиПосылки.Ссылка.СвояТочка
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриходов.НаСклад)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриходов.НаТранзит)
		               |	КОНЕЦ 										КАК ТипПрихода,
		               |	ВЫБОР
		               |		Когда 		РазборКоробкиПосылки.Посылка.ПунктВыдачи = &Курьер100сп Тогда
		               |				РазборКоробкиПосылки.ПунктВыдачи
		               |		КОГДА 		НЕ 	РазборКоробкиПосылки.Коробка.КРазбору
		               |					ИЛИ 
		               |						РазборКоробкиПосылки.Коробка.КРазбору
		               |					И 	РазборКоробкиПосылки.ПунктВыдачи = РазборКоробкиПосылки.Ссылка.СвояТочка
		               |			ТОГДА &СвойПунктВыдачи
		               |		ИНАЧЕ РазборКоробкиПосылки.ПунктВыдачи
		               |	КОНЕЦ 										КАК ПунктВыдачи,		               
		               |	РазборКоробкиПосылки.ОтдельнымМестом КАК ОтдельнымМестом,
		               |	РазборКоробкиПосылки.Посылка.Участник 		КАК Участник
		               |ИЗ
		               |	Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
		               |ГДЕ
		               |	 РазборКоробкиПосылки.Ссылка = &Ссылка
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РазборКоробкиГруппыНаТранзит.Ссылка.Дата 			КАК Период,
		               |	РазборКоробкиГруппыНаТранзит.Габарит 				КАК Габарит,
		               |	РазборКоробкиГруппыНаТранзит.МестоХранения 			КАК МестоХранения,
		               |	РазборКоробкиГруппыНаТранзит.Коробка.Организатор 	КАК Организатор,
		               |	РазборКоробкиГруппыНаТранзит.Коробка 				КАК Покупка,
		               |	1 													КАК Количество,
		               |	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки)				КАК Коробка,
		               |	ЗНАЧЕНИЕ(Перечисление.ТипыПриходов.НаТранзит)		КАК ТипПрихода,
		               |	РазборКоробкиГруппыНаТранзит.ПунктВыдачи,
		               |	Ложь,
		               |	Неопределено						 				КАК Участник
		               |ИЗ
		               |	Документ.РазборКоробки.ГруппыНаТранзит КАК РазборКоробкиГруппыНаТранзит
		               |ГДЕ
		               |	 РазборКоробкиГруппыНаТранзит.Ссылка = &Ссылка";
	
					   //|
					   //|ОБЪЕДИНИТЬ ВСЕ
					   //|
					   //|ВЫБРАТЬ
					   //|	РазборКоробкиПокупки.Ссылка.Дата,
					   //|	РазборКоробкиПокупки.Габарит,
					   //|	РазборКоробкиПокупки.МестоХранения 			КАК МестоХранения,
					   //|	ВЫБОР
					   //|		КОГДА ТИПЗНАЧЕНИЯ(РазборКоробкиПокупки.Покупка) = ТИП(Справочник.Покупки)
					   //|			ТОГДА РазборКоробкиПокупки.Покупка.Владелец
					   //|		ИНАЧЕ РазборКоробкиПокупки.Покупка.Организатор
					   //|	КОНЕЦ,
					   //|	РазборКоробкиПокупки.Покупка,
					   //|	РазборКоробкиПокупки.Количество,
					   //|	РазборКоробкиПокупки.Коробка,
					   //|	ВЫБОР
					   //|		КОГДА НЕ РазборКоробкиПокупки.Коробка.КРазбору
					   //|				ИЛИ не &ВозможностьИспользоватьТранзит
					   //|				ИЛИ РазборКоробкиПокупки.Коробка.КРазбору
					   //|					И РазборКоробкиПокупки.ПунктВыдачи = РазборКоробкиПокупки.Ссылка.СвояТочка
					   //|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриходов.НаСклад)
					   //|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриходов.НаТранзит)
					   //|	КОНЕЦ,
					   //|	ВЫБОР
					   //|		КОГДА НЕ РазборКоробкиПокупки.Коробка.КРазбору
					   //|				ИЛИ не &ВозможностьИспользоватьТранзит
					   //|				ИЛИ РазборКоробкиПокупки.Коробка.КРазбору
					   //|					И РазборКоробкиПокупки.ПунктВыдачи = РазборКоробкиПокупки.Ссылка.СвояТочка
					   //|			ТОГДА &СвойПунктВыдачи
					   //|		ИНАЧЕ РазборКоробкиПокупки.ПунктВыдачи
					   //|	КОНЕЦ,		               
					   //|	РазборКоробкиПокупки.ОтдельнымМестом КАК ОтдельнымМестом,
					   //|	РазборКоробкиПокупки.Участник
					   //|ИЗ
					   //|	Документ.РазборКоробки.Покупки КАК РазборКоробкиПокупки
					   //|ГДЕ
					   //|	РазборКоробкиПокупки.Ссылка = &Ссылка
					   //|	И НЕ РазборКоробкиПокупки.Ссылка.ДелаемГрупповойСтикер";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_КПолучению(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "КПолучению";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.РазборКоробки") Тогда
		   
		ТекстЗапроса = "ВЫБРАТЬ
		               |	&Период КАК Период,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		               |	КПолучениюОстатки.КоличествоОстаток КАК Количество,
		               |	КПолучениюОстатки.ДокументВыдачи КАК ДокументВыдачи,
		               |	КПолучениюОстатки.Покупка КАК Покупка,
		               |	КПолучениюОстатки.Участник КАК Участник
		               |ИЗ
		               |	РегистрНакопления.КПолучению.Остатки(
		               |			&ПередДокументом,
		               |			Покупка В
		               |				(ВЫБРАТЬ
		               |					РазборКоробкиКоробки.Коробка
		               |				ИЗ
		               |					Документ.РазборКоробки.Коробки КАК РазборКоробкиКоробки
		               |				ГДЕ
		               |					РазборКоробкиКоробки.Ссылка = &Ссылка
		               |			
		               |				ОБЪЕДИНИТЬ ВСЕ
		               |			
		               |				ВЫБРАТЬ
		               |					РазборКоробкиПосылки.Посылка
		               |				ИЗ
		               |					Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
		               |				ГДЕ
		               |					РазборКоробкиПосылки.Ссылка = &Ссылка)) КАК КПолучениюОстатки
		               |ГДЕ
		               |	КПолучениюОстатки.КоличествоОстаток > 0";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Обмен100СПрн";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.РазборКоробки") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	РазборКоробки.Ссылка.Дата КАК Период,
		               |	1 КАК КоличествоНеОтправленых,
		               |	РазборКоробки.Ссылка КАК Партия,
		               |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппаРегистрация) КАК ТипОбмена
		               |ИЗ
		               |	Документ.РазборКоробки КАК РазборКоробки
		               |ГДЕ
		               |	РазборКоробки.Ссылка = &Ссылка
		               |	И РазборКоробки.Супергруппа <> ЗНАЧЕНИЕ(Справочник.Мегаордера.ПустаяСсылка)
		               |
		               |";
	КонецЕсли;
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_ШтрафныеЗаказы(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ШтрафныеЗаказы";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.РазборКоробки") Тогда
		
		ТекстЗапроса = 
		
		
		
		
		"ВЫБРАТЬ
		|	вт.Период КАК период,
		|	вт.Коробка,
		|	вт.Организатор,
		|	вт.ПунктВыдачи,
		|	вт.Количество как Разобрано,
		|	ВЫБОР
		|		КОГДА вт.коробка = ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки)
		|			ТОГДА вт.Количество
		|		КОГДА вт.Количество > 2
		|			ТОГДА вт.Количество - 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Штраф,
		|	0 КАК ГруппыНаТранзит,
		|	0 КАК Одиночные
		|ИЗ
		|	(ВЫБРАТЬ
		|		РазборКоробкиПосылки.Ссылка.Дата КАК Период,
		|		РазборКоробкиПосылки.Коробка,
		|		РазборКоробкиПосылки.Посылка.Организатор КАК Организатор,
		|		РазборКоробкиПосылки.ПунктВыдачи,
		|		СУММА(1) КАК Количество
		|	ИЗ
		|		Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
		|	ГДЕ
		|		РазборКоробкиПосылки.Ссылка = &Ссылка
		|		И РазборКоробкиПосылки.Коробка <> ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки)
		|	СГРУППИРОВАТЬ ПО
		|		РазборКоробкиПосылки.Ссылка.Дата,
		|		РазборКоробкиПосылки.Коробка,
		|		РазборКоробкиПосылки.Посылка.Организатор,
		|		РазборКоробкиПосылки.ПунктВыдачи) КАК вт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РазборКоробкиГруппыНаТранзит.Ссылка.Дата КАК Период,
		|	РазборКоробкиГруппыНаТранзит.Коробка,
		|	РазборКоробкиГруппыНаТранзит.Коробка.Организатор,
		|	РазборКоробкиГруппыНаТранзит.ПунктВыдачи,
		|	0,
		|	0,
		|	РазборКоробкиГруппыНаТранзит.Коробка.Количество,
		|	0
		|ИЗ
		|	Документ.РазборКоробки.ГруппыНаТранзит КАК РазборКоробкиГруппыНаТранзит
		|ГДЕ
		|	РазборКоробкиГруппыНаТранзит.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РазборКоробкиПосылки.Ссылка.Дата КАК Период,
		|	РазборКоробкиПосылки.Коробка,
		|	РазборКоробкиПосылки.Посылка.Организатор КАК Организатор,
		|	РазборКоробкиПосылки.ПунктВыдачи,
		|	0,
		|	0,
		|	0,
		|	СУММА(1)
		|ИЗ
		|	Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
		|ГДЕ
		|	РазборКоробкиПосылки.Ссылка = &Ссылка
		|	И РазборКоробкиПосылки.Коробка = ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки)
		|СГРУППИРОВАТЬ ПО
		|	РазборКоробкиПосылки.Ссылка.Дата,
		|	РазборКоробкиПосылки.Коробка,
		|	РазборКоробкиПосылки.Посылка.Организатор,
		|	РазборКоробкиПосылки.ПунктВыдачи";
	КонецЕсли;
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

////////////////////////////////


Функция Получить_ТекстЗапроса_ОстаткиТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ОстаткиТоваров";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.РазборКоробки") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	РазборКоробкиПосылки.Ссылка.Дата КАК Период,
		               |	РазборКоробкиПосылки.Посылка КАК Покупка,
		               |	РазборКоробкиПосылки.МестоХранения КАК МестоХранения,
		               |	РазборКоробкиПосылки.Габарит КАК Габарит,
		               |	РазборКоробкиПосылки.Посылка.Участник КАК Участник,
		               |	РазборКоробкиПосылки.Оплачен КАК Оплачен,
		               |	РазборКоробкиПосылки.Ссылка КАК Партия,
		               |	1 КАК Количество
		               |ИЗ
		               |	Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
		               |ГДЕ
		               |	РазборКоробкиПосылки.Ссылка = &Ссылка
		               |	И РазборКоробкиПосылки.Посылка.ПунктВыдачи <> &Курьер100сп
		               |	И РазборКоробкиПосылки.Отправлено
		               |	И (НЕ РазборКоробкиПосылки.Коробка.КРазбору
		               |			ИЛИ РазборКоробкиПосылки.Коробка.КРазбору
		               |				И РазборКоробкиПосылки.ПунктВыдачи = РазборКоробкиПосылки.Ссылка.СвояТочка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РазборКоробкиПокупки.Ссылка.Дата,
		               |	РазборКоробкиПокупки.Покупка,
		               |	РазборКоробкиПокупки.МестоХранения,
		               |	РазборКоробкиПокупки.Габарит,
		               |	РазборКоробкиПокупки.Участник,
		               |	РазборКоробкиПокупки.Оплачен,
		               |	РазборКоробкиПокупки.Ссылка,
		               |	РазборКоробкиПокупки.Количество
		               |ИЗ
		               |	Документ.РазборКоробки.Покупки КАК РазборКоробкиПокупки
		               |ГДЕ
		               |	РазборКоробкиПокупки.Ссылка = &Ссылка
		               |	И (НЕ РазборКоробкиПокупки.Коробка.КРазбору
		               |			ИЛИ РазборКоробкиПокупки.Коробка.КРазбору
		               |				И РазборКоробкиПокупки.ПунктВыдачи = РазборКоробкиПокупки.Ссылка.СвояТочка)";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Транзит(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Транзит";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.РазборКоробки") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	РазборКоробкиПосылки.Ссылка.Дата КАК Период,
		|	РазборКоробкиПосылки.Посылка КАК ПокупкаСсылка,
		|	РазборКоробкиПосылки.МестоХранения КАК МестоХранения,
		|	РазборКоробкиПосылки.Габарит КАК Габарит,
		|	РазборКоробкиПосылки.Посылка.Участник КАК Участник,
		|	Выбор когда РазборКоробкиПосылки.Посылка.ПунктВыдачи = &Курьер100сп Тогда РазборКоробкиПосылки.Посылка.ПунктВыдачи
		|	Иначе РазборКоробкиПосылки.ПунктВыдачи Конец КАК Точка,
		|	РазборКоробкиПосылки.Ссылка КАК Партия,
		|	1 КАК Количество
		|ИЗ
		|	Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
		|ГДЕ
		|	РазборКоробкиПосылки.Отправлено
		|	И РазборКоробкиПосылки.Коробка.КРазбору
		|	И РазборКоробкиПосылки.Ссылка = &Ссылка
		|	И не РазборКоробкиПосылки.Ссылка.ДелаемГрупповойСтикер
		|	И (РазборКоробкиПосылки.ПунктВыдачи <> РазборКоробкиПосылки.Ссылка.СвояТочка или
		|	   РазборКоробкиПосылки.Посылка.ПунктВыдачи = &Курьер100сп)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РазборКоробкиПокупки.Ссылка.Дата,
		|	РазборКоробкиПокупки.Покупка,
		|	РазборКоробкиПокупки.МестоХранения,
		|	РазборКоробкиПокупки.Габарит,
		|	РазборКоробкиПокупки.Участник,
		|	РазборКоробкиПокупки.ПунктВыдачи,
		|	РазборКоробкиПокупки.Ссылка,
		|	РазборКоробкиПокупки.Количество
		|ИЗ
		|	Документ.РазборКоробки.Покупки КАК РазборКоробкиПокупки
		|ГДЕ
		|	РазборКоробкиПокупки.Коробка.КРазбору
		|	И РазборКоробкиПокупки.Ссылка = &Ссылка
		|	И не РазборКоробкиПокупки.Ссылка.ДелаемГрупповойСтикер
		|	И РазборКоробкиПокупки.ПунктВыдачи <> РазборКоробкиПокупки.Ссылка.СвояТочка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РазборКоробкиГруппыНаТранзит.Ссылка.Дата,
		|	РазборКоробкиГруппыНаТранзит.Коробка,
		|	РазборКоробкиГруппыНаТранзит.МестоХранения,
		|	РазборКоробкиГруппыНаТранзит.Габарит,
		|	Значение(Справочник.Коробки.БезКоробки),
		|	РазборКоробкиГруппыНаТранзит.ПунктВыдачи,
		|	РазборКоробкиГруппыНаТранзит.Ссылка,
		|	1
		|ИЗ
		|	Документ.РазборКоробки.ГруппыНаТранзит КАК РазборКоробкиГруппыНаТранзит
		|ГДЕ
		|	 РазборКоробкиГруппыНаТранзит.Ссылка = &Ссылка
		|
		|
		|";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_НеВыгруженноНаСайт(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "НеВыгруженноНаСайт";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.РазборКоробки") Тогда
		 ТекстЗапроса = "ВЫБРАТЬ
		 |	РазборКоробкиПосылки.Ссылка.Дата 	КАК Период,
		 |	РазборКоробкиПосылки.Посылка 	КАК Заказ,
		 |	РазборКоробкиПосылки.МестоХранения КАК МестоХранения,
//		 |	РазборКоробкиПосылки.Габарит КАК Габарит,
//		 |	РазборКоробкиПосылки.Коробка КАК Коробка,
		 |	РазборКоробкиПосылки.ПунктВыдачи КАК ПунктВыдачи,
		 |	РазборКоробкиПосылки.Ссылка КАК Партия,
		 //|	РазборКоробкиПосылки.ДатаПриема КАК ДатаПриема, 
		 //|	РазборКоробкиПосылки.ОтдельнымМестом КАК ОтдельнымМестом, 
		 
		 |	1 КАК Количество
		 |ИЗ
		 |	Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
		 |ГДЕ
		 |	РазборКоробкиПосылки.Ссылка = &Ссылка
		 |  и не РазборКоробкиПосылки.Габарит.НеВыполнятьОбмен
		 |	И (&НоваяМетодика)
		 |
		 |ОБЪЕДИНИТЬ ВСЕ
		 |
		 |ВЫБРАТЬ
		 |	РазборКоробкиГруппыНаТранзит.Ссылка.Дата,
         |	РазборКоробкиГруппыНаТранзит.Коробка,
		 |	РазборКоробкиГруппыНаТранзит.МестоХранения,
//		 |	РазборКоробкиГруппыНаТранзит.Габарит,
//		 |	РазборКоробкиГруппыНаТранзит.Коробка,
		 |	РазборКоробкиГруппыНаТранзит.ПунктВыдачи,
		 |	РазборКоробкиГруппыНаТранзит.Ссылка,
		 //|	РазборКоробкиГруппыНаТранзит.ДатаПриема КАК ДатаПриема,
		 //|	РазборКоробкиГруппыНаТранзит.ОтдельнымМестом КАК ОтдельнымМестом, 
		 |	1
		 |ИЗ
		 |	Документ.РазборКоробки.ГруппыНаТранзит КАК РазборКоробкиГруппыНаТранзит
         |ГДЕ
         |	РазборКоробкиГруппыНаТранзит.Ссылка = &Ссылка
		 |  и не РазборКоробкиГруппыНаТранзит.Габарит.НеВыполнятьОбмен
		 |	И (&НоваяМетодика)" ;
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_ДанныеЗаказов(Запрос, ТекстыЗапроса = Неопределено, Регистры = Неопределено) Экспорт
	ИмяРегистра = "ДанныеЗаказов";
	
	ТекстЗапроса ="ВЫБРАТЬ
		              |	Посылки.Ссылка.Дата КАК Период,
		              |	Посылки.Ссылка КАК Партия,
		              |	Посылки.Посылка КАК Заказ,
		              |	Посылки.Габарит КАК Габарит,
		              |	Посылки.Вес КАК Вес,
		              |	Посылки.объем КАК Объем,
		              |	1 КАК Количество,
		              |	Посылки.ОтдельнымМестом КАК ОтдельнымМестом,
		              |	Посылки.ДатаПриема КАК ДатаПриема,
		              |	НЕ Посылки.Оплачен КАК НеОплачен,
		              |	Посылки.Коробка КАК Коробка,
		              |	Посылки.МестоХранения КАК МестоХранения
		              |ИЗ
		              |	Документ.РазборКоробки.Посылки КАК Посылки
		              |ГДЕ
		              |	Посылки.Ссылка = &Ссылка
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	Группы.Ссылка.Дата,
		              |	Группы.Ссылка,
		              |	Группы.Коробка,
		              |	Группы.Габарит,
		              |	Группы.Вес,
		              |	Группы.объем,
		              |	Группы.Количество,
		              |	Группы.ОтдельнымМестом,
		              |	Группы.ДатаПриема,
		              |	ЛОЖЬ,
		              |	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки),
		              |	Группы.МестоХранения
		              |ИЗ
		              |	Документ.РазборКоробки.ГруппыНаТранзит КАК Группы
		              |ГДЕ
		              |	Группы.Ссылка = &Ссылка";

	
	если ТекстыЗапроса<> Неопределено Тогда
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	КонецЕсли;
	Возврат ТекстЗапроса;

КонецФункции


Функция Получить_ТекстЗапроса_ДанныеЗаказовСайт(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ДанныеЗаказовСайт";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
		            
	
	
		ТекстЗапроса ="ВЫБРАТЬ
		              |	Посылки.Ссылка КАК Партия,
		              |	Посылки.Посылка КАК Заказ,
		              |	Посылки.Посылка.БесплатнаяВыдача КАК БесплатнаяВыдача,
		              |	Посылки.Посылка.НадбавкаЗаОбработку КАК НадбавкаЗаОбработку,
		              |	Посылки.Посылка.ПерваяТочка КАК ПерваяТочка,
		              |	Посылки.Посылка.ПунктВыдачи КАК ПунктВыдачи,
		              |	Посылки.Посылка.Покупка КАК Покупка,
		              |	Посылки.Посылка.Организатор КАК Организатор,
		              |	Посылки.Посылка.secureCode КАК secureCode,
		              |	Посылки.Посылка.Участник КАК Участник
		              |ИЗ
		              |	Документ.РазборКоробки.Посылки КАК Посылки
		              |ГДЕ
		              |	Посылки.Ссылка = &Ссылка
		              |	И Посылки.Отправлено
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	Группы.Ссылка,
		              |	Группы.Коробка,
		              |	ЛОЖЬ,
		              |	0,
		              |	Группы.Коробка.ПерваяТочка,
		              |	Группы.Коробка.ТочкаНазначения,
		              |	ЗНАЧЕНИЕ(Справочник.Покупки.ПустаяСсылка),
		              |	Группы.Коробка.Организатор,
		              |	"""",
		              |	ЗНАЧЕНИЕ(Справочник.Участники.ПустаяСсылка)
		              |ИЗ
		              |	Документ.РазборКоробки.ГруппыНаТранзит КАК Группы
		              |ГДЕ
		              |	Группы.Ссылка = &Ссылка
		              |	И Группы.Отправлено";


	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции



Функция Получить_ТекстЗапроса_ЗаказыВПосылках(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ЗаказыВПосылках";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.РазборКоробки") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ПосылкиСостав.Ссылка КАК Посылка,
		               |	&Период КАК Период,
		               |	ПосылкиСостав.Покупка КАК Покупка,
		               |	ПосылкиСостав.Участник КАК Участник,
					   |	ПосылкиСостав.КодЗаказа КАК КодЗаказа,
		               |	&Ссылка КАК Партия,
		               |	1 КАК Количество
		               |ИЗ
		               |	Справочник.Посылки.Состав КАК ПосылкиСостав
		               |ГДЕ
		               |	ПосылкиСостав.Ссылка В
		               |			(ВЫБРАТЬ
		               |				РазборКоробкиПосылки.Посылка КАК Посылка
		               |			ИЗ
		               |				Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
		               |			ГДЕ
		               |				РазборКоробкиПосылки.Ссылка = &Ссылка
					   |				И РазборКоробкиПосылки.Посылка.ПунктВыдачи.ТранспортнаяКомпания					   
		               |				И РазборКоробкиПосылки.Загружено)";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Обмен100СПрн_Ошибки (Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "Обмен100СПрн_Ошибки";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	//Если Запрос.Параметры.Статус<>Перечисления.СтатусОтпавкиНаСайт.Отправлен Тогда
	//	Возврат "";
	//КонецЕсли; 
	
	ТекстЗапроса =  "ВЫБРАТЬ
	                |	РазборКоробкиПосылки.Ссылка.Дата КАК Период,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ЗагрузкаПосылок) КАК типОбмена,
	                |	РазборКоробкиПосылки.Ссылка КАК Партия,
	                |	РазборКоробкиПосылки.НомерСтроки КАК СтрокаВПартии,
	                |	РазборКоробкиПосылки.ШК КАК Мегаордер,
	                |	""Не загруженна посылка!"" КАК СообщениеОшибки,
	                |	1 КАК КоличествоНеИсправленных,
	                |	РазборКоробкиПосылки.ПунктВыдачи КАК ПунктВыдачиНаСтикере,
	                |	РазборКоробкиПосылки.Посылка.ПунктВыдачи КАК ПунктВыдачиНовый
	                |ИЗ
	                |	Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
	                |ГДЕ
	                |	РазборКоробкиПосылки.Ссылка = &Ссылка
	                |	И НЕ РазборКоробкиПосылки.Отправлено
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	РазборКоробкиГруппыНаТранзит.Ссылка.Дата,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход),
	                |	РазборКоробкиГруппыНаТранзит.Ссылка,
	                |	РазборКоробкиГруппыНаТранзит.НомерСтроки,
	                |	РазборКоробкиГруппыНаТранзит.ШК,
	                |	""Не выполнен обмен!"",
	                |	1,
	                |	РазборКоробкиГруппыНаТранзит.ПунктВыдачи,
	                |	РазборКоробкиГруппыНаТранзит.Коробка.ТочкаНазначения
	                |ИЗ
	                |	Документ.РазборКоробки.ГруппыНаТранзит КАК РазборКоробкиГруппыНаТранзит
	                |ГДЕ
	                |	РазборКоробкиГруппыНаТранзит.Ссылка = &Ссылка
	                |	И НЕ РазборКоробкиГруппыНаТранзит.Отправлено
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	РазборКоробкиПосылки.Ссылка.Дата,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ЗагрузкаПосылок),
	                |	РазборКоробкиПосылки.Ссылка,
	                |	РазборКоробкиПосылки.НомерСтроки,
	                |	РазборКоробкиПосылки.ШК,
	                |	""Не загружен состав посылки (для Объединенной доставки)!"",
	                |	1,
	                |	РазборКоробкиПосылки.ПунктВыдачи,
	                |	РазборКоробкиПосылки.Посылка.ПунктВыдачи
	                |ИЗ
	                |	Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
	                |ГДЕ
	                |	РазборКоробкиПосылки.Ссылка = &Ссылка
	                |	И РазборКоробкиПосылки.Посылка.ПунктВыдачи.ТранспортнаяКомпания
	                |	И НЕ РазборКоробкиПосылки.Загружено
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	РазборКоробкиПосылки.Ссылка.Дата,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ЗагрузкаПосылок),
	                |	РазборКоробкиПосылки.Ссылка,
	                |	РазборКоробкиПосылки.НомерСтроки,
	                |	РазборКоробкиПосылки.ШК,
	                |	""Изменился пункт назначения посылки!"",
	                |	1,
	                |	РазборКоробкиПосылки.ПунктВыдачи,
	                |	РазборКоробкиПосылки.Посылка.ПунктВыдачи
	                |ИЗ
	                |	Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
	                |ГДЕ
	                |	РазборКоробкиПосылки.Ссылка = &Ссылка
	                |	И РазборКоробкиПосылки.Отправлено
	                |	И РазборКоробкиПосылки.Посылка.ПунктВыдачи <> РазборКоробкиПосылки.ПунктВыдачи
	                |	И (НЕ &ИгнорироватьОшибкуИзмененияПунктаНазначения
	                |			ИЛИ РазборКоробкиПосылки.Посылка.ПунктВыдачи.ТранспортнаяКомпания
	                |			ИЛИ РазборКоробкиПосылки.ПунктВыдачи.ТранспортнаяКомпания)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	РазборКоробкиПосылки.Ссылка.Дата,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ЗагрузкаПосылок),
	                |	РазборКоробкиПосылки.Ссылка,
	                |	РазборКоробкиПосылки.НомерСтроки,
	                |	РазборКоробкиПосылки.ШК,
	                |	""Участник из не приемной группы!"",
	                |	1,
	                |	РазборКоробкиПосылки.ПунктВыдачи,
	                |	РазборКоробкиПосылки.Посылка.ПунктВыдачи
	                |ИЗ
	                |	Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиВГруппах КАК УчастникиВГруппах
	                |		ПО РазборКоробкиПосылки.Посылка.Участник = УчастникиВГруппах.Участник
	                |			И (УчастникиВГруппах.Группа = &гпНеПринимать)
	                |ГДЕ
	                |	РазборКоробкиПосылки.Ссылка = &Ссылка
	                |	И РазборКоробкиПосылки.Отправлено
	                |	И РазборКоробкиПосылки.ПунктВыдачи = РазборКоробкиПосылки.Ссылка.СвояТочка";
	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
КонецФункции


Функция Получить_ТекстЗапроса_ОборотнаяТараДвижение(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ОборотнаяТараДвижение";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.РазборКоробки") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	&Период КАК Период,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		               |	ОборотнаяТараДвижениеОстатки.Тара КАК Тара,
		               |	ОборотнаяТараДвижениеОстатки.ПунктВыдачи КАК ПунктВыдачи,
		               |	ОборотнаяТараДвижениеОстатки.ВПутиОстаток КАК ВПути,
		               |	0 КАК НаСкладе,
		               |	ОборотнаяТараДвижениеОстатки.Партия КАК Партия
		               |ИЗ
		               |	РегистрНакопления.ОборотнаяТараДвижение.Остатки(
		               |			&НачалоДокумента,
		               |			Тара В
		               |					(ВЫБРАТЬ
		               |						РазборКоробкиОборотнаяТара.Тара КАК Тара
		               |					ИЗ
		               |						Документ.РазборКоробки.ОборотнаяТара КАК РазборКоробкиОборотнаяТара
		               |					ГДЕ
		               |						РазборКоробкиОборотнаяТара.Ссылка = &Ссылка)
		               |				И Партия.Дата < &Период) КАК ОборотнаяТараДвижениеОстатки
		               |ГДЕ
		               |	ОборотнаяТараДвижениеОстатки.ВПутиОстаток > 0
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	&Период,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
		               |	ОборотнаяТараДвижениеОстатки.Тара,
		               |	ОборотнаяТараДвижениеОстатки.ПунктВыдачи,
		               |	0,
		               |	ОборотнаяТараДвижениеОстатки.НаСкладеОстаток,
		               |	ОборотнаяТараДвижениеОстатки.Партия
		               |ИЗ
		               |	РегистрНакопления.ОборотнаяТараДвижение.Остатки(
		               |			&НачалоДокумента,
		               |			Тара В
		               |					(ВЫБРАТЬ
		               |						РазборКоробкиОборотнаяТара.Тара КАК Тара
		               |					ИЗ
		               |						Документ.РазборКоробки.ОборотнаяТара КАК РазборКоробкиОборотнаяТара
		               |					ГДЕ
		               |						РазборКоробкиОборотнаяТара.Ссылка = &Ссылка)
		               |				И Партия.Дата < &Период) КАК ОборотнаяТараДвижениеОстатки
		               |ГДЕ
		               |	ОборотнаяТараДвижениеОстатки.НаСкладеОстаток > 0
					   
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РазборКоробкиОборотнаяТара.Ссылка.Дата,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		               |	РазборКоробкиОборотнаяТара.Тара,
		               |	РазборКоробкиОборотнаяТара.ПунктВыдачи,
		               |	0,
		               |	1,
		               |	РазборКоробкиОборотнаяТара.Ссылка
		               |ИЗ
		               |	Документ.РазборКоробки.ОборотнаяТара КАК РазборКоробкиОборотнаяТара
		               |ГДЕ
		               |	РазборКоробкиОборотнаяТара.Ссылка = &Ссылка";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции






#КонецОбласти

#Область Обмен100сп

Функция ПолучитьТэг_Income(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазборКоробкиПокупки.Оплачен КАК Оплачен,
		|	РазборКоробкиПокупки.ДатаПриема КАК ДатаПриема,
		|	РазборКоробкиПокупки.МестоХранения КАК МестоХранения,
		|	РазборКоробкиПокупки.Габарит КАК Габарит,
		|	РазборКоробкиПокупки.Коробка КАК Коробка,
		|	РазборКоробкиПокупки.Ссылка.СвояТочка КАК СвояТочка,
		|	РазборКоробкиПокупки.ПунктВыдачи КАК ПунктВыдачи,
		|	РазборКоробкиПокупки.Ссылка.Дата КАК Дата,
		|	РазборКоробкиПокупки.ШК КАК ШК,
		|	РазборКоробкиПокупки.ОтдельнымМестом КАК ОтдельнымМестом,
		|	РазборКоробкиПокупки.Ссылка.Номер КАК Номер
		|ИЗ
		|	Документ.РазборКоробки.Покупки КАК РазборКоробкиПокупки
		|ГДЕ
		|	РазборКоробкиПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И РазборКоробкиПокупки.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("income");
		СтоСП.Вставить_Тэг(ЗаписьXML,"paid"	,				?(Выборка.Оплачен,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				?(ЗначениеЗаполнено(Выборка.ДатаПриема),Выборка.ДатаПриема,Выборка.Дата));
		СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.ШК.Участник.Код),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(Выборка.ШК.Организатор.Код),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"sizedCategoryName",   Выборка.МестоХранения.Наименование);
		СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber",       Прав(Выборка.Номер,(СтрДлина(Выборка.Номер)-3)));
		СтоСП.Вставить_Тэг(ЗаписьXML, "innerId", 			Формат(Число(Прав(Выборка.Номер, (СтрДлина(Выборка.Номер)- 3))),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"sizedCategoryNumber", СтоСП.ПолучитьПредставлениеГабарита(Выборка.Габарит));
		СтоСП.Вставить_Тэг(ЗаписьXML,"transit",             ?((Выборка.Коробка.КРазбору И Выборка.СвояТочка <> Выборка.ПунктВыдачи),1,0));
		
		Если Выборка.Коробка <> Справочники.Коробки.БезКоробки Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"groupCode", Формат(Число(Выборка.Коробка.Код),"ЧГ=0"));
		КонецЕсли;

		СтоСП.Вставить_Тэг(ЗаписьXML,"isBig",               ?(Выборка.Габарит.НеГабарит,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"isFree",              ?(Выборка.ОтдельнымМестом,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"DistributorFee",      0);                                  //Орг сбор
		СтоСПОбмен_Общий.ЗаполнитьТэгиЗаказаПо_ШК(Выборка.ШК,ЗаписьXML);		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	
	Возврат рез;
КонецФункции

Функция ПолучитьТэг_Income_Посылки(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазборКоробкиПосылки.Посылка 			КАК Заказ,
		|	РазборКоробкиПосылки.ПунктВыдачи 		КАК ПунктВыдачи,		
		|	РазборКоробкиПосылки.МестоХранения 		КАК МестоХранения,
		|	РазборКоробкиПосылки.Габарит 			КАК Габарит,
		|	РазборКоробкиПосылки.ДатаПриема 		КАК ДатаПриема,
		|	РазборКоробкиПосылки.Коробка 			КАК Коробка,
		|	РазборКоробкиПосылки.Ссылка.СвояТочка 	КАК СвояТочка,
		|	РазборКоробкиПосылки.Ссылка.Дата 		КАК Дата,
		|	РазборКоробкиПосылки.ОтдельнымМестом 	КАК ОтдельнымМестом,
		|	РазборКоробкиПосылки.ШК			 		КАК ШК,
		|	РазборКоробкиПосылки.Ссылка.Номер 		КАК Номер,
		|	Выбор когда РазборКоробкиПосылки.Ссылка.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка) Тогда
		|		Ложь
		|	Иначе
		|		Истина
		|	Конец КАК noPurchaseVisibilityDeliveryFee,
		|	РазборКоробкиПосылки.Вес				как Вес,
		|	РазборКоробкиПосылки.объем				как объем

		|	Поместить Пред
		|ИЗ
		|	Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
		|ГДЕ
		|	РазборКоробкиПосылки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И РазборКоробкиПосылки.НомерСтроки "+ОтборПоСтроке+" ") + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РазборКоробкиГруппыНаТранзит.Коробка 			КАК Заказ,
		|	РазборКоробкиГруппыНаТранзит.ПунктВыдачи 		КАК ПунктВыдачи,		
		|	РазборКоробкиГруппыНаТранзит.МестоХранения 		КАК МестоХранения,
		|	РазборКоробкиГруппыНаТранзит.Габарит 			КАК Габарит,
		|	РазборКоробкиГруппыНаТранзит.ДатаПриема 		КАК ДатаПриема,
		|	Значение(Справочник.Коробки.ПустаяСсылка) 		КАК Коробка,
		|	РазборКоробкиГруппыНаТранзит.Ссылка.СвояТочка 	КАК СвояТочка,
		|	РазборКоробкиГруппыНаТранзит.Ссылка.Дата 		КАК Дата,
		|	РазборКоробкиГруппыНаТранзит.ОтдельнымМестом 	КАК ОтдельнымМестом,
		|	РазборКоробкиГруппыНаТранзит.ШК			 		КАК ШК,		
		|	РазборКоробкиГруппыНаТранзит.Ссылка.Номер 		КАК Номер,
		|	Выбор когда РазборКоробкиГруппыНаТранзит.Ссылка.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка) Тогда
		|		Ложь
		|	Иначе
		|		Истина
		|	Конец КАК noPurchaseVisibilityDeliveryFee,
		|	РазборКоробкиГруппыНаТранзит.Вес				как Вес,
		|	РазборКоробкиГруппыНаТранзит.объем				как объем
		
		|ИЗ
		|	Документ.РазборКоробки.ГруппыНаТранзит КАК РазборКоробкиГруппыНаТранзит
		|ГДЕ
		|	РазборКоробкиГруппыНаТранзит.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И РазборКоробкиГруппыНаТранзит.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.Текст = Запрос.Текст + ";
	  	|ВЫБРАТЬ
		|	пред.Заказ 			КАК Заказ,
		|	пред.ПунктВыдачи 		КАК ПунктВыдачи,		
		|	пред.МестоХранения 		КАК МестоХранения,
		|	пред.Габарит 			КАК Габарит,
		|	пред.ДатаПриема 		КАК ДатаПриема,
		|	пред.Коробка	 		КАК Коробка,
		|	пред.СвояТочка 			КАК СвояТочка,
		|	пред.Дата 				КАК Дата,
		|	пред.ОтдельнымМестом 	КАК ОтдельнымМестом,
		|	пред.ШК			 		КАК ШК,		
		|	пред.Номер	 		КАК Номер,
		|	пред.Вес				как Вес,
		|	пред.объем				как объем,
		|	ТарифыСрезПоследних.кодТарифа		как кодТарифа,
		|	ЕстьNULL(ТарифыСрезПоследних.Негабарит, Ложь)		как Негабарит
		
		|ИЗ
		|	пред как пред
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Тарифы.СрезПоследних КАК ТарифыСрезПоследних
		|		ПО пред.Габарит = ТарифыСрезПоследних.Габарит
		|			И (НЕ ТарифыСрезПоследних.Отменен)";
	
	
	
	;
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();

	ЗаписьXML = новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		transit = ?((Выборка.Коробка.КРазбору
			И Выборка.СвояТочка <> Выборка.ПунктВыдачи) или ТипЗнч(Выборка.Заказ) = Тип("СправочникСсылка.Коробки"), 1, 0);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("income");
		СтоСП.Вставить_Тэг(ЗаписьXML, "paid", 1);
		СтоСП.Вставить_Тэг(ЗаписьXML, "date", ?(ЗначениеЗаполнено(Выборка.ДатаПриема), Выборка.ДатаПриема, Выборка.Дата));
		СтоСП.Вставить_Тэг(ЗаписьXML, "sizedCategoryName", 	Выборка.МестоХранения.Наименование);
		СтоСП.Вставить_Тэг(ЗаписьXML, "arrivalNumber", 		Прав(Выборка.Номер, (СтрДлина(Выборка.Номер)- 3)));
		СтоСП.Вставить_Тэг(ЗаписьXML, "innerId", 			Формат(Число(Прав(Выборка.Номер, (СтрДлина(Выборка.Номер)- 3))),"ЧГ=0"));
			
		СтоСП.Вставить_Тэг(ЗаписьXML, "sizedCategoryNumber", СтоСП.ПолучитьПредставлениеГабарита(Выборка.Габарит));
		СтоСП.Вставить_Тэг(ЗаписьXML, "transit", transit);
		Если transit Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML, "noPurchaseVisibilityDeliveryFee", Выборка.noPurchaseVisibilityDeliveryFee);
		КонецЕсли;	
		СтоСП.Вставить_Тэг(ЗаписьXML,"tariffId",             Выборка.кодТарифа);
		Если Выборка.Негабарит Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"kg",               	 Формат(Число(Выборка.Вес),"ЧГ=0" ));
			СтоСП.Вставить_Тэг(ЗаписьXML,"cube",                 Формат(Число(Выборка.Объем),"ЧГ=0" ));
		КонецЕсли;

		СтоСП.Вставить_Тэг(ЗаписьXML, 						"isBig", ?(Выборка.Габарит.НеГабарит, 1, 0));
		СтоСП.Вставить_Тэг(ЗаписьXML, 						"isFree", ?(Выборка.ОтдельнымМестом, 1, 0));
		СтоСП.Вставить_Тэг(ЗаписьXML, 						"DistributorFee", 0); //Орг сбор
		Если ТипЗнч(Выборка.Заказ) = Тип("СправочникСсылка.Посылки") Тогда
			Если Выборка.Коробка <> Справочники.Коробки.БезКоробки Тогда
				СтоСП.Вставить_Тэг(ЗаписьXML, "groupCode", 	Формат(Число(Выборка.Коробка.Код), "ЧГ=0"));
			КонецЕсли;
			СтоСП.Вставить_Тэг(ЗаписьXML, "packageId", 		Формат(Выборка.Заказ.Код, "ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML, "orderType", 		"package");
		Иначе
			СтоСП.Вставить_Тэг(ЗаписьXML, "orgid", 	   		Формат(Число(Выборка.ШК.Организатор.Код),"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML, "groupCode", 		Формат(Выборка.Заказ.Код, "ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML, "orderType", 		"group");
		КонецЕсли;

		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	рез = ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	
	Возврат рез;
КонецФункции


Функция ПолучитьТэг_superGroupReceipt(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазборКоробки.Ссылка.Дата КАК Дата,
		|	1 КаК НомерСтроки,
		|	РазборКоробки.СуперГруппа КАК СупперГруппа
		|ИЗ
		|	Документ.РазборКоробки КАК РазборКоробки 
		|ГДЕ
		|	РазборКоробки.СуперГруппа<> Значение(Справочник.Мегаордера.ПустаяСсылка)	
		|	и РазборКоробки.Ссылка "+ОтборПоСсылке+" ";
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСупергруппа = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");	
	
	Пока ВыборкаСупергруппа.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("superGroupReceipt");
		СтоСП.Вставить_Тэг(ЗаписьXML,"documentNumber",		ВыборкаСупергруппа.СупперГруппа);
		СтоСП.Вставить_Тэг(ЗаписьXML,"actualDeliveryDate",	ВыборкаСупергруппа.Дата);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();    //superGroupReceipt
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();    //Служебный
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
	
	
КонецФункции


#КонецОбласти




Функция ПолноеИмяОбъекта()
	Возврат "Документ.РазборКоробки";
КонецФункции



