Функция ЗагрузитьСправочники() Экспорт
	
	ЗагрузитьПоДате();
	ЗагрузитьОтдельнымиЗапросами();
//	результат = аспПроцедурыОбменаДанными.ОбработатьЗагруженныеССайтаДанные(ответ, Истина);
	
	
КонецФункции

Функция ЗагрузитьПоДате() Экспорт
	
	структураПараметровПоДате = Новый Структура;
	структураПараметровОтдельно = Новый Структура;
	Для каждого элем из ПараметрыЗагрузки Цикл
		Если элем.xmlName = "publicDistributors" Тогда
			структураПараметровОтдельно.Вставить(элем.xmlName, элем.НачалоЗагрузки);
		Иначе	
		 	структураПараметровПоДате.Вставить(элем.xmlName, элем.НачалоЗагрузки);
		КонецЕсли; 
		Если элем.xmlName = "packageOrders" Тогда
			структураПараметровПоДате.Вставить("distributorCode", Формат(Число(Константы.СвояТочка.Получить().Код),"ЧГ=0"));
		КонецЕсли;
		
	КонецЦикла; 
	
	xml 	= СтоСПОбмен_Запрос.ЗагрузитьСправочникиПоДате(структураПараметровПоДате,структураПараметровОтдельно);
	токен 	= Константы.Токен.Получить();
	
	Параметры			=	Новый Структура;
	Параметры.Вставить("token", токен);
	Параметры.Вставить("xml", 	xml);

	АдресСкрипта        = Константы.АдресЗагрузкиССайта.Получить();
//	ПолучлиФайл			= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры, АдресСкрипта);
	ПолученныеДанные	= СтоСПОбмен_Общий.ПолучитьПостЗапросом_Ответ(Параметры, АдресСкрипта);
	стр_Разбор			= Разбор(ПолученныеДанные);
	
	ОшибкаРазбораXML = стр_Разбор.ОшибкаРазбораXML ;
	Если Не ОшибкаРазбораXML  Тогда
		Если стр_Разбор.авторизацияВыполнена Тогда
			Для каждого элем из стр_Разбор Цикл 
				найдено = ПараметрыЗагрузки.НайтиСтроки(новый Структура("xmlName",элем.Ключ));
				Если найдено.Количество()> 0 Тогда
					ЗаполнитьЗначенияСвойств(найдено[0], элем.Значение);
					найдено[0].НачалоД =Элем.Значение.Начало;
					найдено[0].КонецД =Элем.Значение.Конец;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции


Функция ЗагрузитьОтдельнымиЗапросами() Экспорт
	Начало = ТекущаяДата();
	Для каждого элем из ПараметрыОтдельныеЗапросы Цикл
		Если элем.xmlName = "returnRights" Тогда
			Результат = СтоСПОбмен_Возвраты_СРазрешением.ОбновитьСписокПрав();			
			Конец = ТекущаяДата();
			Результат.вставить("НачалоД", Начало);
			Результат.вставить("КонецД", Конец);
			ЗаполнитьЗначенияСвойств(элем, Результат);
			СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.ПраваВозвраты);

		КонецЕсли;

		
		
		Если элем.xmlName = "transfers" Тогда
			Результат = СтоСПОбмен_ПокупкиВПути.Получить(элем.НачалоЗагрузки);			
			Конец = ТекущаяДата();
			Результат.вставить("НачалоД", Начало);
			Результат.вставить("КонецД", Конец);
			ЗаполнитьЗначенияСвойств(элем, Результат);
			СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.ПокупкиВПутиОтчет);

		КонецЕсли;
		
		
		АнтейТранзит = Справочники.ТочкиРаздачи.НайтиПоКоду("0039");
		Если Константы.СвояТочка.Получить() <> АнтейТранзит Тогда
			
			Если элем.xmlName = "transitOrdersCount" Тогда
				Результат = Новый Структура;
				ЗаказовНаТранзите = СтоСПОбмен_ЗаказыНаТранзите.Получить(АнтейТранзит);		
				Конец = ТекущаяДата();
				Результат.вставить("ПолученоЭлементов", ЗаказовНаТранзите);
				Результат.вставить("НачалоД", 			Начало);
				Результат.вставить("КонецД", 			Конец);
				ЗаполнитьЗначенияСвойств(элем, Результат);
				константы.ЗаказовНаТранзите.Установить("На транзите " + Строка(ЗаказовНаТранзите) + " шт , на "+ ТекущаяДата());
				
			КонецЕсли;
		КонецЕсли;
		
		Если элем.xmlName = "utc" Тогда
				текущийЧасовойПояс = ЧасовойПояс();
				Результат = Новый Структура;
				ОбменВыполнен = СтоСПОбмен_ЧасовойПояс.Отправить(текущийЧасовойПояс);		
				Конец = ТекущаяДата();
				Результат.вставить("ПолученоЭлементов", ?(ОбменВыполнен,1,0));
				Результат.вставить("НачалоД", 			Начало);
				Результат.вставить("КонецД", 			Конец);
				ЗаполнитьЗначенияСвойств(элем, Результат);
				Если ОбменВыполнен Тогда
					СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.ЧасовойПояс);
				КонецЕсли;
		КонецЕсли;	
		

	КонецЦикла;	
	
КонецФункции



Функция Разбор(ПолученныеДанные)
	пространствоИмен = "http://www.100sp.ru/api/distributor/back";
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"<rating></rating>","<rating>0</rating>");
	ПолученныеДанные= СтрЗаменить(ПолученныеДанные,"<firstPid></firstPid>","<firstPid>0</firstPid>");
	
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"<distributors",		"<distributors xmlns="""+пространствоИмен+"""  ");
	
	стр_Результат	 = Новый Структура;
	
	авторизацияВыполнена	= ложь;
	Тип_distributors		= ФабрикаXDTO.Тип(пространствоИмен, "distributors");
	
	ЧтениеXML 				= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Попытка
	
		Объект_distributors		= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);	
		стр_Результат.Вставить("ОшибкаРазбораXML" ,Ложь)
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		стр_Результат.Вставить("ОшибкаРазбораXML" ,Истина);
		Возврат стр_Результат;
	КонецПопытки;
	
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена = истина;
	КонецЕсли;
	
	
	Если Объект_distributors.dataByDates <>Неопределено Тогда
		
		ИмяСписка 	= "superGroups";
		ИмяЭлемента = "superGroup";
		Если Объект_distributors.dataByDates[ИмяСписка] <> Неопределено Тогда
			ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.dataByDates[ИмяСписка][ИмяЭлемента]);
			Результат = СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныеСупергруппы(ТЗ);
			
			стр_Результат.Вставить(ИмяСписка,Результат);
			
			СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.Супергруппы);
		КонецЕсли;
		
		
		
		ИмяСписка 	= "purchases";
		ИмяЭлемента = "purchase";
		Если Объект_distributors.dataByDates[ИмяСписка] <> Неопределено Тогда
			ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.dataByDates[ИмяСписка][ИмяЭлемента]);
			Результат = СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныеПокупки(ТЗ);
			
			стр_Результат.Вставить(ИмяСписка,Результат);
			
			СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.Покупки);
		КонецЕсли;
		
		ИмяСписка 	= "cards";
		ИмяЭлемента = "card";
		Если Объект_distributors.dataByDates[ИмяСписка] <> Неопределено Тогда
			ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.dataByDates[ИмяСписка][ИмяЭлемента]);
			Загуржено =СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныеКарты(ТЗ);
			стр_Результат.Вставить(ИмяСписка,Загуржено);
			СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.КартыУчастников);
		КонецЕсли;
		
		ИмяСписка 	= "users";
		ИмяЭлемента = "user";
		Если Объект_distributors.dataByDates[ИмяСписка] <> Неопределено Тогда
			ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.dataByDates[ИмяСписка][ИмяЭлемента]);
			Загуржено = СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныхУчастников(ТЗ);
			стр_Результат.Вставить(ИмяСписка,Загуржено);
			СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.Участники);
		КонецЕсли;
		
		ИмяСписка 	= "orgs";
		ИмяЭлемента = "org";
		Если Объект_distributors.dataByDates[ИмяСписка] <> Неопределено Тогда
			ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.dataByDates[ИмяСписка][ИмяЭлемента]);
			Загуржено = СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныхУчастников(ТЗ);
			стр_Результат.Вставить(ИмяСписка,Загуржено);
			СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.Участники);
		КонецЕсли;
		
		
		ИмяСписка 	= "deliveryGroups";
		ИмяЭлемента = "deliveryGroup";
		Если Объект_distributors.dataByDates[ИмяСписка] <> Неопределено Тогда
			Начало = ТекущаяДата();
			Результат = СтоСПОбмен_ГруппыДоставки.СозданиеГруппПоДаннымСайта(Объект_distributors.dataByDates[ИмяСписка][ИмяЭлемента]);
			Конец = ТекущаяДата();
			Результат.вставить("Начало",Начало);
			Результат.вставить("Конец",Конец);
			Результат.вставить("ПолученоЭлементов",Результат.ПолученоЭлементов);
			Результат.вставить("Ошибок",0);


	        СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.ГруппыДоставки);
			СтоСП_ГруппыДоставки.РасчитатьОстаткиПоГруппамДоставки();
		    стр_Результат.Вставить(ИмяСписка,Результат);
			
			//ТЗ			= СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.dataByDates[ИмяСписка][ИмяЭлемента]);
			//Загружено 	= СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныеГруппыДоставки(ТЗ);
			//стр_Результат.Вставить(ИмяСписка,Загружено);
			//СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.ГруппыДоставки);
			
			
			
		КонецЕсли;
		
		ИмяСписка 	= "packageOrders";
		ИмяЭлемента = "packageOrder";
		Если Объект_distributors.dataByDates[ИмяСписка] <> Неопределено Тогда
			ТЗ			= СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.dataByDates[ИмяСписка][ИмяЭлемента]);
			Загружено 	= СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныеПосылки(ТЗ);
			стр_Результат.Вставить(ИмяСписка,Загружено);
			СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.Посылки);
		КонецЕсли;
		СтоСПОбмен_Посылки.Загрузить_СоставПосылки_ПоПризнакуДогрузить();
		
		
	КонецЕсли;
	
	ИмяСписка 	= "publicDistributors";
	ИмяЭлемента = "publicDistributor";
	Если Объект_distributors[ИмяСписка] <> Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors[ИмяСписка][ИмяЭлемента]);
		Загуржено = СтоСПОбмен_ЗагрузкаСправочников.ОбработатьЗагруженныеПунктыВыдачи(ТЗ);
		стр_Результат.Вставить(ИмяСписка,Загуржено);
		//СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.точ);
	КонецЕсли;
	
	
	стр_Результат.Вставить("авторизацияВыполнена",авторизацияВыполнена);
	Возврат стр_Результат;
	
	
КонецФункции	



Процедура ЗаполнитьПеродыЗагрузки() Экспорт
	ПараметрыЗагрузки.Очистить();
	ПараметрыОтдельныеЗапросы.Очистить();
	

	новаяСтрока 				= ПараметрыЗагрузки.Добавить();
	новаяСтрока.Наименование 	= "Супергруппы";
	новаяСтрока.xmlName 		= "superGroups";
	новаяСтрока.НачалоЗагрузки  =  Справочники.ПараметрыОбмена.Супергруппы.ДатаЗагрузки;
	
	
	новаяСтрока 				= ПараметрыЗагрузки.Добавить();
	новаяСтрока.Наименование 	= "Покупки";
	новаяСтрока.xmlName 		= "purchases";
	новаяСтрока.НачалоЗагрузки  =  Справочники.ПараметрыОбмена.Покупки.ДатаЗагрузки;
	
	новаяСтрока 				= ПараметрыЗагрузки.Добавить();
	новаяСтрока.Наименование 	= "ПунктыВыдачи";
	новаяСтрока.xmlName 		= "publicDistributors";
	новаяСтрока.НачалоЗагрузки  =  ТекущаяДата();
	
	//новаяСтрока 				= ПараметрыЗагрузки.Добавить();
	//новаяСтрока.Наименование 	= "Участники";
	//новаяСтрока.xmlName 		= "users";
	//новаяСтрока.НачалоЗагрузки  =  Справочники.ПараметрыОбмена.Участники.ДатаЗагрузки;
	
	новаяСтрока 				= ПараметрыЗагрузки.Добавить();
	новаяСтрока.Наименование 	= "Организаторы";
	новаяСтрока.xmlName 		= "orgs";
	новаяСтрока.НачалоЗагрузки  =  Справочники.ПараметрыОбмена.Участники.ДатаЗагрузки;
	
//	новаяСтрока.НачалоЗагрузки =новаяСтрока.НачалоЗагрузки   +"T00:00:00"; 
	
	новаяСтрока 				= ПараметрыЗагрузки.Добавить();
	новаяСтрока.Наименование 	= "КартыУчастников";
	новаяСтрока.xmlName 		= "cards";
	новаяСтрока.НачалоЗагрузки  =  Справочники.ПараметрыОбмена.КартыУчастников.ДатаЗагрузки;
	
	
	Если Константы.ИспользоватьТранспортныеКомпании.Получить() Тогда
		новаяСтрока 				= ПараметрыЗагрузки.Добавить();
		новаяСтрока.Наименование 	= "ГруппыДоставки";
		новаяСтрока.xmlName 		= "deliveryGroups";
		новаяСтрока.НачалоЗагрузки  =  Справочники.ПараметрыОбмена.ГруппыДоставки.ДатаЗагрузки;
	КонецЕсли;

	новаяСтрока 				= ПараметрыЗагрузки.Добавить();
	новаяСтрока.Наименование 	= "Посылки";
	новаяСтрока.xmlName 		= "packageOrders";
	новаяСтрока.НачалоЗагрузки  =  Справочники.ПараметрыОбмена.Посылки.ДатаЗагрузки;
	
	
	новаяСтрока 				= ПараметрыОтдельныеЗапросы.Добавить();
	новаяСтрока.Наименование 	= "ПокупкиВПути";
	новаяСтрока.xmlName 		= "transfers";
	новаяСтрока.НачалоЗагрузки  =  Справочники.ПараметрыОбмена.ПокупкиВПутиОтчет.ДатаЗагрузки;
	
	новаяСтрока 				= ПараметрыОтдельныеЗапросы.Добавить();
	новаяСтрока.Наименование 	= "ЗаказыНаРанзите";
	новаяСтрока.xmlName 		= "transitOrdersCount";
	новаяСтрока.НачалоЗагрузки  =  ТекущаяДата();
	
	ЧасовойПоясПоследняяВыгрузка = Справочники.ПараметрыОбмена.ЧасовойПояс.ДатаЗагрузки;
	ДнейСпоследнейВыгрухкиЧасовогоПояса = (НачалоДня(ТекущаяДата()) - НачалоДня(ЧасовойПоясПоследняяВыгрузка)) / (60 * 60 * 24);
	Если ДнейСпоследнейВыгрухкиЧасовогоПояса >30 Тогда                                                                                          
		новаяСтрока 				= ПараметрыОтдельныеЗапросы.Добавить();
		новаяСтрока.Наименование 	= "ЧасовойПояс";
		новаяСтрока.xmlName 		= "utc";
		новаяСтрока.НачалоЗагрузки  =  ТекущаяДата();
	КонецЕсли;                           
	
	новаяСтрока 				= ПараметрыОтдельныеЗапросы.Добавить();
	новаяСтрока.Наименование 	= "ПраваВозвраты";
	новаяСтрока.xmlName 		= "returnRights";
	новаяСтрока.НачалоЗагрузки  = неопределено;

КонецПроцедуры	


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	#Область ПравильноеПроведение
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.СинхронизацияСправочников.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("Обмен100СПрн_Ошибки", ДополнительныеСвойства, Движения, Отказ);
	#КонецОбласти
	
	
КонецПроцедуры



