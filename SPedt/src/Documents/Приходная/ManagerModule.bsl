#Область ПрограммныйИнтерфейс

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	СтоСП_Печать.ДобавитьКомандыПечатиПоступлений(КомандыПечати);
КонецПроцедуры


#КонецОбласти





#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	Получить_ТекстЗапроса_Приход(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_ШтрафныеЗаказы(Запрос, ТекстыЗапроса, Регистры);
	
	Получить_ТекстЗапроса_НеВыгруженноНаСайт(Запрос, ТекстыЗапроса, Регистры);	
//	Получить_ТекстЗапроса_ДанныеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_ОборотнаяТараДвижение(Запрос, ТекстыЗапроса, Регистры);		
	
	СтараяМетодика = (не СинхронизацияПоступлений.НоваяМетодика(ДокументСсылка.Дата));
	Если СтараяМетодика Тогда
		Получить_ТекстЗапроса_Транзит(Запрос, ТекстыЗапроса, Регистры);
		Получить_ТекстЗапроса_ОстаткиТоваров(Запрос, ТекстыЗапроса, Регистры);
		Получить_ТекстЗапроса_ЗаказыВПосылках(Запрос, ТекстыЗапроса, Регистры);
		Получить_ТекстЗапроса_Обмен100СПрн_Ошибки (Запрос, ТекстыЗапроса, Регистры);
		Получить_ТекстЗапроса_ДанныеЗаказовСайт(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.Приходная КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                        Реквизиты.Период);
	Запрос.УстановитьПараметр("НачалоДокумента",               ?(ЗначениеЗаполнено(ДокументСсылка.Дата), новый Граница(ДокументСсылка.Дата,ВидГраницы.Исключая), ТекущаяДата()));
	Запрос.УстановитьПараметр("Номер",                         Реквизиты.Номер);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("Комментарий",                   Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",               Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                      Реквизиты.Проведен); 
	Запрос.УстановитьПараметр("гпНеПринимать",                 Константы.гпНеПринимать.Получить());
	Запрос.УстановитьПараметр("СвойПунктВыдачи",               Константы.СвояТочка.Получить()); 
	Запрос.УстановитьПараметр("ВозможностьИспользоватьТранзит",Константы.ВозможностьПриниматьНаТранзит.Получить());
	Запрос.УстановитьПараметр("Курьер100сп",				   Константы.ПунктВыдачиКурьерскойДоставки.Получить());
	Запрос.УстановитьПараметр("ИгнорироватьОшибкуИзмененияПунктаНазначения",				   Константы.ИгнорироватьОшибкуИзмененияПунктаНазначения.Получить());
	Запрос.УстановитьПараметр("НоваяМетодика", 	    			СинхронизацияПоступлений.НоваяМетодика(Реквизиты.Период));
КонецПроцедуры

#КонецОбласти


#Область Обмен100сп

Функция ПолучитьТэг_Income(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходнаяПокупки.Оплачен КАК Оплачен,
		|	ПриходнаяПокупки.ДатаПриема КАК ДатаПриема,
		|	ПриходнаяПокупки.МестоХранения КАК МестоХранения,
		|	ПриходнаяПокупки.Габарит КАК Габарит,
		|	ПриходнаяПокупки.Ссылка.Транзит КАК Транзит,
		|	ПриходнаяПокупки.Ссылка.Дата КАК Дата,
		|	ПриходнаяПокупки.ШК КАК ШК,
		|	ПриходнаяПокупки.ОтдельнымМестом КАК ОтдельнымМестом,
		|	ПриходнаяПокупки.ОргСбор КАК ОргСбор,
		|	ПриходнаяПокупки.Ссылка.Номер КАК Номер
		|ИЗ
		|	Документ.Приходная.Покупки КАК ПриходнаяПокупки
		|ГДЕ
		|	ПриходнаяПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И ПриходнаяПокупки.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("income");
		СтоСП.Вставить_Тэг(ЗаписьXML,"paid"	,				?(Выборка.Оплачен,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				?(ЗначениеЗаполнено(Выборка.ДатаПриема),Выборка.ДатаПриема,Выборка.Дата));
		СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.ШК.Участник.Код),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(Выборка.ШК.Организатор.Код),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"sizedCategoryName",     Выборка.МестоХранения.Наименование);
		СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber",         Прав(Выборка.Номер,(СтрДлина(Выборка.Номер)-3)));
		СтоСП.Вставить_Тэг(ЗаписьXML, "innerId", 			Формат(Число(Прав(Выборка.Номер, (СтрДлина(Выборка.Номер)- 3))),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"sizedCategoryNumber",   СтоСП.ПолучитьПредставлениеГабарита(Выборка.Габарит));
		СтоСП.Вставить_Тэг(ЗаписьXML,"transit",               ?(Выборка.Транзит,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"isBig",                 ?(Выборка.Габарит.НеГабарит,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"isFree",                ?(Выборка.ОтдельнымМестом,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"DistributorFee",        ?(Выборка.ОргСбор,1,0));
		СтоСПОбмен_Общий.ЗаполнитьТэгиЗаказаПо_ШК(Выборка.ШК,ЗаписьXML);	
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
КонецФункции

Функция ПолучитьТэг_Income_Посылки(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходнаяПосылки.Посылка 			КАК Посылка,
		|	ПриходнаяПосылки.ПунктВыдачи 		КАК ПунктВыдачи,
		|	ПриходнаяПосылки.МестоХранения 		КАК МестоХранения,
		|	ПриходнаяПосылки.Габарит 			КАК Габарит,
		|	ПриходнаяПосылки.ДатаПриема 		КАК ДатаПриема,
		|	ПриходнаяПосылки.Ссылка.СвояТочка 	КАК СвояТочка,
		|	ПриходнаяПосылки.Ссылка.Дата 		КАК Дата,
		|	ПриходнаяПосылки.ОтдельнымМестом 	КАК ОтдельнымМестом,
		|	ПриходнаяПосылки.Ссылка.Номер 		КАК Номер,
		|	ПриходнаяПосылки.Ссылка.Транзит 	КАК Транзит,
		|	ПриходнаяПосылки.Вес				как Вес,
		|	ПриходнаяПосылки.объем				как объем,
		|	ТарифыСрезПоследних.кодТарифа		как кодТарифа,
		|	ЕСТЬNULL(ТарифыСрезПоследних.Негабарит, ложь)		как Негабарит
		|ИЗ
		|	Документ.Приходная.Посылки КАК ПриходнаяПосылки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Тарифы.СрезПоследних КАК ТарифыСрезПоследних
		|		ПО ПриходнаяПосылки.Габарит = ТарифыСрезПоследних.Габарит
		|			И (НЕ ТарифыСрезПоследних.Отменен)
		
		|ГДЕ
		|	ПриходнаяПосылки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И ПриходнаяПосылки.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", 	НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", 		Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("income");
		СтоСП.Вставить_Тэг(ЗаписьXML,"paid"	,				1);
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				?(ЗначениеЗаполнено(Выборка.ДатаПриема),Выборка.ДатаПриема,Выборка.Дата));
		СтоСП.Вставить_Тэг(ЗаписьXML,"sizedCategoryName",   Выборка.МестоХранения.Наименование);
		СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber",       Прав(Выборка.Номер,(СтрДлина(Выборка.Номер)-3)));
		СтоСП.Вставить_Тэг(ЗаписьXML,"innerId",			    Формат(Число(Прав(Выборка.Номер,(СтрДлина(Выборка.Номер)-3))),"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"sizedCategoryNumber", СтоСП.ПолучитьПредставлениеГабарита(Выборка.Габарит));
		СтоСП.Вставить_Тэг(ЗаписьXML,"transit",             ?(Выборка.ПунктВыдачи<>Выборка.СвояТочка,1,0));
		
		СтоСП.Вставить_Тэг(ЗаписьXML,"tariffId",             Выборка.кодТарифа);
		Если Выборка.Негабарит Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"kg",               	 Формат(Число(Выборка.Вес),"ЧГ=0" ));
			СтоСП.Вставить_Тэг(ЗаписьXML,"cube",                 Формат(Число(Выборка.Объем),"ЧГ=0" ));
		КонецЕсли;
		СтоСП.Вставить_Тэг(ЗаписьXML,"isBig",               ?(Выборка.Габарит.НеГабарит,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"isFree",              ?(Выборка.ОтдельнымМестом,1,0));
		СтоСП.Вставить_Тэг(ЗаписьXML,"DistributorFee",      0);                                  //Орг сбор
		СтоСП.Вставить_Тэг(ЗаписьXML,"packageId",           Формат(Выборка.Посылка.Код,"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",           "package");
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	
	Возврат рез;
КонецФункции

#КонецОбласти


Функция ПолноеИмяОбъекта()
	Возврат "Документ.Приходная";
КонецФункции


Функция Получить_ТекстЗапроса_НеВыгруженноНаСайт(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "НеВыгруженноНаСайт";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Приходная") Тогда
		 ТекстЗапроса = "
		 |
		 |ВЫБРАТЬ
		 |	ПриходнаяПосылки.Ссылка.Дата 	КАК Период,
		 |	ПриходнаяПосылки.Посылка 		КАК Заказ,
		 |	ПриходнаяПосылки.МестоХранения 	КАК МестоХранения,
	//	 |	ПриходнаяПосылки.Габарит 		КАК Габарит,
	//	 |	Значение(Справочник.Коробки.БезКоробки) КАК Коробка,
		 |	ПриходнаяПосылки.ПунктВыдачи КАК ПунктВыдачи,
		 |	ПриходнаяПосылки.Ссылка КАК Партия,
		 //|	ПриходнаяПосылки.ДатаПриема КАК ДатаПриема,
		 //|	ПриходнаяПосылки.ОтдельнымМестом КАК ОтдельнымМестом, 

		 |	1 КАК Количество
		 |ИЗ
		 |	Документ.Приходная.Посылки КАК ПриходнаяПосылки
		 |ГДЕ
		 |	ПриходнаяПосылки.Ссылка = &Ссылка
		 |  и не ПриходнаяПосылки.Габарит.НеВыполнятьОбмен
		 |	И (&НоваяМетодика)
		 |
		 |Объединить все
		 |
		 |ВЫБРАТЬ
		 |	Покупки.Ссылка.Дата 	КАК Период,
		 |	Покупки.Покупка 		КАК Заказ,
		 |	Покупки.МестоХранения 	КАК МестоХранения,
	//	 |	ПриходнаяПосылки.Габарит 		КАК Габарит,
	//	 |	Значение(Справочник.Коробки.БезКоробки) КАК Коробка,
		 |	Покупки.Ссылка.ПунктВыдачи КАК ПунктВыдачи,
		 |	Покупки.Ссылка КАК Партия,
		 //|	ПриходнаяПосылки.ДатаПриема КАК ДатаПриема,
		 //|	ПриходнаяПосылки.ОтдельнымМестом КАК ОтдельнымМестом, 

		 |	1 КАК Количество
		 |ИЗ
		 |	Документ.Приходная.Покупки КАК Покупки
		 |ГДЕ
		 |	ТипЗначения(Покупки.Покупка) = Тип(Справочник.Коробки)
		 |  и не Покупки.Габарит.НеВыполнятьОбмен		 
		 |	и Покупки.Ссылка = &Ссылка
		 |	И (&НоваяМетодика)
		 
		 
		 
		 |";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Обмен100СПрн_Ошибки (Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "Обмен100СПрн_Ошибки";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 

	
	ТекстЗапроса =  "ВЫБРАТЬ
	                |	ПриходнаяПосылки.Ссылка.Дата КАК Период,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ЗагрузкаПосылок) КАК типОбмена,
	                |	ПриходнаяПосылки.Ссылка КАК Партия,
	                |	ПриходнаяПосылки.НомерСтроки КАК СтрокаВПартии,
	                |	ПриходнаяПосылки.ШК КАК Мегаордер,
	                |	""Не загруженна посылка!"" КАК СообщениеОшибки,
	                |	1 КАК КоличествоНеИсправленных,
	                |	ПриходнаяПосылки.ПунктВыдачи КАК ПунктВыдачиНаСтикере,
	                |	ПриходнаяПосылки.Посылка.ПунктВыдачи КАК ПунктВыдачиНовый
	                |ИЗ
	                |	Документ.Приходная.Посылки КАК ПриходнаяПосылки
	                |ГДЕ
	                |	ПриходнаяПосылки.Ссылка = &Ссылка
	                |	И НЕ ПриходнаяПосылки.Отправлено
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ПриходнаяПосылки.Ссылка.Дата,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ЗагрузкаПосылок),
	                |	ПриходнаяПосылки.Ссылка,
	                |	ПриходнаяПосылки.НомерСтроки,
	                |	ПриходнаяПосылки.ШК,
	                |	""Не загружен состав посылки (для Объединенной доставки)!"",
	                |	1,
	                |	ПриходнаяПосылки.ПунктВыдачи,
	                |	ПриходнаяПосылки.Посылка.ПунктВыдачи
	                |ИЗ
	                |	Документ.Приходная.Посылки КАК ПриходнаяПосылки
	                |ГДЕ
	                |	ПриходнаяПосылки.Ссылка = &Ссылка
	                |	И ПриходнаяПосылки.Посылка.ПунктВыдачи.ТранспортнаяКомпания
	                |	И НЕ ПриходнаяПосылки.Загружено
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ПриходнаяПосылки.Ссылка.Дата,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ЗагрузкаПосылок),
	                |	ПриходнаяПосылки.Ссылка,
	                |	ПриходнаяПосылки.НомерСтроки,
	                |	ПриходнаяПосылки.ШК,
	                |	""Изменился пункт назначения посылки!"",
	                |	1,
	                |	ПриходнаяПосылки.ПунктВыдачи,
	                |	ПриходнаяПосылки.Посылка.ПунктВыдачи
	                |ИЗ
	                |	Документ.Приходная.Посылки КАК ПриходнаяПосылки
	                |ГДЕ
	                |	ПриходнаяПосылки.Ссылка = &Ссылка
	                |	И ПриходнаяПосылки.Отправлено
	                |	И ПриходнаяПосылки.Посылка.ПунктВыдачи <> ПриходнаяПосылки.ПунктВыдачи
	                |	И (НЕ &ИгнорироватьОшибкуИзмененияПунктаНазначения
	                |			ИЛИ ПриходнаяПосылки.Посылка.ПунктВыдачи.ТранспортнаяКомпания
	                |			ИЛИ ПриходнаяПосылки.ПунктВыдачи.ТранспортнаяКомпания)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ПриходнаяПосылки.Ссылка.Дата,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ЗагрузкаПосылок),
	                |	ПриходнаяПосылки.Ссылка,
	                |	ПриходнаяПосылки.НомерСтроки,
	                |	ПриходнаяПосылки.ШК,
	                |	""Участник из не приемной группы!"",
	                |	1,
	                |	ПриходнаяПосылки.ПунктВыдачи,
	                |	ПриходнаяПосылки.Посылка.ПунктВыдачи
	                |ИЗ
	                |	Документ.Приходная.Посылки КАК ПриходнаяПосылки
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиВГруппах КАК УчастникиВГруппах
	                |		ПО ПриходнаяПосылки.Посылка.Участник = УчастникиВГруппах.Участник
	                |			И (УчастникиВГруппах.Группа = &гпНеПринимать)
	                |ГДЕ
	                |	ПриходнаяПосылки.Ссылка = &Ссылка
	                |	И ПриходнаяПосылки.Отправлено
	                |	И НЕ ПриходнаяПосылки.Ссылка.Транзит";
	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
КонецФункции

Функция Получить_ТекстЗапроса_ЗаказыВПосылках(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ЗаказыВПосылках";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Приходная") Тогда
		ТекстЗапроса = "
					   |
					   |ВЫБРАТЬ
		               |	ПосылкиСостав.Ссылка КАК Посылка,
		               |	&Период КАК Период,
		               |	ПосылкиСостав.Покупка КАК Покупка,
		               |	ПосылкиСостав.Участник КАК Участник,
		               |	ПосылкиСостав.КодЗаказа КАК КодЗаказа,
		               |	&Ссылка КАК Партия,
		               |	1 КАК Количество
		               |ИЗ
		               |	Справочник.Посылки.Состав КАК ПосылкиСостав
		               |ГДЕ
		               |	ПосылкиСостав.Ссылка В
		               |			(ВЫБРАТЬ
		               |				ПриходнаяПосылки.Посылка КАК Посылка
		               |			ИЗ
		               |				Документ.Приходная.Посылки КАК ПриходнаяПосылки
		               |			ГДЕ
		               |				ПриходнаяПосылки.Ссылка = &Ссылка
		               |				И ПриходнаяПосылки.Загружено
					   |				И ПриходнаяПосылки.Посылка.ПунктВыдачи.ТранспортнаяКомпания)
					   |
					   |";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_ОстаткиТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ОстаткиТоваров";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Приходная") Тогда
		ТекстЗапроса ="
		               |
					   |ВЫБРАТЬ
		               |	ПриходнаяПосылки.Ссылка.Дата КАК Период,
		               |	ПриходнаяПосылки.Посылка КАК Покупка,
		               |	ПриходнаяПосылки.МестоХранения КАК МестоХранения,
		               |	ПриходнаяПосылки.Габарит КАК Габарит,
		               |	ПриходнаяПосылки.Посылка.Участник КАК Участник,
		               |	ПриходнаяПосылки.Оплачен КАК Оплачен,
		               |	ПриходнаяПосылки.Ссылка КАК Партия,
		               |	1 КАК Количество
		               |ИЗ
		               |	Документ.Приходная.Посылки КАК ПриходнаяПосылки
		               |ГДЕ
		               //|	не ПриходнаяПосылки.Ссылка.Транзит
		               |	ПриходнаяПосылки.ПунктВыдачи = &СвойПунктВыдачи 
		               |	и ПриходнаяПосылки.Посылка.ПунктВыдачи <> &Курьер100сп
					   |	и ПриходнаяПосылки.Ссылка= &Ссылка
		               |	И ПриходнаяПосылки.Отправлено
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ПриходнаяПокупки.Ссылка.Дата,
		               |	ПриходнаяПокупки.Покупка,
		               |	ПриходнаяПокупки.МестоХранения,
		               |	ПриходнаяПокупки.Габарит,
		               |	ПриходнаяПокупки.Участник,
		               |	ПриходнаяПокупки.Оплачен,
		               |	ПриходнаяПокупки.Ссылка,
		               |	Выбор когда ТипЗначения(ПриходнаяПокупки.Покупка)=Тип(Справочник.Коробки) Тогда 1 Иначе ПриходнаяПокупки.Количество Конец как Количество
		               |ИЗ
		               |	Документ.Приходная.Покупки КАК ПриходнаяПокупки
		               |ГДЕ
					   |	не ПриходнаяПокупки.Ссылка.Транзит 
		               |	и ПриходнаяПокупки.Ссылка = &Ссылка
					   |
					   |";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Приход(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Приход";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Приходная") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ПриходнаяПосылки.Ссылка.Дата КАК Период,
		               |	ПриходнаяПосылки.Габарит КАК Габарит,
		               |	ПриходнаяПосылки.МестоХранения КАК МестоХранения,
		               |	ПриходнаяПосылки.Посылка.Организатор КАК Организатор,
		               |	ПриходнаяПосылки.Посылка КАК Покупка,
		               |	1 КАК Количество,
		               |	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки) КАК Коробка,
		               |	ВЫБОР
		               |		Когда 		ПриходнаяПосылки.Посылка.ПунктВыдачи = &Курьер100сп или
		               |					(ПриходнаяПосылки.ПунктВыдачи <> &СвойПунктВыдачи и ПриходнаяПосылки.ПунктВыдачи = ПриходнаяПосылки.Посылка.ПунктВыдачи )  Тогда
		               |				ЗНАЧЕНИЕ(Перечисление.ТипыПриходов.НаТранзит)
		               |		КОГДА НЕ ПриходнаяПосылки.Ссылка.Транзит 
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриходов.НаСклад)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриходов.НаТранзит)
		               |	КОНЕЦ КАК ТипПрихода,
		               |	ВЫБОР
		               |		Когда 		ПриходнаяПосылки.Посылка.ПунктВыдачи = &Курьер100сп или
		               |					(ПриходнаяПосылки.ПунктВыдачи <> &СвойПунктВыдачи и ПриходнаяПосылки.ПунктВыдачи = ПриходнаяПосылки.Посылка.ПунктВыдачи )  Тогда
		               |				ПриходнаяПосылки.ПунктВыдачи
		               |		КОГДА НЕ ПриходнаяПосылки.Ссылка.Транзит 
		               |			ТОГДА &СвойПунктВыдачи
		               |		ИНАЧЕ ПриходнаяПосылки.ПунктВыдачи
		               |	КОНЕЦ КАК ПунктВыдачи,
		               |	ПриходнаяПосылки.ОтдельнымМестом КАК ОтдельнымМестом,
		               |	ПриходнаяПосылки.Посылка.Участник КАК Участник
		               |ИЗ
		               |	Документ.Приходная.Посылки КАК ПриходнаяПосылки
		               |ГДЕ
		            //   |	ПриходнаяПосылки.Отправлено
		               |	 ПриходнаяПосылки.Ссылка = &Ссылка
		               |	И НЕ ПриходнаяПосылки.Ссылка.ДелаемГрупповойСтикер
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ПриходнаяПокупки.Ссылка.Дата,
		               |	ПриходнаяПокупки.Габарит,
		               |	ПриходнаяПокупки.МестоХранения КАК МестоХранения,
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(Справочник.Покупки)
		               |			ТОГДА ПриходнаяПокупки.Покупка.Владелец
		               |		ИНАЧЕ ПриходнаяПокупки.Покупка.Организатор
		               |	КОНЕЦ,
		               |	ПриходнаяПокупки.Покупка,
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(Справочник.Коробки)
		               |			ТОГДА 1
		               |		ИНАЧЕ ПриходнаяПокупки.Количество
		               |	КОНЕЦ,
			           |	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки),
		               |	ВЫБОР
		               |		КОГДА НЕ ПриходнаяПокупки.Ссылка.Транзит 
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриходов.НаСклад)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриходов.НаТранзит)
		               |	КОНЕЦ,
		               |	ВЫБОР
		               |		КОГДА НЕ ПриходнаяПокупки.Ссылка.Транзит 
		               |			ТОГДА &СвойПунктВыдачи
		               |		ИНАЧЕ ПриходнаяПокупки.Ссылка.ПунктВыдачи
		               |	КОНЕЦ,		               
		               |	ПриходнаяПокупки.ОтдельнымМестом КАК ОтдельнымМестом,
		               |	ПриходнаяПокупки.Участник
		               |ИЗ
		               |	Документ.Приходная.Покупки КАК ПриходнаяПокупки
		               |ГДЕ
		               |	ПриходнаяПокупки.Ссылка = &Ссылка
		               |	И НЕ ПриходнаяПокупки.Ссылка.ДелаемГрупповойСтикер";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Транзит(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Транзит";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Приходная") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ПриходнаяПосылки.Ссылка.Дата 		КАК Период,
		|	ПриходнаяПосылки.Посылка 			КАК ПокупкаСсылка,
		|	ПриходнаяПосылки.МестоХранения 		КАК МестоХранения,
		|	ПриходнаяПосылки.Габарит 			КАК Габарит,
		|	ПриходнаяПосылки.Посылка.Участник 	КАК Участник,
		|	Выбор когда ПриходнаяПосылки.Посылка.ПунктВыдачи = &Курьер100сп Тогда ПриходнаяПосылки.Посылка.ПунктВыдачи
		|	Иначе ПриходнаяПосылки.ПунктВыдачи Конец КАК Точка,
		|	ПриходнаяПосылки.Ссылка 			КАК Партия,
		|	1 КАК Количество
		|ИЗ
		|	Документ.Приходная.Посылки КАК ПриходнаяПосылки
		|ГДЕ
		|	ПриходнаяПосылки.Отправлено и
	//	|	&ВозможностьИспользоватьТранзит и
		//|	И ПриходнаяПосылки.Ссылка.Транзит
		|	(ПриходнаяПосылки.ПунктВыдачи <> &СвойПунктВыдачи или
		|	   ПриходнаяПосылки.Посылка.ПунктВыдачи = &Курьер100сп)
		|	И ПриходнаяПосылки.Ссылка = &Ссылка
		|	И не ПриходнаяПосылки.Ссылка.ДелаемГрупповойСтикер
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриходнаяПокупки.Ссылка.Дата,
		|	ПриходнаяПокупки.Покупка,
		|	ПриходнаяПокупки.МестоХранения,
		|	ПриходнаяПокупки.Габарит,
		|	ПриходнаяПокупки.Участник,
		|	ПриходнаяПокупки.Ссылка.ПунктВыдачи,
		|	ПриходнаяПокупки.Ссылка,
		|	Выбор когда ТипЗначения(ПриходнаяПокупки.Покупка)=Тип(Справочник.Коробки) Тогда 1 Иначе ПриходнаяПокупки.Количество Конец как Количество
		|ИЗ
		|	Документ.Приходная.Покупки КАК ПриходнаяПокупки
		|ГДЕ
		|	ПриходнаяПокупки.Ссылка.Транзит
		//|	и &ВозможностьИспользоватьТранзит 
		|	И ПриходнаяПокупки.Ссылка = &Ссылка
		|	И не ПриходнаяПокупки.Ссылка.ДелаемГрупповойСтикер
		|
		|";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_КПолучению(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "КПолучению";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Приходная") Тогда
		   
		ТекстЗапроса = "
					   |
					   |ВЫБРАТЬ
		               |	&Период КАК Период,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		               |	КПолучениюОстатки.КоличествоОстаток КАК Количество,
		               |	КПолучениюОстатки.ДокументВыдачи КАК ДокументВыдачи,
		               |	КПолучениюОстатки.Покупка КАК Покупка,
		               |	КПолучениюОстатки.Участник КАК Участник
		               |ИЗ
		               |	РегистрНакопления.КПолучению.Остатки(
		               |			ДОБАВИТЬКДАТЕ(&Период, СЕКУНДА, -1),
		               |			(Участник, Покупка) В
		               |				(ВЫБРАТЬ
		               |					ПриходнаяПокупки.Участник КАК Участник,
		               |					ПриходнаяПокупки.Покупка КАК Покупка
		               |				ИЗ
		               |					Документ.Приходная.Покупки КАК ПриходнаяПокупки
		               |				ГДЕ
		               |					ПриходнаяПокупки.Ссылка = &Ссылка
		               |			
		               |				ОБЪЕДИНИТЬ ВСЕ
		               |			
		               |				ВЫБРАТЬ
		               |					ПриходнаяПосылки.Посылка.Участник,
		               |					ПриходнаяПосылки.Посылка
		               |				ИЗ
		               |					Документ.Приходная.Посылки КАК ПриходнаяПосылки
		               |				ГДЕ
		               |					ПриходнаяПосылки.Ссылка = &Ссылка)) КАК КПолучениюОстатки
		               |ГДЕ
		               |	КПолучениюОстатки.КоличествоОстаток > 0
					   |
					   |";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_ОстаткиНаСкладе(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ОстаткиНаСкладе";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Приходная") Тогда
		ТекстЗапроса ="ВЫБРАТЬ
		              |	ПриходнаяПосылки.Ссылка.Дата КАК Период,
		              |	ПриходнаяПосылки.ШК КАК ШК,
		              |	ПриходнаяПосылки.Ссылка.ПунктВыдачи КАК ПунктВыдачи,
		              |	ПриходнаяПосылки.МестоХранения КАК МестоХранения,
		              |	ПриходнаяПосылки.Габарит КАК Габарит,
		              |	ПриходнаяПосылки.Ссылка КАК Партия,
		              |	1 КАК Количество,
		              |	ПриходнаяПосылки.Посылка.Участник КАК Участник
		              |ИЗ
		              |	Документ.Приходная.Посылки КАК ПриходнаяПосылки
		              |ГДЕ
		              |	ПриходнаяПосылки.Ссылка = &Ссылка
		              |	И ПриходнаяПосылки.Отправлено
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	ПриходнаяПокупки.Ссылка.Дата,
		              |	ПриходнаяПокупки.ШК,
		              |	ПриходнаяПокупки.Ссылка.ПунктВыдачи,
		              |	ПриходнаяПокупки.МестоХранения,
		              |	ПриходнаяПокупки.Габарит,
		              |	ПриходнаяПокупки.Ссылка,
		              |	ВЫБОР
		              |		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(Справочник.Коробки)
		              |			ТОГДА 1
		              |		ИНАЧЕ ПриходнаяПокупки.Количество
		              |	КОНЕЦ,
		              |	ПриходнаяПокупки.Участник
		              |ИЗ
		              |	Документ.Приходная.Покупки КАК ПриходнаяПокупки
		              |ГДЕ
		              |	ПриходнаяПокупки.Ссылка = &Ссылка";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_ДанныеЗаказов(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ДанныеЗаказов";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Приходная") Тогда
		ТекстЗапроса ="ВЫБРАТЬ
		              |	Посылки.Ссылка.Дата КАК Период,
		              |	Посылки.Ссылка КАК Партия,
		              |	Посылки.Посылка КАК Заказ,
		              |	Посылки.Габарит КАК Габарит,
		              |	Посылки.Вес КАК Вес,
		              |	Посылки.объем КАК Объем,
		              |	1 КАК Количество,
		              |	Посылки.ОтдельнымМестом КАК ОтдельнымМестом,
		              |	Посылки.ДатаПриема КАК ДатаПриема,
		              |	НЕ Посылки.Оплачен КАК НеОплачен,
		              |	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки) КАК Коробка,
		              |	Посылки.МестоХранения КАК МестоХранения
		              |ИЗ
		              |	Документ.Приходная.Посылки КАК Посылки
		              |ГДЕ
		              |	Посылки.Ссылка = &Ссылка
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	Покупки.Ссылка.Дата,
		              |	Покупки.Ссылка,
		              |	Покупки.Покупка,
		              |	Покупки.Габарит,
		              |	Покупки.Вес,
		              |	Покупки.объем,
		              |	1,
		              |	Покупки.ОтдельнымМестом,
		              |	Покупки.ДатаПриема,
		              |	НЕ Покупки.Оплачен,
		              |	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки),
		              |	Покупки.МестоХранения
		              |ИЗ
		              |	Документ.Приходная.Покупки КАК Покупки
		              |ГДЕ
		              |	ТИПЗНАЧЕНИЯ(Покупки.Покупка) = ТИП(Справочник.Коробки)
		              |	И Покупки.Ссылка = &Ссылка";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_ДанныеЗаказовСайт(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ДанныеЗаказовСайт";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
		            
	
	
		ТекстЗапроса ="ВЫБРАТЬ
		              |	Посылки.Ссылка КАК Партия,
		              |	Посылки.Посылка КАК Заказ,
		              |	Посылки.Посылка.БесплатнаяВыдача КАК БесплатнаяВыдача,
		              |	Посылки.Посылка.НадбавкаЗаОбработку КАК НадбавкаЗаОбработку,
		              |	Посылки.Посылка.ПерваяТочка КАК ПерваяТочка,
		              |	Посылки.Посылка.ПунктВыдачи КАК ПунктВыдачи,
		              |	Посылки.Посылка.Покупка КАК Покупка,
		              |	Посылки.Посылка.Организатор КАК Организатор,
		              |	Посылки.Посылка.secureCode КАК secureCode,
		              |	Посылки.Посылка.Участник КАК Участник
		              |ИЗ
		              |	Документ.Приходная.Посылки КАК Посылки
		              |ГДЕ
		              |	Посылки.Ссылка = &Ссылка
		              |	И Посылки.Отправлено";
					  //|
					  //|ОБЪЕДИНИТЬ ВСЕ
					  //|
					  //|ВЫБРАТЬ
					  //|	Группы.Ссылка,
					  //|	Группы.Покупка,
					  //|	ЛОЖЬ,
					  //|	0,
					  //|	Группы.Покупка.ПерваяТочка,
					  //|	Группы.Покупка.ТочкаНазначения,
					  //|	ЗНАЧЕНИЕ(Справочник.Покупки.ПустаяСсылка),
					  //|	Группы.Покупка.Организатор,
					  //|	"""",
					  //|	ЗНАЧЕНИЕ(Справочник.Участники.ПустаяСсылка)
					  //|ИЗ
					  //|	Документ.Приходная.Покупки КАК Группы
					  //|ГДЕ
					  //|	Группы.Ссылка = &Ссылка
					  //|	И ТИПЗНАЧЕНИЯ(Группы.Покупка) = ТИП(Справочник.Коробки)";


	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции


Функция Получить_ТекстЗапроса_ОборотнаяТараДвижение(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ОборотнаяТараДвижение";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Приходная") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	&Период КАК Период,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		               |	ОборотнаяТараДвижениеОстатки.Тара КАК Тара,
		               |	ОборотнаяТараДвижениеОстатки.ПунктВыдачи КАК ПунктВыдачи,
		               |	ОборотнаяТараДвижениеОстатки.ВПутиОстаток КАК ВПути,
		               |	0 КАК НаСкладе,
		               |	ОборотнаяТараДвижениеОстатки.Партия КАК Партия
		               |ИЗ
		               |	РегистрНакопления.ОборотнаяТараДвижение.Остатки(
		               |			&НачалоДокумента,
		               |			Тара В
		               |					(ВЫБРАТЬ
		               |						РазборКоробкиОборотнаяТара.Тара КАК Тара
		               |					ИЗ
		               |						Документ.РазборКоробки.ОборотнаяТара КАК РазборКоробкиОборотнаяТара
		               |					ГДЕ
		               |						РазборКоробкиОборотнаяТара.Ссылка = &Ссылка)
		               |				И Партия.Дата < &Период) КАК ОборотнаяТараДвижениеОстатки
		               |ГДЕ
		               |	ОборотнаяТараДвижениеОстатки.ВПутиОстаток > 0
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	&Период,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
		               |	ОборотнаяТараДвижениеОстатки.Тара,
		               |	ОборотнаяТараДвижениеОстатки.ПунктВыдачи,
		               |	0,
		               |	ОборотнаяТараДвижениеОстатки.НаСкладеОстаток,
		               |	ОборотнаяТараДвижениеОстатки.Партия
		               |ИЗ
		               |	РегистрНакопления.ОборотнаяТараДвижение.Остатки(
		               |			&НачалоДокумента,
		               |			Тара В
		               |					(ВЫБРАТЬ
		               |						РазборКоробкиОборотнаяТара.Тара КАК Тара
		               |					ИЗ
		               |						Документ.РазборКоробки.ОборотнаяТара КАК РазборКоробкиОборотнаяТара
		               |					ГДЕ
		               |						РазборКоробкиОборотнаяТара.Ссылка = &Ссылка)
		               |				И Партия.Дата < &Период) КАК ОборотнаяТараДвижениеОстатки
		               |ГДЕ
		               |	ОборотнаяТараДвижениеОстатки.НаСкладеОстаток > 0
					   
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ПриходнаяОборотнаяТара.Ссылка.Дата,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		               |	ПриходнаяОборотнаяТара.Тара,
		               |	ПриходнаяОборотнаяТара.ПунктВыдачи,
		               |	0,
		               |	1,
		               |	ПриходнаяОборотнаяТара.Ссылка
		               |ИЗ
		               |	Документ.Приходная.ОборотнаяТара КАК ПриходнаяОборотнаяТара
		               |ГДЕ
		               |	ПриходнаяОборотнаяТара.Ссылка = &Ссылка";
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции







Функция Получить_ТекстЗапроса_ШтрафныеЗаказы(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "ШтрафныеЗаказы";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Приходная") Тогда
		
		ТекстЗапроса = 
		
		
		
		
		"ВЫБРАТЬ
		|	ПриходнаяПосылки.Ссылка.Дата КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки) КАК Коробка,
		|	ПриходнаяПосылки.Посылка.Организатор КАК Организатор,
		|	ПриходнаяПосылки.ПунктВыдачи,
		|	0 КАК Разобрано,
		|	0 КАК Штраф,
		|	0 КАК ГруппыНаТранзит,
		|	СУММА(1) КАК Одиночные
		|ИЗ
		|	Документ.Приходная.Посылки КАК ПриходнаяПосылки
		|ГДЕ
		|	ПриходнаяПосылки.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ПриходнаяПосылки.Ссылка.Дата,
		|	ПриходнаяПосылки.Посылка.Организатор,
		|	ПриходнаяПосылки.ПунктВыдачи,
		|	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриходнаяПокупки.Ссылка.Дата,
		|	ПриходнаяПокупки.Покупка,
		|	ПриходнаяПокупки.Организатор,
		|	ПриходнаяПокупки.Ссылка.ПунктВыдачи,
		|	0,
		|	0,
		|	ПриходнаяПокупки.Покупка.Количество,
		|	0
		|ИЗ
		|	Документ.Приходная.Покупки КАК ПриходнаяПокупки
		|ГДЕ
		|	ПриходнаяПокупки.Ссылка = &Ссылка
		|	И ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(Справочник.Коробки)";
	КонецЕсли;
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции







