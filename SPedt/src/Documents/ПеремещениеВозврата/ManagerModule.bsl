
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
    КомандаПечати 					= КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 	= "Документ.ПеремещениеВозврата";
    КомандаПечати.Идентификатор 	= "ПеремещениеВозврата";
	КомандаПечати.Картинка 			= БиблиотекаКартинок.Печать;
    КомандаПечати.Представление 	= НСтр("ru = 'Перемещение возврата (чек)'");
	
	
КонецПроцедуры



// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  – Массив    – ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати – Структура – дополнительные настройки печати;
//  КоллекцияПечатныхФорм – ТаблицаЗначений – сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         – СписокЗначений  – значение – ссылка на объект;
//                                            представление – имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       – Структура       – дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	#Если Сервер Тогда 
	ИмяМакета = "ПеремещениеВозврата";	
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета);
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        ИмяМакета,          
        НСтр("ru = 'Перемещение возврата (чек)'"),
        Печать_ЧекВозвратПокупокОрагнизатору(МассивОбъектов, ОбъектыПечати),
        ,
        "Документ.ВозвратПокупокОрганизатору.ПФ_MXL_ЧекВозвратПокупокОрагнизатору");
	КонецЕсли;
#КонецЕсли 	
КонецПроцедуры


Функция Печать_ЧекВозвратПокупокОрагнизатору(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент				= Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб	= Истина;
	ТабличныйДокумент.ПолеСлева		= 0;
	ТабличныйДокумент.ПолеСправа	= 0;	 
	
	Макет 	= Документы.ПеремещениеВозврата.ПолучитьМакет("ПФ_MXL_ЧекПеремещениеВозврата");
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупки 			= Макет.ПолучитьОбласть("Покупки");
	ОбластьШтрихКод			= Макет.ПолучитьОбласть("ШтрихКод"); 
	ОбластьШтрихКодСтрока	= Макет.ПолучитьОбласть("ШтрихКодСтрока"); 
	
	Запрос 	= Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеВозврата.Дата,
	|	ПеремещениеВозврата.Номер,
	|	ПеремещениеВозврата.Покупки.(
	|		Организатор КАК организатор,
	|		Участник,
	|		Покупка,
	|		Количество
	|	)
	|ИЗ
	|	Документ.ПеремещениеВозврата КАК ПеремещениеВозврата
	|ГДЕ
	|	ПеремещениеВозврата.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПеремещениеВозврата.Покупки.Организатор.Наименование";
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();

	ТабличныйДокумент.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ОбластьШапка.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапка, Выборка.Уровень());

		ВыборкаПокупки = Выборка.Покупки.Выбрать();
		Пока ВыборкаПокупки.Следующий() Цикл
			ОбластьПокупки.Параметры.Заполнить(ВыборкаПокупки);
			ТабличныйДокумент.Вывести(ОбластьПокупки, ВыборкаПокупки.Уровень());

			Если ТипЗнч(ВыборкаПокупки.ПОкупка) = Тип("СправочникСсылка.Посылки") Тогда
				ШтрихКод = ВыборкаПокупки.ПОкупка.ШК.Код;
				ПараметрыШтрихкода = Новый Структура;
				ПараметрыШтрихкода.Вставить("Ширина", 450);
				ПараметрыШтрихкода.Вставить("Высота", 120);
				ПараметрыШтрихкода.Вставить("Штрихкод", ШтрихКод);
				ПараметрыШтрихкода.Вставить("ТипКода", 4);
				ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
				ПараметрыШтрихкода.Вставить("РазмерШрифта", 10);
				ПараметрыШтрихкода.Вставить("УголПоворота", 0); //Одно из следующих значений: 0, 90, 180, 270.
				ПараметрыШтрихкода.Вставить("ПрозрачныйФон", Истина);
				ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0); //Одно из следующих значений: //0, 1, 2, 3. Соответствует: L, M, Q, H.
				РисунокШтрихкод = ОбластьШтрихКод.Рисунки.РисунокШтрихкод;
				РисунокШтрихкод.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				РисунокШтрихкод.РазмерКартинки = РазмерКартинки.Пропорционально; 
				РисунокШтрихкод.Расположить(ОбластьШтрихКод.Области.ШтрихКод);
				ТабличныйДокумент.Вывести(ОбластьШтрихКод, Выборка.Уровень());
				
				ОбластьШтрихКодСтрока.Параметры.ШтрихКодСтрока = ШтрихКод;
				ТабличныйДокумент.Вывести(ОбластьШтрихКодСтрока, Выборка.Уровень());
			КонецЕсли
			;
		КонецЦикла;
		
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	Возврат ТабличныйДокумент;
КонецФункции	


#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	ТекстыЗапроса = Новый СписокЗначений;
	//СтоСПОбмен_Общий.Получить_ТекстЗапроса_Обмен100сп (Запрос, ТекстыЗапроса, Регистры);
	//Получить_ТекстЗапроса_Транзит(			Запрос, ТекстыЗапроса, Регистры);
	//Получить_ТекстЗапроса_СобранныеЗаказы(Запрос, ТекстыЗапроса, Регистры);
	//Получить_ТекстЗапроса_УпакованныеЗаказы(Запрос, ТекстыЗапроса, Регистры);	
	//Получить_ТекстЗапроса_Расход(			Запрос, ТекстыЗапроса, Регистры);
	
	//Получить_ТекстЗапроса_Обмен100СПрн(		Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Обмен100СПрн_Ошибки (Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_НеВыгруженноНаСайт(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Возвраты(Запрос, ТекстыЗапроса, Регистры); 
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	//Запрос.УстановитьПараметр("Период",                        Реквизиты.Период);
	//Запрос.УстановитьПараметр("Номер",                         Реквизиты.Номер);
	//Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	//Запрос.УстановитьПараметр("Комментарий",                   Реквизиты.Комментарий);
	//Запрос.УстановитьПараметр("ПометкаУдаления",               Реквизиты.ПометкаУдаления);
	//Запрос.УстановитьПараметр("Проведен",                      Реквизиты.Проведен);
КонецПроцедуры


Функция Получить_ТекстЗапроса_Обмен100СПрн(Запрос, ТекстыЗапроса, Регистры) 
	
	ИмяРегистра = "Обмен100СПрн";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ПеремещениеВозврата") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ПеремещениеВозврата.Ссылка.Дата КАК Период,
		               |	1 КАК КоличествоНеОтправленых,
		               |	ПеремещениеВозврата.Ссылка КАК Партия,
		               |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ПотерянныеЗаказы) КАК ТипОбмена
		               |ИЗ
		               |	Документ.ПеремещениеВозврата КАК ПеремещениеВозврата
		               |ГДЕ
		               |	ПеремещениеВозврата.Ссылка = &Ссылка
		               |	И НЕ ПеремещениеВозврата.Списать";
		
	КонецЕсли;	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Обмен100СПрн_Ошибки (Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "Обмен100СПрн_Ошибки";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 


	ТекстЗапроса =  "ВЫБРАТЬ
	                |	ПеремещениеВозвратаПокупки.Ссылка.Дата КАК Период,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ПеремещениеВозврата) КАК типОбмена,
	                |	ПеремещениеВозвратаПокупки.Партия КАК Партия,
	                |	ПеремещениеВозвратаПокупки.НомерСтроки КАК СтрокаВПартии,
	                |	ПеремещениеВозвратаПокупки.Покупка.ШК КАК Мегаордер,
	                |	""Не Выполнен обмен!"" КАК СообщениеОшибки,
	                |	1 КАК КоличествоНеИсправленных
	                |ИЗ
	                |	Документ.ПеремещениеВозврата.Покупки КАК ПеремещениеВозвратаПокупки
	                |ГДЕ
	                |	ПеремещениеВозвратаПокупки.Ссылка = &Ссылка
	                |	И НЕ ПеремещениеВозвратаПокупки.Отправлено
	                |	И НЕ ПеремещениеВозвратаПокупки.Ссылка.Списать";
	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
КонецФункции

Функция Получить_ТекстЗапроса_НеВыгруженноНаСайт(Запрос, ТекстыЗапроса, Регистры) 
	ИмяРегистра = "НеВыгруженноНаСайт";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	 ТекстЗапроса = "
		 |
		 |ВЫБРАТЬ
		 |	ПеремещениеВозвратаПокупки.Ссылка.Дата 		КАК Период,
		 |	ПеремещениеВозвратаПокупки.Покупка 			КАК Заказ,
		 |	ПеремещениеВозвратаПокупки.МестоХранения 	КАК МестоХранения,
	//	 |	Значение(Справочник.Габариты.ПустаяСсылка)	КАК Габарит,
	//	 |	Значение(Справочник.Коробки.БезКоробки) 	КАК Коробка,
		 |	ПеремещениеВозвратаПокупки.Ссылка.ТочкаРаздачи 		КАК ПунктВыдачи,
		 |	ПеремещениеВозвратаПокупки.Ссылка 			КАК Партия,
		 |	1 КАК Количество
		 |ИЗ
		 |	Документ.ПеремещениеВозврата.Покупки КАК ПеремещениеВозвратаПокупки
		 |ГДЕ
		 |	ПеремещениеВозвратаПокупки.Ссылка = &Ссылка
		 |	И НЕ ПеремещениеВозвратаПокупки.Ссылка.Отправлено
		 |	И не ПеремещениеВозвратаПокупки.Ссылка.Списать
		 |
		 |";


	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции


Функция Получить_ТекстЗапроса_Возвраты(Запрос, ТекстыЗапроса, Регистры) 
	ИмяРегистра = "Возвраты";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	 ТекстЗапроса = "
		 |
		 |ВЫБРАТЬ
		 |	ПеремещениеВозвратаПокупки.Ссылка.Дата 		КАК Период,
		 |	Значение(ВидДвиженияНакопления.Расход)		как ВидДвижения,
		 |	ПеремещениеВозвратаПокупки.Организатор		КАК Организатор,
		 |	ПеремещениеВозвратаПокупки.Участник			КАК Участник,
		 |	ПеремещениеВозвратаПокупки.Покупка 			КАК Покупка,
		 |	ПеремещениеВозвратаПокупки.МестоХранения 	КАК МестоХранения,
		 |	ПеремещениеВозвратаПокупки.Партия 			КАК Партия,
		 |	1 КАК Количество
		 |ИЗ
		 |	Документ.ПеремещениеВозврата.Покупки КАК ПеремещениеВозвратаПокупки
		 |ГДЕ
		 |	ПеремещениеВозвратаПокупки.Ссылка = &Ссылка
		 |
		 |";


	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

	
	
КонецФункции


#КонецОбласти


Функция ПолучитьТэг_returnsTransfer(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеВозвратаПокупки.Покупка 				КАК Посылка,
		|	ПеремещениеВозвратаПокупки.Ссылка.Дата 			КАК Дата,
		|	ПеремещениеВозвратаПокупки.Ссылка.Номер 		КАК Номер,
		|	ПеремещениеВозвратаПокупки.Ссылка.ТочкаРаздачи 	КАК ТочкаРаздачи
		
		|ИЗ
		|	Документ.ПеремещениеВозврата.Покупки КАК ПеремещениеВозвратаПокупки
		|ГДЕ
		|	ПеремещениеВозвратаПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И ПеремещениеВозвратаПокупки.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", 	НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", 		Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("returnsTransfer");
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				Выборка.Дата);
		СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber",       Прав(Выборка.Номер,(СтрДлина(Выборка.Номер)-3)));
		СтоСП.Вставить_Тэг(ЗаписьXML,"distributorCode",     Выборка.ТочкаРаздачи.Код);
		СтоСП.Вставить_Тэг(ЗаписьXML,"packageId",           Формат(Выборка.Посылка.Код,"ЧГ=0"));
		СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",           "package");
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	
	Возврат рез;
КонецФункции




Функция ПолучитьТэг_discard(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвижениеПокупки.Ссылка.Дата КАК Дата,
		|	ДвижениеПокупки.Ссылка.Номер КАК Номер,
		|	ДвижениеПокупки.Покупка КАК Покупка,
		|	ДвижениеПокупки.Участник КАК Участник,
		|	ДвижениеПокупки.Покупка.ШК КАК ШК
		|ИЗ
		|	Документ.ПеремещениеВозврата.Покупки КАК ДвижениеПокупки
		|ГДЕ                                                              
		|	ДвижениеПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И ДвижениеПокупки.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		//Если ТипЗнч(Выборка.ШК.Покупка)=Тип("СправочникСсылка.Посылки") и Выборка.ШК.Покупка.Состав.Количество()=0 Тогда Продолжить; КонецЕсли;
//		Если ТипЗнч(Выборка.ШК.Покупка)=Тип("СправочникСсылка.Посылки") Тогда
//			ШК = Выборка.ШК.Покупка.Покупка.Состав[0].ШК;
//		Иначе
//			ШК= Выборка.ШК;
//		Конецесли;
		
		ШК= Выборка.ШК;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("discard");
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				Выборка.Дата);
		Если Выборка.ШК.типМегаордера = Перечисления.типМегаордера.Посылка Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"packageId",           Формат(Выборка.ШК.Посылка.Код,"ЧГ=0"));  
			СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",           "package");
		ИначеЕсли Выборка.ШК.типМегаордера = Перечисления.типМегаордера.Коробка Тогда	                 
			СтоСП.Вставить_Тэг(ЗаписьXML,"groupCode",           Формат(Число(Выборка.ШК.Покупка.Код),"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",         "group");
			СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(?(ЗначениеЗаполнено(ШК.Организатор),ШК.Организатор.Код,ШК.Покупка.Организатор.Код)),"ЧГ=0"));
	    КонецЕсли;
//			СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.Участник.Код),"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"arrivalNumber",        Прав(Выборка.Номер,(СтрДлина(Выборка.Номер)-3)));
			СтоСП.Вставить_Тэг(ЗаписьXML, "innerId", 			Формат(Число(Прав(Выборка.Номер, (СтрДлина(Выборка.Номер)- 3))),"ЧГ=0"));
			
		//	СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(?(ЗначениеЗаполнено(ШК.Посылка.Организатор),ШК.Посылка.Организатор.Код,0)),"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"discardType"	,		"distributorDiscard");			
		//Иначе
		//	СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.ШК.Участник.Код),"ЧГ=0"));
		//	СтоСПОбмен_Общий.ЗаполнитьТэгиЗаказаПо_ШК(ШК,ЗаписьXML);		
			
		//КонецЕсли;		
			
			
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
КонецФункции




Функция ПолноеИмяОбъекта()
	Возврат "Документ.ПеремещениеВозврата";
КонецФункции

