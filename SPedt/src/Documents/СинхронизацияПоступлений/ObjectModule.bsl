

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	Данные.Партия.Дата КАК Период,
	               	|	Данные.Заказ КАК Заказ,
	               	|	Данные.Коробка КАК Коробка,
	               	|	Данные.Партия КАК Партия,
	               	|	Данные.МестоХранения КАК МестоХранения,
	               	|	Данные.Габарит КАК Габарит,
	               	|	Данные.ПунктВыдачиНаСтикере КАК ПунктВыдачиНаСтикере,
	               	|	Данные.Количество КАК Количество,
	               	|	Данные.БесплатнаяВыдача КАК БесплатнаяВыдача,
	               	|	Данные.НадбавкаЗаОбработку КАК НадбавкаЗаОбработку,
	               	|	Данные.ПерваяТочка КАК ПерваяТочка,
	               	|	Данные.АктуальнаяПерваяТочка КАК АктуальнаяПерваяТочка,
	               	|	Данные.ПунктВыдачи КАК ПунктВыдачи,
	               	|	Данные.Покупка КАК Покупка,
	               	|	Данные.Организатор КАК Организатор,
	               	|	Данные.Участник КАК Участник,
	               	|	Данные.secureCode КАК secureCode,
	               	|	Данные.НомерСтроки КАК НомерСтроки,
	               	|	Данные.Сообщение КАК Сообщение,
	               	|	Данные.Ссылка.Отправлено КАК Отправлено,
	               	|	Данные.Обработано КАК Обработано,
	               	|	Данные.Ошибка КАК Ошибка,
	               	|	Данные.НеЗагруженСоставПосылки КАК НеЗагруженСоставПосылки,
	               	|	НЕ Данные.НеОплачен КАК Оплачен,
	               	|	ВЫБОР
	               	|		КОГДА ТИПЗНАЧЕНИЯ(Данные.Заказ) = ТИП(Справочник.Посылки)
	               	|				И (Данные.ПунктВыдачи.ТранспортнаяКомпания
	               	|					ИЛИ Данные.ПунктВыдачиНаСтикере.ТранспортнаяКомпания)
	               	|				И Данные.Обработано
	               	|			ТОГДА ИСТИНА
	               	|		ИНАЧЕ ЛОЖЬ
	               	|	КОНЕЦ КАК ЗаказТК,
	               	|	ВЫБОР
	               	|		КОГДА ТИПЗНАЧЕНИЯ(Данные.Заказ) = ТИП(Справочник.Коробки)
	               	|				ИЛИ ТИПЗНАЧЕНИЯ(Данные.Партия) = ТИП(Документ.ЗаказыДляТранзита)
	               	|				ИЛИ (Данные.ПунктВыдачиНаСтикере <> Данные.Партия.СвояТочка
	               	|					ИЛИ Данные.ПунктВыдачи = &Курьер100сп)
	               	|			ТОГДА ИСТИНА
	               	|		ИНАЧЕ ЛОЖЬ
	               	|	КОНЕЦ КАК ЭтоТранзит,
	               	|	Данные.КоличествоВсего КАК КоличествоВсего,
	               	|	Данные.КоличествоКомпенсироаннаДоставка КАК КоличествоКомпенсироаннаДоставка,
	               	|	Данные.ПредоплаченоУчастником КАК ПредоплаченоУчастником
	               	|ПОМЕСТИТЬ втИздокумента
	               	|ИЗ
	               	|	Документ.СинхронизацияПоступлений.Данные КАК Данные
	               	|ГДЕ
	               	|	Данные.Ссылка = &Ссылка
	               	|	И НЕ Данные.ИзмененВПартии
	               	|	И Данные.Ссылка.Отправлено
	               	|
	               	|ИНДЕКСИРОВАТЬ ПО
	               	|	Заказ,
	               	|	Партия
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	ДанныеЗаказовСайт.Заказ КАК Заказ,
	               	|	ДанныеЗаказовСайт.Партия КАК Партия,
	               	|	ДанныеЗаказовСайт.Регистратор КАК Регистратор
	               	|ПОМЕСТИТЬ Проверка
	               	|ИЗ
	               	|	РегистрСведений.ДанныеЗаказовСайт КАК ДанныеЗаказовСайт
	               	|ГДЕ
	               	|	(ДанныеЗаказовСайт.Заказ, ДанныеЗаказовСайт.Партия) В
	               	|			(ВЫБРАТЬ
	               	|				втИздокумента.Заказ КАК Заказ,
	               	|				втИздокумента.Партия КАК Партия
	               	|			ИЗ
	               	|				втИздокумента КАК втИздокумента)
	               	|	И ДанныеЗаказовСайт.Регистратор <> &Ссылка
	               	|
	               	|ИНДЕКСИРОВАТЬ ПО
	               	|	Заказ,
	               	|	Партия
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	втИздокумента.Период КАК Период,
	               	|	втИздокумента.Заказ КАК Заказ,
	               	|	втИздокумента.Коробка КАК Коробка,
	               	|	втИздокумента.Партия КАК Партия,
	               	|	втИздокумента.МестоХранения КАК МестоХранения,
	               	|	втИздокумента.Габарит КАК Габарит,
	               	|	втИздокумента.ПунктВыдачиНаСтикере КАК ПунктВыдачиНаСтикере,
	               	|	втИздокумента.Количество КАК Количество,
	               	|	втИздокумента.БесплатнаяВыдача КАК БесплатнаяВыдача,
	               	|	втИздокумента.НадбавкаЗаОбработку КАК НадбавкаЗаОбработку,
	               	|	втИздокумента.ПерваяТочка КАК ПерваяТочка,
	               	|	втИздокумента.АктуальнаяПерваяТочка КАК АктуальнаяПерваяТочка,
	               	|	втИздокумента.ПунктВыдачи КАК ПунктВыдачи,
	               	|	втИздокумента.Покупка КАК Покупка,
	               	|	втИздокумента.Организатор КАК Организатор,
	               	|	втИздокумента.Участник КАК Участник,
	               	|	втИздокумента.secureCode КАК secureCode,
	               	|	втИздокумента.НомерСтроки КАК НомерСтроки,
	               	|	втИздокумента.Сообщение КАК Сообщение,
	               	|	втИздокумента.Отправлено КАК Отправлено,
	               	|	втИздокумента.Обработано КАК Обработано,
	               	|	втИздокумента.Ошибка КАК Ошибка,
	               	|	втИздокумента.НеЗагруженСоставПосылки КАК НеЗагруженСоставПосылки,
	               	|	втИздокумента.Оплачен КАК Оплачен,
	               	|	втИздокумента.ЗаказТК КАК ЗаказТК,
	               	|	втИздокумента.ЭтоТранзит КАК ЭтоТранзит,
	               	|	втИздокумента.КоличествоВсего КАК КоличествоВсего,
	               	|	втИздокумента.КоличествоКомпенсироаннаДоставка КАК КоличествоКомпенсироаннаДоставка,
	               	|	втИздокумента.ПредоплаченоУчастником КАК ПредоплаченоУчастником
	               	|ПОМЕСТИТЬ таблицаДокумента
	               	|ИЗ
	               	|	втИздокумента КАК втИздокумента
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ Проверка КАК Проверка
	               	|		ПО втИздокумента.Заказ = Проверка.Заказ
	               	|			И втИздокумента.Партия = Проверка.Партия
	               	|ГДЕ
	               	|	Проверка.Регистратор ЕСТЬ NULL
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	таблицаДокумента.Период КАК Период,
	               	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	               	|	таблицаДокумента.Заказ КАК Заказ,
	               	|	таблицаДокумента.МестоХранения КАК МестоХранения,
	               	|	таблицаДокумента.ПунктВыдачиНаСтикере КАК ПунктВыдачи,
	               	|	таблицаДокумента.Партия КАК Партия,
	               	|	таблицаДокумента.Количество КАК Количество
	               	|ИЗ
	               	|	таблицаДокумента КАК таблицаДокумента
	               	|ГДЕ
	               	|	таблицаДокумента.Отправлено
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	таблицаДокумента.Заказ КАК Заказ,
	               	|	таблицаДокумента.Партия КАК Партия,
	               	|	таблицаДокумента.БесплатнаяВыдача КАК БесплатнаяВыдача,
	               	|	таблицаДокумента.НадбавкаЗаОбработку КАК НадбавкаЗаОбработку,
	               	|	таблицаДокумента.ПерваяТочка КАК ПерваяТочка,
	               	|	таблицаДокумента.АктуальнаяПерваяТочка КАК АктуальнаяПерваяТочка,
	               	|	таблицаДокумента.ПунктВыдачи КАК ПунктВыдачи,
	               	|	таблицаДокумента.Покупка КАК Покупка,
	               	|	таблицаДокумента.Организатор КАК Организатор,
	               	|	таблицаДокумента.secureCode КАК secureCode,
	               	|	таблицаДокумента.Участник КАК Участник,
	               	|	таблицаДокумента.КоличествоВсего КАК КоличествоВсего,
	               	|	таблицаДокумента.КоличествоКомпенсироаннаДоставка КАК КоличествоКомпенсироаннаДоставка,
	               	|	таблицаДокумента.ПредоплаченоУчастником КАК ПредоплаченоУчастником
	               	|ИЗ
	               	|	таблицаДокумента КАК таблицаДокумента
	               	|ГДЕ
	               	|	таблицаДокумента.Отправлено
	               	|	И таблицаДокумента.Обработано
	               	|	И НЕ таблицаДокумента.Ошибка
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	таблицаДокумента.Период КАК Период,
	               	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	               	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ЗагрузкаПосылок) КАК типОбмена,
	               	|	таблицаДокумента.Партия КАК Партия,
	               	|	таблицаДокумента.НомерСтроки КАК СтрокаВПартии,
	               	|	таблицаДокумента.Заказ.ШК КАК Мегаордер,
	               	|	таблицаДокумента.Сообщение КАК СообщениеОшибки,
	               	|	1 КАК КоличествоНеИсправленных,
	               	|	таблицаДокумента.ПунктВыдачиНаСтикере КАК ПунктВыдачиНаСтикере,
	               	|	таблицаДокумента.ПунктВыдачи КАК ПунктВыдачиНовый
	               	|ИЗ
	               	|	таблицаДокумента КАК таблицаДокумента
	               	|ГДЕ
	               	|	(таблицаДокумента.Ошибка
	               	|			ИЛИ таблицаДокумента.НеЗагруженСоставПосылки)
	               	|
	               	|ОБЪЕДИНИТЬ ВСЕ
	               	|
	               	|ВЫБРАТЬ
	               	|	таблицаДокумента.Период,
	               	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	               	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ЗагрузкаПосылок),
	               	|	таблицаДокумента.Партия,
	               	|	таблицаДокумента.НомерСтроки,
	               	|	таблицаДокумента.Заказ.ШК,
	               	|	""Не найдено в ответе"",
	               	|	1,
	               	|	таблицаДокумента.ПунктВыдачиНаСтикере,
	               	|	таблицаДокумента.ПунктВыдачи
	               	|ИЗ
	               	|	таблицаДокумента КАК таблицаДокумента
	               	|ГДЕ
	               	|	НЕ таблицаДокумента.Обработано
	               	|	И НЕ таблицаДокумента.Ошибка
	               	|
	               	|ОБЪЕДИНИТЬ ВСЕ
	               	|
	               	|ВЫБРАТЬ
	               	|	таблицаДокумента.Период,
	               	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	               	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ЗагрузкаПосылок),
	               	|	таблицаДокумента.Партия,
	               	|	таблицаДокумента.НомерСтроки,
	               	|	таблицаДокумента.Заказ.ШК,
	               	|	""Изменился пункт выдачи"",
	               	|	1,
	               	|	таблицаДокумента.ПунктВыдачиНаСтикере,
	               	|	таблицаДокумента.ПунктВыдачи
	               	|ИЗ
	               	|	таблицаДокумента КАК таблицаДокумента
	               	|ГДЕ
	               	|	ТИПЗНАЧЕНИЯ(таблицаДокумента.Заказ) = ЗНАЧЕНИЕ(Справочник.Посылки)
	               	|	И ТИПЗНАЧЕНИЯ(таблицаДокумента.Партия) <> ТИП(Документ.ЗаказыДляТранзита)
	               	|	И таблицаДокумента.ПунктВыдачиНаСтикере <> таблицаДокумента.ПунктВыдачи
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	втЗаказыТК.Заказ КАК Посылка,
	               	|	втЗаказыТК.Период КАК Период,
	               	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	               	|	ПосылкиСостав.Покупка КАК Покупка,
	               	|	ПосылкиСостав.Участник КАК Участник,
	               	|	ПосылкиСостав.КодЗаказа КАК КодЗаказа,
	               	|	втЗаказыТК.Партия КАК Партия,
	               	|	1 КАК Количество
	               	|ИЗ
	               	|	(ВЫБРАТЬ
	               	|		таблицаДокумента.Период КАК Период,
	               	|		таблицаДокумента.Заказ КАК Заказ,
	               	|		таблицаДокумента.Партия КАК Партия
	               	|	ИЗ
	               	|		таблицаДокумента КАК таблицаДокумента
	               	|	ГДЕ
	               	|		таблицаДокумента.ЗаказТК) КАК втЗаказыТК
	               	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Посылки.Состав КАК ПосылкиСостав
	               	|		ПО втЗаказыТК.Заказ = ПосылкиСостав.Ссылка
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	таблицаДокумента.Период КАК Период,
	               	|	таблицаДокумента.Заказ КАК ПокупкаСсылка,
	               	|	таблицаДокумента.МестоХранения КАК МестоХранения,
	               	|	таблицаДокумента.Габарит КАК Габарит,
	               	|	таблицаДокумента.Участник КАК Участник,
	               	|	ВЫБОР
	               	|		КОГДА таблицаДокумента.ПунктВыдачи = &Курьер100сп
	               	|			ТОГДА таблицаДокумента.ПунктВыдачи
	               	|		ИНАЧЕ таблицаДокумента.ПунктВыдачиНаСтикере
	               	|	КОНЕЦ КАК Точка,
	               	|	таблицаДокумента.Партия КАК Партия,
	               	|	1 КАК Количество
	               	|ИЗ
	               	|	таблицаДокумента КАК таблицаДокумента
	               	|ГДЕ
	               	|	таблицаДокумента.Обработано
	               	|	И (НЕ таблицаДокумента.Партия.ДелаемГрупповойСтикер
	               	|			ИЛИ ТИПЗНАЧЕНИЯ(таблицаДокумента.Партия) = ТИП(Документ.ЗаказыДляТранзита))
	               	|	И таблицаДокумента.ЭтоТранзит
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	таблицаДокумента.Период КАК Период,
	               	|	таблицаДокумента.Заказ КАК Покупка,
	               	|	таблицаДокумента.МестоХранения КАК МестоХранения,
	               	|	таблицаДокумента.Габарит КАК Габарит,
	               	|	таблицаДокумента.Участник КАК Участник,
	               	|	таблицаДокумента.Оплачен КАК Оплачен,
	               	|	таблицаДокумента.Партия КАК Партия,
	               	|	1 КАК Количество
	               	|ИЗ
	               	|	таблицаДокумента КАК таблицаДокумента
	               	|ГДЕ
	               	|	таблицаДокумента.Обработано
	               	|	И НЕ таблицаДокумента.ЭтоТранзит" ; 
	
	 Запрос.Параметры.Вставить("Ссылка", 		Ссылка);
	 Запрос.Параметры.Вставить("Курьер100сп", 	Константы.ПунктВыдачиКурьерскойДоставки.Получить());
	 массРезультатов 				= Запрос.ВыполнитьПакет();
	 результатНеВыгруженноНаСайт 	= массРезультатов[3];
	 результатДанныеЗаказовСайт 	= массРезультатов[4];
	 результатОШибкиОбмена		 	= массРезультатов[5];
	 результатЗаказыВПосылках	 	= массРезультатов[6];
	 результатТранзит			 	= массРезультатов[7];
	 результатОстатки			 	= массРезультатов[8];

	 
	 Движения.НеВыгруженноНаСайт.Записывать 	= истина;
	 Движения.ДанныеЗаказовСайт.Записывать 		= истина;
	 Движения.Обмен100СПрн_Ошибки.Записывать 	= истина;
	 Движения.ЗаказыВПосылках.Записывать	 	= истина;
	 Движения.Транзит.Записывать			 	= истина;
	 Движения.ОстаткиТоваров.Записывать		 	= истина;
	 
//	 Движения.НеВыгруженноНаСайт.БлокироватьДляИзменения
	 Движения.НеВыгруженноНаСайт.Загрузить(результатНеВыгруженноНаСайт.Выгрузить());
	 Движения.ДанныеЗаказовСайт.Загрузить(результатДанныеЗаказовСайт.Выгрузить());
	 Движения.Обмен100СПрн_Ошибки.Загрузить(результатОШибкиОбмена.Выгрузить());
	 Движения.ЗаказыВПосылках.Загрузить(результатЗаказыВПосылках.Выгрузить());
	 Движения.Транзит.Загрузить(результатТранзит.Выгрузить());
	 Движения.ОстаткиТоваров.Загрузить(результатОстатки.Выгрузить()); 
	 
	 
	//Обновляем БВ для строк изменненных в документе
	//так же эти даные меняются когда получаем посылку при обмене
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СинхронизацияПоступленийДанные.Заказ.Ссылка КАК ЗаказСсылка,
		|	СинхронизацияПоступленийДанные.БесплатнаяВыдача КАК БесплатнаяВыдача,
		|	СинхронизацияПоступленийДанные.ПредоплаченоУчастником КАК ПредоплаченоУчастником
		|ИЗ
		|	Документ.СинхронизацияПоступлений.Данные КАК СинхронизацияПоступленийДанные
		|ГДЕ
		|	СинхронизацияПоступленийДанные.Ссылка = &Ссылка
		|	И ТИПЗНАЧЕНИЯ(СинхронизацияПоступленийДанные.Заказ) = ТИП(Справочник.Посылки)
		|	И (СинхронизацияПоступленийДанные.БесплатнаяВыдача <> СинхронизацияПоступленийДанные.Заказ.БесплатнаяВыдача
		|			ИЛИ СинхронизацияПоступленийДанные.ПредоплаченоУчастником <> СинхронизацияПоступленийДанные.Заказ.ПредоплаченоУчастником)
		|
		|СГРУППИРОВАТЬ ПО
		|	СинхронизацияПоступленийДанные.Заказ.Ссылка,
		|	СинхронизацияПоступленийДанные.БесплатнаяВыдача,
		|	СинхронизацияПоступленийДанные.ПредоплаченоУчастником";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл                                               
		данныеДляОбновления = новый Структура;
		данныеДляОбновления.Вставить("БесплатнаяВыдача",Выборка.БесплатнаяВыдача);
		данныеДляОбновления.Вставить("ПредоплаченоУчастником",Выборка.ПредоплаченоУчастником);
		
		СП_РаботаСоСправочниками.ОбновитьПосылку(ВЫборка.ЗаказСсылка,	данныеДляОбновления);
		
	КонецЦикла;
	

	 
	 
	 
КонецПроцедуры



Процедура ЗаполнитьДанные(СтрокВПакете = Неопределено, ПунктВыдачи = Неопределено) Экспорт
	Если не ЗначениеЗаполнено(СтрокВПакете) Тогда
		СтрокВПакете = Константы.НоваяМетодикаСтрокВПакете.Получить();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	НеВыгруженноНаСайтОстатки.Заказ КАК Заказ,
		|	НеВыгруженноНаСайтОстатки.МестоХранения КАК МестоХранения,
		|	НеВыгруженноНаСайтОстатки.ПунктВыдачи КАК ПунктВыдачи,
		|	НеВыгруженноНаСайтОстатки.Партия КАК Партия,
		|	НеВыгруженноНаСайтОстатки.КоличествоОстаток КАК Количество,
		|	ПОДСТРОКА(НеВыгруженноНаСайтОстатки.Партия.Номер, 4, 20) КАК innerId
		|ПОМЕСТИТЬ неВыгруженно
		|ИЗ
		|	РегистрНакопления.НеВыгруженноНаСайт.Остатки(
		|			&НаДату,
		|			(ТИПЗНАЧЕНИЯ(Партия) = ТИП(Документ.Приходная)
		|				ИЛИ ТИПЗНАЧЕНИЯ(Партия) = ТИП(Документ.РазборКоробки)
		|				ИЛИ ТИПЗНАЧЕНИЯ(Партия) = ТИП(Документ.ЗаказыДляТранзита))
		|					И ПунктВыдачи = &ПунктВыдачи
		|					И Партия.Дата > &ДатаОграничения) КАК НеВыгруженноНаСайтОстатки
		|ГДЕ
		|	НеВыгруженноНаСайтОстатки.КоличествоОстаток > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ,
		|	Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	неВыгруженно.Заказ КАК Заказ,
		|	неВыгруженно.МестоХранения КАК МестоХранения,
		|	неВыгруженно.ПунктВыдачи КАК ПунктВыдачи,
		|	неВыгруженно.Партия КАК Партия,
		|	неВыгруженно.Количество КАК Количество,
		|	неВыгруженно.innerId КАК innerId,
		|	ДанныеЗаказовСрезПоследних.Габарит КАК Габарит,
		|	ДанныеЗаказовСрезПоследних.Вес КАК Вес,
		|	ДанныеЗаказовСрезПоследних.Объем КАК Объем,
		|	ДанныеЗаказовСрезПоследних.ОтдельнымМестом КАК ОтдельнымМестом,
		|	ДанныеЗаказовСрезПоследних.ДатаПриема КАК ДатаПриема,
		|	ДанныеЗаказовСрезПоследних.Коробка КАК Коробка,
		|	ДанныеЗаказовСрезПоследних.НеОплачен КАК НеОплачен,
		|	ЕСТЬNULL(ДанныеЗаказовСрезПоследних.Заказ, ИСТИНА) КАК НетДанных
		|ПОМЕСТИТЬ втДанныеЗаказов
		|ИЗ
		|	неВыгруженно КАК неВыгруженно
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЗаказов КАК ДанныеЗаказовСрезПоследних
		|		ПО неВыгруженно.Заказ = ДанныеЗаказовСрезПоследних.Заказ
		|			И неВыгруженно.Партия = ДанныеЗаказовСрезПоследних.Партия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Габарит
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеЗаказов.Заказ КАК Заказ,
		|	втДанныеЗаказов.МестоХранения КАК МестоХранения,
		|	втДанныеЗаказов.ПунктВыдачи КАК ПунктВыдачиНаСтикере,
		|	втДанныеЗаказов.Партия КАК Партия,
		|	втДанныеЗаказов.Количество КАК Количество,
		|	втДанныеЗаказов.innerId КАК innerId,
		|	втДанныеЗаказов.Габарит КАК Габарит,
		|	втДанныеЗаказов.Вес КАК Вес,
		|	втДанныеЗаказов.Объем КАК Объем,
		|	втДанныеЗаказов.ОтдельнымМестом КАК ОтдельнымМестом,
		|	втДанныеЗаказов.ДатаПриема КАК ДатаПриема,
		|	втДанныеЗаказов.Коробка КАК Коробка,
		|	втДанныеЗаказов.НетДанных КАК НетДанных,
		|	ЕСТЬNULL(ТарифыСрезПоследних.Негабарит, ЛОЖЬ) КАК Негабарит,
		|	ЕСТЬNULL(ТарифыСрезПоследних.кодТарифа, -1) КАК кодТарифа,
		|	втДанныеЗаказов.НеОплачен КАК НеОплачен
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	втДанныеЗаказов КАК втДанныеЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Тарифы.СрезПоследних(&НаДату, ) КАК ТарифыСрезПоследних
		|		ПО втДанныеЗаказов.Габарит = ТарифыСрезПоследних.Габарит
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.Партия КАК Партия
		|ИЗ
		|	Данные КАК Данные
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Партия
		|
		|УПОРЯДОЧИТЬ ПО
		|	Данные.Партия.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.Заказ КАК Заказ,
		|	Данные.МестоХранения КАК МестоХранения,
		|	Данные.ПунктВыдачиНаСтикере КАК ПунктВыдачиНаСтикере,
		|	Данные.Партия КАК Партия,
		|	Данные.Количество КАК Количество,
		|	Данные.innerId КАК innerId,
		|	Данные.Габарит КАК Габарит,
		|	Данные.Вес КАК Вес,
		|	Данные.Объем КАК Объем,
		|	Данные.ОтдельнымМестом КАК ОтдельнымМестом,
		|	Данные.ДатаПриема КАК ДатаПриема,
		|	Данные.Коробка КАК Коробка,
		|	Данные.НетДанных КАК НетДанных,
		|	Данные.Негабарит КАК Негабарит,
		|	Данные.кодТарифа КАК кодТарифа,
		|	Данные.НеОплачен КАК НеОплачен
		|ИЗ
		|	Данные КАК Данные";
	НаДату = ?(ЭтоНовый(),Неопределено,новый Граница(МоментВремени(),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НаДату", НаДату);     
	ГлубинаОбмена = Константы.ГлубинаОбменаВМесяцах.Получить();
	Запрос.УстановитьПараметр("ДатаОграничения", ДобавитьМесяц(ТекущаяДата(),-ГлубинаОбмена)); 
	Если СтрокВПакете <> 500 и СтрокВПакете<>0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПЕРВЫЕ 500", "ПЕРВЫЕ "+Формат(СтрокВПакете,"ЧГ=0"));
	КонецЕсли;
	Если ПунктВыдачи = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ПунктВыдачи = &ПунктВыдачи", "");
	Иначе	
		Запрос.УстановитьПараметр("ПунктВыдачи",ПунктВыдачи);
	КонецЕсли;	
	
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатНакладные = МассивРезультатов[3];
	РезультатДанные = МассивРезультатов[4];
	
	Накладные.Загрузить(РезультатНакладные.Выгрузить());
	Данные.Загрузить(РезультатДанные.Выгрузить());
	
	Для каждого элем из  Данные Цикл                     
		элем.innerId = Формат(Число(элем.innerId),"ЧГ=0");
	КонецЦикла;
КонецПроцедуры	



Функция 	ВыгрузитьНаСайт() Экспорт
	НачатьТранзакцию();
	БлокировкаДанных 			= Новый БлокировкаДанных;
	ЭлементБлокировки 			= БлокировкаДанных.Добавить("Константа.ДатаПоследнейВыгрузки");
	ЭлементБлокировки.Режим 	= РежимБлокировкиДанных.Исключительный;
	Попытка
		БлокировкаДанных.Заблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Синхронизация поступлений уже запущена в другом сеансе");
	КонецПопытки;
	
	Константы.ДатаПоследнейВыгрузки.Установить(ТекущаяДата());
	сек = 3;
	КонДата = ТекущаяДата() + сек;
  	Пока ТекущаяДата() < КонДата Цикл
      // ждемссс....
  	КонецЦикла;

	

	
	
	
	//Отражаем Ответ на выгрузку (Первая точка приема..)
	Если Модифицированность() Тогда
		Записать();
	КонецЕсли;	
	СтрокаПротокола						= СтоСПОбмен_Выгрузка100сп.СтруктураПротокола();
	СтрокаПротокола.ДатаНачала			= ТекущаяДата();
	
	хмл_отправили						= СтоСПОбмен_Запрос.ВыгрузкаПоступлений_income(ЭтотОбъект);//СкомпоноватьДляВыгрузки(Объект);
	стр_Ответа 							= СтоСПОбмен_Выгрузка100сп.Выгрузить(хмл_отправили);
	
	СтрокаПротокола.ДатаОкончания		= ТекущаяДата();
	СтрокаПротокола.ПолученныеДанные	= стр_Ответа.Получили;
	
	Отправлено 					= (стр_Ответа.Свойство("Разбор") и стр_Ответа.Разбор.авторизацияВыполнена);
	СтрокаПротокола.Результат	=	Отправлено;
	
	СтоСПОбмен_Выгрузка100сп.СохранитьПротоколОбмена(СтрокаПротокола,Ссылка);
	Если не Отправлено Тогда Возврат Ложь; Конецесли;
	
	тз		= Неопределено;
	Если стр_Ответа.Разбор.Свойство("incomes",тз) Тогда
		ОтразитьРезультатВыгрузки(тз);
		ЗагрузитьСоставПосылок();
	КонецЕсли;	
	
	тз		= Неопределено;
	Если стр_Ответа.Разбор.Свойство("preincomes",тз) Тогда
		ОтразитьРезультатВыгрузки(тз);
		ЗагрузитьСоставПосылок();
	КонецЕсли;		
	// Загружаем состав принятых посылок
	
//	ЗагрузитьСоставПосылок(Объект);	
	
	//после того как у посылки появилась основная покупка подгружаем эту покупку и  заполняем из нее организатора в документ
	//Для каждого элем из Объект.Посылки цикл
	//	списокПокупокДляЗагрузки = Новый СписокЗначений;
	//	Если элем.Посылка.Покупка.Догрузить Тогда
	//		списокПокупокДляЗагрузки.Добавить(элем.Посылка.Покупка);
	//	КонецЕсли;
	//	СтоСПОбмен_Покупки.Загрузить(списокПокупокДляЗагрузки);
	//КонецЦикла;
	
	//Если (не ЗначениеЗаполнено(Объект.Организатор) или
	//		 Объект.Организатор.Код = 0	)и
	//	  Объект.Посылки.Количество()>0 Тогда
	//	Объект.Организатор	= Объект.Посылки[0].Посылка.Организатор;
	//КонецЕсли;
	ЗафиксироватьТранзакцию();
	Возврат Истина;
КонецФункции

Процедура 	ЗагрузитьСоставПосылок()
	масс_отправленных	=	Данные.НайтиСтроки(новый структура ("Обработано",Истина));
	список_посылок		=	Новый СписокЗначений;
	Для каждого элем из масс_отправленных цикл
		//Если	ТипЗнч(элем.Заказ) = Тип("СправочникСсылка.Посылки") и 		
		//		элем.Заказ.Догрузить или 
		//			(элем.НеЗагруженСоставПосылки и 
		//					(элем.ПунктВыдачи.ТранспортнаяКомпания или
		//					 элем.ПунктВыдачиНаСтикере.ТранспортнаяКомпания) ) Тогда
		Если	ТипЗнч(элем.Заказ) = Тип("СправочникСсылка.Посылки") и 		
			(элем.ПунктВыдачи.ТранспортнаяКомпания или
			элем.ПунктВыдачиНаСтикере.ТранспортнаяКомпания)  Тогда
			
			список_посылок.Добавить(элем.Заказ);
		КонецЕсли;
	КонецЦикла;		
	Если список_посылок.Количество()=0 Тогда Возврат КонецЕсли;
	
	стрОтвета = СтоСПОбмен_Посылки.Загрузить_СоставПосылкиПоКодам(список_посылок);
		
	Если не стрОтвета.авторизацияВыполнена Тогда Возврат; КонецЕсли;
	тзПосылок = стрОтвета.Результат;
	Для каждого стр из тзПосылок Цикл
		масс	=	Данные.НайтиСтроки(новый Структура("Заказ",стр.Посылка));
		Для каждого элем из масс Цикл
			элем.НеЗагруженСоставПосылки	= не стр.Загружена;
			Если не стр.Загружена ТОгда
				элем.Сообщение="не загружен состав посылка";
			Иначе 	
				элем.Сообщение="";
			КонецЕсли;	
		КонецЦикла
	КонецЦикла	
КонецПроцедуры


Процедура 	ОтразитьРезультатВыгрузки(тзПараметр)
	
	Запрос		= новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ТЗ.arrivalNumber КАК arrivalNumber,
	|	ТЗ.actualFirstIncomeCode КАК actualFirstIncomeCode,
	|	ТЗ.firstIncomeCode КАК firstIncomeCode,
	|	ТЗ.message КАК message,
	|	ТЗ.stickerId КАК stickerId,
	|	ТЗ.receiverUid КАК receiverUid,
	|	ТЗ.packageId КАК packageId,
	|	ТЗ.destinationDistributorCode КАК destinationDistributorCode,
	|	ТЗ.orderId КАК orderId,
	|	ТЗ.groupCode КАК groupCode,
	|	ТЗ.orderType КАК orderType,
	|	ТЗ.pid КАК pid,
	|	ТЗ.secureCode КАК secureCode,
	|	ТЗ.result КАК result,
	|	ТЗ.date КАК date,
	|	ТЗ.packageCreatorUid КАК packageCreatorUid,
	|	ТЗ.firstPid КАК firstPid,
	|	ТЗ.phone КАК phone,
	|	ТЗ.phoneHash КАК phoneHash,
	|	ТЗ.userName КАК userName,
	|	ТЗ.freeShipping КАК freeShipping,
	|	ТЗ.rating КАК rating,
	|	ТЗ.extraDeliveryCost КАК extraDeliveryCost,
	|	ТЗ.uid КАК uid,
	|	ТЗ.innerId КАК innerId,
	|	ТЗ.receiverEmail как receiverEmail,
	|	ТЗ.totalCount как totalCount,
	|	ТЗ.compensatedCount как compensatedCount,
	|	ТЗ.orgid КАК orgid
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Синхонизация.Заказ КАК Заказ,
	|	Синхонизация.Партия КАК Партия,
	|	Синхонизация.НомерСтроки КАК НомерСтроки,
	|	Синхонизация.innerId КАК innerId
	|ПОМЕСТИТЬ Посылки
	|ИЗ
	|	Документ.СинхронизацияПоступлений.Данные КАК Синхонизация
	|ГДЕ
	|	Синхонизация.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.totalCount как totalCount,
	|	ВТ.compensatedCount как compensatedCount,
	|	ВТ.orderType КАК orderType,
	|	ВТ.groupCode КАК groupCode,
	|	ВТ.actualFirstIncomeCode КАК actualFirstIncomeCode,
	|	ВТ.receiverEmail как receiverEmail,
	|	ВТ.firstIncomeCode КАК firstIncomeCode,
	|	ВТ.message КАК message,
	|	ВТ.receiverUid КАК Uid,
	|	ВТ.packageId КАК packageId,
	|	ВТ.secureCode КАК secureCode,
	|	ВТ.destinationDistributorCode КАК destinationDistributorCode,
	|	ВТ.result КАК result,
	|	ВТ.date КАК date,
	|	ВТ.packageCreatorUid КАК packageCreatorUid,
	|	ВТ.firstPid КАК firstPid,
	|	ВТ.freeShipping КАК freeShipping,
	|	ВТ.phone КАК phone,
	|	ВТ.phoneHash КАК phoneHash,
	|	ВТ.rating КАК rating,
	|	ВТ.userName КАК userName,
	|	ВТ.orgid КАК orgid,
	|	ВТ.extraDeliveryCost КАК extraDeliveryCost,
	|	Посылки.Заказ КАК Заказ,
	|	Посылки.Партия КАК Партия,
	|	Посылки.НомерСтроки КАК НомерСтроки,	
	|	Коробки.Ссылка КАК Коробка,
	
	|	Участники.Ссылка КАК Участник
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Коробки КАК Коробки
	|		ПО ((ВЫРАЗИТЬ(ВТ.groupCode КАК СТРОКА(25))) = Коробки.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Участники КАК Участники
	|		ПО ВТ.receiverUid = Участники.Код
	|			И ((ВЫРАЗИТЬ(ВТ.userName КАК СТРОКА(50))) = Участники.Наименование)
	|			И ((ВЫРАЗИТЬ(ВТ.phoneHash КАК СТРОКА(150))) = Участники.ТелефонХэш)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Посылки КАК Посылки
	|		ПО (ВЫБОР
	|				КОГДА ВЫРАЗИТЬ(ВТ.orderType как строка(7)) = ""package""
	|					ТОГДА ВТ.packageId = Посылки.Заказ.Код
	|				ИНАЧЕ ВЫРАЗИТЬ(ВТ.groupCode КАК СТРОКА(25)) = Посылки.Заказ.Код
	|			КОНЕЦ)
	|			И ((ВЫРАЗИТЬ(ВТ.innerId КАК Строка(10))) = Посылки.innerId)";
	Запрос.Параметры.Вставить("ТЗ",		тзПараметр);
	Запрос.Параметры.Вставить("Ссылка",	Ссылка);
	Результат	= Запрос.Выполнить();
	ТЗРезультат	= Результат.Выгрузить();
	
	Для каждого Загружено из ТЗРезультат Цикл
		
		Если Загружено.НомерСтроки = null Тогда Продолжить КонецЕсли;
		ДанныеПВ = Данные[Загружено.НомерСтроки-1];	
		
		ДанныеПВ.Сообщение = Загружено.message;
		ДанныеПВ.Ошибка	   = (Загружено.result = "error");	

		Если ДанныеПВ.Ошибка Тогда Продолжить; КонецЕсли;
		
		ДанныеПВ.Обработано = Истина;
		//параметрыУчастника = Новый Структура("Наименование, Телефон1, ТелефонХэш, Рэйтинг",
		//Загружено.userName, 
		//Загружено.phone, 
		//Загружено.phoneHash,
		//Загружено.rating);
		
		параметрыУчастника = Новый Структура("Наименование, Почта",
		Загружено.userName, Загружено.receiverEmail);
		
		Участник 	= ?(Загружено.Участник = null, СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(Загружено.Uid, параметрыУчастника), Загружено.Участник);
		СП_РаботаСоСправочниками.ОбновитьУчастника(Участник, параметрыУчастника);
		
		Надбавка 	= Число(?(Загружено.extraDeliveryCost="",0,Загружено.extraDeliveryCost));   
		
		БВ = Ложь;
		ПредоплаченоУчастником = Ложь;
		Если Загружено.freeShipping = "yes" Тогда
			БВ = Истина;
		ИначеЕсли Загружено.freeShipping = "prepaid" Тогда	
			БВ = Истина;              
			ПредоплаченоУчастником = Истина;
		КонецЕсли;	
		//БВ		 	= Булево(Загружено.freeShipping); 
		
		
		ПерваяТочка				= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(Загружено.firstIncomeCode);
		
		Если Загружено.orderType = "package" Тогда
			АктуальнаяПерваяТочка	= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(Загружено.actualFirstIncomeCode);
		Иначе	
			АктуальнаяПерваяТочка   = ПерваяТочка;
		КонецЕсли;
		
		ПунктВыдачи = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(Загружено.destinationDistributorCode);
		Покупка		= СП_РаботаСоСправочниками.ПолучитьПокупкуПо_Коду(Загружено.firstPid);
		Если Загружено.orderType = "package" Тогда
			Организатор = СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(Загружено.packageCreatorUid); //31344
		Иначе
			Организатор = СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(Загружено.orgid); //31344
		КонецЕсли;	
		//------------
		ЗагруженныеДанные = Новый структура;
		ЗагруженныеДанные.Вставить("Участник",			Участник); 
		ЗагруженныеДанные.Вставить("НадбавкаЗаОбработку",Надбавка); 
		ЗагруженныеДанные.Вставить("ПерваяТочка",		ПерваяТочка);
		ЗагруженныеДанные.Вставить("АктуальнаяПерваяТочка",		АктуальнаяПерваяТочка);
		ЗагруженныеДанные.Вставить("БесплатнаяВыдача",	БВ);
		ЗагруженныеДанные.Вставить("ПредоплаченоУчастником",	ПредоплаченоУчастником);
		ЗагруженныеДанные.Вставить("ПунктВыдачи",		ПунктВыдачи);
		ЗагруженныеДанные.Вставить("ПунктВыдачи",		ПунктВыдачи);
		
		
		Если ЗначениеЗаполнено(Организатор) и Организатор <> Справочники.Организаторы.нулевой Тогда
			ЗагруженныеДанные.Вставить("Организатор",		Организатор);
		КонецЕсли;
		ЗагруженныеДанные.Вставить("secureCode",		Загружено.secureCode);
		
		Если Загружено.orderType = "package" Тогда
			СП_РаботаСоСправочниками.ОбновитьПосылку(Загружено.Заказ,	ЗагруженныеДанные);
			ЗагруженныеДанные.Вставить("КоличествоВсего",							1);
			Если АктуальнаяПерваяТочка = ПерваяТочка Тогда
				ЗагруженныеДанные.Вставить("КоличествоКомпенсироаннаДоставка",			0);
			Иначе
				ЗагруженныеДанные.Вставить("КоличествоКомпенсироаннаДоставка",			1);
			КонецЕсли
		Иначе	
		 	СП_РаботаСоСправочниками.ОбновитьКоробку(Загружено.Заказ,	ЗагруженныеДанные);
			ЗагруженныеДанные.Вставить("КоличествоВсего",							Загружено.totalCount);
			ЗагруженныеДанные.Вставить("КоличествоКомпенсироаннаДоставка",			Загружено.compensatedCount);

		КонецЕсли;	
		//СП_РаботаСоСправочниками.ОбновитьМегаордер(стр.ШК,		ЗагруженныеДанные);
		
		ЗаполнитьЗначенияСвойств(ДанныеПВ, ЗагруженныеДанные);
	КонецЦикла;	
	
	
	//неИзвестнаяяОшибка = Данные.НайтиСтроки(новый Структура("Обработано", Ложь));
	//Для каждого элем из неИзвестнаяяОшибка цикл
	////	элем.Обработано = Истина;
	//	элем.Ошибка		= Истина;
	//	элем.Сообщение = "Возможно старые данные (не удалось определить ошибку)"; 
	//КонецЦикла;	
	
	
	//Если ТЗРезультат <> неопределено Тогда  
	//	Для каждого стр из Объект.Посылки Цикл
	//		мас_НайденоВОтвете	= ТЗРезультат.НайтиСтроки(Новый Структура("Посылка",стр.Посылка));
	//		
	//		Если мас_НайденоВОтвете.Количество()>0 тогда
	//			стр_ответа	= мас_НайденоВОтвете[0];
	//			Если 	стр_ответа.result	= "ok" или 
	//					стр_ответа.result	= "ap" 		Тогда
	//				стр.Отправлено	= Истина;
	//				
	//				//Обновить ник участника
	//				параметрыУчастника = Новый Структура("Наименование, Телефон1, ТелефонХэш, Рэйтинг",
	//														стр_ответа.userName, 
	//														стр_ответа.phone, 
	//														стр_ответа.phoneHash,
	//														стр_ответа.rating);
	//				Участник 	= ?(стр_ответа.Участник = null, СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(стр_ответа.Uid, параметрыУчастника), стр_ответа.Участник);
	//				СП_РаботаСоСправочниками.ОбновитьУчастника(Участник, параметрыУчастника);
	//				Надбавка 	= Число(стр_ответа.extraDeliveryCost);
	//				БВ		 	= Булево(стр_ответа.freeShipping);
	//				исходныйПВ 	= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(	стр_ответа.firstIncomeCode);
	//				//------------
	//				параметрыПосылки = Новый структура;
	//				параметрыПосылки.Вставить("Участник",			Участник); 
	//				параметрыПосылки.Вставить("НадбавкаЗаОбработку",Надбавка); 
	//				параметрыПосылки.Вставить("ПерваяТочка",		исходныйПВ);
	//				параметрыПосылки.Вставить("БесплатнаяВыдача",	БВ);
	//				параметрыПосылки.Вставить("ПунктВыдачи",		СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(	стр_ответа.destinationDistributorCode));
	//				параметрыПосылки.Вставить("Покупка",			СП_РаботаСоСправочниками.ПолучитьПокупкуПо_Коду(		стр_ответа.firstPid));
	//				параметрыПосылки.Вставить("Организатор",		СП_РаботаСоСправочниками.ПолучитьОрганизатораПо_Коду(	стр_ответа.packageCreatorUid));

	//				параметрыПосылки.Вставить("secureCode",		стр_ответа.secureCode);
	//				
	//				СП_РаботаСоСправочниками.ОбновитьПосылку(стр.Посылка,	параметрыПосылки);
	//				СП_РаботаСоСправочниками.ОбновитьМегаордер(стр.ШК,		параметрыПосылки);
	//				
	//				/////РС ДанныеЗаказа
	//				//	стр.полученУчастник 	= Участник;
	//				//	стр.поученНадбавка  	= Надбавка;
	//				//	стр.поученБВ  			= БВ;
	//				//	стр.полученИсходныйПВ   = исходныйПВ;
	//				/////РС ДанныеЗаказа Конец
	//				Если  стр.ПунктВыдачи = Справочники.ТочкиРаздачи.ПунтВыдачиНеУказан Тогда
	//					стр.ПунктВыдачи = стр.Посылка.ПунктВыдачи;
	//				КонецЕсли;	

	//			КонецЕсли;	
	//			стр.СообщениеОшибки	=	стр_ответа.message;
	//		Иначе	
	//			стр.СообщениеОшибки	=	"Не найдено в ответе";
	//		КонецЕсли;	
	//	КонецЦикла;
	//	
	//	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РазборКоробки") Тогда
	//		Для каждого стр из Объект.ГруппыНаТранзит Цикл
	//			мас_НайденоВОтвете = ТЗРезультат.НайтиСтроки(Новый Структура("Коробка, orderType", стр.Коробка, "group"));

	//			Если мас_НайденоВОтвете.Количество() > 0 тогда
	//				стр_ответа = мас_НайденоВОтвете[0];
	//				параметрыКоробки = Новый структура;
	//				параметрыКоробки.Вставить("ПерваяТочка",		СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(	стр_ответа.firstIncomeCode));
	//				СП_РаботаСоСправочниками.ОбновитьКоробку(стр.Коробка,	параметрыКоробки);
	//				СП_РаботаСоСправочниками.ОбновитьМегаордер(стр.ШК,		параметрыКоробки);
	//				Если стр_ответа.result = "ok" или стр_ответа.result = "ap" Тогда
	//					стр.Отправлено = Истина;
	//				КонецЕсли;
	//				стр.СообщениеОшибки = стр_ответа.message;
	//			Иначе
	//				стр.СообщениеОшибки = "Не найдено в ответе";
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
		
		
КонецПроцедуры

	



Процедура СформироватьДвиженияПриходнойПоДаннымЗаказа() Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	
		"ВЫБРАТЬ
		|	Приходная.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Доки
		|ИЗ
		|	Документ.Приходная КАК Приходная
		|ГДЕ
		|	Приходная.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Посылки.Ссылка.Дата КАК Период,
		|	Посылки.Ссылка КАК Партия,
		|	Посылки.Посылка КАК Заказ,
		|	Посылки.Габарит КАК Габарит,
		|	Посылки.Вес КАК Вес,
		|	Посылки.объем КАК Объем,
		|	1 КАК Количество,
		|	Посылки.ОтдельнымМестом КАК ОтдельнымМестом,
		|	Посылки.ДатаПриема КАК ДатаПриема,
		|	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки) КАК Коробка,
		|	Посылки.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Сбор
		|ИЗ
		|	Документ.Приходная.Посылки КАК Посылки
		|ГДЕ
		|	Посылки.Ссылка В
		|			(ВЫБРАТЬ
		|				Доки.Ссылка КАК Ссылка
		|			ИЗ
		|				Доки КАК Доки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Покупки.Ссылка.Дата,
		|	Покупки.Ссылка,
		|	Покупки.Покупка,
		|	Покупки.Габарит,
		|	Покупки.Вес,
		|	Покупки.объем,
		|	1,
		|	Покупки.ОтдельнымМестом,
		|	Покупки.ДатаПриема,
		|	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки),
		|	Покупки.Ссылка
		|ИЗ
		|	Документ.Приходная.Покупки КАК Покупки
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Покупки.Покупка) = ТИП(Справочник.Коробки)
		|	И Покупки.Ссылка В
		|			(ВЫБРАТЬ
		|				Доки.Ссылка КАК Ссылка
		|			ИЗ
		|				Доки КАК Доки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сбор.Период КАК Период,
		|	Сбор.Партия КАК Партия,
		|	Сбор.Заказ КАК Заказ,
		|	Сбор.Габарит КАК Габарит,
		|	Сбор.Вес КАК Вес,
		|	Сбор.Объем КАК Объем,
		|	Сбор.Количество КАК Количество,
		|	Сбор.ОтдельнымМестом КАК ОтдельнымМестом,
		|	Сбор.ДатаПриема КАК ДатаПриема,
		|	Сбор.Коробка КАК Коробка,
		|	Сбор.Ссылка КАК Ссылка
		|ИЗ
		|	Сбор КАК Сбор
		|ИТОГИ ПО
		|	Ссылка";
	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		// Вставить обработку выборки ВыборкаСсылка
		
		Приходная = ВыборкаСсылка.Ссылка;
		
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
		
		нз = РегистрыСведений.ДанныеЗаказов.СоздатьНаборЗаписей();
		нз.Отбор.Регистратор.Значение = Приходная;
		
		нз.Записывать = Истина;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаНЗ =  нз.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНЗ,ВыборкаДетальныеЗаписи);
		КонецЦикла;
		нз.Записать();
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры	



Процедура СформироватьДвиженияРазбораКоробкиПоДаннымЗаказа() Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	
		"ВЫБРАТЬ
		|	РазборКоробки.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Доки
		|ИЗ
		|	Документ.РазборКоробки КАК РазборКоробки
		|ГДЕ
		|	РазборКоробки.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Посылки.Ссылка.Дата КАК Период,
		|	Посылки.Ссылка КАК Партия,
		|	Посылки.Посылка КАК Заказ,
		|	Посылки.Габарит КАК Габарит,
		|	Посылки.Вес КАК Вес,
		|	Посылки.объем КАК Объем,
		|	1 КАК Количество,
		|	Посылки.ОтдельнымМестом КАК ОтдельнымМестом,
		|	Посылки.ДатаПриема КАК ДатаПриема,
		|	Посылки.Коробка КАК Коробка,
		|	Посылки.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Сбор
		|ИЗ
		|	Документ.РазборКоробки.Посылки КАК Посылки
		|ГДЕ
		|	Посылки.Ссылка В
		|			(ВЫБРАТЬ
		|				Доки.Ссылка КАК Ссылка
		|			ИЗ
		|				Доки КАК Доки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Группы.Ссылка.Дата,
		|	Группы.Ссылка,
		|	Группы.Коробка,
		|	Группы.Габарит,
		|	Группы.Вес,
		|	Группы.объем,
		|	Группы.Количество,
		|	Группы.ОтдельнымМестом,
		|	Группы.ДатаПриема,
		|	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки),
		|	Группы.Ссылка
		|ИЗ
		|	Документ.РазборКоробки.ГруппыНаТранзит КАК Группы
		|ГДЕ
		|	Группы.Ссылка В
		|			(ВЫБРАТЬ
		|				Доки.Ссылка КАК Ссылка
		|			ИЗ
		|				Доки КАК Доки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сбор.Период КАК Период,
		|	Сбор.Партия КАК Партия,
		|	Сбор.Заказ КАК Заказ,
		|	Сбор.Габарит КАК Габарит,
		|	Сбор.Вес КАК Вес,
		|	Сбор.Объем КАК Объем,
		|	Сбор.Количество КАК Количество,
		|	Сбор.ОтдельнымМестом КАК ОтдельнымМестом,
		|	Сбор.ДатаПриема КАК ДатаПриема,
		|	Сбор.Коробка КАК Коробка,
		|	Сбор.Ссылка КАК Ссылка
		|ИЗ
		|	Сбор КАК Сбор
		|ИТОГИ ПО
		|	Ссылка";
	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДокументыСОшибками = новый Массив;	
	
	Пока ВыборкаСсылка.Следующий() Цикл
		// Вставить обработку выборки ВыборкаСсылка
		
		Приходная = ВыборкаСсылка.Ссылка;
		
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
		
		нз = РегистрыСведений.ДанныеЗаказов.СоздатьНаборЗаписей();
		нз.Отбор.Регистратор.Значение = Приходная;
		
		нз.Записывать = Истина;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаНЗ =  нз.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНЗ,ВыборкаДетальныеЗаписи);
		КонецЦикла;
		Попытка
		    нз.Записать();
		Исключение
			ДокументыСОшибками.Добавить(Приходная);
		КонецПопытки;
	КонецЦикла;

	Для каждого элем из ДокументыСОшибками Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(элем);
		
	КонецЦикла;
КонецПроцедуры



Процедура УдалитьДвиженияДанныеЗаказов()
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Приходная.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Приходная КАК Приходная
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РазборКоробки.Ссылка
		|ИЗ
		|	Документ.РазборКоробки КАК РазборКоробки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		нз = РегистрыСведений.ДанныеЗаказов.СоздатьНаборЗаписей();
		нз.Отбор.Регистратор.Значение = ВыборкаДетальныеЗаписи.ссылка;
		нз.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры	



Процедура ОчиститьДанныеПосылок() Экспорт
	
	
	ОставитьЗаполненымиКоробка = Новый Массив;
	ОставитьЗаполненымиКоробка.Добавить("ШК");
	ОставитьЗаполненымиКоробка.Добавить("ПунктВыдачи");
	ОставитьЗаполненымиКоробка.Добавить("ВидСтикера");
	ОставитьЗаполненымиКоробка.Добавить("Организатьор");
	ОставитьЗаполненымиКоробка.Добавить("Количество");
	
	ОставитьЗаполненымиПосылка = Новый Массив;
	ОставитьЗаполненымиПосылка.Добавить("ШК");
	ОставитьЗаполненымиПосылка.Добавить("ПунктВыдачи");
	
	ОставитьЗаполненымиШК = Новый Массив;
	ОставитьЗаполненымиШК.Добавить("типМегаордера");
	ОставитьЗаполненымиШК.Добавить("Покупка");	
	ОставитьЗаполненымиШК.Добавить("Посылка");	
	ОставитьЗаполненымиШК.Добавить("Коробка");	
	ОставитьЗаполненымиШК.Добавить("ПунктВыдачи");	
	
	
	Для каждого элем из Данные Цикл
		элем.Обработано = Ложь;
		элем.Ошибка = Ложь;
		элем.НеЗагруженСоставПосылки = Ложь;
		
		
		
		обЗаказ     = элем.Заказ.ПолучитьОбъект();
		ОбМегаордер = элем.Заказ.ШК.ПолучитьОбъект();
		Если ТипЗнч(элем.Заказ) = Тип("СправочникСсылка.Посылки") и ЗначениеЗаполнено(элем.Заказ.Участник) Тогда
			ОбУчастник  = элем.Заказ.Участник.ПолучитьОбъект();
			Реквизиты = ОбУчастник.Метаданные().Реквизиты;
			для каждого рекв из Реквизиты Цикл
				//			Если ОставитьЗаполненымиШК.Найти(рекв.Имя)<> Неопределено Тогда Продолжить; КонецЕсли;
				ОбУчастник[рекв.Имя] = Неопределено;
			КонецЦикла;
			ОбУчастник.Записать();
			
		КонецЕсли;	
		
		
		Если ТипЗнч(Элем.Заказ) = Тип("СправочникСсылка.Посылки") Тогда
			ОставитьЗаполнеными = ОставитьЗаполненымиПосылка; 
		КонецЕсли;	
		Если ТипЗнч(Элем.Заказ) = Тип("СправочникСсылка.Коробки") Тогда
			ОставитьЗаполнеными = ОставитьЗаполненымиКоробка; 
		КонецЕсли;	
		Реквизиты = обЗаказ.Метаданные().Реквизиты;
		для каждого рекв из Реквизиты Цикл
			Если ОставитьЗаполнеными.Найти(рекв.Имя)<> Неопределено Тогда Продолжить; КонецЕсли;
			обЗаказ[рекв.Имя] = Неопределено;
			Если рекв.Имя = "Догрузить" или рекв.Имя= "Перезаполнить" Тогда
				обЗаказ[рекв.Имя] = Истина;
			КонецЕсли;
		КонецЦикла;
		обЗаказ.Состав.Очистить();
		обЗаказ.Записать();
		
		Реквизиты = ОбМегаордер.Метаданные().Реквизиты;
		для каждого рекв из Реквизиты Цикл
			Если ОставитьЗаполненымиШК.Найти(рекв.Имя)<> Неопределено Тогда Продолжить; КонецЕсли;
			ОбМегаордер[рекв.Имя] = Неопределено;
		КонецЦикла;
		ОбМегаордер.Состав.Очистить();
		ОбМегаордер.Записать();
		
	КонецЦикла;
КонецПроцедуры	