
Функция ВыполнитьОбмен_ВернутьЗапросОплаты(Группа) Экспорт
	Если не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	Конецесли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Коробки.Ссылка КАК ГруппаДоставки,
		|	Коробки.Длина,
		|	Коробки.Ширина,
		|	Коробки.Высота,
		|	Коробки.СтоимостьДоставки,
		|	Коробки.СтоимостьДоставкиПредоплата,
		|	Коробки.Вес,
		|	Коробки.ДатаВзвешивания
		|ИЗ
		|	Справочник.Коробки КАК Коробки
		|ГДЕ
		|	Коробки.Ссылка = &Группа";
	
	Запрос.УстановитьПараметр("Группа", Группа);
	Результат = Запрос.Выполнить();
	ЗапросыОплаты.Загрузить(Результат.Выгрузить());
	ЗаполнитьОтправленныеДанные();
	ОтправитьНаСайт();
	ОбработатьПолученныеДанные();
	Возврат ПолучитьИзмененныеГруппыСсайта();
КонецФункции

Функция Синхронизировать(СтруктураТаблиц) Экспорт
	ЭтотОбъект.Дата = ТекущаяДата();
	Для каждого элем из СтруктураТаблиц Цикл	
		ЭтотОбъект[элем.Ключ].Загрузить(элем.Значение);
	КонецЦикла;	
	ЗаполнитьОтправленныеДанные();
	ОтправитьНаСайт();
	ОбработатьПолученныеДанные();
	Возврат ПолучитьИзмененныеГруппыСсайта();
КонецФункции


Функция ВыполнитьОбмен() Экспорт
	Если не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	Конецесли;
	ЗаполнитьТаблицыДокумента();
	ЗаполнитьОтправленныеДанные();
	ОтправитьНаСайт();
	ОбработатьПолученныеДанные();
	Возврат ПолучитьИзмененныеГруппыСсайта();
КонецФункции	

#Область ФункцииОбмен

Процедура ЗаполнитьТаблицыДокумента() Экспорт
	ДанныеЗаполнения = ПолучитьДанныеЗаполнения();	
	ЗапросыОтсрочки.Загрузить(ДанныеЗаполнения["ТаблицаГруппыДляПродления"]);
	ЗапросыИсключения.Загрузить(ДанныеЗаполнения["ТаблицаЗаказыДляИсключенияИзГрупп"]);
	ЗапросыУдаления.Загрузить(ДанныеЗаполнения["ТаблицаЗаказыДляУдаленияИзГрупп"]);
	ЗапросыОплаты.Загрузить(ДанныеЗаполнения["ТаблицаГруппыДляЗапросаОплаты"]);
КонецПроцедуры	

Процедура ЗаполнитьОтправленныеДанные() Экспорт
	 ЗаписьXML=новый ЗаписьXML;
	 ЗаписьXML.УстановитьСтроку("UTF-8");
	 ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	 
	 ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	 ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd","http://www.w3.org/2001/XMLSchema");
	 ЗаписьXML.ЗаписатьАтрибут("apiVersion","4");
	 
	 Для каждого стр из ЗапросыИсключения Цикл 
		 ЗаписьXML.ЗаписатьНачалоЭлемента("groupsDetach");
			 ЗаписьXML.ЗаписатьНачалоЭлемента("group");
			 
					 ЗаписьXML.ЗаписатьНачалоЭлемента("delivery_group_id");
					 	ЗаписьXML.ЗаписатьТекст(Формат(Число(СтрЗаменить(стр.ГруппаДоставки.Код,"гд_","")),"ЧГ=0"));
					 ЗаписьXML.ЗаписатьКонецЭлемента();
					 
					 ЗаписьXML.ЗаписатьНачалоЭлемента("orderType");
					 	ЗаписьXML.ЗаписатьТекст("sp");
					 ЗаписьXML.ЗаписатьКонецЭлемента();
					 
					 Если стр.КодЗаказа<>""          Тогда
						 ЗаписьXML.ЗаписатьНачалоЭлемента("orderId");
						 ЗаписьXML.ЗаписатьТекст(Формат(стр.КодЗаказа,"ЧГ=0"));
						 ЗаписьXML.ЗаписатьКонецЭлемента();
					 Иначе	 
						 ЗаписьXML.ЗаписатьНачалоЭлемента("pid");
						 ЗаписьXML.ЗаписатьТекст(Формат(стр.Покупка.Код,"ЧГ=0"));
						 ЗаписьXML.ЗаписатьКонецЭлемента();
					 КонецЕсли;
					 
					 ЗаписьXML.ЗаписатьНачалоЭлемента("uid");
					 	ЗаписьXML.ЗаписатьТекст(Формат(стр.Участник.Код,"ЧГ=0"));
					 ЗаписьXML.ЗаписатьКонецЭлемента();
					 
					 ЗаписьXML.ЗаписатьНачалоЭлемента("message");
					 	ЗаписьXML.ЗаписатьТекст(Формат(стр.СообщениеУдаления,"ЧГ=0"));
					 ЗаписьXML.ЗаписатьКонецЭлемента();
					 
			 
			 ЗаписьXML.ЗаписатьКонецЭлемента();
		 ЗаписьXML.ЗаписатьКонецЭлемента();		 
		 
	 КонецЦикла;
	 
	 Для каждого стр из ЗапросыУдаления Цикл 
		 ЗаписьXML.ЗаписатьНачалоЭлемента("groupsUnlink");
			 ЗаписьXML.ЗаписатьНачалоЭлемента("group");
			 
					 ЗаписьXML.ЗаписатьНачалоЭлемента("delivery_group_id");
					 	ЗаписьXML.ЗаписатьТекст(Формат(Число(СтрЗаменить(стр.ГруппаДоставки.Код,"гд_","")),"ЧГ=0"));
					 ЗаписьXML.ЗаписатьКонецЭлемента();
					 
					 ЗаписьXML.ЗаписатьНачалоЭлемента("orderType");
					 Если ТипЗнч(стр.Покупка) = Тип("СправочникСсылка.Пристрой") Тогда
						 ЗаписьXML.ЗаписатьТекст("bulletin");
					 Иначе	 
						 ЗаписьXML.ЗаписатьТекст("sp");
					 КонецЕсли;
					 ЗаписьXML.ЗаписатьКонецЭлемента();
					 
					 Если стр.КодЗаказа<>""          Тогда
						 ЗаписьXML.ЗаписатьНачалоЭлемента("orderId");
						 ЗаписьXML.ЗаписатьТекст(Формат(стр.КодЗаказа,"ЧГ=0"));
						 ЗаписьXML.ЗаписатьКонецЭлемента();
					 Иначе	 
						 ЗаписьXML.ЗаписатьНачалоЭлемента("pid");
						 ЗаписьXML.ЗаписатьТекст(Формат(стр.Покупка.Код,"ЧГ=0"));
						 ЗаписьXML.ЗаписатьКонецЭлемента();
					 КонецЕсли;
					 
					 ЗаписьXML.ЗаписатьНачалоЭлемента("uid");
					 	ЗаписьXML.ЗаписатьТекст(Формат(стр.Участник.Код,"ЧГ=0"));
					 ЗаписьXML.ЗаписатьКонецЭлемента();
					 
					 
			 
			 ЗаписьXML.ЗаписатьКонецЭлемента();
		 ЗаписьXML.ЗаписатьКонецЭлемента();		 
		 
	 КонецЦикла;
	 
	 
	 
	 
	 Для каждого стр из ЗапросыОтсрочки Цикл 
		 ЗаписьXML.ЗаписатьНачалоЭлемента("groupsDelay");
		 ЗаписьXML.ЗаписатьНачалоЭлемента("group");
		 ЗаписьXML.ЗаписатьНачалоЭлемента("delivery_group_id");
		 
		  ЗаписьXML.ЗаписатьТекст(Формат(Число(СтрЗаменить(стр.ГруппаДоставки.Код,"гд_","")),"ЧГ=0"));
		 
		 
		 ЗаписьXML.ЗаписатьКонецЭлемента();
		 ЗаписьXML.ЗаписатьКонецЭлемента();
		 ЗаписьXML.ЗаписатьКонецЭлемента();		 
		 
	 КонецЦикла;
	 
	 Для каждого стр из ЗапросыОплаты Цикл 
		 документОтправления  = стр.ГруппаДоставки.ОтправлениеТранзита;
		 ЗаписьXML.ЗаписатьНачалоЭлемента("groupsBill");
			 ЗаписьXML.ЗаписатьНачалоЭлемента("group");
			 
				 ЗаписьXML.ЗаписатьНачалоЭлемента("delivery_group_id");
				 	ЗаписьXML.ЗаписатьТекст(Формат(Число(СтрЗаменить(стр.ГруппаДоставки.Код,"гд_","")),"ЧГ=0"));
				 ЗаписьXML.ЗаписатьКонецЭлемента();
				 
				 ЗаписьXML.ЗаписатьНачалоЭлемента("weight");
				 	ЗаписьXML.ЗаписатьТекст(Формат(стр.Вес,"ЧГ=0"));
				 ЗаписьXML.ЗаписатьКонецЭлемента();
				 
				 ЗаписьXML.ЗаписатьНачалоЭлемента("width");
				 	ЗаписьXML.ЗаписатьТекст(Формат(стр.Ширина,"ЧГ=0"));
				 ЗаписьXML.ЗаписатьКонецЭлемента();
				 
				 ЗаписьXML.ЗаписатьНачалоЭлемента("height");
				 	ЗаписьXML.ЗаписатьТекст(Формат(стр.Высота,"ЧГ=0"));
				 ЗаписьXML.ЗаписатьКонецЭлемента();
	 
				 ЗаписьXML.ЗаписатьНачалоЭлемента("length");
				 	ЗаписьXML.ЗаписатьТекст(Формат(стр.Длина,"ЧГ=0"));
				 ЗаписьXML.ЗаписатьКонецЭлемента();
	 
	 

				 
				 ЗаписьXML.ЗаписатьНачалоЭлемента("bill_date");
				 	ЗаписьXML.ЗаписатьТекст(Строка(стр.ДатаВзвешивания));
				 ЗаписьXML.ЗаписатьКонецЭлемента();

				ЗаписьXML.ЗаписатьНачалоЭлемента("deliveryMethods");				
				Если документОтправления.РасчетСтоимостиПоВсемТарифам Тогда


					 	для каждого элем из документОтправления.РасчетКалькулятораПочта Цикл

							Если элем.Результат = "ok" Тогда
								ЗаписьXML.ЗаписатьНачалоЭлемента("deliveryMethod");
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
						 			ЗаписьXML.ЗаписатьТекст(Строка(элем.ВидРПО));
						 		ЗаписьXML.ЗаписатьКонецЭлемента();
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("description");
						 			ЗаписьXML.ЗаписатьТекст(документОтправления.ТочкаНазначения.Наименование);
						 		ЗаписьXML.ЗаписатьКонецЭлемента();
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("deliveryPeriod");
						 			ЗаписьXML.ЗаписатьТекст(элем.СрокДоставкиМин+" - "+элем.СрокДоставкиМакс+" дн.");
						 		ЗаписьXML.ЗаписатьКонецЭлемента();								
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("price");
					 				ЗаписьXML.ЗаписатьТекст(Формат(элем.СтоимостьПредоплата,"ЧДЦ=2; ЧГ=0"));
				 				ЗаписьXML.ЗаписатьКонецЭлемента();
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("type");
						 			ЗаписьXML.ЗаписатьТекст("prepay");
						 		ЗаписьXML.ЗаписатьКонецЭлемента();
								ЗаписьXML.ЗаписатьКонецЭлемента();
							/////////////////////////////////////////////////////
							    ЗаписьXML.ЗаписатьНачалоЭлемента("deliveryMethod");
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				 					ЗаписьXML.ЗаписатьТекст(Строка(элем.ВидРПО));
				 				ЗаписьXML.ЗаписатьКонецЭлемента();
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("description");
						 			ЗаписьXML.ЗаписатьТекст(документОтправления.ТочкаНазначения.Наименование);
						 		ЗаписьXML.ЗаписатьКонецЭлемента();
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("deliveryPeriod");
						 			ЗаписьXML.ЗаписатьТекст(элем.СрокДоставкиМин+" - "+элем.СрокДоставкиМакс+" дн.");
						 		ЗаписьXML.ЗаписатьКонецЭлемента();									
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("price");
						 			ЗаписьXML.ЗаписатьТекст(Формат(элем.СтоимостьНалПлатеж,"ЧДЦ=2; ЧГ=0"));
						 		ЗаписьXML.ЗаписатьКонецЭлемента();
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("type");
						 			ЗаписьXML.ЗаписатьТекст("cod");
				 				ЗаписьXML.ЗаписатьКонецЭлемента();
								ЗаписьXML.ЗаписатьКонецЭлемента();
				 			КонецЕсли;
				 		КонецЦикла;

				 
					Иначе		
								ЭтоДПД = (документОтправления.ТочкаНазначения.Код = "0048");
						        НазваниеТарифа = Строка(документОтправления.Тариф) + ?(ЭтоДПД,Строка(документОтправления.УслугаDPD),"");
								НазваниеТарифа = ?(НазваниеТарифа = "","Тариф ТК", НазваниеТарифа);
						
								ЗаписьXML.ЗаписатьНачалоЭлемента("deliveryMethod");
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
						 			ЗаписьXML.ЗаписатьТекст(НазваниеТарифа);
						 		ЗаписьXML.ЗаписатьКонецЭлемента();
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("description");
						 			ЗаписьXML.ЗаписатьТекст(документОтправления.ТочкаНазначения.Наименование);
						 		ЗаписьXML.ЗаписатьКонецЭлемента();
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("deliveryPeriod");
						 			ЗаписьXML.ЗаписатьТекст(документОтправления.СрокДоставки);
						 		ЗаписьXML.ЗаписатьКонецЭлемента();								
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("price");
					 				ЗаписьXML.ЗаписатьТекст(Формат(документОтправления.СтоимостьДоставкиПредоплата,"ЧДЦ=2; ЧГ=0"));
				 				ЗаписьXML.ЗаписатьКонецЭлемента();
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("type");
						 			ЗаписьXML.ЗаписатьТекст("prepay");
						 		ЗаписьXML.ЗаписатьКонецЭлемента();
								ЗаписьXML.ЗаписатьКонецЭлемента();
							/////////////////////////////////////////////////////
							    ЗаписьXML.ЗаписатьНачалоЭлемента("deliveryMethod");
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				 					ЗаписьXML.ЗаписатьТекст(НазваниеТарифа);
				 				ЗаписьXML.ЗаписатьКонецЭлемента();
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("description");
						 			ЗаписьXML.ЗаписатьТекст(документОтправления.ТочкаНазначения.Наименование);
						 		ЗаписьXML.ЗаписатьКонецЭлемента();
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("deliveryPeriod");
						 			ЗаписьXML.ЗаписатьТекст(документОтправления.СрокДоставки);
						 		ЗаписьXML.ЗаписатьКонецЭлемента();									
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("price");
						 			ЗаписьXML.ЗаписатьТекст(Формат(документОтправления.СтоимостьДоставки,"ЧДЦ=2; ЧГ=0"));
						 		ЗаписьXML.ЗаписатьКонецЭлемента();
						 		ЗаписьXML.ЗаписатьНачалоЭлемента("type");
						 			ЗаписьXML.ЗаписатьТекст("cod");
				 				ЗаписьXML.ЗаписатьКонецЭлемента();
								ЗаписьXML.ЗаписатьКонецЭлемента();
			  КонецЕсли;
			  ЗаписьXML.ЗаписатьКонецЭлемента();
				 
			 ЗаписьXML.ЗаписатьКонецЭлемента();
		 ЗаписьXML.ЗаписатьКонецЭлемента();		 
		 
	 КонецЦикла;
	 ЗаписьXML.ЗаписатьКонецЭлемента();	
	 
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
 КонецПроцедуры	

Процедура ОтправитьНаСайт() Экспорт
	СтрокаПротокола=ПротоколыПередач.Добавить();
	СтрокаПротокола.ДатаНачала=ТекущаяДата();
	
	Параметры    = новый Структура;
	Параметры.Вставить("token",Константы.Токен.Получить());
	Параметры.Вставить("xml", ОтправленныеДанные);
	АдресСкрипта = Константы.АдресВыгрузкиНасайт.Получить();
	ПолученныйФайл=СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры,АдресСкрипта);
	
	Если ПолученныйФайл=Неопределено Тогда 		
		СтрокаПротокола.Результат="Не удалось соеденится с сайтом"; 
		СтрокаПротокола.ДатаОкончания=ТекущаяДата();
		Возврат;	
	КонецЕсли; 
	Если аспПроцедурыОбменаДанными.АвторизацияВыполнена(ПолученныйФайл) Тогда
		СтрокаПротокола.Результат="Авторизация выполнена";
	Иначе
		СтрокаПротокола.Результат="Авторизация не выполнена";
	КонецЕсли;	
	
	ПолученныеДанные=СтоСПОбмен_Общий.ФайлВСтроку(ПолученныйФайл);
	СтрокаПротокола.ДатаОкончания=ТекущаяДата();
КонецПроцедуры

Процедура ОбработатьПолученныеДанные() Экспорт 
	результат=аспПроцедурыОбменаДанными.ОбработатьОтветыНаСменуСтатусовГД(ПолученныеДанные);
	тзВзвешивание	= результат.Взвешивание;
	тзПродление		= результат.Продление;
	тзИсключение	= результат.Исключение;
	тзУдаление		= результат.Удаление;
	Если тзВзвешивание<>Неопределено Тогда
		Для каждого стр из ЭтотОбъект["ЗапросыОплаты"] Цикл
			массСтрок=тзВзвешивание.НайтиСтроки(Новый Структура("Ссылка",стр.ГруппаДоставки));
			Если массСтрок.Количество()=0 Тогда
				стр.Успех=ложь;
				стр.СообщениеОшибки="Не найдено в ответе с сайта";
			Иначе
				Если массСтрок[0].result="ok" или массСтрок[0].result="ap" Тогда
					стр.Успех=Истина;
				Иначе	
					стр.Успех=ложь;
					стр.СообщениеОшибки=массСтрок[0].message;
				КОнецЕсли;
			КонецЕсли;
			СтрокаПротокола						= 	СтоСПОбмен_Выгрузка100сп.СтруктураПротокола();
			СтрокаПротокола.Отправили			= 	"в докменте: " + Ссылка;
			СтрокаПротокола.ДатаНачала			=	ТекущаяДата();				
			СтрокаПротокола.Описание			= 	"изменить статус на ""Запрос оплаты""";
			СтрокаПротокола.ПолученныеДанные	=  	?(стр.Успех,"ок", стр.СообщениеОшибки);
			СтрокаПротокола.ДатаОкончания		= 	ТекущаяДата();
			СтоСПОбмен_Выгрузка100сп.СохранитьПротоколОбмена(СтрокаПротокола, стр.ГруппаДоставки.ОтправлениеТранзита);
			
		КонецЦикла;	
	КонецЕсли;	
	
	Если тзПродление<>Неопределено Тогда
		Для каждого стр из ЭтотОбъект["ЗапросыОтсрочки"] Цикл
			массСтрок=тзПродление.НайтиСтроки(Новый Структура("Ссылка",стр.ГруппаДоставки));
			Если массСтрок.Количество()=0 Тогда
				стр.Успех=ложь;
				стр.СообщениеОшибки="Не найдено в ответе с сайта";
			Иначе
				Если массСтрок[0].result="ok" или массСтрок[0].result="ap" Тогда
					стр.Успех=Истина;
				Иначе	
					стр.Успех=ложь;
					стр.СообщениеОшибки=массСтрок[0].message;
				КОнецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	Если тзИсключение<>Неопределено Тогда
		Для каждого стр из ЭтотОбъект["ЗапросыИсключения"] Цикл
			массСтрок	= тзУдаление.НайтиСтроки(Новый Структура("Ссылка,orderId",стр.ГруппаДоставки,стр.КодЗаказа));
			Если массСтрок.Количество()=0 Тогда
				стр.Успех=ложь;
				стр.СообщениеОшибки="Не найдено в ответе с сайта";
			Иначе
				Если массСтрок[0].result="ok" или массСтрок[0].result="ap" Тогда
					стр.Успех=Истина;
				Иначе	
					стр.Успех=ложь;
					стр.СообщениеОшибки=массСтрок[0].message;
				КОнецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	
	Если тзУдаление<>Неопределено Тогда
		Для каждого стр из ЭтотОбъект["ЗапросыУдаления"] Цикл
			массСтрок	= тзУдаление.НайтиСтроки(Новый Структура("Ссылка,orderId",стр.ГруппаДоставки,стр.КодЗаказа));
			Если массСтрок.Количество()=0 Тогда
				стр.Успех			= ложь;
				стр.СообщениеОшибки	= "Не найдено в ответе с сайта";
			Иначе
				Если массСтрок[0].result="ok" или массСтрок[0].result="ap" Тогда
					стр.Успех			= Истина;
				Иначе	
					стр.Успех			= ложь;
					стр.СообщениеОшибки	= массСтрок[0].message;
				КОнецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	
КонецПроцедуры

Функция ПолучитьИзмененныеГруппыСсайта() Экспорт
	списокИзмененныхГрупп = новый СписокЗначений;
	
	массГрупп = ЗапросыОтсрочки.Выгрузить(новый Структура("Успех", истина),"ГруппаДоставки").ВыгрузитьКолонку("ГруппаДоставки");
	списокИзмененныхГрупп.ЗагрузитьЗначения(массГрупп);	
	
	массГрупп = ЗапросыИсключения.Выгрузить(новый Структура("Успех", истина),"ГруппаДоставки").ВыгрузитьКолонку("ГруппаДоставки");
	Для каждого элем Из массГрупп Цикл
		списокИзмененныхГрупп.Добавить(элем);
	КонецЦикла;	
	
	массГрупп = ЗапросыУдаления.Выгрузить(новый Структура("Успех", истина),"ГруппаДоставки").ВыгрузитьКолонку("ГруппаДоставки");
	Для каждого элем Из массГрупп Цикл
		списокИзмененныхГрупп.Добавить(элем);
	КонецЦикла;	
	
	массГрупп = ЗапросыОплаты.Выгрузить(новый Структура("Успех", истина),"ГруппаДоставки").ВыгрузитьКолонку("ГруппаДоставки");
	Для каждого элем Из массГрупп Цикл
		списокИзмененныхГрупп.Добавить(элем);
	КонецЦикла;	
	СтоСПОбмен_ГруппыДоставки.Получить_ПоКодам(списокИзмененныхГрупп);
	Возврат списокИзмененныхГрупп;
КонецФункции	

#КонецОбласти


#Область ФункцииЗаполнения
//Исключенные заказы становяться одиночными заказами
Функция ТекстЗапроса_ЗаказыДляИсключенияИзГрупп(ТекстыЗапроса)
	ИмяЗапроса = "ЗаказыДляИсключенияИзГрупп";
	ТекстЗапроса = "ВЫБРАТЬ
					|	КоробкиСостав.Ссылка КАК ГруппаДоставки,
					|	КоробкиСостав.Покупка КАК Покупка,
					|	КоробкиСостав.Участник КАК Участник,
					|	КоробкиСостав.КодЗаказа КАК КодЗаказа,
					|	КоробкиСостав.СообщениеУдаления КАК СообщениеУдаления
					|ИЗ
					|	Справочник.Коробки.Состав КАК КоробкиСостав
					|ГДЕ
					|	КоробкиСостав.Исключить
					|	И КоробкиСостав.Ссылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)";
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяЗапроса);
	Возврат  ТекстЗапроса;
КонецФункции	

//Удаленные заказы поподают в новую группу
Функция ТекстЗапроса_ЗаказыДляУдаленияИзГрупп(ТекстыЗапроса)
	ИмяЗапроса = "ЗаказыДляУдаленияИзГрупп";
	ТекстЗапроса = "ВЫБРАТЬ
					|	КоробкиСостав.Ссылка КАК ГруппаДоставки,
					|	КоробкиСостав.Покупка КАК Покупка,
					|	КоробкиСостав.Участник КАК Участник,
					|	КоробкиСостав.КодЗаказа КАК КодЗаказа,
					|	КоробкиСостав.СообщениеУдаления КАК СообщениеУдаления
					|ИЗ
					|	Справочник.Коробки.Состав КАК КоробкиСостав
					|ГДЕ
					|	КоробкиСостав.Удалить
					|	И КоробкиСостав.Ссылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)";
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяЗапроса);
	Возврат  ТекстЗапроса;
КонецФункции	

Функция ТекстЗапроса_ГруппыДляПродления(ТекстыЗапроса)
	ИмяЗапроса = "ГруппыДляПродления";
	ТекстЗапроса = "ВЫБРАТЬ
				   |	Коробки.Ссылка КАК ГруппаДоставки
				   |ПОМЕСТИТЬ втВзвешеные
				   |ИЗ
				   |	Справочник.Коробки КАК Коробки
				   |ГДЕ
				   |	Коробки.ДатаПервогоПоступления > ДАТАВРЕМЯ(1, 1, 1)
				   |	И РАЗНОСТЬДАТ(Коробки.ДатаПервогоПоступления, &ТекущаяДата, ДЕНЬ) > Коробки.СрокХраненияГруппы
				   |	И Коробки.Количество > Коробки.КоличествоНаСкладе
				   |	И Коробки.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
				   |	И Коробки.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForOrders)
				   |;
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	втВзвешеные.ГруппаДоставки,
				   |	ЕСТЬNULL(ЗапросыГруппыДоставкиОстатки.НеЗавершенОстаток, 0) КАК НеЗавершен
				   |ПОМЕСТИТЬ втСОтправленными
				   |ИЗ
				   |	втВзвешеные КАК втВзвешеные
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапросыГруппыДоставки.Остатки(, ГруппаДоставки В
				   |			(ВЫБРАТЬ
				   |				втВзвешеные.ГруппаДоставки
				   |			из
				   |				втВзвешеные как втВзвешеные)
				   |		И Запрос = Значение(Перечисление.СтатусыГруппыДоставки.waitForDelay)) КАК ЗапросыГруппыДоставкиОстатки
				   |		ПО втВзвешеные.ГруппаДоставки = ЗапросыГруппыДоставкиОстатки.ГруппаДоставки
				   |;
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	втСОтправленными.ГруппаДоставки
				   |ИЗ
				   |	втСОтправленными КАК втСОтправленными
				   |ГДЕ
				   |	втСОтправленными.НеЗавершен = 0";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяЗапроса);
	Возврат ТекстЗапроса;
КонецФункции


Функция ТекстЗапроса_ГруппыДляЗапросаОплаты(ТекстыЗапроса)
	ИмяЗапроса = "ГруппыДляЗапросаОплаты";
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Коробки.Ссылка КАК ГруппаДоставки,
	               |	Коробки.Длина КАК Длина,
	               |	Коробки.Ширина КАК Ширина,
	               |	Коробки.Высота КАК Высота,
	               |	Коробки.СтоимостьДоставки КАК СтоимостьДоставки,
	               |	Коробки.СтоимостьДоставкиПредоплата КАК СтоимостьДоставкиПредоплата,
	               |	Коробки.Вес КАК Вес,
	               |	Коробки.ДатаВзвешивания КАК ДатаВзвешивания
	               |ПОМЕСТИТЬ втВзвешеные
	               |ИЗ
	               |	Справочник.Коробки КАК Коробки
	               |ГДЕ
	               |	Коробки.Взвешено
	               |	И Коробки.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForOrders)
	               |	И Коробки.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ГруппаДоставки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втВзвешеные.ГруппаДоставки КАК ГруппаДоставки,
	               |	втВзвешеные.Длина КАК Длина,
	               |	втВзвешеные.Ширина КАК Ширина,
	               |	втВзвешеные.Высота КАК Высота,
	               |	втВзвешеные.СтоимостьДоставки КАК СтоимостьДоставки,
	               |	втВзвешеные.СтоимостьДоставкиПредоплата КАК СтоимостьДоставкиПредоплата,
	               |	втВзвешеные.Вес КАК Вес,
	               |	втВзвешеные.ДатаВзвешивания КАК ДатаВзвешивания,
	               |	ЕСТЬNULL(ЗапросыГруппыДоставкиОстатки.НеЗавершенОстаток, 0) КАК НеЗавершен
	               |ПОМЕСТИТЬ втСОтправленными
	               |ИЗ
	               |	втВзвешеные КАК втВзвешеные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапросыГруппыДоставки.Остатки(
	               |				,
	               |				ГруппаДоставки В
	               |						(ВЫБРАТЬ
	               |							втВзвешеные.ГруппаДоставки
	               |						ИЗ
	               |							втВзвешеные КАК втВзвешеные)
	               |					И Запрос = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForPayment)) КАК ЗапросыГруппыДоставкиОстатки
	               |		ПО втВзвешеные.ГруппаДоставки = ЗапросыГруппыДоставкиОстатки.ГруппаДоставки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втСОтправленными.ГруппаДоставки КАК ГруппаДоставки,
	               |	втСОтправленными.Длина КАК Длина,
	               |	втСОтправленными.Ширина КАК Ширина,
	               |	втСОтправленными.Высота КАК Высота,
	               |	втСОтправленными.СтоимостьДоставки КАК СтоимостьДоставки,
	               |	втСОтправленными.СтоимостьДоставкиПредоплата КАК СтоимостьДоставкиПредоплата,
	               |	втСОтправленными.Вес КАК Вес,
	               |	втСОтправленными.ДатаВзвешивания КАК ДатаВзвешивания
	               |ИЗ
	               |	втСОтправленными КАК втСОтправленными
	               |ГДЕ
	               |	втСОтправленными.НеЗавершен = 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяЗапроса);
	Возврат  ТекстЗапроса;
КонецФункции	


Функция ПолучитьДанныеЗаполнения() 
	ТекстыЗапроса 		= Новый СписокЗначений;
	ТаблицыДляДвижений 	= Новый Структура;

	ТекстЗапроса_ЗаказыДляИсключенияИзГрупп(ТекстыЗапроса);
	ТекстЗапроса_ЗаказыДляУдаленияИзГрупп(ТекстыЗапроса);
	ТекстЗапроса_ГруппыДляПродления(ТекстыЗапроса);
	ТекстЗапроса_ГруппыДляЗапросаОплаты(ТекстыЗапроса);
	
	Для каждого элем из ТекстыЗапроса Цикл
		имяТаблицы = "Таблица"+элем.Представление;
		Запрос = Новый Запрос;
		Запрос.Параметры.Вставить("ТекущаяДата", ТекущаяДата());
		
		Запрос.Текст = элем.Значение;
		Результат = Запрос.Выполнить();
		ТаблицыДляДвижений.Вставить(имяТаблицы, Результат.Выгрузить());
	КонецЦикла;
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", ТаблицыДляДвижений);
	
	//ПроведениеСерверСП.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	//ПроведениеСерверСП.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	Возврат ДополнительныеСвойства.ТаблицыДляДвижений;
КонецФункции	

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	#Область ПравильноеПроведение
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, 	ДополнительныеСвойства, РежимПроведения);
	Документы.ЗапросыГруппДоставки.ИнициализироватьДанныеДокумента(Ссылка, 			ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("ЗапросыГруппыДоставки", 	ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("Обмен100СПрн_Ошибки", 	ДополнительныеСвойства, Движения, Отказ);
	#КонецОбласти
КонецПроцедуры


#КонецОбласти