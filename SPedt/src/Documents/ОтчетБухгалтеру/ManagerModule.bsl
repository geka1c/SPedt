Функция ПолучитьТаблицу(Параметры) Экспорт
	СхемаКомпоновкиДанных 	= Отчеты.ОтчетПоБесплатнойВыдаче.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	КомпоновщикНастроек		= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(
		СхемаКомпоновкиДанных.ВариантыНастроек["ОтчетПоБесплатнойВыдачеДетальный"].Настройки);

	Настройки 			= КомпоновщикНастроек.Настройки;
	Для Каждого элем Из параметры Цикл
		ПараметрДанных 					= Настройки.ПараметрыДанных.Элементы.Найти(элем.Ключ);
		ПараметрДанных.Значение 		= элем.Значение;
		ПараметрДанных.Использование	= Истина;	
	КонецЦикла;
	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;

	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , , Тип(
		"ГенераторМакетаКомпоновкиДанных"));
		
	ВнешниеНаборыДанных = Новый Структура;
//	ВнешниеНаборыДанных.Вставить("сверка", ТЗ_Сверка);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, );

	Результат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Возврат Результат;
КонецФункции



Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	ТекстыЗапроса = Новый СписокЗначений;
	Получить_ТекстЗапроса_Обмен100СПрн_Ошибки (Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
	
КонецПроцедуры


Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.УстановитьПараметр("Период",                        ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("Номер",                         ДокументСсылка.Номер);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("Комментарий",                   ДокументСсылка.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",               ДокументСсылка.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                      ДокументСсылка.Проведен); 
	
КонецПроцедуры



Функция Получить_ТекстЗапроса_Обмен100СПрн_Ошибки (Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "Обмен100СПрн_Ошибки";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 

	
	ТекстЗапроса =  "
					|
					|ВЫБРАТЬ
	                |	ОтчетБухгалтеру.Ссылка.Дата КАК Период,
	                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	                |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ВыгрузкаЯндекс) КАК типОбмена,
	                |	ОтчетБухгалтеру.Ссылка КАК Партия,
	                |	1 КАК СтрокаВПартии,
	                |	null КАК Мегаордер,
	                |	""Не отправлен отчет по бесплатной выдаче"" КАК СообщениеОшибки,
	                |	1 КАК КоличествоНеИсправленных
	                |ИЗ
	                |	Документ.ОтчетБухгалтеру КАК ОтчетБухгалтеру
	                |ГДЕ
	                |	ОтчетБухгалтеру.Ссылка = &Ссылка
	                |	И НЕ ОтчетБухгалтеру.Отправлено
					|";
	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
КонецФункции



Функция ПолноеИмяОбъекта()
	Возврат "Документ.ОтчетБухгалтеру";
КонецФункции

