
// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция УстановитьЭлементОтбораСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, Использование = Истина)

	НайденныйЭлемент = Неопределено;
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПараметра);
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			НайденныйЭлемент = ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденныйЭлемент = Неопределено Тогда
		НайденныйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		НайденныйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(ЗначениеПараметра);
		ПравоеЗначение = СписокЗначений;
	Иначе
		НайденныйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПравоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	НайденныйЭлемент.Использование  = Использование;
	НайденныйЭлемент.ЛевоеЗначение  = Поле;
	НайденныйЭлемент.ПравоеЗначение = ПравоеЗначение;
	
	Возврат НайденныйЭлемент;

КонецФункции // НайтиЭлементОтбораСКД()

// Процедура выполняет загрузку настроек отбора из настроек по умолчанию.
//
&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблона");
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры // ЗагрузитьНастройкиОтбораПоУмолчанию()

// Обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	Если ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
		
		СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
		
		Объект.ИсходныеДанные.Загрузить(СтруктураДанных.Товары);
		
		Если ЗначениеЗаполнено(СтруктураДанных.СтруктураДействий) Тогда
			
			ПараметрДействия = Неопределено;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьОрганизацию", ПараметрДействия) Тогда
				Объект.Организация = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьСклад", ПараметрДействия) Тогда
				УстановитьЭлементОтбораСКД(КомпоновщикНастроек, "Склад", ПараметрДействия, Истина);
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьВидЦены", ПараметрДействия) Тогда
				Объект.ВидЦены = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ПоказыватьКолонкуКоличествоВДокументе", ПараметрДействия) Тогда
				Элементы.ТоварыКоличествоВДокументе.Видимость = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьРежимПечатиИзДокумента", ПараметрДействия) Тогда
				ПечатьИзДокумента = Истина;
				Элементы.Настройки.Видимость = Ложь;
			КонецЕсли;
			
			ЗаполнитьКоличествоЭтикетокПоДокументу        = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЭтикетокПоДокументу", ПараметрДействия);
			ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе", ПараметрДействия);
			ЗаполнитьКоличествоЦенниковПоДокументу        = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЦенниковПоДокументу", ПараметрДействия);
			ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе", ПараметрДействия);
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьТаблицуТоваров", ПараметрДействия) Тогда
				ЗаполнитьТаблицуТоваровНаСервере(Ложь);
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьРежим", ПараметрДействия) Тогда
				УстановитьРежим(ПараметрДействия);
			Иначе
				ВызватьИсключение НСтр("ru = 'Режим печати не установлен'");;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Вызов обработки из интерфейса
		ЗаполнитьКоличествоЭтикетокПоДокументу        = Ложь;
		ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе = Истина;
		ЗаполнитьКоличествоЦенниковПоДокументу        = Ложь;
		ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе = Истина;
		
		УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Функция ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего)
	
	Если Количество < КоличествоВсего Тогда
		
		Текст = Текст
		        + ?(Текст <> "", Символы.ПС, "")
		        + НСтр("ru = 'Отметка выбора установлена для %КоличествоВыбранных% строк из %КоличествоВсего%.'");
	
		Текст = Текст
		        + Символы.ПС
		        + НСтр("ru = 'Проверьте: не заполнены либо количество, либо не задан шаблон ценника (этикетки). В этом случае отметка выбора для строк не может быть установлена.'");
	
		Текст = СтрЗаменить(Текст, "%КоличествоВыбранных%", Количество);
		Текст = СтрЗаменить(Текст, "%КоличествоВсего%", КоличествоВсего);
		
		ПоказатьОповещениеПользователя("Операция выполнена", ,Текст);
	
	КонецЕсли;
	
КонецФункции // ПолучитьТекстПроверки()

// Процедура вызывается при нажатии на кнопку "Выбрать платежи".
//
&НаКлиенте
Процедура ВыбратьСтроки()
	
	Количество = 0;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Режим);
		
		Если СтрокаТЧ.Выбран Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВсего = Объект.Товары.Количество();
	
	ПоказатьОповещениеПользователюОВозможнойОшибке("", Количество, КоличествоВсего);
	
КонецПроцедуры // ВыбратьСтроки()

// Процедура вызывается при нажатии на кнопку "Исключить платежки".
//
&НаКлиенте
Процедура ИсключитьСтроки()

	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Выбран = Ложь
	КонецЦикла;
	
КонецПроцедуры // ИсключитьСтроки()

// Процедура вызывается при нажатии на кнопку "Выбрать выделенные платежи".
//
&НаКлиенте
Процедура ВыбратьВыделенныеСтроки(Команда)
	
	Количество = 0;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Режим);
		
		Если СтрокаТЧ.Выбран Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВсего = МассивСтрок.Количество();
	
	ПоказатьОповещениеПользователюОВозможнойОшибке("", Количество, КоличествоВсего);
	
КонецПроцедуры // ВыбратьВыделенныеСтроки()

// Процедура вызывается при нажатии на кнопку "Исключить выделенные платежи".
//
&НаКлиенте
Процедура ИсключитьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран = Ложь;
	КонецЦикла;
	
КонецПроцедуры // ИсключитьВыделенныеСтроки()

&НаСервере
Процедура УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТЧ)
	
	// Расчет количества Этикеток.
	Если ЗаполнитьКоличествоЭтикетокПоДокументу И НЕ ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе Тогда
		СтрокаТЧ.КоличествоЭтикеток = СтрокаТЧ.КоличествоВДокументе;
	ИначеЕсли ЗаполнитьКоличествоЭтикетокПоДокументу И ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе Тогда
		СтрокаТЧ.КоличествоЭтикеток = ?(СтрокаТЧ.КоличествоВДокументе > СтрокаТЧ.ОстатокНаСкладе,СтрокаТЧ.ОстатокНаСкладе,СтрокаТЧ.КоличествоВДокументе);
	ИначеЕсли НЕ ЗаполнитьКоличествоЭтикетокПоДокументу И ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе Тогда
		СтрокаТЧ.КоличествоЭтикеток = ?(СтрокаТЧ.ОстатокНаСкладе > 0, СтрокаТЧ.ОстатокНаСкладе, 0);
	КонецЕсли;
	
	// Расчет количества Ценников.
	Если ЗаполнитьКоличествоЦенниковПоДокументу И НЕ ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе Тогда
		СтрокаТЧ.КоличествоЦенников = 1;
	ИначеЕсли ЗаполнитьКоличествоЦенниковПоДокументу И ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе Тогда
		СтрокаТЧ.КоличествоЦенников = ?(СтрокаТЧ.ОстатокНаСкладе > 0, 1, 0);
	ИначеЕсли НЕ ЗаполнитьКоличествоЦенниковПоДокументу И ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе Тогда
		СтрокаТЧ.КоличествоЦенников = ?(СтрокаТЧ.ОстатокНаСкладе > 0, 1, 0);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение табличной части "Товары".
//
&НаСервере
Процедура ЗаполнитьТаблицуТоваровНаСервере(ПроверятьЗаполнение = Истина, Сохранять = Истина)
	
	Если ПроверятьЗаполнение И ЭтаФорма.ПроверитьЗаполнение() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// Сохранение выбранных позиций для их последующего восстановления.
	Если Сохранять Тогда
		ТаблицаВыбранныеПозиции = Объект.Товары.Выгрузить();
	КонецЕсли;
	
	// Поля необходимые для вывода в таблицу товаров на форме.
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.ПолучитьПустуюСтруктуруНастроек();
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Цена");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	СтруктураНастроек.ОбязательныеПоля.Добавить("ОстатокНаСкладе");
	
	// Шаблоны этикеток и ценников.
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура.ВидНоменклатуры.ШаблонЭтикетки");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура.ВидНоменклатуры.ШаблонЦенника");
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦены"    , Объект.ВидЦены);
	//СтруктураНастроек.ПараметрыДанных.Вставить("Склад"      , Объект.Склад);
	СтруктураНастроек.ПараметрыДанных.Вставить("Организация", Объект.Организация);
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроек;
	
	Если Объект.ИсходныеДанные.Количество() > 0 ИЛИ ПечатьИзДокумента Тогда
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
		СтруктураНастроек.ИсходныеДанные = Объект.ИсходныеДанные.Выгрузить();
	Иначе
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаБД";
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	// Загрузка сформированного списка товаров.
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	Для Каждого СтрокаТЧ Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			НоваяСтрока.Упаковка             = СтрокаТЧ.Упаковка;
		КонецЕсли;
		
		НоваяСтрока.Цена                 = СтрокаТЧ.Цена;
		НоваяСтрока.Штрихкод             = СтрокаТЧ.Штрихкод;
		НоваяСтрока.ШаблонЦенника        = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить("Номенклатура.ВидНоменклатуры.ШаблонЦенника")];
		НоваяСтрока.ШаблонЭтикетки       = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить("Номенклатура.ВидНоменклатуры.ШаблонЭтикетки")];
		НоваяСтрока.ОстатокНаСкладе      = СтрокаТЧ.ОстатокНаСкладе;
		НоваяСтрока.КоличествоВДокументе = СтрокаТЧ.Количество;
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(НоваяСтрока);
		
		// Восстановление позиций, сохраненных перед заполнением ТЧ. 
		Если Сохранять Тогда
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
				ПараметрыОтбора.Вставить("Характеристика", НоваяСтрока.Характеристика);
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
				ПараметрыОтбора.Вставить("Упаковка", НоваяСтрока.Упаковка);
			КонецЕсли;
			НайденныеСтроки = ТаблицаВыбранныеПозиции.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Выбран = ПроверитьВозможностьВыбораТовара(НоваяСтрока, Режим);
		
	КонецЦикла;
	
	Элементы.Товары.Обновить();
	
КонецПроцедуры // ЗаполнитьТаблицуТоваровНаСервере()

&НаСервере
Процедура УстановитьКоличествоПоУмолчаниюНаСервере()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТЧ);		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоПоУмолчанию(Команда)
	
	УстановитьКоличествоПоУмолчаниюНаСервере();
	
	Количество = 0;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран              = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Режим);
		
		Если СтрокаТЧ.Выбран Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВсего = МассивСтрок.Количество();
	
	Текст = НСтр("ru = 'Установлено количество по умолчанию для  %Количество% строк.'");
	Текст = СтрЗаменить(Текст, "%Количество%", КоличествоВсего);
	
	ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
	
КонецПроцедуры

// Процедура - обработчик команды "ЗаполнитьТаблицуТоваров".
//
&НаКлиенте
Процедура ЗаполнитьТаблицуТоваров(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ЗаполнитьТаблицуТоваровНаСервере(Истина, Ложь);
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Сохранить данные о количестве, шаблонах в табличной части при перезаполнении?'");
		Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
		Если Результат = КодВозвратаДиалога.Да Тогда
			ЗаполнитьТаблицуТоваровНаСервере(Истина, Истина);
		ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
			ЗаполнитьТаблицуТоваровНаСервере(Истина, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры // ЗаполнитьТаблицуТоваров()

// Процедура - обработчик команды "Печать".
//
&НаКлиенте
Процедура Печать(Команда)
	
	Если Объект.Товары.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() = 0 Тогда
		
		Предупреждение(НСтр("ru = 'Не выбрано ни одного товара'"));
		Возврат;
		
	КонецЕсли;
	
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
		
		ПараметрКоманды = Новый Массив;   // Добавим объект обработки печати ценников и этикеток в массив параметров печати.
		ПараметрКоманды.Добавить(Объект); // В дальнейшем будем обращаться к объекту через ПараметрКоманды[0]
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников", // Для вызова метода менеджера обработки "Печать".
			"Ценники,Этикетки",
			ПараметрКоманды,
			ЭтаФорма, // Форма владелец
			Новый Структура("Режим", Режим)
		);
		
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Процедура - обработчик события "ПриСохраненииДанныхВНастройкахНаСервере" формы.
//
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если СохраненныеНастройки <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из СохраненныеНастройки Цикл
			// Обратное преобразование имени для хранения ключа соответствия для хранения в структуре
			ИмяКлюча = СтрЗаменить(КлючИЗначение.Ключ,"_QTQ_",".");
			ИмяКлюча = СтрЗаменить(ИмяКлюча,"_QPQ_"," ");
			Если ИмяКлюча = "_QQQ_" Тогда
				ИмяКлюча = "";
			КонецЕсли;
			Настройки.Вставить(ИмяКлюча, КлючИЗначение.Значение);
		КонецЦикла;
		
	Иначе
		
		// Сохранение отбора выполняется только если это не печать из документа
		Настройки.Вставить("НастройкиОтбора",Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки));
		
	КонецЕсли;
	
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

// Процедура - обработчик события "ПриЗагрузкеДанныхИзНастроекНаСервере" формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("АдресВХранилище") И ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
		
		СохраненныеНастройки = Новый Структура;
		Для Каждого КлючИЗначение Из Настройки Цикл
			// Преобразование имени для хранения ключа соответствия для хранения в структуре
			ИмяКлюча = СтрЗаменить(КлючИЗначение.Ключ,".","_QTQ_");
			ИмяКлюча = СтрЗаменить(ИмяКлюча," ","_QPQ_");
			Если ИмяКлюча = "" Тогда
				ИмяКлюча = "_QQQ_";
			КонецЕсли;
			СохраненныеНастройки.Вставить(ИмяКлюча, КлючИЗначение.Значение);
		КонецЦикла;
		
		Настройки.Очистить();
		
	Иначе
		
		ВидимостьОтбора = Настройки.Получить("ВидимостьОтбора");
		Элементы.ГруппаОтбор.Видимость = ВидимостьОтбора;
		Элементы.Отбор.Заголовок = ?(ВидимостьОтбора, НСтр("ru = 'Скрыть отбор'"), НСтр("ru = 'Показать отбор'"));
		
		ВидимостьРежимаЗаполнения = Настройки.Получить("ВидимостьРежимаЗаполнения");
		Элементы.ГруппаРежимЗаполнения.Видимость = ВидимостьРежимаЗаполнения;
		Элементы.РежимЗаполнения.Заголовок = ?(ВидимостьРежимаЗаполнения, НСтр("ru = 'Скрыть режим заполнения'"), НСтр("ru = 'Показать режим заполнения'"));
		
		НастройкиОтбора = Настройки.Получить("НастройкиОтбора");
		Если НастройкиОтбора <> Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтбора.Получить());
		Иначе
			ЗагрузитьНастройкиОтбораПоУмолчанию();
		КонецЕсли;
		
		Режим = Настройки.Получить("Режим");
		Если ЗначениеЗаполнено(Режим) Тогда
			УстановитьРежим(Режим);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим)
	
	Если Режим = "ПечатьЦенниковИЭтикеток" Тогда
	
		Если (ТекущиеДанные.КоличествоЦенников = 0)
			И ТекущиеДанные.КоличествоЭтикеток = 0 Тогда
			
			Возврат Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
			И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки) Тогда
			
			Возврат Ложь;
			
		ИначеЕсли (ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
			      И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
			      И ТекущиеДанные.КоличествоЭтикеток <> 0
			      И ТекущиеДанные.КоличествоЦенников = 0) Тогда

			Возврат Ложь;
			
		ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
			      И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
			      И ТекущиеДанные.КоличествоЭтикеток = 0
			      И ТекущиеДанные.КоличествоЦенников <> 0) Тогда
			
			Возврат Ложь;
			
		Иначе
			
			Возврат Истина;
			
		КонецЕсли;
	
	ИначеЕсли Режим = "ПечатьЭтикеток" Тогда
		
		Если ТекущиеДанные.КоличествоЭтикеток = 0 ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли Режим = "ПечатьЦенников" Тогда
		
		Если ТекущиеДанные.КоличествоЦенников = 0 ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПроверитьВозможностьВыбораТовара()



// Процедура - обработчик события "НачалоВыбора" поля "Номенклатура" табличной части "Товары".
//
&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // ТоварыНоменклатураНачалоВыбора()

// Процедура - обработчик события "Очистка" поля "Номенклатура" табличной части "Товары".
//
&НаКлиенте
Процедура ТоварыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // ТоварыНоменклатураОчистка()

// Процедура - обработчик события "НачалоВыбора" поля "Характеристика" табличной части "Товары".
//
&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // ТоварыХарактеристикаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля "Характеристика" табличной части "Товары".
//
&НаКлиенте
Процедура ТоварыХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // ТоварыХарактеристикаОчистка()

// Процедура - обработчик события "НачалоВыбора" поля "Упаковка" табличной части "Товары".
//
&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // ТоварыУпаковкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля "Упаковка" табличной части "Товары".
//
&НаКлиенте
Процедура ТоварыУпаковкаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // ТоварыУпаковкаОчистка()



// Процедура - обработчик события "ПриИзменении" поля "КоличествоЦенников" табличной части "Товары".
//
&НаКлиенте
Процедура ТоварыКоличествоЦенниковПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим);
	
КонецПроцедуры // ТоварыКоличествоЦенниковПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "КоличествоЭтикеток" табличной части "Товары".
//
&НаКлиенте
Процедура ТоварыКоличествоЭтикетокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим);
	
КонецПроцедуры // ТоварыКоличествоЭтикетокПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ШаблонЦенника" табличной части "Товары".
//
&НаКлиенте
Процедура ТоварыШаблонЦенникаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим);
	
КонецПроцедуры // ТоварыШаблонЦенникаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ШаблонЭтикетки" табличной части "Товары".
//
&НаКлиенте
Процедура ТоварыШаблонЭтикеткиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим);
	
КонецПроцедуры // ТоварыШаблонЭтикеткиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "Выбран" табличной части "Товары".
//
&НаКлиенте
Процедура ТоварыВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока = ТекущиеДанные.НомерСтроки - 1;
	
	Если НЕ ТекущиеДанные.Выбран Тогда
		
	Иначе
		
		ОчиститьСообщения();
		
		ТекущиеДанные.Выбран = Истина;
		
		Если Режим = "ПечатьЦенниковИЭтикеток" Тогда
			
			Если (       ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И    ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон ценника'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И    ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЭтикеток";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И    ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон этикетки'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЭтикетки";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (   ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И    ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников и(или) этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И    ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И    ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбраны шаблоны ценников и(или) этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников и(или) этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Режим = "ПечатьЭтикеток" Тогда
			
			Если ТекущиеДанные.КоличествоЭтикеток = 0 Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЭтикеток";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон этикетки'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЭтикетки";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Режим = "ПечатьЦенников" Тогда
			
			Если ТекущиеДанные.КоличествоЦенников = 0 Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон ценника'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыВыбранПриИзменении()

// Процедура - обработчик команды "ПоказатьСкрытьОтбор".
//
&НаКлиенте
Процедура ПоказатьСкрытьОтбор(Команда)
	
	ВидимостьОтбора = НЕ ВидимостьОтбора;
	Элементы.ГруппаОтбор.Видимость = ВидимостьОтбора;
	Элементы.Отбор.Заголовок = ?(ВидимостьОтбора, НСтр("ru = 'Скрыть отбор'"), НСтр("ru = 'Показать отбор'"));
	
КонецПроцедуры // ПоказатьСкрытьОтбор()

// Процедура - обработчик команды "ПоказатьСкрытьРежимЗаполнения".
//
&НаКлиенте
Процедура ПоказатьСкрытьРежимЗаполнения(Команда)
	
	ВидимостьРежимаЗаполнения = НЕ ВидимостьРежимаЗаполнения;
	Элементы.ГруппаРежимЗаполнения.Видимость = ВидимостьРежимаЗаполнения;
	Элементы.РежимЗаполнения.Заголовок = ?(ВидимостьРежимаЗаполнения, НСтр("ru = 'Скрыть режим заполнения'"), НСтр("ru = 'Показать режим заполнения'"));
	
КонецПроцедуры // ПоказатьСкрытьРежимЗаполнения()

// Процедура - обработчик команды "УстановитьКоличествоЦенников".
//
&НаКлиенте
Процедура УстановитьКоличествоЦенников(Команда)
	
	ВыбранноеЗначение = Неопределено;
	Если ВвестиЧисло(ВыбранноеЗначение, НСтр("ru = 'Введите количество ценников'"), 10, 2) Тогда
		
		Количество = 0;
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.КоличествоЦенников  = ВыбранноеЗначение;
			СтрокаТЧ.Выбран              = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлено количество ценников %Количество%.'");
		Текст = СтрЗаменить(Текст, "%Количество%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьКоличествоЦенников()

// Процедура - обработчик команды "УстановитьКоличествоЭтикеток".
//
&НаКлиенте
Процедура УстановитьКоличествоЭтикеток(Команда)
	
	ВыбранноеЗначение = Неопределено;
	Если ВвестиЧисло(ВыбранноеЗначение, НСтр("ru = 'Введите количество'"), 10, 2) Тогда
		
		Количество = 0;
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.КоличествоЭтикеток  = ВыбранноеЗначение;
			СтрокаТЧ.Выбран              = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлено количество этикеток %Количество%.'");
		Текст = СтрЗаменить(Текст, "%Количество%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьКоличествоЭтикеток()

// Процедура - обработчик команды "УстановитьШаблонЦенников".
//
&НаКлиенте
Процедура УстановитьШаблонЦенников(Команда)
	
	ВыбранноеЗначение = Неопределено;
	Если ВвестиЗначение(ВыбранноеЗначение, НСтр("ru = 'Выбор шаблона ценника'"), Тип("СправочникСсылка.ШаблоныЭтикетокИЦенников")) Тогда
		
		Количество = 0;
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.ШаблонЦенника  = ВыбранноеЗначение;
			СтрокаТЧ.Выбран         = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлен шаблон ""%Шаблон%"".'");
		Текст = СтрЗаменить(Текст, "%Шаблон%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьШаблонЦенников()

// Процедура - обработчик команды "УстановитьШаблонЭтикеток".
//
&НаКлиенте
Процедура УстановитьШаблонЭтикеток(Команда)
	
	ВыбранноеЗначение = Неопределено;
	Если ВвестиЗначение(ВыбранноеЗначение, НСтр("ru = 'Выбор шаблона этикетки'"), Тип("СправочникСсылка.ШаблоныЭтикетокИЦенников")) Тогда
		
		Количество = 0;
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.ШаблонЭтикетки = ВыбранноеЗначение;
			СтрокаТЧ.Выбран         = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлен шаблон ""%Шаблон%"".'");
		Текст = СтрЗаменить(Текст, "%Шаблон%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьШаблонЭтикеток()

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ РЕЖИМОМ ПЕЧАТИ

// Процедура устанавливает видимость элементов в зависимости от настройки параметров формы
//
&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	
	ВидимостьЭтикетки = Ложь;
	ВидимостьЦенники  = Ложь;
		
	Если Режим = "ПечатьЦенниковИЭтикеток" Тогда
		ВидимостьЭтикетки = Истина;
		ВидимостьЦенники  = Истина;
	ИначеЕсли Режим = "ПечатьЦенников" Тогда
		ВидимостьЭтикетки = Ложь;
		ВидимостьЦенники  = Истина;
	ИначеЕсли Режим = "ПечатьЭтикеток" Тогда
		ВидимостьЭтикетки = Истина;
		ВидимостьЦенники  = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыКоличествоЭтикеток.Видимость               = ВидимостьЭтикетки;
	Элементы.ТоварыШаблонЭтикетки.Видимость                   = ВидимостьЭтикетки;
	Элементы.ТоварыУстановитьШаблонЭтикеток.Видимость         = ВидимостьЭтикетки;
	Элементы.ТоварыУстановитьКоличествоЭтикеток.Видимость     = ВидимостьЭтикетки;
	Элементы.РежимЗаполненияЭтикеток.Видимость                = ВидимостьЭтикетки;
	Элементы.ЗаполнитьКоличествоЭтикетокПоДокументу.Видимость = ВидимостьЭтикетки И ПечатьИзДокумента;
	
	Элементы.ТоварыКоличествоЦенников.Видимость               = ВидимостьЦенники;
	Элементы.ТоварыШаблонЦенника.Видимость                    = ВидимостьЦенники;
	Элементы.ТоварыУстановитьШаблонЦенников.Видимость         = ВидимостьЦенники;
	Элементы.ТоварыУстановитьКоличествоЦенников.Видимость     = ВидимостьЦенники;
	Элементы.РежимЗаполненияЦенников.Видимость                = ВидимостьЦенники;
	Элементы.ЗаполнитьКоличествоЦенниковПоДокументу.Видимость = ВидимостьЦенники И ПечатьИзДокумента;
	
КонецПроцедуры // ОбновитьВидимостьЭлементов()

// Процедура устанавливает режим "ПечатьЦенников" на сервере.
//
&НаСервере
Процедура УстановитьРежимПечатьЦенниковНаСервере()
	
	АвтоЗаголовок = Ложь;
	Режим = "ПечатьЦенников";
	
	Если ПечатьИзДокумента Тогда
		Заголовок = НСтр("ru = 'Печать ценников из документа'");
	Иначе
		Заголовок = НСтр("ru = 'Печать ценников'");
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры // УстановитьРежимПечатьЦенниковНаСервере()

// Процедура - обработчик команды "УстановитьРежимПечатьЦенников".
//
&НаКлиенте
Процедура УстановитьРежимПечатьЦенников(Команда)
	
	УстановитьРежимПечатьЦенниковНаСервере();
	
КонецПроцедуры // УстановитьРежимПечатьЦенников()

// Процедура устанавливает режим "ПечатьЦенниковИЭтикеток" на сервере.
//
&НаСервере
Процедура УстановитьРежимПечатьЦенниковИЭтикетокНаСервере()
	
	АвтоЗаголовок = Ложь;
	Режим = "ПечатьЦенниковИЭтикеток";
	
	Если ПечатьИзДокумента Тогда
		Заголовок = НСтр("ru = 'Печать ценников и этикеток из документа'");
	Иначе
		Заголовок = НСтр("ru = 'Печать ценников и этикеток'");
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры // УстановитьРежимПечатьЦенниковИЭтикетокНаСервере()

// Процедура - обработчик команды "УстановитьРежимПечатьЦенниковИЭтикеток".
//
&НаКлиенте
Процедура УстановитьРежимПечатьЦенниковИЭтикеток(Команда)
	
	УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
	
КонецПроцедуры // УстановитьРежимПечатьЦенниковИЭтикеток()

// Процедура устанавливает режим "ПечатьЭтикеток" на сервере.
//
&НаСервере
Процедура УстановитьРежимПечатьЭтикетокНаСервере()
	
	АвтоЗаголовок = Ложь;
	Режим = "ПечатьЭтикеток";
	
	Если ПечатьИзДокумента Тогда
		Заголовок = НСтр("ru = 'Печать этикеток из документа'");
	Иначе
		Заголовок = НСтр("ru = 'Печать этикеток'");
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры // УстановитьРежимПечатьЭтикетокНаСервере()

// Процедура - обработчик команды "УстановитьРежимПечатьЭтикеток".
//
&НаКлиенте
Процедура УстановитьРежимПечатьЭтикеток(Команда)
	
	УстановитьРежимПечатьЭтикетокНаСервере();
	
КонецПроцедуры // УстановитьРежимПечатьЭтикеток()

// Процедура выполняет установку выбранного режима печати
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура УстановитьРежим(ПараметрРежим)
	
	Если ПараметрРежим = "ПечатьЦенниковИЭтикеток" Тогда
		УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
	ИначеЕсли ПараметрРежим = "ПечатьЦенников" Тогда
		УстановитьРежимПечатьЦенниковНаСервере();
	ИначеЕсли ПараметрРежим = "ПечатьЭтикеток" Тогда
		УстановитьРежимПечатьЭтикетокНаСервере();
	Иначе
		ВызватьИсключение НСтр("ru = 'Установленный режим печати не поддерживается'");
	КонецЕсли;
	
КонецПроцедуры // УстановитьРежим()

&НаСервере
Функция УстановитьНовыеШтрихкодыEAN13НаСервере()
	
	Количество = 0;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Штрихкоды = Новый Соответствие;
	
	НачатьТранзакцию();
	
	Попытка
	МаксимальныйКод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьМаксимальноеЗначениеКодаШтрихкодаЧислом();
	
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Штрихкод) Тогда
			Количество = Количество + 1;
		Иначе
			Продолжить;
		КонецЕсли;
		
		НовыйШтрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		НовыйШтрихкод.Номенклатура = СтрокаТЧ.Номенклатура; 
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			НовыйШтрихкод.Характеристика       = СтрокаТЧ.Характеристика;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			НовыйШтрихкод.Упаковка             = СтрокаТЧ.Упаковка;
		КонецЕсли;
		
		НовыйШтрихкод.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодПоКоду(Мин(МаксимальныйКод + 1, 99999999), "0", "00");
		НовыйШтрихкод.Записать();
		
		Штрихкоды.Вставить(СтрокаТЧ, НовыйШтрихкод.Штрихкод);
		МаксимальныйКод = МаксимальныйКод + 1;
		
	КонецЦикла;
	
	Исключение
		ОтменитьТранзакцию();
		Возврат 0;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Для Каждого КлючИЗначение Из Штрихкоды Цикл
		КлючИЗначение.Ключ.Штрихкод = КлючИЗначение.Значение;	
	КонецЦикла;
	
	Возврат Количество; 
	
КонецФункции

&НаКлиенте
Процедура УстановитьНовыйШтрихкодEAN13(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	КоличествоВсего = МассивСтрок.Количество();
	
	Текст = НСтр("ru = 'Сгенерировано %Количество% штрихкодов.'");
	Текст = СтрЗаменить(Текст, "%Количество%", УстановитьНовыеШтрихкодыEAN13НаСервере());
	
	Количество = 0;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Режим);
		
		Если СтрокаТЧ.Выбран Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
	
КонецПроцедуры
