


&НаКлиенте
Процедура СписокСчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Если Элементы.СписокСчета.ТекущиеДанные<>Неопределено Тогда
		ОткрытьЗначение(Элементы.СписокСчета.ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура СписокЗаявкиОбщийПриАктивизацииСтроки(Элемент)
	ОбновитьПараметрыСписков() ;

		
	//Если ТекущийСписок=Неопределено Тогда Возврат; КонецЕсли;
	//Если не Текущийсписок.ТекущиеДанные=неопределено и Текущийсписок.ТекущиеДанные.Свойство("Груз") Тогда
	//	СписокДокументов.Параметры.УстановитьЗначениеПараметра("Груз",Текущийсписок.ТекущиеДанные.Груз);
	//ИначеЕсли Текущийсписок.Имя="ВсеГрузы" или Текущийсписок.Имя="СписокОтПоставщика"  Тогда
	//	СписокДокументов.Параметры.УстановитьЗначениеПараметра("Груз",Неопределено);
	//Иначе
	//	СписокДокументов.Параметры.УстановитьЗначениеПараметра("Груз",Неопределено);
	//КонецЕсли;	
	

КонецПроцедуры

&НаКлиенте
Процедура кФильтрПриИзменении(Элемент)
	кФильтрПриИзменениинаСервере();
КонецПроцедуры

Процедура кФильтрПриИзменениинаСервере()
	стрНастройки=Новый Структура();
	стрНастройки.Вставить("кОтПоставщика",	кОтПоставщика);
	стрНастройки.Вставить("кНаСкладе",	кНаСкладе);
	стрНастройки.Вставить("кЗаявкаТК",	кЗаявкаТК);
	стрНастройки.Вставить("кВыехал",		кВыехал);
	стрНастройки.Вставить("кСчетЭК",		кСчетЭК);
	стрНастройки.Вставить("кСчетТК",		кСчетТК);
	стрНастройки.Вставить("кДоставлен",	кДоставлен);
	стрНастройки.Вставить("кУтрачен",	кУтрачен);
	ХранилищеОбщихНастроек.Сохранить(ИмяФормы,,стрНастройки,,ПользователиКлиентСервер.ТекущийПользователь().Наименование);
	ОбновитьКалендарь();
КонецПроцедуры	

&НаКлиенте
Процедура ПоказатьСкрытьПодвал(Команда)
	Элементы.ГруппаСтраницыПодвал.Видимость= не Элементы.ГруппаСтраницыПодвал.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	ОбновитьСписокДокументов();
//	ОбновитьПараметрыСписков() ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументов()
	ТекущийСписок=ПолучитьТекущийСписок(Элементы);
	Если ТекущийСписок=Неопределено Тогда Возврат; КонецЕсли;
	Если не Текущийсписок.ТекущиеДанные=неопределено и Текущийсписок.ТекущиеДанные.Свойство("Груз") Тогда
		СписокДокументов.Параметры.УстановитьЗначениеПараметра("Груз",Текущийсписок.ТекущиеДанные.Груз);
	ИначеЕсли Текущийсписок.Имя="ВсеГрузы" или Текущийсписок.Имя="СписокОтПоставщика"  Тогда
		СписокДокументов.Параметры.УстановитьЗначениеПараметра("Груз",Неопределено);
	Иначе
		СписокДокументов.Параметры.УстановитьЗначениеПараметра("Груз",Неопределено);
	КонецЕсли;	
	
КонецПроцедуры // ОбновитьСписокДокументов()


Процедура ОбновитьСписокЗаявок()
	Статус=ПолучитьТекущийСтатус();
	ТекСписок = ПолучитьТекущийСписок(Элементы);
	Если ТекСписок=Неопределено Тогда Возврат; конецЕсли;
	ИмяСписка = ТекСписок.Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаВТранспортнуюКомпаниюЗаказы.Ссылка как  ЗаявкаВТК
		|ИЗ
		|	Документ.ЗаявкаВТранспортнуюКомпанию.Заказы КАК ЗаявкаВТранспортнуюКомпаниюЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДоставки.СрезПоследних(, Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиГруза.ДобавленСчетЭК)) КАК СтатусыДоставкиСрезПоследних
		|		ПО ЗаявкаВТранспортнуюКомпаниюЗаказы.Груз = СтатусыДоставкиСрезПоследних.Груз
		|			И (ЗаявкаВТранспортнуюКомпаниюЗаказы.Ссылка.Проведен)
		|ГДЕ
		|	НЕ СтатусыДоставкиСрезПоследних.Статус ЕСТЬ NULL 
		|	И СтатусыДоставкиСрезПоследних.Статус в (&Статус)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаВТранспортнуюКомпаниюЗаказы.Ссылка";
		
		МассивСтатусов=новый Массив;
		Если ИмяСписка="ВсеГрузы" Тогда
			МассивСтатусов.Добавить(Перечисления.СтатусыОтправкиГруза.СформирванаЗаявкаВТК);
			МассивСтатусов.Добавить(Перечисления.СтатусыОтправкиГруза.ВыехалСТочки);
			МассивСтатусов.Добавить(Перечисления.СтатусыОтправкиГруза.ВТранспортнойКомпании);
			МассивСтатусов.Добавить(Перечисления.СтатусыОтправкиГруза.Доставлен);
			МассивСтатусов.Добавить(Перечисления.СтатусыОтправкиГруза.Утрачен);
			МассивСтатусов.Добавить(Перечисления.СтатусыОтправкиГруза.ДобавленСчетЭК);
		ИначеЕсли ИмяСписка="СписокСчета" Тогда
			МассивСтатусов.Добавить(Перечисления.СтатусыОтправкиГруза.ВТранспортнойКомпании);
			МассивСтатусов.Добавить(Перечисления.СтатусыОтправкиГруза.ДобавленСчетЭК);

		иначе
			МассивСтатусов.Добавить(Статус);	
		КонецЕсли;	
		
	Запрос.УстановитьПараметр("Статус", МассивСтатусов);
	РезультатЗапроса = Запрос.Выполнить();
	СписокЗаявкиОбщий.Очистить();
	СписокЗаявкиОбщий.Загрузить(РезультатЗапроса.Выгрузить());
	СписокЗаявкиОбщий.Добавить();
КонецПроцедуры	

&НаКлиенте
Процедура тдКалендарьОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Дата") Тогда
		//фрм=ПолучитьФорму("Отчет.ОтчетПоСтатусамДоставки.Форма.ФормаОтчета");
		//отчетОбъект=фрм.Отчет;
		//УстановитьПараметрыРасшифровки(отчетОбъект,Расшифровка);
		//КопироватьДанныеФормы(отчетОбъект,фрм.отчет);
		//фрм.открыть();
	КонецЕсли;
	ОткрытьФорму("Обработка.КонтрольДоставкиГрузов.Форма.ФормаРасшифровкиКалендаря",новый структура("ДатаКалендаря,Статусы,ТекСтатус",Расшифровка.ДатаКалендаря,Расшифровка.Статусы,Расшифровка.текСтатус),ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//	фрм=ПолучитьФорму("Обработка.КонтрольДоставкиГрузов.Форма.ФормаРасшифровкиКалендаря",новый структура("ДатаКалендаря,Статусы,ТекСтатус",Расшифровка.ДатаКалендаря,Расшифровка.Статусы,Расшифровка.текСтатус),ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно);
//	фрм.открыть();
//	
	
	
КонецПроцедуры

Процедура УстановитьПараметрыРасшифровки(отчетОбъект,Расшифровка)
	//об=ДанныеФормыВЗначение(отчетОбъект,Тип("ОтчетОбъект.ОтчетПоСтатусамДоставки"));
	//об.НачалоПериода=НачалоДня(Расшифровка);
	//об.КонецПериода=КонецДня(Расшифровка);
	//ЗначениеВДанныеФормы(об,отчетОбъект);
КонецПроцедуры





Функция ОпределитьДеньНедели(НомерДняНедели)
	
	Если НомерДняНедели = 1 Тогда
		Возврат "Понедельник";
	ИначеЕсли НомерДняНедели = 2 Тогда
		Возврат "Вторник";
	ИначеЕсли НомерДняНедели = 3 Тогда
		Возврат "Среда";
	ИначеЕсли НомерДняНедели = 4 Тогда
		Возврат "Четверг";
	ИначеЕсли НомерДняНедели = 5 Тогда
		Возврат "Пятница";
	ИначеЕсли НомерДняНедели = 6 Тогда
		Возврат "Суббота";
	Иначе
		Возврат "Воскресенье";
	КонецЕсли;
	
КонецФункции

Функция ОпределитьСледующуюДата(ТекущаяДата,КоличествоДнейНедели)
	
	Если КоличествоДнейНедели = 7 Тогда
		Возврат ТекущаяДата + 60*60*24;
	ИначеЕсли КоличествоДнейНедели = 6 Тогда
		Если ДеньНедели(ТекущаяДата) = 6 Тогда
			Возврат ТекущаяДата + 60*60*24*2;
		Иначе
			Возврат ТекущаяДата + 60*60*24;
		КонецЕсли; 
	ИначеЕсли КоличествоДнейНедели = 5 Тогда
		Если ДеньНедели(ТекущаяДата) = 5 Тогда
			Возврат ТекущаяДата + 60*60*24*3;
		ИначеЕсли ДеньНедели(ТекущаяДата) = 6 Тогда
			Возврат ТекущаяДата + 60*60*24*2;
		Иначе
			Возврат ТекущаяДата + 60*60*24;
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции // ОпределитьСледующуюДата()


&НаКлиенте
Процедура ОбновитьПараметрыСписков()
	ТекущийСписок=ПолучитьТекущийСписок(Элементы);
	Если ТекущийСписок=Неопределено Тогда Возврат; КонецЕсли;
	Если Текущийсписок.Имя="СписокВТранспортнойКомпании"  Тогда
		ЭтаФорма[Текущийсписок.Имя].Параметры.УстановитьЗначениеПараметра("ТекДата",ТекущаяДата());
		
	КонецЕсли;	

	
	Если Текущийсписок.Имя="СписокВТранспортнойКомпании" или
		 Текущийсписок.Имя="СписокЗаявкаТК" или
		 Текущийсписок.Имя="СписокВыехалСТочки" или
		 Текущийсписок.Имя="СписокДоставлен" или
		 Текущийсписок.Имя="СписокУтрачен" или
		 Текущийсписок.Имя="СписокСчета" или
		 Текущийсписок.Имя="ВсеГрузы" Тогда
		Если Элементы.СписокЗаявкиОбщий.ТекущиеДанные<>Неопределено Тогда
			ЭтаФорма[Текущийсписок.Имя].Параметры.УстановитьЗначениеПараметра("ЗаявкаВТК",Элементы.СписокЗаявкиОбщий.ТекущиеДанные.ЗаявкаВТК);
		ИначеЕсли  СписокЗаявкиОбщий.Количество()>0 Тогда
			ЭтаФорма[Текущийсписок.Имя].Параметры.УстановитьЗначениеПараметра("ЗаявкаВТК",СписокЗаявкиОбщий[0].ЗаявкаВТК);
		КонецЕсли;
		ЭтаФорма[Текущийсписок.Имя].Параметры.УстановитьЗначениеПараметра("ОтборПоЗаявке",ОтборПоЗаявкевТК);
		
	КонецЕсли;	

	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекущийСписок(Элементы)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.НаСкладе Тогда
		Текущийсписок=Элементы.СписокНаСкладе;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ЗаявкаВТК Тогда
		Текущийсписок=Элементы.СписокЗаявкаТК;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Выехал Тогда
		Текущийсписок=Элементы.СписокВыехалСТочки;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ВТранспортнойКомпании Тогда
		Текущийсписок=Элементы.СписокВТранспортнойКомпании;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Доставлен Тогда
		Текущийсписок=Элементы.СписокДоставлен;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Утрачен Тогда
		Текущийсписок=Элементы.СписокУтрачен;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.гпВсеГрузы Тогда
		Текущийсписок=Элементы.ВсеГрузы;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.отПоставщика Тогда
		Текущийсписок=Элементы.СписокОтПоставщика;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Счета Тогда
		Текущийсписок=Элементы.СписокСчета;

	Иначе
		Возврат неопределено;
	КонецЕсли;	
	Возврат Текущийсписок;
КонецФункции // ПолучитьТекущийСписок()

Функция ПолучитьТекущийСтатус()
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.НаСкладе Тогда
		возврат Перечисления.СтатусыОтправкиГруза.НаСкладе;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ЗаявкаВТК Тогда
		возврат Перечисления.СтатусыОтправкиГруза.СформирванаЗаявкаВТК;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Выехал Тогда
		возврат Перечисления.СтатусыОтправкиГруза.ВыехалСТочки;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ВТранспортнойКомпании Тогда
		возврат Перечисления.СтатусыОтправкиГруза.ВТранспортнойКомпании;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Доставлен Тогда
		возврат Перечисления.СтатусыОтправкиГруза.Доставлен;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Утрачен Тогда
		возврат Перечисления.СтатусыОтправкиГруза.Утрачен;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции	


&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	УстановитьВидимость();

	ОбновитьСписокЗаявок();
	ОбновитьПараметрыСписков();
	ОбновитьСписокДокументов();
	ОбновитьКалендарь();
	
КонецПроцедуры

Процедура УстановитьВидимость()
	ТекущийСписок=ПолучитьТекущийСписок(Элементы);
	Если ТекущийСписок=Неопределено или
			Текущийсписок.Имя="СписокОтПоставщика" или 
			Текущийсписок.Имя="СписокНаСкладе" Тогда
		Элементы.ОтборПоЗаявкевТК.Видимость=ложь;
		Элементы.ГруппаЗаявок.Видимость=Ложь;
	Иначе		
		Элементы.ОтборПоЗаявкевТК.Видимость=Истина;
		Элементы.ГруппаЗаявок.Видимость=ОтборПоЗаявкевТК;
	КонецЕсли;
	
	Если ТекущийСписок=Неопределено или
			Текущийсписок.Имя="СписокОтПоставщика" Тогда
		Элементы.ГруппаПодвал.Видимость=ложь;
	Иначе		
		Элементы.ГруппаПодвал.Видимость=Истина;
	КонецЕсли;
	
КонецПроцедуры	



#Область Календарь

Процедура ОбновитьКалендарь()
	ТекущийСписок=ПолучитьТекущийСписок(Элементы);
	Если ТекущийСписок<>Неопределено Тогда Возврат КонецЕсли;
	стрНастройки=ХранилищеОбщихНастроек.Загрузить(ИмяФормы,,,ПользователиКлиентСервер.ТекущийПользователь().Наименование);
	Если ТипЗнч(стрНастройки)=тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма,стрНастройки);
	КонецЕсли;	
	
	тзОбластиДня=Новый ТаблицаЗначений;
	тзОбластиДня.Колонки.Добавить("ИмяОбласти");
	тзОбластиДня.Колонки.Добавить("Область");
	если кОтПоставщика 	 Тогда  стр=тзОбластиДня.Добавить();стр.ИмяОбласти="От поставщика";	Конецесли;
	если кНаСкладе 	 	 Тогда  стр=тзОбластиДня.Добавить();стр.ИмяОбласти=Строка(Перечисления.СтатусыОтправкиГруза.НаСкладе);				Конецесли;
	если кЗаявкаТК		 Тогда стр=тзОбластиДня.Добавить();стр.ИмяОбласти=Строка(Перечисления.СтатусыОтправкиГруза.СформирванаЗаявкаВТК); 	Конецесли;
	если кВыехал		 Тогда стр=тзОбластиДня.Добавить();стр.ИмяОбласти=Строка(Перечисления.СтатусыОтправкиГруза.ВыехалСТочки); 			Конецесли;
	если кСчетЭК 		 Тогда стр=тзОбластиДня.Добавить();стр.ИмяОбласти=Строка(Перечисления.СтатусыОтправкиГруза.ДобавленСчетЭК); 		Конецесли;
	если кСчетТК 		 Тогда стр=тзОбластиДня.Добавить();стр.ИмяОбласти=Строка(Перечисления.СтатусыОтправкиГруза.ВТранспортнойКомпании); 	Конецесли;
	если кДоставлен 	 Тогда стр=тзОбластиДня.Добавить();стр.ИмяОбласти=Строка(Перечисления.СтатусыОтправкиГруза.Доставлен); 				Конецесли;
	если кУтрачен		 Тогда стр=тзОбластиДня.Добавить();стр.ИмяОбласти=Строка(Перечисления.СтатусыОтправкиГруза.Утрачен); 				Конецесли;
	
	
	
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница<>Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Календарь Тогда Возврат; КонецЕсли;
	
	ТаблицаСтатусов=ПолучитьСтатусыЗаПериод(НачалоМесяца(ДатаНачалаМесяцаЗапроса),КонецМесяца(ДатаНачалаМесяцаЗапроса));
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница<>Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Календарь Тогда Возврат; КонецЕсли;
	КоличествоДнейНедели=7;
	
	Таб = тдКалендарь;
	Таб.Очистить();  
	ШиринаТабличногоПоляМесяца = 1400;//Таб.ШиринаСтраницы;
	
	ОбшаяШиринаМесяца = Цел(109*ШиринаТабличногоПоляМесяца/764);
	
	ШиринаКолонки = Цел(ОбшаяШиринаМесяца/КоличествоДнейНедели);
	
	Таб.Область(,1,,КоличествоДнейНедели).ШиринаКолонки = ШиринаКолонки;
	Таб.Область(1,,1,).ВысотаСтроки = 15;
	
	Если (ШиринаКолонки * КоличествоДнейНедели) <> ОбшаяШиринаМесяца Тогда
		Таб.Область(,КоличествоДнейНедели,,КоличествоДнейНедели).ШиринаКолонки = ОбшаяШиринаМесяца - (ШиринаКолонки * (КоличествоДнейНедели-1));
	КонецЕсли;
	
	ОбластьДнейНедели = Таб.Область(1,1,1,КоличествоДнейНедели);
	ОбластьДнейНедели.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
	ОбластьДнейНедели.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ОбластьДнейНедели.ГраницаСнизу 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ОбластьДнейНедели.ГраницаСлева 	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ОбластьДнейНедели.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	ОбластьДнейНедели.ЦветРамки = ЦветаСтиля.ЦветРамки;
	ОбластьДнейНедели.ЦветТекста = ЦветаСтиля.ЦветРамки;
	
	Для а = 1 По КоличествоДнейНедели Цикл
		
		ОбластьДняНедели = Таб.Область(1,а,1,а);
		ОбластьДняНедели.Текст = ОпределитьДеньНедели(а);
		ОбластьДняНедели.Шрифт = Новый Шрифт(,10,Истина);
		ОбластьДняНедели.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ОбластьДняНедели.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьДняНедели.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
		ОбластьДняНедели.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		
	КонецЦикла;
	ВысотаТабПоляМесяца=600;//Таб.ВысотаСтраницы;
	ВысотаСтроки = Цел(50*(ВысотаТабПоляМесяца-30)/(359-30));
	
	ПервыйДеньНеделиМесяца = ДеньНедели(ДатаНачалаМесяцаЗапроса);
	Если ПервыйДеньНеделиМесяца > 1 Тогда
		ПерваяДатаМесяца = ДатаНачалаМесяцаЗапроса - (ПервыйДеньНеделиМесяца - 1)*60*60*24;
	Иначе
		ПерваяДатаМесяца = ДатаНачалаМесяцаЗапроса;
	КонецЕсли;
	
	ТаблицаСобытияЗаказы = Новый ТаблицаЗначений();
	ТаблицаСобытияЗаказы.Колонки.Добавить("ДатаДокумента");
	ТаблицаСобытияЗаказы.Колонки.Добавить("СтрокаДокументов");
	ТаблицаСобытияЗаказы.Индексы.Добавить("ДатаДокумента");
	ТаблицаСобытияЗаказы.Колонки.Добавить("Область");
	ТаблицаСобытияЗаказы.Колонки.Добавить("Цвет");
	
	
	Для каждого СтрокаДанных Из ТаблицаСтатусов Цикл
		имяОбласти=Строка(СтрокаДанных.Статус);
		
		массивстрок=ТаблицаСобытияЗаказы.НайтиСтроки(новый Структура("ДатаДокумента, Область", НачалоДня(СтрокаДанных.Период), имяОбласти));
		Если массивстрок.Количество() =0 Тогда
			НайденнаяСтрока=неопределено;	
		Иначе
			НайденнаяСтрока = массивстрок[0];
		КонецЕсли;
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = ТаблицаСобытияЗаказы.Добавить();
			НайденнаяСтрока.ДатаДокумента = НачалоДня(СтрокаДанных.Период);
			НайденнаяСтрока.СтрокаДокументов = "";
			НайденнаяСтрока.Цвет=новый Цвет;
			Если СтрокаДанных.НетСчета Тогда
				НайденнаяСтрока.Цвет= WebЦвета.Синий;
			КонецЕсли;	
			
			Если  СтрокаДанных.Статус=Перечисления.СтатусыОтправкиГруза.ОжидаетДоставки 
				 или СтрокаДанных.Статус=Перечисления.СтатусыОтправкиГруза.ОжидаетПолучения Тогда
				Если СтрокаДанных.Период<НачалоДня(ТекущаяДата()) Тогда
					НайденнаяСтрока.Цвет=ЦветаСтиля.ПросроченныеДанныеЦвет;	
				Иначе	
					НайденнаяСтрока.Цвет=WebЦвета.Зеленый;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НайденнаяСтрока.СтрокаДокументов) Тогда
			НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + Символы.ПС;
		КонецЕсли;
		НайденнаяСтрока.Область=имяОбласти;
		НайденнаяСтрока.СтрокаДокументов = НайденнаяСтрока.СтрокаДокументов + СтрокаДанных.Статус +" - "+ СтрокаДанных.Груз +"гс,  " + СтрокаДанных.ГрузМест +"м,  " + СтрокаДанных.ГрузШт +"шт.";
	КонецЦикла;
	
	ТекущаяДата = ПерваяДатаМесяца;
	ПерваяСтрока=Истина;
	Для Строка = 2 По 6 Цикл                            
		
		
		ВсегоОбластей=тзОбластиДня.Количество()+3;
		Для Колонка = 1 По КоличествоДнейНедели Цикл
			Если ПерваяСтрока Тогда
				НомерСтроки=Строка;
			Иначе	
				НомерСтроки=(Строка-1)*(ВсегоОбластей)-ВсегоОбластей+2;
			КонецЕсли;
			ОбластьЧислоДня = Таб.Область((НомерСтроки),Колонка,(НомерСтроки),Колонка);
			ОбластьЧислоДня.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьЧислоДня.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьЧислоДня.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьЧислоДня.ЦветРамки = ЦветаСтиля.ЦветРамки;
			ОбластьЧислоДня.ВысотаСтроки = 11;
			
			ОбластьЧислоДня.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьЧислоДня.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ОбластьЧислоДня.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ОбластьЧислоДня.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			//	ОбластьЧислоДня.Расшифровка = ТекущаяДата;
			
			//От поставщика
			
			НомерОбласти=1;
			
			Для каждого стр из тзОбластиДня Цикл
				
				стр.Область = Таб.Область((НомерСтроки + НомерОбласти),Колонка,(НомерСтроки+ НомерОбласти),Колонка);
				стр.Область.ГраницаСлева 		= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				стр.Область.ГраницаСправа 		= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				стр.Область.ЦветРамки 			= ЦветаСтиля.ЦветРамки;
				стр.Область.ВысотаСтроки		= 11;
				стр.Область.РазмещениеТекста 	= ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
				
				стр.Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				стр.Область.ВертикальноеПоложение 	= ВертикальноеПоложение.Верх;
				стр.Область.Заполнение 				= ТипЗаполненияОбластиТабличногоДокумента.Текст;
				
				НомерОбласти=НомерОбласти+1;
			КонецЦикла;	
			
			
			
			ОбластьОжидаемДоставки = Таб.Область((НомерСтроки + НомерОбласти),Колонка,(НомерСтроки + НомерОбласти),Колонка);
			//ОбластьОжидаемДоставки.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьОжидаемДоставки.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьОжидаемДоставки.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьОжидаемДоставки.ЦветРамки = ЦветаСтиля.ЦветРамки;
			ОбластьОжидаемДоставки.ВысотаСтроки = 11;
			//ОбластьОжидаемДоставки.Расшифровка = ТекущаяДата;
			ОбластьОжидаемДоставки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			
			ОбластьОжидаемДоставки.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьОжидаемДоставки.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
			ОбластьОжидаемДоставки.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			НомерОбласти=НомерОбласти+1;

			
			
			ОбластьОжидаемПолучения = Таб.Область((НомерСтроки + НомерОбласти),Колонка,(НомерСтроки + НомерОбласти),Колонка);
			ОбластьОжидаемПолучения.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьОжидаемПолучения.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьОжидаемПолучения.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьОжидаемПолучения.ЦветРамки = ЦветаСтиля.ЦветРамки;
			ОбластьОжидаемПолучения.ВысотаСтроки = 11;
			//ОбластьОжидаемПолучения.Расшифровка = ТекущаяДата;
			ОбластьОжидаемПолучения.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			
			ОбластьОжидаемПолучения.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьОжидаемПолучения.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
			ОбластьОжидаемПолучения.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			
			
			
			//НайденнаяСтрокаСобытияИЗаказы = ТаблицаСтатусов.Найти(ТекущаяДата, "ПериодДень");
			//
			//ОбластьПоляДня.Текст = ?(НайденнаяСтрокаСобытияИЗаказы = Неопределено, "", НайденнаяСтрокаСобытияИЗаказы.Груз);
			ТабСтатусов=ТаблицаСобытияЗаказы.Скопировать(новый структура("ДатаДокумента",ТекущаяДата));
			ТабСтатусов.свернуть("Область");
			МассСтатусов=табСтатусов.ВыгрузитьКолонку("Область");
			Для каждого стр из тзОбластиДня Цикл
				масСтрок=ТаблицаСобытияЗаказы.НайтиСтроки(новый структура("ДатаДокумента,Область", ТекущаяДата,стр.ИмяОбласти));
				Если масСтрок.Количество()=0 Тогда
					НайденнаяСтрокаСобытияИЗаказы = Неопределено;
				Иначе	
					НайденнаяСтрокаСобытияИЗаказы = масСтрок[0];
					стр.Область.ЦветТекста	= НайденнаяСтрокаСобытияИЗаказы.Цвет;
					стр.Область.Текст 		= НайденнаяСтрокаСобытияИЗаказы.СтрокаДокументов;
					стр.Область.Расшифровка	= новый Структура("ДатаКалендаря,Статусы,текСтатус",ТекущаяДата,МассСтатусов,стр.ИмяОбласти);
				КонецЕсли;
			КонецЦикла;
			
			
			//Если кОтПоставщика Тогда
			//	масСтрок=ТаблицаСобытияЗаказы.НайтиСтроки(новый структура("ДатаДокумента,Область", ТекущаяДата,"От поставщика"));
			//	Если масСтрок.Количество()=0 Тогда
			//		НайденнаяСтрокаСобытияИЗаказы = Неопределено;
			//	Иначе	
			//		НайденнаяСтрокаСобытияИЗаказы = масСтрок[0];
			//	КонецЕсли;
			//	ОбластьОтПоставщика.Текст = ?(НайденнаяСтрокаСобытияИЗаказы = Неопределено, "", НайденнаяСтрокаСобытияИЗаказы.СтрокаДокументов);
			//	ОбластьОтПоставщика.Расшифровка=новый Структура("ДатаКалендаря,Статусы,текСтатус",ТекущаяДата,МассСтатусов,"От поставщика");
			//КонецЕсли;
			//
			//
			//МассСтатусов=табСтатусов.ВыгрузитьКолонку("Область");
			//Если кНаСкладе Тогда
			//	масСтрок=ТаблицаСобытияЗаказы.НайтиСтроки(новый структура("ДатаДокумента,Область", ТекущаяДата,"На складе"));
			//	Если масСтрок.Количество()=0 Тогда
			//		НайденнаяСтрокаСобытияИЗаказы = Неопределено;
			//	Иначе	
			//		НайденнаяСтрокаСобытияИЗаказы = масСтрок[0];
			//	КонецЕсли;
			//	ОбластьНаСкладе.Текст = ?(НайденнаяСтрокаСобытияИЗаказы = Неопределено, "", НайденнаяСтрокаСобытияИЗаказы.СтрокаДокументов);
			//	ОбластьНаСкладе.Расшифровка=новый Структура("ДатаКалендаря,Статусы,текСтатус",ТекущаяДата,МассСтатусов,"На складе");
			//КонецЕсли;
			/////
			//Если кВыехал Тогда
			//	масСтрок=ТаблицаСобытияЗаказы.НайтиСтроки(новый структура("ДатаДокумента,Область", ТекущаяДата,"Выехал с точки"));
			//	Если масСтрок.Количество()=0 Тогда
			//		НайденнаяСтрокаСобытияИЗаказы = Неопределено;
			//	Иначе	
			//		НайденнаяСтрокаСобытияИЗаказы = масСтрок[0];
			//	КонецЕсли;
			//	ОбластьВыехалСТочки.Текст = ?(НайденнаяСтрокаСобытияИЗаказы = Неопределено, "", НайденнаяСтрокаСобытияИЗаказы.СтрокаДокументов);
			//	ОбластьВыехалСТочки.Расшифровка=новый Структура("ДатаКалендаря,Статусы,текСтатус",ТекущаяДата,МассСтатусов,"Выехал с точки");
			//	Если НайденнаяСтрокаСобытияИЗаказы <> Неопределено Тогда
			//		ОбластьВыехалСТочки.ЦветТекста=НайденнаяСтрокаСобытияИЗаказы.Цвет;	
			//	КонецЕсли;
			//КонецЕсли;
			//
			/////
			//Если кЗаявкаТК Тогда
			//	масСтрок=ТаблицаСобытияЗаказы.НайтиСтроки(новый структура("ДатаДокумента,Область", ТекущаяДата,"Сформирвана заявка в ТК"));
			//	Если масСтрок.Количество()=0 Тогда
			//		НайденнаяСтрокаСобытияИЗаказы = Неопределено;
			//	Иначе	
			//		НайденнаяСтрокаСобытияИЗаказы = масСтрок[0];
			//	КонецЕсли;
			//	ОбластьСформирванаЗаявкаВТК.Текст = ?(НайденнаяСтрокаСобытияИЗаказы = Неопределено, "", НайденнаяСтрокаСобытияИЗаказы.СтрокаДокументов);
			//	ОбластьСформирванаЗаявкаВТК.Расшифровка=новый Структура("ДатаКалендаря,Статусы,текСтатус",ТекущаяДата,МассСтатусов,"Сформирвана заявка в ТК");
			//КонецЕсли;
			//
			//Если кСчетТК Тогда
			//	масСтрок=ТаблицаСобытияЗаказы.НайтиСтроки(новый структура("ДатаДокумента,Область", ТекущаяДата,"В транспортной компании"));
			//	Если масСтрок.Количество()=0 Тогда
			//		НайденнаяСтрокаСобытияИЗаказы = Неопределено;
			//	Иначе	
			//		НайденнаяСтрокаСобытияИЗаказы = масСтрок[0];
			//	КонецЕсли;
			//	ОбластьВТранспортнойКомпании.Текст = ?(НайденнаяСтрокаСобытияИЗаказы = Неопределено, "", НайденнаяСтрокаСобытияИЗаказы.СтрокаДокументов);
			//	ОбластьВТранспортнойКомпании.Расшифровка=новый Структура("ДатаКалендаря,Статусы,текСтатус",ТекущаяДата,МассСтатусов,"В транспортной компании");
			//КонецЕсли;
			//
			//Если кДоставлен Тогда
			//	масСтрок=ТаблицаСобытияЗаказы.НайтиСтроки(новый структура("ДатаДокумента,Область", ТекущаяДата,"Доставлен"));
			//	Если масСтрок.Количество()=0 Тогда
			//		НайденнаяСтрокаСобытияИЗаказы = Неопределено;
			//	Иначе	
			//		НайденнаяСтрокаСобытияИЗаказы = масСтрок[0];
			//	КонецЕсли;
			//	ОбластьДоставлен.Текст = ?(НайденнаяСтрокаСобытияИЗаказы = Неопределено, "", НайденнаяСтрокаСобытияИЗаказы.СтрокаДокументов);
			//	ОбластьДоставлен.Расшифровка=новый Структура("ДатаКалендаря,Статусы,текСтатус",ТекущаяДата,МассСтатусов,"Доставлен");
			//КонецЕсли;
			//
			//Если кУтрачен Тогда
			//	масСтрок=ТаблицаСобытияЗаказы.НайтиСтроки(новый структура("ДатаДокумента,Область", ТекущаяДата,"Утрачен"));
			//	Если масСтрок.Количество()=0 Тогда
			//		НайденнаяСтрокаСобытияИЗаказы = Неопределено;
			//	Иначе	
			//		НайденнаяСтрокаСобытияИЗаказы = масСтрок[0];
			//	КонецЕсли;
			//	ОбластьУтрачен.Текст = ?(НайденнаяСтрокаСобытияИЗаказы = Неопределено, "", НайденнаяСтрокаСобытияИЗаказы.СтрокаДокументов);
			//	ОбластьУтрачен.Расшифровка=новый Структура("ДатаКалендаря,Статусы,текСтатус",ТекущаяДата,МассСтатусов,"Утрачен");
			//КонецЕсли;
			//
			//Если кСчетЭК Тогда
			//	масСтрок=ТаблицаСобытияЗаказы.НайтиСтроки(новый структура("ДатаДокумента,Область", ТекущаяДата,"Добавлен счет ЭК"));
			//	Если масСтрок.Количество()=0 Тогда
			//		НайденнаяСтрокаСобытияИЗаказы = Неопределено;
			//	Иначе	
			//		НайденнаяСтрокаСобытияИЗаказы = масСтрок[0];
			//	КонецЕсли;
			//	ОбластьДобавленСчетЭК.Текст = ?(НайденнаяСтрокаСобытияИЗаказы = Неопределено, "", НайденнаяСтрокаСобытияИЗаказы.СтрокаДокументов);
			//	ОбластьДобавленСчетЭК.Расшифровка=новый Структура("ДатаКалендаря,Статусы,текСтатус",ТекущаяДата,МассСтатусов,"Добавлен счет ЭК");
			//КонецЕсли;
			
			
			масСтрок=ТаблицаСобытияЗаказы.НайтиСтроки(новый структура("ДатаДокумента,Область", ТекущаяДата,"Ожидает доставки"));
			Если масСтрок.Количество()=0 Тогда
				НайденнаяСтрокаСобытияИЗаказы = Неопределено;
			Иначе	
				НайденнаяСтрокаСобытияИЗаказы = масСтрок[0];
			КонецЕсли;
			ОбластьОжидаемДоставки.Текст = ?(НайденнаяСтрокаСобытияИЗаказы = Неопределено, "", НайденнаяСтрокаСобытияИЗаказы.СтрокаДокументов);
			ОбластьОжидаемДоставки.Расшифровка=новый Структура("ДатаКалендаря,Статусы,текСтатус",ТекущаяДата,МассСтатусов,"Ожидает доставки");
			
			Если НайденнаяСтрокаСобытияИЗаказы <> Неопределено Тогда
				ОбластьОжидаемДоставки.ЦветТекста=НайденнаяСтрокаСобытияИЗаказы.Цвет;	
			КонецЕсли;
			
			
			масСтрок=ТаблицаСобытияЗаказы.НайтиСтроки(новый структура("ДатаДокумента,Область", ТекущаяДата,"Ожидает получения"));
			Если масСтрок.Количество()=0 Тогда
				НайденнаяСтрокаСобытияИЗаказы = Неопределено;
			Иначе	
				НайденнаяСтрокаСобытияИЗаказы = масСтрок[0];
			КонецЕсли;
			ОбластьОжидаемПолучения.Текст = ?(НайденнаяСтрокаСобытияИЗаказы = Неопределено, "", НайденнаяСтрокаСобытияИЗаказы.СтрокаДокументов);
			ОбластьОжидаемПолучения.Расшифровка=новый Структура("ДатаКалендаря,Статусы,текСтатус",ТекущаяДата,МассСтатусов,"Ожидает получения");
			
			Если НайденнаяСтрокаСобытияИЗаказы <> Неопределено Тогда
				ОбластьОжидаемПолучения.ЦветТекста=НайденнаяСтрокаСобытияИЗаказы.Цвет;	
			КонецЕсли;
			
			
			
			//Если НайденнаяСтрокаСобытияИЗаказы <> Неопределено и НайденнаяСтрокаСобытияИЗаказы.ДатаДокумента<ТекущаяДата() Тогда
			//	ОбластьОжидаемДоставки.ЦветТекста=ЦветаСтиля.ПросроченныеДанныеЦвет;	
			//Иначе	
			//	ОбластьОжидаемДоставки.ЦветТекста=WebЦвета.Зеленый;
			//КонецЕсли;
			
			
			Если НачалоДня(ТекущаяДата) = НачалоДня(ТекущаяДата()) Тогда
				
				ОбластьЧислоДня.Шрифт = Новый Шрифт(,,Истина);
				ОбластьЧислоДня.ЦветФона = WebЦвета.Бежевый;
				ОбластьЧислоДня.ГраницаСнизу =  Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
				
				
				//кел область
				//ОбластьНаСкладе.ЦветФона = Новый Цвет;
				//ОбластьНаСкладе.ЦветТекста = Новый Цвет;
				//кел
				ОбластьОжидаемДоставки.ЦветФона = Новый Цвет;
				ОбластьОжидаемПолучения.ЦветФона = Новый Цвет;
				//ОбластьОжидаемДоставки.ЦветТекста = Новый Цвет;
				
				
				СтрокаДатыДня = СокрЛП(Формат(ТекущаяДата,"ДФ=d"));
				ОбластьЧислоДня.Текст = СокрЛП(Формат(ТекущаяДата,"ДФ=d"));
				
			Иначе
				
				Если Месяц(ТекущаяДата) <> Месяц(ДатаНачалаМесяцаЗапроса) Тогда
					ОбластьЧислоДня.ЦветФона = WebЦвета.Перламутровый;
					ОбластьЧислоДня.ЦветТекста = WebЦвета.Серый;
					ОбластьЧислоДня.Текст = СокрЛП(Формат(ТекущаяДата,"ДФ=dd.MM.yyyy"));
					ОбластьЧислоДня.Шрифт = Новый Шрифт(,,Ложь);
					СтрокаДатыДня = СокрЛП(Формат(ТекущаяДата,"ДФ=dd.MM.yyyy"));
					//кел область
					//ОбластьНаСкладе.ЦветФона = WebЦвета.Перламутровый;
					//ОбластьНаСкладе.ЦветТекста = WebЦвета.Серый;
					//кел 
					ОбластьОжидаемДоставки.ЦветФона = WebЦвета.Перламутровый;
					ОбластьОжидаемПолучения.ЦветФона = WebЦвета.Перламутровый;

					//ОбластьОжидаемДоставки.ЦветТекста = WebЦвета.Серый;
					
				Иначе
					
					Если Колонка = 6 ИЛИ Колонка = 7 Тогда
						ОбластьЧислоДня.ЦветФона = WebЦвета.ГолубойСКраснымОттенком;
						//кел область
						//ОбластьНаСкладе.ЦветФона = WebЦвета.ГолубойСКраснымОттенком;
						//кел 
						ОбластьОжидаемДоставки.ЦветФона = WebЦвета.ГолубойСКраснымОттенком;
						ОбластьОжидаемПолучения.ЦветФона = WebЦвета.ГолубойСКраснымОттенком;

					Иначе
						ОбластьЧислоДня.ЦветФона = Новый Цвет;
						//кел область
						//ОбластьНаСкладе.ЦветФона = Новый Цвет;
						//кел 						ОбластьОжидаемДоставки.ЦветФона = Новый Цвет;
					КонецЕсли; 
					
					ОбластьЧислоДня.ЦветТекста = Новый Цвет;
					ОбластьЧислоДня.Текст = СокрЛП(Формат(ТекущаяДата,"ДФ=d"));
					ОбластьЧислоДня.Шрифт = Новый Шрифт(,,Ложь);
					СтрокаДатыДня = СокрЛП(Формат(ТекущаяДата,"ДФ=d"));
					//кел область
					//ОбластьНаСкладе.ЦветТекста = Новый Цвет;
					//кел 
					//ОбластьОжидаемДоставки.ЦветТекста = Новый Цвет;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекущаяДата = ОпределитьСледующуюДата(ТекущаяДата,КоличествоДнейНедели);
			
		КонецЦикла;
		ПерваяСтрока=Ложь;
		
	КонецЦикла;
	
	Таб.ФиксацияСверху = 1;
	Таб.ФиксацияСлева = КоличествоДнейНедели;
	Таб.ТолькоПросмотр = Истина;
	//Таб.Вывести(Элементы.тдКалендарь);
	
	
	
	
КонецПроцедуры // ОбновитьКалендарь()


Функция ПолучитьСтатусыЗаПериод(НачалоПериода,КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СтатусыДоставкиСвернуто.Период, ДЕНЬ) КАК Период,
	|	СУММА(СтатусыДоставкиСвернуто.Количество) КАК ГрузШт,
	|	СУММА(СтатусыДоставкиСвернуто.КоличествоГС) КАК Груз,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СтатусыДоставкиСвернуто.Регистратор) = ТИП(Документ.ПоступленияОтПоставщика)
	|				ТОГДА СтатусыДоставкиСвернуто.КоличествоМест
	|			ИНАЧЕ СтатусыДоставкиСвернуто.ЗаявкаВТК.КоличествоМест
	|		КОНЕЦ) КАК ГрузМест,
	|	СтатусыДоставкиСвернуто.Статус,
	|	ЛОЖЬ КАК НетСчета
	|ИЗ
	|	РегистрСведений.СтатусыДоставкиСвернуто КАК СтатусыДоставкиСвернуто
	|ГДЕ
	|	СтатусыДоставкиСвернуто.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СтатусыДоставкиСвернуто.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиГруза.ОжидаетДоставки)
	|	И СтатусыДоставкиСвернуто.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиГруза.ОжидаетПолучения)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыДоставкиСвернуто.Статус,
	|	НАЧАЛОПЕРИОДА(СтатусыДоставкиСвернуто.Период, ДЕНЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СтатусыДоставкиСвернуто.Период, ДЕНЬ),
	|	СУММА(СтатусыДоставкиСвернуто.Количество),
	|	СУММА(СтатусыДоставкиСвернуто.КоличествоГС),
	|	МАКСИМУМ(СтатусыДоставкиСвернуто.ЗаявкаВТК.КоличествоМест),
	|	СтатусыДоставкиСвернуто.Статус,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.СтатусыДоставкиСвернуто КАК СтатусыДоставкиСвернуто
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДоставкиСвернуто.СрезПоследних КАК СтатусыДоставкиСвернутоСрезПоследних
	|		ПО СтатусыДоставкиСвернуто.ЗаявкаВТК = СтатусыДоставкиСвернутоСрезПоследних.ЗаявкаВТК
	|			И (СтатусыДоставкиСвернутоСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиГруза.Доставлен)
	|				ИЛИ СтатусыДоставкиСвернутоСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиГруза.Утрачен))
	|ГДЕ
	|	СтатусыДоставкиСвернуто.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СтатусыДоставкиСвернуто.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиГруза.ОжидаетДоставки)
	|	И (СтатусыДоставкиСвернутоСрезПоследних.ЗаявкаВТК ЕСТЬ NULL 
	|			ИЛИ СтатусыДоставкиСвернуто.ЗаявкаВТК = ЗНАЧЕНИЕ(Документ.ЗаявкаВТранспортнуюКомпанию.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыДоставкиСвернуто.Статус,
	|	НАЧАЛОПЕРИОДА(СтатусыДоставкиСвернуто.Период, ДЕНЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СтатусыДоставкиСвернуто.Период, ДЕНЬ),
	|	СУММА(СтатусыДоставкиСвернуто.Количество),
	|	СУММА(СтатусыДоставкиСвернуто.КоличествоГС),
	|	МАКСИМУМ(СтатусыДоставкиСвернуто.ЗаявкаВТК.КоличествоМест),
	|	СтатусыДоставкиСвернуто.Статус,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.СтатусыДоставкиСвернуто КАК СтатусыДоставкиСвернуто
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДоставкиСвернуто.СрезПоследних КАК СтатусыДоставкиСвернутоСрезПоследних
	|		ПО СтатусыДоставкиСвернуто.ЗаявкаВТК = СтатусыДоставкиСвернутоСрезПоследних.ЗаявкаВТК
	|			И (СтатусыДоставкиСвернутоСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиГруза.Доставлен)
	|				ИЛИ СтатусыДоставкиСвернутоСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиГруза.Утрачен))
	|ГДЕ
	|	СтатусыДоставкиСвернуто.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СтатусыДоставкиСвернуто.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиГруза.ОжидаетПолучения)
	|	И (СтатусыДоставкиСвернутоСрезПоследних.ЗаявкаВТК ЕСТЬ NULL 
	|			ИЛИ СтатусыДоставкиСвернуто.ЗаявкаВТК = ЗНАЧЕНИЕ(Документ.ЗаявкаВТранспортнуюКомпанию.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыДоставкиСвернуто.Статус,
	|	НАЧАЛОПЕРИОДА(СтатусыДоставкиСвернуто.Период, ДЕНЬ)" ;
	
	
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода+6*24*60*60);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода-6*24*60*60);
	//Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции	


#КонецОбласти


#Область КомандыФормы

#Область ДобавитьВКорзину
&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	ДобавитьВКорзинуНаСервере();
	Элементы.ГруппаСтраницыПодвал.ТекущаяСтраница=Элементы.ГруппаСтраницыПодвал.ПодчиненныеЭлементы.ГруппаКорзина;
КонецПроцедуры

Процедура ДобавитьВКорзинуНаСервере()
	ТекущийСписок=ПолучитьТекущийСписок(Элементы);
	Если ТекущийСписок=Неопределено Тогда Возврат; КонецЕсли;
	Если ТекущийСписок.Имя="ВсеГрузы" Тогда
		Для каждого стр из ТекущийСписок.ВыделенныеСтроки Цикл
			найденыеСтроки=Объект.Корзина.НайтиСтроки(новый структура("Груз",стр.Ссылка));
			Если найденыеСтроки.количество()>0 Тогда Продолжить; КонецЕсли;
			стрКорзины=Объект.Корзина.Добавить();
			стрКорзины.груз=стр.Ссылка;
		КонецЦикла;	
	Иначе	
		Для каждого стр из ТекущийСписок.ВыделенныеСтроки Цикл
			найденыеСтроки=Объект.Корзина.НайтиСтроки(новый структура("Груз",стр.Груз));
			Если найденыеСтроки.количество()>0 Тогда Продолжить; КонецЕсли;
			стрКорзины=Объект.Корзина.Добавить();
			стрКорзины.груз=стр.Груз;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ДобавитьЗаявку
&НаСервере
Процедура СформироватьЗаявкуНаСервере(обЗаявкаСформы,ИмяКоманды,Отказ)
	Если ИмяКоманды="СформироватьЗаявку"  Тогда
		ТекущийСписок=ПолучитьТекущийСписок(Элементы);
		Если текущийсписок=Неопределено или ТекущийСписок.ВыделенныеСтроки.Количество()=0 тогда отказ=истина; Возврат; КонецЕсли;
		коллекцияГрузов=ТекущийСписок.ВыделенныеСтроки;
	Иначе
		Если Объект.Корзина.Количество()=0 Тогда отказ=истина; Возврат; КонецЕсли;	
		коллекцияГрузов=объект.Корзина;
	КонецЕсли;	
	обЗаявка=ДанныеФормыВЗначение(обЗаявкаСформы,Тип("ДокументОбъект.ЗаявкаВТранспортнуюКомпанию"));
	обЗаявка.ДатаЗаявки=ТекущаяДата();
	Для Каждого стр из  коллекцияГрузов	 Цикл
		стрГруза=обЗаявка.Заказы.Добавить();
		стрГруза.Груз=стр.Груз;
		обЗаявка.Количество=обЗаявка.Количество+стр.Груз.Количество;
		обЗаявка.Вес=обЗаявка.Вес+стр.Груз.Вес;
		обЗаявка.Объем=обЗаявка.Объем+стр.Груз.Объем;
	КонецЦикла;	
	ЗначениеВДанныеФормы(обЗаявка,обЗаявкаСформы);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаявку(Команда)
	Фрм=ПолучитьФорму("Документ.ЗаявкаВТранспортнуюКомпанию.Форма.ФормаДокумента",,ЭтаФорма);
	обЗаявкаСформы=фрм.Объект;
	Отказ=ложь;
	СформироватьЗаявкуНаСервере(обЗаявкаСформы,Команда.Имя,Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	КопироватьДанныеФормы(обЗаявкаСформы,фрм.объект);
	фрм.Открыть();
КонецПроцедуры

#КонецОбласти

#Область ДобавитьВыдачуТранзита
&НаСервере
Процедура СформироватьВыдачуТранзитаНаСервере(обВыдачаТранзитаСформы,ИмяКоманды,Отказ=ложь)
	Если ИмяКоманды="СформироватьВыдачуТранзита"  Тогда
		ТекущийСписок=ПолучитьТекущийСписок(Элементы);
		Если текущийсписок=Неопределено или ТекущийСписок.ВыделенныеСтроки.Количество()=0 тогда отказ=истина; Возврат; КонецЕсли;
		коллекцияГрузов=ТекущийСписок.ВыделенныеСтроки;
	Иначе
		Если Объект.Корзина.Количество()=0 Тогда отказ=истина; Возврат; КонецЕсли;	
		коллекцияГрузов=объект.Корзина;
	КонецЕсли;	
	
	обВыдачаТранзита=ДанныеФормыВЗначение(обВыдачаТранзитаСформы,Тип("ДокументОбъект.ВыдачаТранзита"));
	обВыдачаТранзита.Дата=ТекущаяДата();
	
	СписокКоробок=новый СписокЗначений;
	Для Каждого стр из  коллекцияГрузов	 Цикл
		//Если не Элементы.Список.ТекущиеДанные.Свойство("Груз") Тогда Продолжить; КонецЕсли;
		СписокКоробок.Добавить(Стр.Груз);
	КонецЦикла;	
	обВыдачаТранзита.ЗаполнитьПоСпискуКоробок(СписокКоробок);
	
	ЗначениеВДанныеФормы(обВыдачаТранзита,обВыдачаТранзитаСформы);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьВыдачуТранзита(Команда)
	
	Фрм=ПолучитьФорму("Документ.ВыдачаТранзита.Форма.ФормаДокумента",,ЭтаФорма);
	обВыдачаТранзитаСформы=фрм.Объект;	
	Отказ=ложь;
	СформироватьВыдачуТранзитаНаСервере(обВыдачаТранзитаСформы,Команда.Имя,Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	КопироватьДанныеФормы(обВыдачаТранзитаСформы,фрм.объект);
	фрм.Открыть();
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьВыдачуТранзитаПоЗаявке(Команда)
	Фрм=ПолучитьФорму("Документ.ВыдачаТранзита.Форма.ФормаДокумента",,ЭтаФорма);
	обВыдачаТранзитаСформы=фрм.Объект;	
	Отказ=ложь;
	СформироватьВыдачуТранзитаНаСервереПоЗаявке(обВыдачаТранзитаСформы,Команда.Имя,Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	КопироватьДанныеФормы(обВыдачаТранзитаСформы,фрм.объект);
	фрм.Открыть();
КонецПроцедуры

&НаСервере
Процедура СформироватьВыдачуТранзитаНаСервереПоЗаявке(обВыдачаТранзитаСформы,ИмяКоманды,Отказ=ложь)
	Если ИмяКоманды="СформироватьВыдачуТранзитаПоЗаявке"  Тогда
		ТекущийСписок=Элементы.СписокВсеЗаявки;
		Если текущийсписок=Неопределено или ТекущийСписок.ВыделенныеСтроки.Количество()=0 тогда отказ=истина; Возврат; КонецЕсли;
		коллекцияГрузов=ТекущийСписок.ВыделенныеСтроки;
	Иначе
		Если Объект.Корзина.Количество()=0 Тогда отказ=истина; Возврат; КонецЕсли;	
		коллекцияГрузов=объект.Корзина;
	КонецЕсли;	
	
	обВыдачаТранзита=ДанныеФормыВЗначение(обВыдачаТранзитаСформы,Тип("ДокументОбъект.ВыдачаТранзита"));
	обВыдачаТранзита.Дата=ТекущаяДата();
	
	СписокЗаявок=новый СписокЗначений;
	Для Каждого стр из  коллекцияГрузов	 Цикл
		СписокЗаявок.Добавить(Стр.Ссылка);
	КонецЦикла;	
	обВыдачаТранзита.ЗаполнитьПоСпискуЗаявок(СписокЗаявок);
	
	ЗначениеВДанныеФормы(обВыдачаТранзита,обВыдачаТранзитаСформы);
КонецПроцедуры



#КонецОбласти

#Область ДобавитьСчетТранспортнойКомпании

&НаСервере
Процедура СформироватьСчетТранспортнойКомпанииНаСервере(обСчетаТКСформы,ИмяКоманды,Отказ=ложь)
	Если ИмяКоманды="СформироватьСчетТК"  Тогда
		ТекущийСписок=ПолучитьТекущийСписок(Элементы);
		Если текущийсписок=Неопределено или ТекущийСписок.ВыделенныеСтроки.Количество()=0 тогда отказ=истина; Возврат; КонецЕсли;
		коллекцияГрузов=ТекущийСписок.ВыделенныеСтроки;
	Иначе
		Если Объект.Корзина.Количество()=0 Тогда отказ=истина; Возврат; КонецЕсли;	
		коллекцияГрузов=объект.Корзина;
	КонецЕсли;	
	
	обСчетаТК=ДанныеФормыВЗначение(обСчетаТКСформы,Тип("ДокументОбъект.СчетКонтрагента"));
	обСчетаТК.ДатаОтправкиГруза=ТекущаяДата();
	обСчетаТК.ВидОперации=Перечисления.ВидыОперацийСчетКонтрагента.СТранспортнойКомпанией;
	
	Для Каждого стр из  коллекцияГрузов	 Цикл
		стрГруза=обСчетаТК.Заказы.Добавить();
		стрГруза.Груз=стр.Груз;
	КонецЦикла;	
	обСчетаТК.ЗаполнитьВесОбъемПоГрузу();
	ЗначениеВДанныеФормы(обСчетаТК,обСчетаТКСформы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСчетТранспортнойКомпании(Команда)
	Фрм=ПолучитьФорму("Документ.СчетКонтрагента.Форма.ФормаДокумента",,ЭтаФорма);
	обСчетаТКСформы=фрм.Объект;
	Отказ=ложь;
	СформироватьСчетТранспортнойКомпанииНаСервере(обСчетаТКСформы,Команда.Имя,Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	КопироватьДанныеФормы(обСчетаТКСформы,фрм.объект);
	фрм.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСчетТКПоЗаявке(Команда)
	Фрм=ПолучитьФорму("Документ.СчетКонтрагента.Форма.ФормаДокумента",,ЭтаФорма);
	обСчетаТКСформы=фрм.Объект;
	Отказ=ложь;
	СформироватьСчетТКНаСервереПоЗаявке(обСчетаТКСформы,Команда.Имя,Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	КопироватьДанныеФормы(обСчетаТКСформы,фрм.объект);
	фрм.Открыть();
КонецПроцедуры


&НаСервере
Процедура СформироватьСчетТКНаСервереПоЗаявке(обСчетаТКСформы,ИмяКоманды,Отказ=ложь)
	Если ИмяКоманды="СформироватьСчетТКПоЗаявке"  Тогда
		ТекущийСписок=Элементы.СписокВсеЗаявки;
		Если текущийсписок=Неопределено или ТекущийСписок.ВыделенныеСтроки.Количество()=0 тогда отказ=истина; Возврат; КонецЕсли;
		коллекцияГрузов=ТекущийСписок.ВыделенныеСтроки;
	Иначе
		Если Объект.Корзина.Количество()=0 Тогда отказ=истина; Возврат; КонецЕсли;	
		коллекцияГрузов=объект.Корзина;
	КонецЕсли;	
	
	обСчетаТК=ДанныеФормыВЗначение(обСчетаТКСформы,Тип("ДокументОбъект.СчетКонтрагента"));
	обСчетаТК.ДатаОтправкиГруза=ТекущаяДата();
	обСчетаТК.ВидОперации=Перечисления.ВидыОперацийСчетКонтрагента.СТранспортнойКомпанией;
	СписокЗаявок=новый СписокЗначений;
	Для Каждого стр из  коллекцияГрузов	 Цикл
		СписокЗаявок.Добавить(Стр.Ссылка);
	КонецЦикла;	
	обСчетаТК.Контрагент=Стр.Ссылка.ТранспортнаяКомпания;
	обСчетаТК.ЗаполнитьПоСпискуЗаявок(СписокЗаявок);
	обСчетаТК.ЗаполнитьВесОбъемПоГрузу();
	ЗначениеВДанныеФормы(обСчетаТК,обСчетаТКСформы);
КонецПроцедуры


#КонецОбласти

#Область ДобавитьСчетЭкспедиторскойКомпании

&НаСервере
Процедура СформироватьСчетЭКНаСервере(обСчетаТКСформы,ИмяКоманды,Отказ=ложь)
	Если ИмяКоманды="СформироватьСчетЭК"  Тогда
		ТекущийСписок=ПолучитьТекущийСписок(Элементы);
		Если текущийсписок=Неопределено или ТекущийСписок.ВыделенныеСтроки.Количество()=0 тогда отказ=истина; Возврат; КонецЕсли;
		коллекцияГрузов=ТекущийСписок.ВыделенныеСтроки;
	Иначе
		Если Объект.Корзина.Количество()=0 Тогда отказ=истина; Возврат; КонецЕсли;	
		коллекцияГрузов=объект.Корзина;
	КонецЕсли;	
	
	обСчетаТК=ДанныеФормыВЗначение(обСчетаТКСформы,Тип("ДокументОбъект.СчетКонтрагента"));
	обСчетаТК.ДатаОтправкиГруза=ТекущаяДата();
	обСчетаТК.ВидОперации=Перечисления.ВидыОперацийСчетКонтрагента.СЭкспедиторскойКомпанией;
	
	Для Каждого стр из  коллекцияГрузов	 Цикл
		стрГруза=обСчетаТК.Заказы.Добавить();
		стрГруза.Груз=стр.Груз;
	КонецЦикла;	
	//обСчетаТК.ЗаполнитьВесОбъемПоГрузу();
	ЗначениеВДанныеФормы(обСчетаТК,обСчетаТКСформы);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСчетЭК(Команда)
	Фрм=ПолучитьФорму("Документ.СчетКонтрагента.Форма.ФормаДокумента",,ЭтаФорма);
	обСчетаТКСформы=фрм.Объект;
	Отказ=ложь;
	СформироватьСчетЭКНаСервере(обСчетаТКСформы,Команда.Имя,Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	КопироватьДанныеФормы(обСчетаТКСформы,фрм.объект);
	фрм.Открыть();
КонецПроцедуры


&НаКлиенте
Процедура СформироватьСчетЭКПоЗаявке(Команда)
	Фрм=ПолучитьФорму("Документ.СчетКонтрагента.Форма.ФормаДокумента",,ЭтаФорма);
	обСчетаТКСформы=фрм.Объект;
	Отказ=ложь;
	СформироватьСчетЭКНаСервереПоЗаявке(обСчетаТКСформы,Команда.Имя,Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	КопироватьДанныеФормы(обСчетаТКСформы,фрм.объект);
	фрм.Открыть();
КонецПроцедуры

&НаСервере
Процедура СформироватьСчетЭКНаСервереПоЗаявке(обСчетаТКСформы,ИмяКоманды,Отказ=ложь)
	Если ИмяКоманды="СформироватьСчетЭКПоЗаявке"  Тогда
		ТекущийСписок=Элементы.СписокВсеЗаявки;
		Если текущийсписок=Неопределено или ТекущийСписок.ВыделенныеСтроки.Количество()=0 тогда отказ=истина; Возврат; КонецЕсли;
		коллекцияГрузов=ТекущийСписок.ВыделенныеСтроки;
	Иначе
		Если Объект.Корзина.Количество()=0 Тогда отказ=истина; Возврат; КонецЕсли;	
		коллекцияГрузов=объект.Корзина;
	КонецЕсли;	
	
	обСчетаТК=ДанныеФормыВЗначение(обСчетаТКСформы,Тип("ДокументОбъект.СчетКонтрагента"));
	обСчетаТК.ДатаОтправкиГруза=ТекущаяДата();
	обСчетаТК.ВидОперации=Перечисления.ВидыОперацийСчетКонтрагента.СЭкспедиторскойКомпанией;
	СписокЗаявок=новый СписокЗначений;
	Для Каждого стр из  коллекцияГрузов	 Цикл
		СписокЗаявок.Добавить(Стр.Ссылка);
	КонецЦикла;	
	обСчетаТК.ЗаполнитьПоСпискуЗаявок(СписокЗаявок);
	//обСчетаТК.ЗаполнитьВесОбъемПоГрузу();
	ЗначениеВДанныеФормы(обСчетаТК,обСчетаТКСформы);
КонецПроцедуры


#КонецОбласти


#Область ДобавитьОтчетОДоставке
&НаСервере
Процедура СформироватьОтчетОДоставкеНаСервере(обСчетаТКСформы,ИмяКоманды,Отказ=ложь)
	Если ИмяКоманды="СформироватьОтчетОДоставке"  Тогда
		ТекущийСписок=ПолучитьТекущийСписок(Элементы);
		Если текущийсписок=Неопределено или ТекущийСписок.ВыделенныеСтроки.Количество()=0 тогда отказ=истина; Возврат; КонецЕсли;
		коллекцияГрузов=ТекущийСписок.ВыделенныеСтроки;
	Иначе
		Если Объект.Корзина.Количество()=0 Тогда отказ=истина; Возврат; КонецЕсли;	
		коллекцияГрузов=объект.Корзина;
	КонецЕсли;	
	
	обСчетаТК=ДанныеФормыВЗначение(обСчетаТКСформы,Тип("ДокументОбъект.ОтчетОДоставке"));
	обСчетаТК.ДатаДоставки=ТекущаяДата();
	обСчетаТК.ВидОперации=Перечисления.ВидыОперацийОтчетОДоставке.Доставлен;
	Для Каждого стр из  коллекцияГрузов	 Цикл
		стрГруза=обСчетаТК.Заказы.Добавить();
		стрГруза.Груз=стр.Груз;
	КонецЦикла;	
	ЗначениеВДанныеФормы(обСчетаТК,обСчетаТКСформы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОДоставке(Команда)
	Фрм=ПолучитьФорму("Документ.ОтчетОДоставке.Форма.ФормаДокумента",,ЭтаФорма);
	обСчетаТКСформы=фрм.Объект;
	Отказ=ложь;
	СформироватьОтчетОДоставкеНаСервере(обСчетаТКСформы,Команда.Имя,Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	КопироватьДанныеФормы(обСчетаТКСформы,фрм.объект);
	фрм.Открыть();
КонецПроцедуры


&НаКлиенте
Процедура СформироватьОтчетОДоставкеПоЗаявке(Команда)
 	Фрм=ПолучитьФорму("Документ.ОтчетОДоставке.Форма.ФормаДокумента",,ЭтаФорма);
	обСчетаТКСформы=фрм.Объект;
	Отказ=ложь;
	СформироватьОтчетОДоставкеНаСервереПоЗаявке(обСчетаТКСформы,Команда.Имя,Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	КопироватьДанныеФормы(обСчетаТКСформы,фрм.объект);
	фрм.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетОДоставкеНаСервереПоЗаявке(обСчетаТКСформы,ИмяКоманды,Отказ=ложь)
	Если ИмяКоманды="СформироватьОтчетОДоставкеПоЗаявке"  Тогда
		ТекущийСписок=Элементы.СписокВсеЗаявки;
		Если текущийсписок=Неопределено или ТекущийСписок.ВыделенныеСтроки.Количество()=0 тогда отказ=истина; Возврат; КонецЕсли;
		коллекцияГрузов=ТекущийСписок.ВыделенныеСтроки;
	Иначе
		Если Объект.Корзина.Количество()=0 Тогда отказ=истина; Возврат; КонецЕсли;	
		коллекцияГрузов=объект.Корзина;
	КонецЕсли;	
	
	обСчетаТК=ДанныеФормыВЗначение(обСчетаТКСформы,Тип("ДокументОбъект.ОтчетОДоставке"));
	обСчетаТК.ДатаДоставки=ТекущаяДата();
	обСчетаТК.ВидОперации=Перечисления.ВидыОперацийОтчетОДоставке.Доставлен;
	СписокЗаявок=новый СписокЗначений;
	Для Каждого стр из  коллекцияГрузов	 Цикл
		СписокЗаявок.Добавить(Стр.Ссылка);
	КонецЦикла;	
	обСчетаТК.ЗаполнитьПоСпискуЗаявок(СписокЗаявок);
	//обСчетаТК.ЗаполнитьВесОбъемПоГрузу();
	ЗначениеВДанныеФормы(обСчетаТК,обСчетаТКСформы);
КонецПроцедуры


#КонецОбласти



&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДатаНачалаМесяцаЗапроса=НачалоМесяца(ТекущаяДата());
КонецПроцедуры

&НаКлиенте
Процедура СледующийМесяц(Команда)
	ДатаНачалаМесяцаЗапроса=НачалоМесяца(ДобавитьМесяц(ДатаНачалаМесяцаЗапроса,1));
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийМесяц(Команда)
	ДатаНачалаМесяцаЗапроса=НачалоМесяца(ДобавитьМесяц(ДатаНачалаМесяцаЗапроса,-1));
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	объект.Корзина.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Для каждого стр из ВыбранноеЗначение Цикл
		найденыеСтроки=Объект.Корзина.НайтиСтроки(новый структура("Груз",стр));
		Если найденыеСтроки.количество()>0 Тогда Продолжить; КонецЕсли;
		стрКорзины=Объект.Корзина.Добавить();
		стрКорзины.груз=стр;
	КонецЦикла;	
	Элементы.ГруппаСтраницыПодвал.ТекущаяСтраница=Элементы.ГруппаСтраницыПодвал.ПодчиненныеЭлементы.ГруппаКорзина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКалендарьизКП(Команда)
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьСписокЗаявок();
	ОбновитьПараметрыСписков();

	ОбновитьСписокДокументов();
	 УстановитьВидимость()

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоЗаявкевТКПриИзменении(Элемент)
	УстановитьВидимость();
	ОбновитьПараметрыСписков();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявкиОбщийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	Если ЗначениеЗаполнено(Элементы.СписокЗаявкиОбщий.ТекущиеДанные.ЗаявкаВТК) Тогда
		ОткрытьЗначение(Элементы.СписокЗаявкиОбщий.ТекущиеДанные.ЗаявкаВТК);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВсеЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	НП=СтрЗаменить(Поле.Имя,"СписокВсеЗаявки","");
	Если СтрНачинаетсяС(НП,"ВыдачаТранзита")    Тогда
		СтандартнаяОбработка=ложь;
	    ОткрытьЗначение(Элемент.ТекущиеДанные.ВыдачаТранзитаДокумент);
	ИначеЕсли СтрНачинаетсяС(НП,"СчетЭК")    Тогда
		СтандартнаяОбработка=ложь;
	    ОткрытьЗначение(Элемент.ТекущиеДанные.СчетЭКДокумент);
	ИначеЕсли СтрНачинаетсяС(НП,"СчетТК")    Тогда
		СтандартнаяОбработка=ложь;
	    ОткрытьЗначение(Элемент.ТекущиеДанные.СчетТКДокумент);      
	ИначеЕсли СтрНачинаетсяС(НП,"ОтчетОДоставке")    Тогда
		СтандартнаяОбработка=ложь;
	    ОткрытьЗначение(Элемент.ТекущиеДанные.ОтчетОДоставкеДокумент);

	КонецЕсли;
	//Если НП="СчетЭКДокумент" или НП="СчетТКДокумент"    Тогда
	//	СтандартнаяОбработка=ложь;
	//	ОткрытьЗначение(Элемент.ТекущиеДанные[СтрЗаменить(Поле.Имя,"СписокВсеЗаявки","")]);	
	//Конецесли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Элементы.СписокВсеЗаявки.Обновить();
КонецПроцедуры







#КонецОбласти