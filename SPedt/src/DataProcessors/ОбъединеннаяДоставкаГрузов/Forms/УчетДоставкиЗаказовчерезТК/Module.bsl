
&НаКлиенте
Процедура ОбновитьССайта(Команда)
	//Загрузка
	//СтоСПОбмен_ГруппыДоставки.ЗагрузитьСоставПосылокКурьерскойДоставки();
	Результат	= СтоСПОбмен_ГруппыДоставки.Получить_ПоДате();
	
	СтоСП_ГруппыДоставки.РасчитатьОстаткиПоГруппамДоставки();
	
	Для каждого элем из Результат.ОбработанныеГруппы Цикл
		ОповеститьОбИзменении(элем);
	КонецЦикла;
	//Выгрузка
	
	СписокГрупп = СтоСПОбмен_ГруппыДоставки.ВыгрузитьИзмененияНаСайт();
	Если СписокГрупп <> Неопределено Тогда
		Для каждого элем из СписокГрупп Цикл
			Если элем = Неопределено Тогда Продолжить КонецЕсли;
			ОповеститьОбИзменении(элем.Значение);
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры



#Область СобытияФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    Элементы.СписокГДОчиститьОтборГД.Доступность = Ложь;
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.Печать
	СписокОбъектов=Новый Массив;
	СписокОбъектов.Добавить(Метаданные.Документы.ОтправлениеТранзита);
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект,Элементы.ГруппаПечать,СписокОбъектов);
	// Конец СтандартныеПодсистемы.Печать
	
   // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПараметрыРазмещения = новый Структура;
	ПараметрыРазмещения.Вставить("Источники",Новый ОписаниеТипов("СправочникСсылка.Коробки"));
	ПараметрыРазмещения.Вставить("КоманднаяПанель","ПодключаемыеКоманды");
	ПараметрыРазмещения.Вставить("ПрефиксГрупп","СписокГД");
//    Структура - Параметры размещения подключаемых команд.
//       * Источники - ОписаниеТипов, Массив - Источники команд.
//           Используется для второстепенных списков, а также в формах объектов, не являющихся поставщиками
//           команд (обработки, общие формы). В массиве ожидаются элементы типа "ОбъектМетаданных".
//       * КоманднаяПанель - ГруппаФормы - Командная панель или группа команд, в которой выводятся подменю.
//           Используется как родитель для создания подменю в случае их отсутствия.
//           Если не указан то в первую очередь ищется группа "ПодключаемыеКоманды".
//       * ПрефиксГрупп - Строка - Добавка к именам подменю и имени командной панели.
//           Используется при необходимости префиксации групп с командами (в частности, когда в форме несколько таблиц).
//           В качестве префикса рекомендуется использовать имя таблицы формы, для которой выводятся команды.
//           Например, если ПрефиксГрупп = "СкладскиеДокументы" (имя второстепенной таблицы формы),
//           то используются подменю с именами "СкладскиеДокументыПодменюПечать", "СкладскиеДокументыПодменюОтчеты" и т.д.

    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект,ПараметрыРазмещения);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//аспПроцедурыОбменаДанными.РасчитатьОстаткиПоГруппамДоставки();
	СписокГД.Параметры.УстановитьЗначениеПараметра("ТекущаяДата",ТекущаяДата());
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаОдиночныеЗаказы Тогда
		Если ОдиночныеЗаказы_Выбор.Количество() = 0 Тогда
			ОЗ_ОбновитьНаСервере();
		КонецЕсли;	
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппыДоставки Тогда	
		Элементы.СписокГД.Обновить();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ПровелиОтправлениеТранзита" и  
		 Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаОдиночныеЗаказы Тогда  
		Элементы.ОдиночныеЗаказы.Обновить();
	ИначеЕсли ИмяСобытия="ПровелиВыдачуТранзита" и  
		 Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаОдиночныеЗаказы Тогда 
 		Элементы.ОдиночныеЗаказы_КОтгрузке.Обновить();
	ИначеЕсли ИмяСобытия="ПроведенВозврат" Тогда  		
		СписокГрупп = СтоСПОбмен_ГруппыДоставки.ВыгрузитьИзмененияНаСайт();
		Для каждого группа из СписокГрупп Цикл
			ОповеститьОбИзменении(группа.Значение);
		КонецЦикла;
	ИначеЕсли 	ИмяСобытия 	= "ScanData" 					и
			Источник 	= "ПодключаемоеОборудование" 	и
			ВводДоступен()										Тогда
			
			ШК 			= СтоСП_Клиент.ПолучитьШКизПараметров(Параметр);
			ОбработатьШКнаКлиенте(ШК);
			
		
		
	КонецЕсли;	
КонецПроцедуры



&НаКлиенте
Процедура ОбработатьШКнаКлиенте(ШК)
	ДанныеШК    = СП_Штрихкоды.ПолучитьДанныеПоШК(ШК);
    Если ДанныеШК = Неопределено Тогда Возврат; КонецЕсли;

	Если Строка(ДанныеШК.Тип) = "Посылка (12)" Тогда
		ГруппаДоставки = УстановитьОтборПоПосылке(ДанныеШК.Посылка);
		Если Элементы.СписокГД.ТекущиеДанные.Ссылка <> ГруппаДоставки Тогда
			ПоказатьПредупреждение(,"Не найдена: "+ГруппаДоставки);
		КонецЕсли	
	КонецЕсли; //12000008821501008340
КонецПроцедуры	

Функция УстановитьОтборПоПосылке(Посылка)
	//СписокГД.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
	
	СписокГД.Отбор.Элементы.Очистить();
	ГруппыДоставки 					= ПолучитьГруппыДоставкиПоКодуЗаказа(Посылка.Состав[0].КодЗаказа);
	ЭлементОтбора 					= СписокГД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("УчастникГД");
	ЭлементОтбора.ВидСравнения 		=  ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение  	= Посылка.Участник;

	Элементы.СписокГД.ТекущаяСтрока = ГруппыДоставки[0].Значение; 
	Элементы.СписокГДОчиститьОтборГД.Доступность = Истина;
	Возврат ГруппыДоставки[0].Значение;
КонецФункции

&НаКлиенте
Процедура ОчиститьОтборГД(Команда)
	СписокГД.Отбор.Элементы.Очистить();
	Элементы.СписокГДОчиститьОтборГД.Доступность = Ложь;
КонецПроцедуры	


Функция ПолучитьГруппыДоставкиПоКодуЗаказа(КодЗаказа)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КоробкиСостав.Ссылка
		|ИЗ
		|	Справочник.Коробки.Состав КАК КоробкиСостав
		|ГДЕ
		|	КоробкиСостав.КодЗаказа = &КодЗаказа
		|СГРУППИРОВАТЬ ПО
		|	КоробкиСостав.Ссылка";
	
	Запрос.УстановитьПараметр("КодЗаказа", КодЗаказа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СЗ = новый СписокЗначений();
	СЗ.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ссылка"));
	Возврат СЗ;
КонецФункции	

#КонецОбласти

&НаКлиенте
Процедура ВвестиШтрихКодВручную(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаВводаШК",,ЭтотОбъект,,,,Новый ОписаниеОповещения("ВвестиШтрихКодВручную_Завершение", ЭтотОбъект));
	//12000008536904000077
КонецПроцедуры

&НаКлиенте
Процедура ВвестиШтрихКодВручную_Завершение(ШК, ДополнительныеПараметры) Экспорт
	ОбработатьШКнаКлиенте(ШК);
КонецПроцедуры	


#Область Печать 

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
    УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Элементы.ОтправленныеЗаказы);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ОписьДляПочтыРоссии(Команда)
	МассивДокументов=Элементы.ОтправленныеЗаказы.ВыделенныеСтроки;
	СсылкаНаФорму=ПолучитьСсылкуНаФорму(МассивДокументов);
	ЗапуститьПриложение(СсылкаНаФорму);
КонецПроцедуры

Функция ПолучитьСсылкуНаФорму(МассивДокументов)
	об=Обработки.ОбменСПочтойРоссии.Создать();
     возврат об.ОбменССайтомКвитанцияФ103(МассивДокументов)
КонецФункции

#КонецОбласти

#Область ДействияСЗаказами 

#Область Расшифровка
&НаКлиенте
Процедура СписокГДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	результат=ПолучитьФормуРасшифровки(ВыбраннаяСтрока,Поле.Имя);
	Если ЗначениеЗаполнено(результат.Значение) Тогда
		ОткрытьФорму(результат.НазваниеФормы,новый Структура("Ключ",результат.Значение),этаформа,ЭтаФорма.УникальныйИдентификатор);
		//ОткрытьЗначение(результат.Значение);
	Иначе
		ОткрытьФорму(результат.НазваниеФормы, результат.Парам,ЭтаФорма);
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьФормуРасшифровки(ВыбраннаяСтрока,ИмяПоля)
	Если ТипЗнч(ВыбраннаяСтрока)=Тип("СправочникСсылка.Коробки") Тогда
		Если 	ИмяПоля<>"СписокГДСсылка"  Тогда
			Парам			= новый Структура("ГруппаДоставки",ВыбраннаяСтрока);
			НазваниеФормы	= "Документ.ОтправлениеТранзита.Форма.ФормаДокумента";
			Значение		= ВыбраннаяСтрока.ОтправлениеТранзита;
		Иначе
			Парам  			= Новый Структура("Ключ", ВыбраннаяСтрока);
			НазваниеФормы	= "Справочник.Коробки.Форма.ФормаГруппыДоставки";
			Значение		= Неопределено;
		КонецЕсли;
	КонецЕсли;
	результат=Новый Структура("НазваниеФормы,Парам,Значение",НазваниеФормы,Парам,Значение);
	Возврат результат;
КонецФункции	
#КонецОбласти

#Область ОбъединитьГД
&НаКлиенте
Процедура ОбъединитьГруппыДоставки(Команда)
	МассДляОтправления=Элементы.СписокГД.ВыделенныеСтроки;
	
	Фрм=ПолучитьФорму("Документ.ОбъединениеГруппДоставки.Форма.ФормаДокумента",,ЭтаФорма);
	обОбъединениеГруппДоставкиСформы=фрм.Объект;	
	СформироватьОбъединениеГруппДоставкиНаСервере(обОбъединениеГруппДоставкиСформы,МассДляОтправления);
	КопироватьДанныеФормы(обОбъединениеГруппДоставкиСформы,фрм.объект);
	фрм.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппуДоставки(Команда)
	МассДляОтправления=Элементы.СписокГД.ВыделенныеСтроки[0];
	
	Фрм=ПолучитьФорму("Документ.СоздатьГруппуДоставки.Форма.ФормаДокумента",,ЭтаФорма);
	докОбъект=фрм.Объект;	
	СоздатьГруппуДоставкиНаСервере(докОбъект,МассДляОтправления);
	КопироватьДанныеФормы(докОбъект,фрм.объект);
	фрм.Открыть();
КонецПроцедуры

&НаСервере
Процедура СоздатьГруппуДоставкиНаСервере(обОбъединениеГруппДоставкиСформы,МассДляОтправления)
	УчастникГД = Справочники.Участники.ПустаяСсылка();
	Попытка
		УчастникГД = МассДляОтправления.УчастникГД;
		обОбъединениеГруппДоставки=ДанныеФормыВЗначение(обОбъединениеГруппДоставкиСформы,Тип("ДокументОбъект.СоздатьГруппуДоставки"));
		обОбъединениеГруппДоставки.Дата=ТекущаяДата();
		обОбъединениеГруппДоставки.участник = УчастникГД;
		обОбъединениеГруппДоставки.ЗаполнитьОстаткамиНаСкладе(УчастникГД);
		ЗначениеВДанныеФормы(обОбъединениеГруппДоставки,обОбъединениеГруппДоставкиСформы);
	Исключение
		
	КонецПопытки;

КонецПроцедуры


&НаСервере
Процедура СформироватьОбъединениеГруппДоставкиНаСервере(обОбъединениеГруппДоставкиСформы,МассДляОтправления)
	    УчастникГД=Справочники.Участники.ПустаяСсылка();
		Для каждого стр Из МассДляОтправления Цикл
			Если УчастникГД=Справочники.Участники.ПустаяСсылка() Тогда
				УчастникГД=стр.УчастникГД;
			Иначе
				Если УчастникГД<>стр.УчастникГД Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Объединять можно ,только, группы для одного участника!!!");
					Возврат;
				КонецЕсли;	
			КонецЕсли	
		КонецЦикла;
	    обОбъединениеГруппДоставки=ДанныеФормыВЗначение(обОбъединениеГруппДоставкиСформы,Тип("ДокументОбъект.ОбъединениеГруппДоставки"));
		обОбъединениеГруппДоставки.Дата=ТекущаяДата();
		обОбъединениеГруппДоставки.ЗаполнитьПоМассивуКоробок(МассДляОтправления);
		ЗначениеВДанныеФормы(обОбъединениеГруппДоставки,обОбъединениеГруппДоставкиСформы);
	

КонецПроцедуры

#КонецОбласти

#Область ВыдачаТранзита

&НаКлиенте
Процедура СформироватьВыдачуТранзита(Команда)
	МассДляОтправления=Элементы.СписокГД.ВыделенныеСтроки;
	
	Фрм=ПолучитьФорму("Документ.ВыдачаТранзита.Форма.ФормаДокумента",,ЭтаФорма);
	обВыдачаТранзитаСформы=фрм.Объект;	
	СформироватьВыдачуТранзитаНаСервере(обВыдачаТранзитаСформы,МассДляОтправления);
	КопироватьДанныеФормы(обВыдачаТранзитаСформы,фрм.объект);
	фрм.Открыть();
КонецПроцедуры

&НаСервере
Процедура СформироватьВыдачуТранзитаНаСервере(обВыдачаТранзитаСформы,МассДляОтправления)
	тз=Новый ТаблицаЗначений;
	тз.Колонки.Добавить("ГД",новый ОписаниеТипов("СправочникСсылка.Коробки"));
	тз.Колонки.Добавить("ТочкаНазначения",новый ОписаниеТипов("СправочникСсылка.ТочкиРаздачи"));
	
	Для каждого элем из МассДляОтправления Цикл
		стрТЗ=тз.Добавить();
		Если ТипЗнч(элем)=Тип("ДокументСсылка.ОтправлениеТранзита") Тогда
			Заказ=элем.Коробка;
		Иначе
			Заказ=элем;
		КонецЕсли;	
		стрТЗ.ГД=Заказ;
		стрТЗ.ТочкаНазначения=Заказ.ТочкаНазначения;
	КонецЦикла;
	тзТочки=тз.Скопировать(,"ТочкаНазначения");
	тзТочки.Свернуть("ТочкаНазначения");
	

	
	Для каждого стр из тзТочки Цикл
		массСтрок=тз.НайтиСтроки(новый Структура("ТочкаНазначения",стр.ТочкаНазначения));
		СписокЗаказов=Новый СписокЗначений;
		Для каждого стр из массСтрок Цикл
			СписокЗаказов.Добавить(стр.ГД);
		КонецЦикла;	
		СписокЗаказов.ЗагрузитьЗначения(массСтрок);
		обВыдачаТранзита		=ДанныеФормыВЗначение(обВыдачаТранзитаСформы,Тип("ДокументОбъект.ВыдачаТранзита"));
		обВыдачаТранзита.Дата	=ТекущаяДата();
		обВыдачаТранзита.ЗаполнитьПоСпискуКоробок(СписокЗаказов);
		обВыдачаТранзита.ВидОперации=Перечисления.ВидыОперацийВыдачаТранзита.НаОднуТочку;
		обВыдачаТранзита.ТочкаТранзита=?(ЗначениеЗаполнено(стр.ТочкаНазначения.ОсновнаяТочка),стр.ТочкаНазначения.ОсновнаяТочка, стр.ТочкаНазначения);
		обВыдачаТранзита.ТочкаНазначения=стр.ТочкаНазначения;
		ЗначениеВДанныеФормы(обВыдачаТранзита,обВыдачаТранзитаСформы);
	КонецЦикла
КонецПроцедуры
#КонецОбласти

#Область ОтчетОДоставке
&НаСервере
Процедура СформироватьОтчетОДоставкеНаСервере(обОтчетОДоставкеСформы,МассДляОтправления)
	тз=Новый ТаблицаЗначений;
	тз.Колонки.Добавить("ГД",новый ОписаниеТипов("СправочникСсылка.Коробки"));
	тз.Колонки.Добавить("ТочкаНазначения",новый ОписаниеТипов("СправочникСсылка.ТочкиРаздачи"));

	Для каждого элем из МассДляОтправления Цикл
		стрТЗ=тз.Добавить();
		стрТЗ.ГД=элем;
		стрТЗ.ТочкаНазначения=элем.ТочкаНазначения;
	КонецЦикла;
	тзТочки=тз.Скопировать(,"ТочкаНазначения");
	тзТочки.Свернуть("ТочкаНазначения");
	Для каждого стр из тзТочки Цикл
		массСтрок=тз.НайтиСтроки(новый Структура("ТочкаНазначения",стр.ТочкаНазначения));
		СписокЗаказов=Новый СписокЗначений;
		Для каждого стр из массСтрок Цикл
			СписокЗаказов.Добавить(стр.ГД);
		КонецЦикла;	
		СписокЗаказов.ЗагрузитьЗначения(массСтрок);
		обОтчетОДоставке=ДанныеФормыВЗначение(обОтчетОДоставкеСформы,Тип("ДокументОбъект.ОтчетОДоставке"));
		обОтчетОДоставке.Дата=ТекущаяДата();
		обОтчетОДоставке.ГруппыДоставки=Истина;
		обОтчетОДоставке.ЗаполнитьПоСпискуКоробок(СписокЗаказов);
		обОтчетОДоставке.ВидОперации=Перечисления.ВидыОперацийОтчетОДоставке.Доставлен;
		обОтчетОДоставке.ДатаДоставки=ТекущаяДата();
		ЗначениеВДанныеФормы(обОтчетОДоставке,обОтчетОДоставкеСформы);
	КонецЦикла
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОДоставке(Команда)
	МассДляОтправления=Элементы.СписокГД.ВыделенныеСтроки;
	
	Фрм=ПолучитьФорму("Документ.ОтчетОДоставке.Форма.ФормаДокумента",,ЭтаФорма);
	обОтчетОДоставкеСформы=фрм.Объект;	
	СформироватьОтчетОДоставкеНаСервере(обОтчетОДоставкеСформы,МассДляОтправления);
	КопироватьДанныеФормы(обОтчетОДоставкеСформы,фрм.объект);
	фрм.Открыть();
КонецПроцедуры


&НаСервере
Функция СформироватьВозвратНаСервере(ДанныеФормы,ГруппаДоставки)
	объектВозврата = Обработки.ОбъединеннаяДоставкаГрузов.ОформитьВозвратГруппыВстатусеЗапросОплаты(ГруппаДоставки);
	Если объектВозврата = Неопределено Тогда
		возврат ложь;
	КонецЕсли;	
	ЗначениеВДанныеФормы(объектВозврата,ДанныеФормы);
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура СформироватьВозврат(Команда)
	Фрм=ПолучитьФорму("Документ.ВозвратПокупокОрганизатору.Форма.ФормаДокумента",,ЭтаФорма);
	ДанныеФормы=фрм.Объект;	
	Группа = Элементы.СписокГД.ВыделенныеСтроки[0];
	Если СформироватьВозвратНаСервере(ДанныеФормы,Группа) Тогда
		КопироватьДанныеФормы(ДанныеФормы,фрм.объект);
		фрм.Открыть();
	Конецесли;
КонецПроцедуры
#КонецОбласти


#Область УстановитьМетодОплатыНаложенныйПлатеж
&НаКлиенте
Процедура УстановитьМетодОплатыНаложенныйПлатеж(Команда)
	МассДляОтправления=Элементы.СписокГД.ВыделенныеСтроки;
	Если МассДляОтправления.Количество()>1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Устанавливать ""Наложенный платеж"" возможно только по одной ""Группе доставки""!");
		Возврат;
	КонецЕсли; 	
	Если МассДляОтправления.Количество()=1 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		группа = МассДляОтправления[0];
		Оповещение = Новый ОписаниеОповещения("УстановитьМетодОплатыНаложенныйПлатежЗавершение",ЭтотОбъект ,Группа );
		ПоказатьВопрос(Оповещение,"Продолжить выполнение операции?" , Режим);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМетодОплатыНаложенныйПлатежЗавершение(Результат, Группа) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтоСПОбмен_ГруппыДоставки.УстановитьНаложенныйПлатеж(группа);
	ОповеститьОбИзменении(группа);
КонецПроцедуры	

#КонецОбласти

#Область ЗаменаАдрессаГруппыДоставки
&НаКлиенте
Процедура ИзменитьАдресУГруппыДоставки(Команда)
	МассДляОтправления=Элементы.СписокГД.ВыделенныеСтроки;
	Если МассДляОтправления.Количество()>1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Менять адрес возможно только по одной ""Группе доставки""!");
		Возврат;
	КонецЕсли; 	
	Если МассДляОтправления.Количество()=1 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		группа = МассДляОтправления[0];
		Оповещение = Новый ОписаниеОповещения("ИзменитьАдресУГруппыДоставкиЗавершение",ЭтотОбъект ,Группа );
		ПоказатьВопрос(Оповещение,"У участника появится возможност поменять параметры доставки в личном кабинете.Продолжить выполнение операции?" , Режим);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАдресУГруппыДоставкиЗавершение(Результат, Группа) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтоСПОбмен_ГруппыДоставки.ИзменитьАдресГруппыДоставки(группа);
	ОповеститьОбИзменении(группа);	
КонецПроцедуры	


#КонецОбласти

#КонецОбласти



#Область ОдиночныеЗаказы_ТЗ

Процедура ОЗ_ОбновитьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КоробкиСостав.Покупка КАК Покупка,
		|	КоробкиСостав.Участник КАК Участник,
		|	ЕСТЬNULL(ЗаказыВПосылкахОстатки.Посылка, ЗНАЧЕНИЕ(Справочник.Посылки.ПустаяСсылка)) КАК Посылка,
		|	КоробкиСостав.КодЗаказа КАК КодЗаказа
		|ПОМЕСТИТЬ ЗаказыИзГрупп
		|ИЗ
		|	Справочник.Коробки.Состав КАК КоробкиСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыВПосылках.Остатки КАК ЗаказыВПосылкахОстатки
		|		ПО КоробкиСостав.Покупка = ЗаказыВПосылкахОстатки.Покупка
		|			И КоробкиСостав.Участник = ЗаказыВПосылкахОстатки.Участник
		|			И КоробкиСостав.КодЗаказа = ЗаказыВПосылкахОстатки.КодЗаказа
		|ГДЕ
		|	КоробкиСостав.Ссылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
		|	И КоробкиСостав.Ссылка.СтатусГруппыДоставки <> ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.finished)
		|	И КоробкиСостав.Ссылка.СтатусГруппыДоставки <> ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.empty)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТранзитОстатки.Участник КАК Участник,
		|	ТранзитОстатки.ПокупкаСсылка КАК Покупка,
		|	ТранзитОстатки.МестоХранения КАК МестоХранения,
		|	ТранзитОстатки.Габарит КАК Габарит,
		|	ТранзитОстатки.Партия КАК Партия,
		|	ТранзитОстатки.КоличествоОстаток КАК Количество,
		|	ТранзитОстатки.Точка КАК Точка
		|ИЗ
		|	РегистрНакопления.Транзит.Остатки(
		|			,
		|			НЕ ПокупкаСсылка В
		|						(ВЫБРАТЬ
		|							ЗаказыИзГрупп.Посылка КАК Посылка
		|						ИЗ
		|							ЗаказыИзГрупп КАК ЗаказыИзГрупп)
		|				И ТИПЗНАЧЕНИЯ(ПокупкаСсылка) <> ТИП(Справочник.Коробки)
		|				И Точка.ТранспортнаяКомпания
		|				И Точка.Код <> ""0100"") КАК ТранзитОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТранзитОстатки.Партия.Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОдиночныеЗаказы_Выбор.Загрузить(РезультатЗапроса.Выгрузить());	

КонецПроцедуры

&НаКлиенте
Процедура ОЗ_Обновить(Команда)
	ОЗ_ОбновитьНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура Оформить_ОдиночныеЗаказы(Команда)
	ВыбранныеПосылки = Новый Массив;
	выбраные_Строки  = ОдиночныеЗаказы_Выбор.НайтиСтроки(Новый Структура("Подбор",Истина));
	Если выбраные_Строки.Количество()=0 Тогда Возврат КонецЕсли;
	ОсновнойУчастник	= выбраные_Строки[0].Участник;
	ОсновнаяТочка		= выбраные_Строки[0].Точка;
	
	Для Каждого элем из выбраные_Строки Цикл
		ВыбранныеПосылки.Добавить(элем.Покупка);
		Если элем.Участник<>ОсновнойУчастник Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо выделить заказы только одного участника!");
			Возврат;
		КонецЕсли;	
	КонецЦикла;
	
	Если ПроверитьЗаказыНаВхождениеВГруппы(Истина)  Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияСписания",ЭтаФорма);
		ОткрытьФорму("Документ.ОтправлениеТранзита.Форма.ФормаДокумента",новый Структура("Участник,ТочкаНазначения,Заказы",ОсновнойУчастник,ОсновнаяТочка,ОдиночныеЗаказы_Выбор),ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс  );
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьЗаказыНаВхождениеВГруппы(Помеченые = Ложь)
	ТЗ 					= ДанныеФормыВЗначение(ОдиночныеЗаказы_Выбор, Тип("ТаблицаЗначений"));
	Если Помеченые Тогда
		ОтборПомеченных = новый Структура("Подбор",Истина);
	Иначе
		ОтборПомеченных = Неопределено; 
	КонецЕсли;	
	тз_Заказы			= ТЗ.Скопировать(ОтборПомеченных,"Покупка,Участник,МестоХранения,Габарит");
	
		
	Результат_Проверки	= СтоСПОбмен_ГруппыДоставки.ЗаказыДругихТочек_ПроверитьЗаказы(тз_Заказы);
	Если не Результат_Проверки.Авторизация Тогда
		Возврат ложь;
	КонецЕсли;
	СтрокиКУдалению = новый Массив;
	Для каждого стр из ОдиночныеЗаказы_Выбор Цикл
		Если Помеченые и не стр.подбор Тогда продолжить; КонецЕсли;
		отбор_Проверка			= новый структура("Участник,Покупка",стр.Участник,стр.Покупка);
		масс_Строк				= Результат_Проверки.ЗаказыБезГрупп.НайтиСтроки(отбор_Проверка);
		масс_Строк_СвоиГруппы	= Результат_Проверки.ЗаказыВСвоихГруппах.НайтиСтроки(отбор_Проверка);
		Если  масс_Строк.Количество()= 0 и масс_Строк_СвоиГруппы.Количество()= 0  Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заказ покупка-"+стр.Покупка+", участник-"+стр.Участник+" Включен в группу доставки другой точки и был удален из отправления." );
			СтрокиКУдалению.Добавить(стр);
		КонецЕсли;	
	КонецЦикла;
	Для Каждого элем из СтрокиКУдалению Цикл
		ОдиночныеЗаказы_Выбор.Удалить(элем);
		
	КонецЦикла;	
	Возврат Истина;
КонецФункции



&НаКлиенте
Процедура Списать_ОдиночныеЗаказы(Команда)
	ВыбранныеПосылки = Новый Массив;
	выбраные_Строки = ОдиночныеЗаказы_Выбор.НайтиСтроки(новый Структура("Подбор",Истина));
	Если выбраные_Строки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Для Каждого элем из выбраные_Строки Цикл
		ВыбранныеПосылки.Добавить(элем.Покупка);
	КонецЦикла;
	
	ПараметрыЗаполнения	= Новый Структура();
	ПараметрыЗаполнения.Вставить("Дата", 		ТекущаяДата());
	ПараметрыЗаполнения.Вставить("ВидОперации", "Списание");
	ПараметрыЗаполнения.Вставить("Покупка", 	новый структура("ПравоеЗначение, Использование, ВидСравнения", ВыбранныеПосылки, Истина, ВидСравненияКомпоновкиДанных.ВСписке) );
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияСписания",ЭтаФорма);
	
	ОткрытьФорму("Документ.ДвижениеТранзита.ФормаОбъекта",Новый структура("ПараметрыЗаполнения",ПараметрыЗаполнения) ,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс  );
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияСписания(Результат, ДопПараметры) Экспорт
	ПроверятьВсеЗаказы = ( ДопПараметры<>Неопределено и ДопПараметры.Свойство("ПроверятьВсеЗаказы"));
	ПослеЗакрытияСписанияНаСервере(ПроверятьВсеЗаказы)
КонецПроцедуры

Процедура ПослеЗакрытияСписанияНаСервере(ПроверятьВсеЗаказы)
	Если ПроверятьВсеЗаказы Тогда
		ВыбраныеПосылки = ОдиночныеЗаказы_Выбор.Выгрузить();
	Иначе
		ВыбраныеПосылки = ОдиночныеЗаказы_Выбор.Выгрузить(новый Структура("Подбор",Истина));
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вз.Покупка КАК Покупка
		|ПОМЕСТИТЬ ВыбранныеСтроки
		|ИЗ
		|	&ВыбраныеПосылки КАК Вз
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеСтроки.Покупка КАК Посылка,
		|	ЕСТЬNULL(ТранзитОстатки.КоличествоОстаток, 0) КАК Количество
		|ИЗ
		|	ВыбранныеСтроки КАК ВыбранныеСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Транзит.Остатки(
		|				,
		|				Точка.ТранспортнаяКомпания
		|					И ПокупкаСсылка В
		|						(ВЫБРАТЬ
		|							ВыбранныеСтроки.Покупка КАК Покупка
		|						ИЗ
		|							ВыбранныеСтроки КАК ВыбранныеСтроки)) КАК ТранзитОстатки
		|		ПО ВыбранныеСтроки.Покупка = ТранзитОстатки.ПокупкаСсылка
		|ГДЕ
		|	ЕСТЬNULL(ТранзитОстатки.КоличествоОстаток, 0) = 0";
		Запрос.УстановитьПараметр("ВыбраныеПосылки", ВыбраныеПосылки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайденныеСтроки = ОдиночныеЗаказы_Выбор.НайтиСтроки(новый структура("Покупка",ВыборкаДетальныеЗаписи.Посылка));
		Для Каждого элем из  НайденныеСтроки Цикл
			ОдиночныеЗаказы_Выбор.Удалить(элем);
		КонецЦикла;
	КонецЦикла;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаказыДляДругихПунктовВыдачи(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияСписания",ЭтаФорма,новый структура("ПроверятьВсеЗаказы", Истина));
	
	ОткрытьФорму("Документ.ДвижениеТранзита.ФормаОбъекта",Новый структура("ЗаказыДругихТочек",Истина) ,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс  );
	
КонецПроцедуры


&НаКлиенте
Процедура ДтКТ_ОдиночныеЗаказы(Команда)
	ДляОтбора = Новый Структура;
	ДляОтбора.Вставить("Покупка", Элементы.ОдиночныеЗаказы_Выбор.ТекущиеДанные.Покупка);
	ДляОтбора.Вставить("Участник", Элементы.ОдиночныеЗаказы_Выбор.ТекущиеДанные.Участник);
	
	фрм=ПолучитьФорму("РегистрНакопления.Транзит.ФормаСписка",новый Структура("ДляОтбора",ДляОтбора),ЭтаФорма);
	фрм.Открыть();
КонецПроцедуры



#КонецОбласти


#Область ОдиночныеЗаказы

Процедура Обновить_ТЗ_ОдиночныеЗаказы()
	Элементы.ОдиночныеЗаказы.Обновить();
	Элементы.ОдиночныеЗаказы_КОтгрузке.Обновить();
КонецПроцедуры





&НаКлиенте
Процедура Отгрузить_ОдиночныеЗаказы(Команда)
	МассДляОтправления=Элементы.ОдиночныеЗаказы_КОтгрузке.ВыделенныеСтроки;
	
	Фрм=ПолучитьФорму("Документ.ВыдачаТранзита.Форма.ФормаДокумента",,ЭтаФорма);
	обВыдачаТранзитаСформы=фрм.Объект;	
	СформироватьВыдачуТранзитаНаСервере(обВыдачаТранзитаСформы,МассДляОтправления);
	КопироватьДанныеФормы(обВыдачаТранзитаСформы,фрм.объект);
	фрм.Открыть();

	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьЗаказыВнеГрупп(ДанныеФормы)
	обДТ=ДанныеФормыВЗначение(ДанныеФормы,Тип("ДокументОбъект.ДвижениеТранзита"));
	обДТ.ЗаполнитьЗаказамиДруихТочек();
	ЗначениеВДанныеФормы(обДТ,ДанныеФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаказыВнеГрупп_ОЛД(Команда)
	форма		=ПолучитьФорму("Документ.ДвижениеТранзита.Форма.ФормаДокумента");
	ДанныеФормы = Форма.Объект;
	ЗаполнитьЗаказыВнеГрупп(ДанныеФормы);
	Если ДанныеФормы.ПокупкиТранзит.Количество()>0 Тогда
		КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
		форма.Открыть();
	КонецЕсли;
	Обновить_ТЗ_ОдиночныеЗаказы();
КонецПроцедуры

&НаСервере
Процедура ВернутьСтатусЗапросОплатыНаСервере(группа)
	НачатьТранзакцию();
	об_отпр=группа.ОтправлениеТранзита.ПолучитьОбъект();
	об_отпр.Дата=об_отпр.Дата+1;
	об_отпр.Записать(РежимЗаписиДокумента.Проведение);
	
	 СтоСПОбмен_ГруппыДоставки.ПеревестиВСтатусЗапросОплаты(Группа);
	ЗафиксироватьТранзакцию();

КонецПроцедуры

&НаКлиенте
Процедура ВернутьСтатусЗапросОплаты(Команда)
	МассДляОтправления=Элементы.СписокГД.ВыделенныеСтроки;
	Если МассДляОтправления.Количество()>1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вернуть статус в  ""Запрос оплаты"" возможно только по одной ""Группе доставки""!");
		Возврат;
	КонецЕсли; 	
	Если МассДляОтправления.Количество()=1 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		группа = МассДляОтправления[0];
		Оповещение = Новый ОписаниеОповещения("ВернутьСтатусЗапросОплатыЗавершение",ЭтотОбъект ,Группа );
		ПоказатьВопрос(Оповещение,"Продолжить выполнение операции?" , Режим);
	КонецЕсли;

	
КонецПроцедуры


&НаКлиенте
Процедура ВернутьСтатусЗапросОплатыЗавершение(Результат, Группа) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ВернутьСтатусЗапросОплатыНаСервере(группа);
	ОповеститьОбИзменении(группа);	
КонецПроцедуры	




#КонецОбласти

#Область ГрупповоеполучениеТрекНомераВариант2
&НаКлиенте
Процедура СДЭКПолучитьТрекНомер(Команда)
 	 ВыбранныеГруппы 	= Элементы.СписокГД.ВыделенныеСтроки;
	 СписокГрупп 		= Новый СписокЗначений;
	 СписокГрупп.ЗагрузитьЗначения(ВыбранныеГруппы);
	 ПараметрыФормы		=  новый Структура("СписокГрупп", СписокГрупп);
	 ОповещениеИнтеграйияСДЭКЗавершение = Новый ОписаниеОповещения("ИнтеграйияСДЭКЗавершение", ЭтаФорма,СписокГрупп);
	 ОткрытьФорму("Документ.СдэкИнеграция.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма,,,,ОповещениеИнтеграйияСДЭКЗавершение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	
	// ВыбранныеГруппы 	= Элементы.СписокГД.ВыделенныеСтроки;
	// списокГрупп = Новый СписокЗначений;
	// списокГрупп.ЗагрузитьЗначения(ВыбранныеГруппы);


	//Разбор = СтоСП_ГруппыДоставки.ПолучитьКорректныеГруппыДляПолученияТрекНомра(СписокГРупп);
	//
	//
	//ПараметрыФормыИнтеграции= Неопределено;
	//Если Разбор.БезОшибок.Количество() > 0 Тогда 
	//	ПараметрыФормыИнтеграции = новый Структура("СписокГрупп", Разбор.БезОшибок);
	//	//ОткрытьФорму("Документ.СдэкИнеграция.Форма.ФормаДокумента", новый Структура("СписокГрупп", ВыбранныеГруппы), ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//КонецЕсли;	
	//
	//ПараметрыФормыОшибок = Новый Структура;
	//Если Разбор.Ошибки <> неопределено Тогда 
	//	ПараметрыФормыОшибок = Новый Структура;
	//	ПараметрыФормыОшибок.Вставить("Результат",			Разбор.Ошибки.Результат);
	//	ПараметрыФормыОшибок.Вставить("АдресРасшифровки",  	Разбор.Ошибки.ДанныеРасшифровки);
	//	ПараметрыФормыОшибок.Вставить("АдресСКД", 			Разбор.Ошибки.СКД);
	//	ПараметрыФормыОшибок.Вставить("Заголовок", "По Группам из списк нельзя получить трек номер, по указанным причинам");
	//КонецЕсли;	
	//
	//ОповещениеЗакрытияФормыОшибок = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормыОшибок",ЭтотОбъект, ПараметрыФормыИнтеграции);    
	//ОткрытьФорму("Общаяформа.ФормаПросмотраОшибок",ПараметрыФормыОшибок,ЭтаФорма,,,,ОповещениеЗакрытияФормыОшибок,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПослеЗакрытияФормыОшибок(РезультатЗакрытия, Параметры) Экспорт
	ОткрытьФорму("Документ.СдэкИнеграция.Форма.ФормаДокумента", Параметры, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры


#КонецОбласти


#Область ГрупповоеполучениеТрекНомераВариант1

&НаКлиенте
Процедура СдэкИнтеграйия(Команда)
 	 ВыбранныеГруппы 	= Элементы.СписокГД.ВыделенныеСтроки;
	 СписокГрупп		=  новый Структура("СписокГрупп", ВыбранныеГруппы);
	 ОповещениеИнтеграйияСДЭКЗавершение = Новый ОписаниеОповещения("ИнтеграйияСДЭКЗавершение", ЭтаФорма,СписокГрупп);
	 
	 
	 ОткрытьФорму("Документ.СдэкИнеграция.Форма.ФормаДокумента", новый Структура("СписокГрупп", ВыбранныеГруппы), ЭтаФорма,,,,ОповещениеИнтеграйияСДЭКЗавершение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
 КонецПроцедуры
 
&НаКлиенте
Процедура ИнтеграйияСДЭКЗавершение(Параметры, ДополнительныеПараметры) Экспорт

КонецПроцедуры



#КонецОбласти

#Область ПодключаемыеКоманды
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СписокГД);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СписокГД, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокГД);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

