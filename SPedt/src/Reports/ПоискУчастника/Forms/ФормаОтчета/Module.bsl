 &НаКлиенте
Процедура Сформировать(Команда)
	
	Ответ = ЗаполнитьУчастниковПоОтбору(ТабДок, Поиск,ПоискСНачалаСтроки,ПоискТочноеСоответствие,ПоИД);
	Если Ответ.ПустойРезультата и Ответ.ПоискПоТелефону Тогда
		оповещение = новый ОписаниеОповещения("ЗагрузитьУчастникаПотелефону_Вопрос",ЭтотОбъект,Ответ);
		ПоказатьВопрос(оповещение,"Участник не найден. Загрузить Участника по номеру телефона :" + Ответ.строкаТелефон,РежимДиалогаВопрос.ДаНет,,,"Участник не найден.");
	Иначе	
		ВывестиУчастников();	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУчастникаПотелефону_Вопрос(параметры, ДополжнительныеПараметры) Экспорт	
	Если параметры = КодВозвратаДиалога.Да Тогда
		Участник = СтоСПОбмен_Участники.ПолучитьРеквизитыУчастникаПоНомеруТелефона(ДополжнительныеПараметры.строкаТелефон);	
		Если Участник <> неопределено Тогда
			СписокУчастников.Очистить();
			новыйУчастник = СписокУчастников.Добавить();
			ЗаполнитьЗначенияСвойств(новыйУчастник,Участник);
			ВывестиУчастников();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьУчастниковПоОтбору(ТабДок,Поиск,ПоискСНачалаСтроки,ПоискТочноеСоответствие,поИД)
    Ответ = Новый Структура;
	Ответ.Вставить("ПустойРезультата",Ложь);

	строкаТелефон   = СтрЗаменить(Поиск," ","");
	Если Поиск = "" Тогда Возврат Ответ; КонецЕсли; 
	
	//строкаТелефон   = СтрЗаменить(строкаТелефон,"-","");
	//строкаТелефон   = СтрЗаменить(строкаТелефон,"(","");
	//строкаТелефон   = СтрЗаменить(строкаТелефон,")","");
	//длинаТелефона = СтрДлина(строкаТелефон);
	//Если СтрНачинаетсяС(строкаТелефон,"+7") Тогда
	//	строкаТелефон   = Прав(строкаТелефон,длинаТелефона-2); 
	//Иначе
	//	строкаТелефон   = Прав(строкаТелефон,длинаТелефона-1); 
	//КонецЕсли;	
	//Попытка
	//	телЧисло   = Число(строкаТелефон);
	//	ПоискПоТелефону = Истина;
	//	строкаТелефон = "+7" + строкаТелефон;
	//Исключение
	//	ПоискПоТелефону = Ложь;
	//КонецПопытки;
	//
	//Запрос=Новый Запрос;
	//Запрос.Текст= 
	// "ВЫБРАТЬ
	// |	Участники.Код 		КАК код,
	// |	Участники.Ссылка 	КАК Ссылка,
	// |	Участники.Ссылка.Наименование 	КАК Наименование,
	// |	Участники.Телефон1 	КАК Телефон
	// |ПОМЕСТИТЬ втУчастники
	// |ИЗ
	// |	Справочник.Участники КАК Участники
	// |ГДЕ   "+?( не поИД,"
	//|	Участники.Наименование ПОДОБНО &Поиск СПЕЦСИМВОЛ ""\"" ","
	//|	Участники.Код = &Поиск ")+" "+?(ПоискПоТелефону," 
	//|	или Участники.ТелефонХэш ПОДОБНО &хэшьТелефона СПЕЦСИМВОЛ ""\"" ","")+"
	// |
	// |СГРУППИРОВАТЬ ПО
	// |	Участники.Ссылка,
	// |	Участники.Ссылка.Наименование,
	// |	Участники.Код,
	// |	Участники.Телефон1
	// |
	// |ИНДЕКСИРОВАТЬ ПО
	// |	Ссылка
	// |;
	// |
	// |////////////////////////////////////////////////////////////////////////////////
	// |ВЫБРАТЬ
	// |	втУчастники.код КАК код,
	// |	втУчастники.Наименование КАК Наименование,
	// |	втУчастники.Ссылка КАК Ссылка,
	// |	втУчастники.Телефон КАК Телефон,
	// |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КартыУчастников.Ссылка) КАК КоличествоКарт
	// |ИЗ
	// |	втУчастники КАК втУчастники
	// |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартыУчастников КАК КартыУчастников
	// |		ПО втУчастники.Ссылка = КартыУчастников.Владелец
	// |
	// |СГРУППИРОВАТЬ ПО
	// |	втУчастники.Ссылка,
	// |	втУчастники.Наименование,
	// |	втУчастники.Телефон,
	// |	втУчастники.код
	// |УПОРЯДОЧИТЬ ПО
	// |	Наименование";
	//
	//
	//ПоискСтр	= СтрЗаменить(Поиск,	"%", "\%");
	//ПоискСтр	= СтрЗаменить(ПоискСтр,	"_", "\_");
	//ПоискСтр	= СтрЗаменить(ПоискСтр,	"[", "\[");
	//Если не поИд тогда
	//	Запрос.УстановитьПараметр("Поиск", ?(ПоискТочноеСоответствие,ПоискСТР ,?(ПоискСНачалаСтроки,   ПоискСтр+"%","%"+ПоискСтр+"%")));
	//Иначе
	//	Запрос.УстановитьПараметр("Поиск", Число(Поиск));
	//КонецЕсли;
	//Если ПоискПоТелефону Тогда
	//	х				= новый ХешированиеДанных(ХешФункция.SHA256);
	//	х.Добавить(строкаТелефон);
	//	хэшьТелефона 	= НРег(СтрЗаменить(Строка(х.ХешСумма)," ",""));
	//	Запрос.УстановитьПараметр("хэшьТелефона",хэшьТелефона);
	//КонецЕсли;
	//
	//Результат	= Запрос.Выполнить();
	Результат = Отчеты.ПоискУчастника.СписокУсастников(Поиск,ПоискСНачалаСтроки,ПоискТочноеСоответствие,поИД);
		
	хэшьТелефона = Результат.хэшьТелефона;
	СписокУчастников.Загрузить(Результат.РезультатЗапроса.Выгрузить());
	
	Возврат Результат.Параметры;
КонецФункции


Процедура ВывестиУчастников()
	макет				= Отчеты.ПоискУчастника.ПолучитьМакет("Макет");
	облШапка			= макет.ПолучитьОбласть("Шапка");
	ТабДок.Очистить();
	ТабДок.Вывести(ОблШапка);	   
	
	//облЭлемент			= макет.ПолучитьОбласть("Элемент");
	//облЭлементСКартой	= макет.ПолучитьОбласть("ЭлементСКартой");
	
	Для каждого элем из  СписокУчастников	Цикл
		Если элем.КоличествоКарт=0 Тогда
			облЭлемент	= макет.ПолучитьОбласть("Элемент");
		Иначе 
			облЭлемент	= макет.ПолучитьОбласть("ЭлементСКартой");
		КонецЕсли;
		облЭлемент.Параметры.Заполнить(элем);
		ТабДок.Вывести(облЭлемент);
	КонецЦикла;
КонецПроцедуры

   
   
&НаСервереБезКонтекста
Функция ПолучитьСтоимостьПоискаНика(хэшьТелефона, Участник)
	Если хэшьТелефона =  Участник.ТелефонХэш и  хэшьТелефона<>"" Тогда
		Возврат 0;
	Иначе	
		Возврат Константы.ПоискНикаСтоимость.Получить();
	КонецЕсли;	
КонецФункции
   
   
   

&НаКлиенте
Процедура ТабДокОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	Если Элемент.ТекущаяОбласть.Текст="ДобавитьКарту>>>" Тогда
		//ОткрытьФорму("Документ.Продажа.Форма.ФормаДокумента",Новый Структура("Участник", Расшифровка),ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		СП_РаботаСДокументами_Клиент.ОткрытьФорму_Продажа(Новый Структура("Участник", Расшифровка));
		//СформироватьКарту(Расшифровка);
	ИначеЕсли Элемент.ТекущаяОбласть.Текст="Пристрой>>>" Тогда	
		ОткрытьФорму("Документ.ПоступлениеПристроя.Форма.ФормаДокумента",Новый Структура("Участник", Расшифровка),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		//ОткрытьФорму("Документ.Расходная.Форма.ФормаДокумента",Новый Структура("ЗаполнятьПоУчастнику,Участник", Истина, Расшифровка),ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		СформироватьРасход(Расшифровка,ПолучитьСтоимостьПоискаНика(хэшьТелефона,Расшифровка),хэшьТелефона);
	КонецЕсли;
	СтандартнаяОбработка=ложь;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКарту(Участник)
	
	форма=ПолучитьФорму("Справочник.КартыУчастников.ФормаОбъекта");
	ДанныеФормы = Форма.Объект;
	ЗаполнитьНаСервере(ДанныеФормы,Участник,"Карта",0);
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	Форма.Открыть();

КонецПроцедуры
  
	
&НаКлиенте
Процедура СформироватьРасход(Участник,ПоискНикаСтоимость,хэшьТелефона)
	Если   аСППрверкиКлиент.НаличиеОткрытыхОкон("Расходная") Тогда
    	Предупреждение("Существует не завершенная операция ВЫДАЧИ.Закройте все окна РАСХОДА и повторите попытку!!!",30,"Предупреждение");
		Возврат;		
	КонецЕсли;
	
	
	ПараметрыРасходной = Новый Структура();
	ПараметрыРасходной.Вставить("ПоискНикаСтоимость", ПоискНикаСтоимость);
	ПараметрыРасходной.Вставить("Участник", Участник);     
	ПараметрыРасходной.Вставить("ЗаполнятьПоУчастнику", Истина);
	СП_РаботаСДокументами_Клиент.ОткрытьФорму_Расходная(ПараметрыРасходной);

	
	
//	форма=ПолучитьФорму("Документ.Расходная.ФормаОбъекта",,,Истина);
//	ДанныеФормы = Форма.Объект;
//	ЗаполнитьНаСервере(ДанныеФормы,Участник,"Расход",ПоискНикаСтоимость);
//	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
////	форма.КодУчастника=;
//	Форма.Открыть();
КонецПроцедуры


&НаКлиенте
Процедура СформироватьПриход(РазобралиШК)
	Если   аСППрверкиКлиент.НаличиеОткрытыхОкон("Приходная") Тогда
    	Предупреждение("Существует не завершенная операция Поступления.Закройте все окна Прихода и повторите попытку!!!",30,"Предупреждение");
		Возврат;		
	КонецЕсли;
	
	форма=ПолучитьФорму("Документ.Приходная.ФормаОбъекта");
	ДанныеФормы = Форма.Объект;
	ЗаполнитьНаСервере(ДанныеФормы,РазобралиШК,"Приход",0);
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	Форма.Открыть();
КонецПроцедуры

	
&НаСервереБезКонтекста
Процедура ЗаполнитьНаСервере(НовыйОбъект,Участник,Форма,ПоискНикаСтоимость);
	Если ТипЗнч(Участник)= Тип("Число") Тогда
		Участник =  Справочники.Участники.НайтиПоКоду(Участник);
	КонецЕсли;	
	
	Если Форма="Карта" Тогда
		
		НовыйОбъект.Владелец = Участник;
	ИначеЕсли  Форма="Расход" Тогда
		НовыйОбъект.Участник = Участник;
		НовыйОбъект.ПоискНикаСтоимость=ПоискНикаСтоимость;
		расх=ДанныеФормыВЗначение(НовыйОбъект,Тип("ДокументОбъект.Расходная"));
		расх.заполнитьОстатками();
		//расх.ЗаполнениеКодов();
		ЗначениеВДанныеФормы(расх,НовыйОбъект);
	ИначеЕсли  Форма="Приход" Тогда	
		Если Участник.СвояТочка<>Участник.ТочкаРаздачи Тогда
			НовыйОбъект.Транзит=Истина;
			НовыйОбъект.ТочкаНазначения=Участник.ТочкаРаздачи;
		КонецЕсли;	
	КонецЕсли
КонецПроцедуры


&НаКлиенте
Процедура ПоискТочноеСоответствиеПриИзменении(Элемент)
	ВидимостьПоискСначалаСтроки();
КонецПроцедуры

&НаКлиенте
Функция ВидимостьПоискСначалаСтроки()

	Если ПоискТочноеСоответствие Тогда
		Элементы.ПоискСНачалаСтроки.Видимость=ложь;
	Иначе
		Элементы.ПоискСНачалаСтроки.Видимость=Истина;
	КонецЕсли;	

КонецФункции // ВидимостьПоискСначалаСтроки()



&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбновитьЗаголовокФормы();
	//ОбщегоНазначения.ПриСозданииНаСервере(ЭтаФорма,Отказ, СтандартнаяОбработка);
	Если отказ Тогда Возврат конецЕсли;

	//МенеджерОборудования.ПриНачалеРаботыСистемы();
	ПоискСНачалаСтроки		= Константы.ПоискСНачалаСтроки.Получить();
	ПоискТочноеСоответствие	= Константы.ПоискТочноеСоответствие.Получить();
	ПоказыватьВиджетТранзита = Константы.ВиджетТранзита.Получить();
	КонецПроцедуры



&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ВидимостьПоискСначалаСтроки();

	//Сканер штрихкода
  	СтоСП_Клиент.ПодключитьСканерШК(УникальныйИдентификатор);
	ОбновитьПотерянныеЗаказы();
	ОбновитьГруппуОбновлениеКонигурации();
	
	
	ПодключитьОбработчикОжидания("ОбновитьПотерянныеЗаказы", 7200);

	ПодключитьОбработчикОжидания("ОбновитьГруппуОбновлениеКонигурации", 7200);
	
	//Если ПоказыватьВиджетТранзита Тогда
	//	ОбновитьТранзиты();
	//	ПодключитьОбработчикОжидания("ОбновитьТранзиты", 7200);
	//Иначе	
		Элементы.ГруппаТранзит.Видимость 	= Ложь;
	//КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГруппуОбновлениеКонигурации()
	результат =  СП_ОбновлениеСервер.ПолучитьВерсиюКонфигурацииДляОбновления();

	Если не ЗначениеЗаполнено(результат) Тогда
		Элементы.ГруппаОбновление.Видимость = Ложь;
	Иначе
		ВерсияДляОбновления  = результат.Версия;	
		ТекущаяВерсия		 = результат.ТекущаяВерсия;	
		Элементы.ДекорацияОписаниеОбновления.Подсказка = результат.Описание;
		
		ВерсияяВСтроку = результат.ВерсияСтрока +"("+?(ЗначениеЗаполнено(ВерсияДляОбновления),"загружено", "не загружено")  +")";

		Элементы.ГруппаОбновление.Видимость = Истина;
		Элементы.ОткрытьВерсиюДляОбновления.Заголовок = "Доступно обновление : "+ВерсияяВСтроку + ", ТекущаяВерсия: "+ТекущаяВерсия ;
		
		СрокОбновления = результат.СрокОбновления;
		
		
		Элементы.ОткрытьВерсиюДляОбновления.Шрифт =Новый Шрифт(Элементы.СформироватьПеремещениеТранзита.Шрифт,, 8 + СрокОбновления*3);
		
		Если СрокОбновления>1 Тогда
			Элементы.ОткрытьВерсиюДляОбновления.ЦветТекста =  новый Цвет(255,0,0);
		Конецесли
		
	КонецЕсли
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПотерянныеЗаказы()
	количествоПотерянных = СП_ПотерянныеЗаказы.РасчитатьОстатки();	
	Если количествоПотерянных = 0 Тогда
		Элементы.ГруппаПотерянныеЗаказы.Видимость 	= Ложь;
	Иначе
		Элементы.ГруппаПотерянныеЗаказы.Видимость	= Истина;
		Элементы.ПотерянныеЗаказы.Заголовок 		= "потеряно заказов: "+количествоПотерянных  ;
	КонецЕсли
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьТранзиты()
	ТранзитовНаСкладе = ПолучитьТранзитыНаСкладе();
	Если ТранзитовНаСкладе = 0 или ТранзитовНаСкладе = null Тогда
		Элементы.ГруппаТранзит.Видимость 	= Ложь;
	Иначе
		Элементы.ГруппаТранзит.Видимость	= Истина;
		Элементы.СформироватьПеремещениеТранзита.Заголовок 		= "Транзитов на складе : "+ТранзитовНаСкладе  ;
	КонецЕсли

КонецПроцедуры

Функция ПолучитьТранзитыНаСкладе()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранзитОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ТранзитОстатки.Партия КАК Партия
		|ПОМЕСТИТЬ сбор
		|ИЗ
		|	РегистрНакопления.Транзит.Остатки КАК ТранзитОстатки
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ТранзитОстатки.Партия) <> ТИП(Документ.ПоступлениеПристроя)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(сбор.КоличествоОстаток) КАК КоличествоОстаток
		|ИЗ
		|	сбор КАК сбор";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.КоличествоОстаток;
	КонецЕсли;
	
	Возврат 0;
КонецФункции


&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	АвтоЗаголовок = Ложь;
	Период = ТекущаяДатаСеанса();
	
	ПредставлениеТекущейДаты = Формат(Период, "Л=ru_RU; ДФ='d MMMM, dddd'");
	
	Заголовок = СтрШаблон(НСтр("ru = 'Сегодня: %1'"), ПредставлениеТекущейДаты);
	Параметры.Заголовок = Заголовок;
КонецПроцедуры


&НаКлиенте
Процедура СчитатьШтрихКодВручную(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаВводаШК",,ЭтотОбъект,,,,Новый ОписаниеОповещения("ВвестиШтрихКодВручную_Завершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗакрытаРасходная" Тогда
		ЭтаФорма.ТекущийЭлемент	= Элементы.Поиск;
	 	Элементы.Поиск.АктивизироватьПоУмолчанию=Истина;
	ИначеЕсли ИмяСобытия = "ЗакрытПотерянныеЗаказы" Тогда	
		ОбновитьПотерянныеЗаказы();
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура ВвестиШтрихКодВручную_Завершение(ШК, ДополнительныеПараметры) Экспорт
	ДанныеШК = новый массив;
	ДанныеШК.Добавить(ШК);
	ДанныеШК.Добавить(неопределено);
	глОбработкаОповещения("ScanData",ДанныеШК,"ПодключаемоеОборудование");	// Вставить содержимое обработчика.
КонецПроцедуры	


&НаСервере
Процедура ПотерянныеЗаказыНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ПотерянныеЗаказы(Команда)
	док = СП_ПотерянныеЗаказы.ПолучитьТекущийДокумент();
	ОткрытьЗначение(Док);
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьВерсиюДляОбновления(Команда)
	Если ЗначениеЗаполнено(ВерсияДляОбновления) Тогда
		ОткрытьФорму("Справочник.ВерсииКонфигураций.Форма.ФормаЭлемента",Новый Структура("Ключ",ВерсияДляОбновления), ЭтаФорма);
	Иначе
		ТекстСообщения  = "Обновление еще не загружено."+ символы.ПС +
						"Если обновление не загружается дляительное время, обратитесь к администратору." ;
		Предупреждение(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьОписаниеОбновления(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьСправкуПотерянныеЗаказы(Команда)
	ОткрытьСправку("Документ.ПотерянныеЗаказы");
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьСправкуПоискУчастника(Команда)
	ОткрытьСправку("Отчет.ПоискУчастника");
КонецПроцедуры


&НаКлиенте
Процедура СформироватьПеремещениеТранзита(Команда)
		//ПунктВыдачи 		= Элементы.СостоянияОтгрузки.ТекущиеДанные.ПунктВыдачи;
		ПараметрыЗаполнения	= Новый Структура();
		ПараметрыЗаполнения.Вставить("Дата", 			ТекущаяДата());
		ПараметрыЗаполнения.Вставить("ВидОперации", 	"ТранзитНаВозврат");
		ПараметрыЗаполнения.Вставить("МестоХранения", 	Неопределено);
		ПараметрыЗаполнения.Вставить("Габарит", 		Неопределено);
		ПараметрыЗаполнения.Вставить("Организатор", 	Неопределено);  
		ПараметрыЗаполнения.Вставить("ПунктВыдачи", 	Неопределено);  
		ПараметрыЗаполнения.Вставить("ДатаОтчета", 		КонецДня(ТекущаяДата()));

		
		ПараметрыЗаполнения.Вставить("ЭтоПристрой", новый структура("ПравоеЗначение, Использование, ВидСравнения",Ложь, Истина, ВидСравненияКомпоновкиДанных.Равно) );
		//ПараметрыЗаполнения.Вставить("Точка", 		новый структура("ПравоеЗначение, Использование", ПунктВыдачи, Истина) );
	
    	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияформыДокумента",ЭтаФорма);
	
		ОткрытьФорму("Документ.ДвижениеТранзита.ФормаОбъекта",Новый структура("ПараметрыЗаполнения",ПараметрыЗаполнения) ,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс  );
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияформыДокумента(Результат, ДопПараметры) Экспорт
	 ОбновитьТранзиты();
КонецПроцедуры
