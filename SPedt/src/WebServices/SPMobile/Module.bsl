
Функция GetTranzitInvice(BarCode)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыдачаТранзита.Номер КАК Номер,
		|	ВыдачаТранзита.Дата КАК Дата,
		|	ВыдачаТранзита.ТочкаНазначения КАК ТочкаНазначения,
		|	ВыдачаТранзита.Покупки.(
		|		НомерСтроки КАК НомерСтроки,
		|		Покупка КАК Покупка,
		|		МестоХранения КАК МестоХранения,
		|		Габарит КАК Габарит,
		|		Участник КАК Участник,
		|		ШК.Код КАК ШК
		|	) КАК Покупки
		|ИЗ
		|	Документ.ВыдачаТранзита КАК ВыдачаТранзита
		|ГДЕ
		|	ВыдачаТранзита.Номер = &Номер
		|	И ГОД(ВыдачаТранзита.Дата) = &Год";
	
	Запрос.Параметры.Вставить("Номер", "ТТ-000016108");
	Запрос.Параметры.Вставить("Год", 2021);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	
	об_tranzitInvoice = ПолучитьОбъектXDTO("listInvoice.Invoice");
	
	Пока Выборка.Следующий() Цикл
		об_appointment 		= ПолучитьОбъектXDTO("appointment");
		об_appointment.id   = Выборка.ТочкаНазначения.Код;
		об_appointment.name = Выборка.ТочкаНазначения.Наименование;
		
		
		об_tranzitInvoice.number 		= Выборка.Номер;
		об_tranzitInvoice.date			= Выборка.Дата;
		об_tranzitInvoice.barcode		= "";
		об_tranzitInvoice.appointment	= об_appointment;
		
		об_orders = ПолучитьОбъектXDTO("listInvoice.Invoice.orders");
		
		
		ВыборкаПокупки = Выборка.Покупки.Выбрать();
		Пока ВыборкаПокупки.Следующий() Цикл
			об_orderString = ПолучитьОбъектXDTO("listInvoice.Invoice.orders.orderString");
			
			об_user 		= ПолучитьОбъектXDTO("object.user");
			об_user.id      = ВыборкаПокупки.Участник.Код;
			об_user.name    = ВыборкаПокупки.Участник.Наименование;
			
			об_tariff 			= ПолучитьОбъектXDTO("tariff");
			об_tariff.barcode   = ВыборкаПокупки.Габарит.Код;
			об_tariff.name  	= ВыборкаПокупки.Габарит.Наименование;
			
			об_cell 			= ПолучитьОбъектXDTO("cell");
			об_cell.barcode 	= ВыборкаПокупки.МестоХранения.Код;
			об_cell.name  		= ВыборкаПокупки.МестоХранения.Наименование;
			
			об_order 			= ПолучитьОбъектXDTO("object.order");
			об_order.user 		= об_user;
			об_order.name 		= ВыборкаПокупки.Покупка.Наименование;
			об_order.barcode 	= ВыборкаПокупки.ШК;
			
			об_orderString.number    = ВыборкаПокупки.НомерСтроки;
			об_orderString.selected  = Ложь;
			об_orderString.order	 =	об_order;
			об_orderString.tariff    = об_tariff;
			об_orderString.cell      = об_cell;
			
			
			
			
			об_orders.orderString.Добавить(об_orderString);
			
			
			
			
			
			
		КонецЦикла;	
		об_tranzitInvoice.orders = об_orders;
	КонецЦикла;
	об_tranzitInvoice.Проверить();
	
	Возврат	об_tranzitInvoice;
КонецФункции

Функция ПолучитьОбъектXDTO(ИмяТипа)
	тип_об 	=  ФабрикаXDTO.Тип("mobileApi",ИмяТипа);	
	об 		= ФабрикаXDTO.Создать(тип_об);
	Возврат об;
КонецФункции



Функция Десериализовать(XMLСтруктура) Экспорт
	чтениеДанных = новый ЧтениеXML;
	чтениеДанных.УстановитьСтроку(XMLСтруктура);
	тз = СериализаторXDTO.ПрочитатьXML(чтениеДанных);
	чтениеДанных.Закрыть();
	Возврат тз;
	
КонецФункции	

Функция Сериализовать(Объект) Экспорт
	ДеревоВОбъекте =  СериализаторXDTO.ЗаписатьXDTO(Объект);
	мойXML = новый ЗаписьXML;
	мойXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(мойXML, ДеревоВОбъекте);
	Возврат мойXML.Закрыть();
КонецФункции

Функция GetListInvoice(Count, type)     
	
	Если type = "Транзит" Тогда 	
		Возврат SPMobile.СписокТранзитов(Count);
	Иначе
		Возврат SPMobile.СписокРасходных(Count);	
	КонецЕсли	
КонецФункции

Функция getOrder(barCode)
	Если СтрНачинаетсяС(barCode,"68") Тогда
		Возврат SPMobile.РасходнаяПоШК(barCode);
	ИначеЕсли СтрНачинаетсяС(barCode,"70") Тогда		
		Возврат SPMobile.ВыдачаТранзита(barCode);
	ИначеЕсли СтрНачинаетсяС(barCode,"23") Тогда	
		ДанныеШК = СП_Штрихкоды.ПолучитьДанныеПоШК(barCode);
		Возврат SPMobile.РасходнаяПоУчастнику(ДанныеШК.Участник, ДанныеШК.КартаУчастника);		
		
	КонецЕсли
КонецФункции

Функция getOrderByUserId(userId)  
	Участник = СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(userId);
	Возврат SPMobile.РасходнаяПоУчастнику(Участник);		
КонецФункции

Функция getListUser(search)
	Результат = Отчеты.ПоискУчастника.СписокУсастников(search,Истина,Ложь,Ложь);
	
	макимумВСписке = 10;
	
	Выборка = Результат.РезультатЗапроса.Выбрать();	
	об_listUser = ПолучитьОбъектXDTO("listUser");
	об_listUser.all = Выборка.Количество();
	
	обработано = 0;
	Пока Выборка.Следующий() и обработано <= макимумВСписке Цикл
		об_listUserlist = ПолучитьОбъектXDTO("listUser.list");

		об_user 		= ПолучитьОбъектXDTO("object.user");
		об_user.id      = Выборка.Код;
		об_user.name    = Выборка.Наименование;
		об_user.phone	= Выборка.Телефон;
		об_listUserlist.user = об_user;
		об_listUserlist.count = Выборка.Количество;
		об_listUser.list.Добавить(об_listUserlist);  
		обработано = обработано +1;
	КонецЦикла;                            
	об_listUser.count = обработано;
	Возврат об_listUser;
КонецФункции


Функция postOrder(userId,date, count, sum)
	Возврат SPMobile.ЗаписатьРасходную(userId,date, count, sum);
КонецФункции


Функция сlientRegistration(code, id)
	мк = Справочники.МобильныеКлиенты.НайтиПоКоду(code);
	результат = Ложь;                    
	Сообщение = "";
	Если ЗначениеЗаполнено(мк) Тогда
		Если ЗначениеЗаполнено(мк.ид) Тогда	
			Если мк.ид = id Тогда
				Сообщение = Сообщение + "Клиент уже зарегистрирован"+ Символы.ПС;				
			Иначе
				Сообщение = Сообщение + "Клиент зарегистрирован на другом устройстве"+ Символы.ПС;									
			КонецЕсли;	
		Иначе
			обМК = мк.ПолучитьОбъект();
			обМК.ид     = id;
			обМК.Записать();
			результат = Истина;			
		КонецЕсли;	
	Иначе
		Сообщение = Сообщение + "Клиент не найден ("+code +")"+ Символы.ПС;											
	КонецЕсли;
	
	об_responce = SPMobile.ПолучитьОбъектXDTO("responce.сlientRegistration");
	об_responce.result  = результат;
	об_responce.message = Сообщение;  
	об_responce.branchId = Константы.СвояТочка.Получить().Код;
	Возврат об_responce;
КонецФункции


Функция сlientVerification(code, id)
	мк = Справочники.МобильныеКлиенты.НайтиПоКоду(code);
	результат = Ложь;                    
	Сообщение = "";
	Если ЗначениеЗаполнено(мк) Тогда
		Если ЗначениеЗаполнено(мк.ид) Тогда	
			Если мк.ид = id Тогда
				результат = Истина;
			Иначе
				Сообщение = Сообщение + "Клиент зарегистрирован на другом устройстве"+ Символы.ПС;									
			КонецЕсли;	
		Иначе
			Сообщение = Сообщение + "Клиент не зарегистрирован"+ Символы.ПС;											
		КонецЕсли;	
	Иначе
		Сообщение = Сообщение + "Клиент не найден ("+code +")"+ Символы.ПС;											
	КонецЕсли;
	
	об_responce = SPMobile.ПолучитьОбъектXDTO("responce.сlientRegistration");
	об_responce.result  = результат;
	об_responce.message = Сообщение;    
	об_responce.branchId = Константы.СвояТочка.Получить().Код;
	Возврат об_responce;

КонецФункции


Функция catalogTariffs()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТарифыСрезПоследних.Габарит.Наименование КАК name,
		|	ТарифыСрезПоследних.Негабарит КАК oversize,
		|	ТарифыСрезПоследних.Габарит.Код КАК id
		|ИЗ
		|	РегистрСведений.Тарифы.СрезПоследних КАК ТарифыСрезПоследних
		|ГДЕ
		|	НЕ ТарифыСрезПоследних.Отменен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	catalog_tariffs = SPMobile.ПолучитьОбъектXDTO("catalog.tariffs");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл                     
		object_tariffs = SPMobile.ПолучитьОбъектXDTO("object.tariff");
		ЗаполнитьЗначенияСвойств(object_tariffs, ВыборкаДетальныеЗаписи);
		object_tariffs.barcode = "62"+ВыборкаДетальныеЗаписи.id;
		catalog_tariffs.tariff.Добавить(object_tariffs);
	КонецЦикла;
	
	Возврат catalog_tariffs;
	
КонецФункции


Функция catalogCells()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МестаХранения.Ссылка КАК Ссылка,
		|	МестаХранения.Код КАК Код,
		|	МестаХранения.Наименование КАК Наименование
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	НЕ МестаХранения.ЭтоГруппа
		|	И НЕ МестаХранения.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестаХранения.Код КАК id,
		|	МестаХранения.Наименование КАК name,
		|	ИСТИНА КАК isGroup,
		|	"""" КАК idGroup
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.Ссылка В
		|			(ВЫБРАТЬ
		|				вт.Ссылка.Родитель КАК СсылкаРодитель
		|			ИЗ
		|				вт КАК вт)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт.Код,
		|	вт.Наименование,
		|	ЛОЖЬ,
		|	ЕСТЬNULL(вт.Ссылка.Родитель.Код, """")
		|ИЗ
		|	вт КАК вт";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	catalog_cells = SPMobile.ПолучитьОбъектXDTO("catalog.cells");

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		object_cell = SPMobile.ПолучитьОбъектXDTO("object.cell");
		ЗаполнитьЗначенияСвойств(object_cell, ВыборкаДетальныеЗаписи);
		//object_tariffs.barcode = "62"+ВыборкаДетальныеЗаписи.id;
		catalog_cells.cell.Добавить(object_cell);

	КонецЦикла;
	
	Возврат catalog_cells; 

КонецФункции


Функция catalogBranchs()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТочкиРаздачи.Код КАК id,
		|	ТочкиРаздачи.Наименование КАК name,
		|	ТочкиРаздачи.Адрес КАК adress,
		|	isnull(ТочкиРаздачи.ГородСП.Наименование,"""") КАК city
		|ИЗ
		|	Справочник.ТочкиРаздачи КАК ТочкиРаздачи";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	catalog_branchs = SPMobile.ПолучитьОбъектXDTO("catalog.branchs");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		object_branch = SPMobile.ПолучитьОбъектXDTO("object.branch");
		ЗаполнитьЗначенияСвойств(object_branch, ВыборкаДетальныеЗаписи);
		catalog_branchs.branch.Добавить(object_branch);
	КонецЦикла;
	
	Возврат catalog_branchs;
	
КонецФункции


Функция postIncome(body, codeClirent)   
	Возврат SPMobile.ЗаписатьСинхронизацияМобильныйКлиент(body, codeClirent);	
КонецФункции


Функция historyOrder(barcode)                         
	Мегаордер 		= СП_Штрихкоды.ПолучитьДанныеПоШК(barcode).ШК;
	историяДоставки = СтоСПОбмен_СтатусыЗаказов.ПолучитьИсториюДоставки(Мегаордер); 
	
	object_historyOrder = SPMobile.ПолучитьОбъектXDTO("responce.historyOrder");

	Для каждого элеи из историяДоставки Цикл
		object_str = SPMobile.ПолучитьОбъектXDTO("responce.historyOrder.str");	
		
		object_cell 				= SPMobile.ПолучитьОбъектXDTO("object.cell");	
		object_cell.id 				= элеи.ГабаритКод;
		object_cell.name 			= элеи.Габарит; 
		object_str.cell 			= object_cell;

		object_user 				= SPMobile.ПолучитьОбъектXDTO("object.user");
		object_user.id              = элеи.Участник.Код;
		object_user.name            = элеи.Участник.Наименование;
		object_str.user				= object_user;

		
		object_user1 				= SPMobile.ПолучитьОбъектXDTO("object.user");
		object_user1.id              = элеи.Участник.Код;
		object_user1.name            = элеи.Участник.Наименование;
		
		object_order 				= SPMobile.ПолучитьОбъектXDTO("object.order");		
		object_order.user 			= object_user1;
		object_order.name 			= элеи.Заказ.Наименование;	
		
		object_str.order 			= object_order;		
		object_group 				= SPMobile.ПолучитьОбъектXDTO("object.order");	
		object_group.name			= элеи.Коробка.Наименование;
		object_str.group 			= object_group;
		
		object_branch 				= SPMobile.ПолучитьОбъектXDTO("object.branch");	
		object_branch.id            = элеи.ПунктВыдачи.Код;;
		object_branch.name          = элеи.ПунктВыдачи.Наименование;
		object_str.branch 			= object_branch;
		
		object_branchPrev 			= SPMobile.ПолучитьОбъектXDTO("object.branch");					
		object_branchPrev.id        = элеи.ПунктВыдачиПредыдущий.Код;;
		object_branchPrev.name      = элеи.ПунктВыдачиПредыдущий.Наименование;
		object_str.branchPrev 		= object_branchPrev; 

		object_branchNext 			= SPMobile.ПолучитьОбъектXDTO("object.branch");
		object_branchNext.id        = элеи.ПунктВыдачиСледующий.Код;;
		object_branchNext.name      = элеи.ПунктВыдачиСледующий.Наименование;
		object_str.branchNext 		= object_branchNext;

		
		object_str.date100sp 		= элеи.Дата100СП;
		object_str.date1C 			= элеи.Дата1С;

		
		object_str.oversize 		= элеи.Негабарит;
		object_str.orgFee 			= элеи.ОргСбор;
		object_str.separate 		= элеи.ОтдельнымМестом;
		object_str.party 			= элеи.Партия;
		
		object_str.sum 				= элеи.Сумма;
		object_str.typeHistory 		= элеи.ТипОперации;
		object_str.tranzit 			= элеи.Транзит;
		
		
		
		
		object_historyOrder.str.Добавить(object_str);
	КонецЦикла;		
	возврат object_historyOrder;
КонецФункции

