Процедура ДобавитьКомандыПечатиСупергрупп(КомандыПечати) Экспорт
	
    КомандаПечати 									= КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 					= "ЖурналДокументов.Супергруппы";
    КомандаПечати.Идентификатор 					= "СупперГруппа";
    КомандаПечати.Представление 					= НСтр("ru = 'Суппер группа'");
    КомандаПечати.ПроверкаПроведенияПередПечатью 	= Истина;
    
    КомандаПечати 									= КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 					= "ЖурналДокументов.Супергруппы";
    КомандаПечати.Идентификатор 					= "СупперГруппаЭтикетка";
    КомандаПечати.Представление 					= НСтр("ru = 'Суппер группа (Этикетка)'");
    КомандаПечати.ПроверкаПроведенияПередПечатью 	= Истина; 
     	


КонецПроцедуры

Процедура ДобавитьКомандыПечатиПоступлений(КомандыПечати) Экспорт
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 	= "ЖурналДокументов.ВсеПриходы";
    КомандаПечати.Идентификатор 	= "ЧекПросмотр";
	КомандаПечати.Картинка 			= БиблиотекаКартинок.Печать;
    КомандаПечати.Представление 	= НСтр("ru = 'Чек просмотр'");
	
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 	= "ЖурналДокументов.ВсеПриходы";
    КомандаПечати.Идентификатор 	= "Чек";
	КомандаПечати.Картинка 			= БиблиотекаКартинок.ПечатьСразу;
    КомандаПечати.Представление 	= НСтр("ru = 'Чек'");
	КомандаПечати.СразуНаПринтер	=истина;
	
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.МенеджерПечати 	= "ЖурналДокументов.ВсеПриходы";
    КомандаПечати.Идентификатор 	= "СписокУчастников";
	КомандаПечати.Картинка 			= БиблиотекаКартинок.Печать;
    КомандаПечати.Представление 	= НСтр("ru = 'Список участников'");
    
	КомандаПечати 							= КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати 			= "ЖурналДокументов.ВсеПриходы";
	КомандаПечати.Идентификатор 			= "ЧекПоОрганизаторам";
	КомандаПечати.Картинка 					= БиблиотекаКартинок.Печать;
	КомандаПечати.обработчик				= "СтоСП_Печать_Клиент.ЧекПоступленияПоОрганизаторам";
	КомандаПечати.Представление 			= НСтр("ru = 'Чек по организаторам'");
//	КомандаПечати.НеВыполнятьЗаписьВФорме	= Истина;	    

	КомандаПечати 							= КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати 			= "ЖурналДокументов.ВсеПриходы";
	КомандаПечати.Идентификатор 			= "СписокЗаказов";
	КомандаПечати.Картинка 					= БиблиотекаКартинок.Печать;
	КомандаПечати.обработчик				= "СтоСП_Печать_Клиент.СписокЗаказов";
	КомандаПечати.Представление 			= НСтр("ru = 'СписокЗаказов'");

    
КонецПроцедуры



Функция ТабДок_СупперГруппа(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок				= Новый ТабличныйДокумент;
	Макет 				= ПолучитьОбщийМакет("ПФ_MXL_СупперГруппа");
	Макет.АвтоМасштаб	= Истина;


	ОбластьЗаголовок 	= Макет.ПолучитьОбласть("Заголовок");
	Шапка 				= Макет.ПолучитьОбласть("Шапка");
	ОбластьИтоги 		= Макет.ПолучитьОбласть("Итоги");
	ОбластьПокупкиШапка = Макет.ПолучитьОбласть("ПокупкиШапка");
	ОбластьПокупки 		= Макет.ПолучитьОбласть("Покупки");
	ОбластьПодвал		= Макет.ПолучитьОбласть("Подвал");
	ТабДок.Очистить();

	
	
	ВставлятьРазделительСтраниц = Ложь;
	Для каждого Выборка из МассивОбъектов Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ШК							= Выборка.Супергруппа.Код;
		ОбластьШК					= Шапка.Области.Шапка;
		РисунокШтрихкод				= Шапка.Рисунки.РисунокШтрихкод;
		
		
		ПараметрыШтрихкода			= Документы.ВыдачаТранзита.ЗаполнитьПараметрыОбработки(ШК);
		РисунокШтрихкод.Картинка 	= МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		РисунокШтрихкод.Расположить(ОбластьШК);
		
		ТабДок.Вывести(ОбластьЗаголовок);

		Шапка.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Шапка);

		ТабДок.Вывести(ОбластьПокупкиШапка);
		
		ИтогоКоличество = 0;
		ИтогоОС = 0;
		Для каждого ВыборкаПокупки из выборка.Покупки Цикл   
			Если не ВыборкаПокупки.Подбор Тогда Продолжить; КонецЕсли;
	
			Если  ТипЗнч(ВыборкаПокупки.Покупка) = Тип("СправочникСсылка.Коробки")  и
				  ВыборкаПокупки.Покупка.ВидСтикера <> Перечисления.ВидыСтикеров.ГС		Тогда
				КодПокупки = ВыборкаПокупки.Покупка.НомерЗаказа;
			Иначе
				КодПокупки = ВыборкаПокупки.Покупка.Код;
			КонецЕсли;
			Если  ТипЗнч(ВыборкаПокупки.Покупка) = Тип("СправочникСсылка.Коробки")  и
				  ВыборкаПокупки.Покупка.ВидСтикера <> Перечисления.ВидыСтикеров.ГС		Тогда
				Участник = "";
			Иначе
				Участник = ВыборкаПокупки.Участник;
			КонецЕсли;
			Если  ТипЗнч(ВыборкаПокупки.Покупка) = Тип("СправочникСсылка.Коробки")  Тогда
				ТипПокупки = ВыборкаПокупки.Покупка.ВидСтикера;
			Иначе
				ТипПокупки = ТипЗнч(ВыборкаПокупки.Покупка);
			КонецЕсли;	
				
			ОбластьПокупки.Параметры.Заполнить(ВыборкаПокупки);  
			ОбластьПокупки.Параметры.Участник 		= Участник;
			ОбластьПокупки.Параметры.КодПокупки 	= КодПокупки;
			ОбластьПокупки.Параметры.ТипПокупки 	= ТипПокупки;
			ОбластьПокупки.Параметры.КодУчастника 	= ВыборкаПокупки.Участник.Код;
			
			ТабДок.Вывести(ОбластьПокупки);
			ИтогоКоличество = ИтогоКоличество + ВыборкаПокупки.Количество;
			ИтогоОС = ИтогоОС + ВыборкаПокупки.ОбъявленнаяСтоимость;
			
		КонецЦикла;
		ОбластьИтоги.Параметры.Количество = ИтогоКоличество;
		ОбластьИтоги.Параметры.ОбъявленнаяСтоимость = ИтогоОС;
		ТабДок.Вывести(ОбластьИтоги);
		ТабДок.Вывести(ОбластьПодвал);
		ТабДок.АвтоМасштаб = Истина;

		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	
	Возврат ТабДок;
КонецФункции



Функция ТабДок_ЭтикеткаСупперГруппы(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок= Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("ПФ_MXL_СупперГруппаЭтикетка");
	Макет.АвтоМасштаб=Истина;


	Шапка 				= Макет.ПолучитьОбласть("Шапка");
	ТабДок.Очистить();

	
	
	ВставлятьРазделительСтраниц = Ложь;
	Для каждого Выборка из МассивОбъектов Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ШК							= Выборка.Супергруппа.Код;
		ОбластьШК					= Шапка.Области.Шапка;
		РисунокШтрихкод				= Шапка.Рисунки.РисунокШтрихкод;
		
		
		ПараметрыШтрихкода			= Документы.ВыдачаТранзита.ЗаполнитьПараметрыОбработки(ШК);
		РисунокШтрихкод.Картинка 	= МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		РисунокШтрихкод.Расположить(ОбластьШК);
		помеченныеСтроки			= Выборка.Покупки.НайтиСтроки(Новый Структура("Подбор", Истина));
		Шапка.Параметры.Заполнить(Выборка);
		Шапка.Параметры.Описание = ""+Выборка.ТочкаНазначения + ", "+помеченныеСтроки.Количество() + " стикеров, "+ Выборка.Дата;
		ТабДок.Вывести(Шапка);
		
	
		

		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ПолеСлева			= 0;
	ТабДок.ПолеСправа			= 0;
	ТабДок.ПолеСверху			= 0;
	ТабДок.ПолеСнизу			= 0;
	
	Возврат ТабДок;
КонецФункции





Функция ТабДок_СтикерПристроя(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок				= Новый ТабличныйДокумент;
	Макет				= ПолучитьОбщийМакет("ПФ_MXL_ПосылкаЭтикеткаv2");
	Макет.АвтоМасштаб	= Истина;

	Шапка 				= Макет.ПолучитьОбласть("Шапка");
	ТабДок.Очистить();

	
	
	ВставлятьРазделительСтраниц = Ложь;
	Для каждого Док из МассивОбъектов Цикл
		Для каждого СтрПосылка из Док.Заказы цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ВывестиЭтикетку(СтрПосылка,ТабДок, Шапка, Док);
			
			ВставлятьРазделительСтраниц = Истина;
		КонецЦикла;
		
		Для каждого СтрПосылка из Док.ЗаявкиНаДоставку цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ВывестиЭтикетку(СтрПосылка,ТабДок, Шапка, Док);
			
			ВставлятьРазделительСтраниц = Истина;
		КонецЦикла;
		
	КонецЦикла;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ПолеСлева			= 0;
	ТабДок.ПолеСправа			= 0;
	ТабДок.ПолеСверху			= 0;
	ТабДок.ПолеСнизу			= 0;
	
	Возврат ТабДок;
КонецФункции



Функция ТабДок_СтикерВозврата(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок				= Новый ТабличныйДокумент;
	Макет				= ПолучитьОбщийМакет("ПФ_MXL_ПосылкаЭтикеткаv2");
	Макет.АвтоМасштаб	= Истина;

	Шапка 				= Макет.ПолучитьОбласть("Шапка");
	ТабДок.Очистить();

	
	
	ВставлятьРазделительСтраниц = Ложь;
	Для каждого Док из МассивОбъектов Цикл
		Для каждого СтрПосылка из Док.Возвраты цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ВывестиЭтикетку(СтрПосылка,ТабДок, Шапка, Док);
			
			ВставлятьРазделительСтраниц = Истина;
		КонецЦикла;
		
		Для каждого СтрПосылка из Док.Покупки цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ВывестиЭтикетку(СтрПосылка,ТабДок, Шапка, Док);
			
			ВставлятьРазделительСтраниц = Истина;
		КонецЦикла;
		
	КонецЦикла;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ПолеСлева			= 0;
	ТабДок.ПолеСправа			= 0;
	ТабДок.ПолеСверху			= 0;
	ТабДок.ПолеСнизу			= 0;
	
	Возврат ТабДок;
КонецФункции

Процедура ВывестиЭтикетку(СтрПосылка,ТабДок, Шапка, Док)
	СвойПВ = Константы.СвояТочка.Получить();
			ШК							= СтрПосылка.ШК.Код;
			ОбластьШК					= Шапка.Области.Шапка;
			РисунокШтрихкод				= Шапка.Рисунки.РисунокШтрихкод;
			
			ШКСРазделителями			= Лев(ШК,2)+" "+Сред(ШК,3,12)+" "+Сред(ШК,15,4)+" "+ Прав(ШК,2);
			
			Шапка.Параметры.Заполнить(СтрПосылка.ШК);

			Если ТипЗнч(Док) = Тип("ДокументСсылка.ВозвратПокупокОрганизатору") Тогда
				
				ТочкаНазначения = "Возврат";            
				Организатор = СтрПосылка.Организатор;                                
				
				пвВозвратов =  Константы.ПунктВыдачиДляВозвратов.Получить();
				Если ЗначениеЗаполнено(пвВозвратов) Тогда
					КодПВ = Формат(Число(пвВозвратов.Код),"ЧГ=0");
				Иначе	
					КодПВ = "";					
				КонецЕсли;	
			Иначе	
				ТочкаНазначения = СтрПосылка.ШК.Покупка.Покупка.ТочкаНазначения;
				Организатор = Док.Участник.наименование;                                      
				КодПВ = Формат(Число(СтрПосылка.ШК.ПунктВыдачи.Код),"ЧГ=0");
			КонецЕсли;
			Если ТипЗнч(СтрПосылка.ШК.Покупка) = Тип("СправочникСсылка.Посылки") Тогда
				Участник = СтрПосылка.ШК.Покупка.Участник;                      
			Иначе	
			    Участник = СтрПосылка.ШК.Покупка.Покупка.Участник;                          
			КонецЕсли;
			
			Шапка.Параметры.Участник	= ""+Участник;
			Шапка.Параметры.КодУчастника= ""+Участник.Код;

			//Шапка.Параметры.Покупка		= ""+СтрПосылка.ШК.Покупка.Покупка.Код + " " +СтрПосылка.ШК.Покупка.Покупка;
			Шапка.Параметры.ДатаДокумента = Формат(Док.Дата,"ДФ=dd.MM.yyyy");
			Шапка.Параметры.ПунктВыдачиОтправитель = ""+СвойПВ.Код + " " +СвойПВ.Наименование;
			Шапка.Параметры.КодЗаказа	= ""+СтрПосылка.ШК.Покупка.Покупка.Код;
			Шапка.Параметры.КодПосылки	= ""+СтрПосылка.ШК.Посылка.Код;

			
				//	Шапка.Параметры.ШКСтрока	= ШКСРазделителями;
			Шапка.Параметры.КодПВ		= КодПВ;
			Шапка.Параметры.КодПВСимв	= "вдк";   
			Шапка.Параметры.Организатор	= ВРег(Организатор);
			Шапка.Параметры.ПунктВыдачи	= ВРег(ТочкаНазначения);
			
		//	Шапка.Параметры.КодУчастника= "p: "+СтрПосылка.ШК.Покупка.Покупка.Код+" / u: "+СтрПосылка.ШК.Участник.Код;
			
			ПараметрыШтрихкода			= Документы.ВыдачаТранзита.ЗаполнитьПараметрыОбработки(ШК);
			РисунокШтрихкод.Картинка 	= МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			РисунокШтрихкод.Расположить(ОбластьШК);
			//помеченныеСтроки			= Выборка.Покупки.НайтиСтроки(Новый Структура("Подбор", Истина));
			//Шапка.Параметры.Заполнить(Выборка);
			//Шапка.Параметры.Описание = ""+СтрПосылка.Посылка.Наименование;
			ТабДок.Вывести(Шапка);
	
	
КонецПроцедуры	




Функция ТабДок_СтикерПосылки(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок				= Новый ТабличныйДокумент;
	Макет				= ПолучитьОбщийМакет("ПФ_MXL_ПосылкаЭтикетка");
	Макет.АвтоМасштаб	= Истина;

	Шапка 				= Макет.ПолучитьОбласть("Шапка");
	ТабДок.Очистить();

	
	
	ВставлятьРазделительСтраниц = Ложь;
	Для каждого Док из МассивОбъектов Цикл
		Для каждого СтрПосылка из Док.Посылки цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			
			ШК							= СтрПосылка.ШК.Код;
			ОбластьШК					= Шапка.Области.Шапка;
			РисунокШтрихкод				= Шапка.Рисунки.РисунокШтрихкод;
			
			ШКСРазделителями			= Лев(ШК,2)+" "+Сред(ШК,3,12)+" "+Сред(ШК,15,4)+" "+ Прав(ШК,2);
			
			Шапка.Параметры.Заполнить(СтрПосылка.ШК);
			Шапка.Параметры.Покупка		= СтрПосылка.ШК.Покупка.Покупка;
			Шапка.Параметры.ШКСтрока	= ШКСРазделителями;
			Шапка.Параметры.КодПВ		= Формат(Число(СтрПосылка.ШК.ПунктВыдачи.Код),"ЧГ=0");
			Шапка.Параметры.КодУчастника= "p: "+СтрПосылка.ШК.Покупка.Покупка.Код+" / u: "+СтрПосылка.ШК.Участник.Код;
			
			ПараметрыШтрихкода			= Документы.ВыдачаТранзита.ЗаполнитьПараметрыОбработки(ШК);
			РисунокШтрихкод.Картинка 	= МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			РисунокШтрихкод.Расположить(ОбластьШК);
			//помеченныеСтроки			= Выборка.Покупки.НайтиСтроки(Новый Структура("Подбор", Истина));
			//Шапка.Параметры.Заполнить(Выборка);
			//Шапка.Параметры.Описание = ""+СтрПосылка.Посылка.Наименование;
			ТабДок.Вывести(Шапка);
			
			ВставлятьРазделительСтраниц = Истина;
		КонецЦикла;
	КонецЦикла;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ПолеСлева			= 0;
	ТабДок.ПолеСправа			= 0;
	ТабДок.ПолеСверху			= 0;
	ТабДок.ПолеСнизу			= 0;
	
	Возврат ТабДок;
КонецФункции


Функция ТабДок_СтикерКоробки(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок				= Новый ТабличныйДокумент;
	Макет				= ПолучитьОбщийМакет("ПФ_MXL_КоробкаЭтикетка");
	Макет.АвтоМасштаб	= Истина;

	Шапка 				= Макет.ПолучитьОбласть("Шапка");
	ТабДок.Очистить();

	
	
	ВставлятьРазделительСтраниц = Ложь;
	Для каждого Док из МассивОбъектов Цикл
		Для каждого СтрКоробка из Док.Коробки цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ШК							= СтрКоробка.ШК.Код;
			ОбластьШК					= Шапка.Области.Шапка;
			РисунокШтрихкод				= Шапка.Рисунки.РисунокШтрихкод;
			
			
			ПараметрыШтрихкода			= Документы.ВыдачаТранзита.ЗаполнитьПараметрыОбработки(ШК);
			РисунокШтрихкод.Картинка 	= МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			РисунокШтрихкод.Расположить(ОбластьШК);
			//помеченныеСтроки			= Выборка.Покупки.НайтиСтроки(Новый Структура("Подбор", Истина));
			//Шапка.Параметры.Заполнить(Выборка);
			Шапка.Параметры.Описание = ""+СтрКоробка.Коробка.Наименование;
			ТабДок.Вывести(Шапка);
			
			ВставлятьРазделительСтраниц = Истина;
		КонецЦикла;
	КонецЦикла;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ПолеСлева			= 0;
	ТабДок.ПолеСправа			= 0;
	ТабДок.ПолеСверху			= 0;
	ТабДок.ПолеСнизу			= 0;
	
	Возврат ТабДок;
КонецФункции



Функция ТабДок_ЧекаЗаказыДляТранизта(МассивОбъектов, ОбъектыПечати) Экспорт
   ТабДок = Новый ТабличныйДокумент;
	
   Макет = ПолучитьОбщийМакет("ПФ_MXL_ЧекПоступления");
   ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
   ОбластьСсылка 			= Макет.ПолучитьОбласть("Ссылка"); 
   ОбластьОрганизатор 		= Макет.ПолучитьОбласть("ОрганизаторСумма");
   ОбластьПокупка 			= Макет.ПолучитьОбласть("ПокупкаЦена");
   ОбластьИтог				= Макет.ПолучитьОбласть("Итог"); 
   
   ОбластьКоробка 			= Макет.ПолучитьОбласть("Коробка");
   
   ОбластьПунктир			= Макет.ПолучитьОбласть("Пунктир");



   
   ОбластьШапка.Параметры.НазваниеОрганизации=Константы.СвояТочка.Получить();
   ТабДок.Вывести(ОбластьШапка);

	Запрос = Новый Запрос;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСОрганизаторами.Организатор КАК Организатор,
		|	СУММА(ВзаиморасчетыСОрганизаторами.Сумма) КАК Сумма
		|ПОМЕСТИТЬ втОрганизаторы
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСОрганизаторами КАК ВзаиморасчетыСОрганизаторами
		|ГДЕ
		|	ВзаиморасчетыСОрганизаторами.Регистратор В(&Регистратор)
		|	И ВзаиморасчетыСОрганизаторами.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыСОрганизаторами.Организатор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Приход.Организатор КАК Организатор,
		|	Приход.Покупка КАК Покупка,
		|	Приход.Регистратор КАК Регистратор,
		|	Приход.Регистратор.СуммаПоДокументу КАК Сумма,
		|	Приход.Сумма КАК Цена,
		|	Приход.Количество КАК Количество,
		|	втОрганизаторы.Сумма КАК СуммаОрганизатор
		|ИЗ
		|	РегистрНакопления.Приход КАК Приход
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОрганизаторы КАК втОрганизаторы
		|		ПО Приход.Организатор = втОрганизаторы.Организатор
		|ГДЕ
		|	Приход.Регистратор В(&Регистратор)
		|ИТОГИ
		|	МАКСИМУМ(Сумма),
		|	СУММА(Количество),
		|	МАКСИМУМ(СуммаОрганизатор)
		|ПО
		|	ОБЩИЕ,
		|	Организатор,
		|	Регистратор";
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Регистратор", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаОбщийИтог.Следующий();		// Общий итог
	
	// Вставить обработку выборки ВыборкаОбщийИтог                                       
	ВыборкаОрганизатор = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Итого = 0;
	Пока ВыборкаОрганизатор.Следующий() Цикл    
		ОбластьОрганизатор.Параметры.Заполнить(ВыборкаОрганизатор);
		ОбластьОрганизатор.Параметры.кол = ВыборкаОрганизатор.Количество;
		ОбластьОрганизатор.Параметры.сум = ВыборкаОрганизатор.СуммаОрганизатор;
		ТабДок.Вывести(ОбластьОрганизатор);
		
		Итого = Итого + ВыборкаОрганизатор.СуммаОрганизатор;
		ВыборкаРегистратор = ВыборкаОрганизатор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРегистратор.Следующий() Цикл    
		//	ТабДок.Вывести(ОбластьПунктир);
			
			ОбластьСсылка.Параметры.Ссылка = ВыборкаРегистратор.Регистратор;
			ТабДок.Вывести(ОбластьСсылка);
			Выборка = ВыборкаРегистратор.Выбрать();
			
			
			Пока Выборка.Следующий() Цикл
				ОбластьПокупка.Параметры.Заполнить(Выборка);                       
				ТабДок.Вывести(ОбластьПокупка);
			КонецЦикла;
		КонецЦикла;  
	//	ТабДок.Вывести(ОбластьПунктир);
	КонецЦикла;
	
	ОбластьИтог.Параметры.Кол = ВыборкаОбщийИтог.Количество;
	ОбластьИтог.Параметры.Сум = Итого;
    ТабДок.Вывести(ОбластьИтог);
	
	
	
	ТабДок.АвтоМасштаб = Истина;
	Возврат ТабДок;
КонецФункции



Функция ТабДок_ЧекаПоступления(МассивОбъектов, ОбъектыПечати,МассивОрганизаторов = неопределено) Экспорт   
	показыватьМХ = Константы.МестоХраненияВЧекеПоступления.Получить();
	
   ТабДок = Новый ТабличныйДокумент;
	
   Макет = ПолучитьОбщийМакет("ПФ_MXL_ЧекПоступления");
   ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
   ОбластьСсылка 			= Макет.ПолучитьОбласть("Ссылка");
   ОбластьКоробка 			= Макет.ПолучитьОбласть("Коробка");
   ОбластьОрганизатор 		= Макет.ПолучитьОбласть("Организатор");
   ОбластьПокупка 			= Макет.ПолучитьОбласть("Покупка");
   ОбластьДетали 			= Макет.ПолучитьОбласть("Детали");
   ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
   ОбластьГабарит       	= Макет.ПолучитьОбласть("Габарит");
   ОбластьОборотнаяТараШапка= Макет.ПолучитьОбласть("ОборотнаяТараШапка");
   ОбластьОборотнаяТара		= Макет.ПолучитьОбласть("ОборотнаяТара"); 
   ОбластьТипПоступления	= Макет.ПолучитьОбласть("ТипПоступления"); 
   ОбластьИтог				= Макет.ПолучитьОбласть("Итог"); 
   ОбластьПунктир			= Макет.ПолучитьОбласть("Пунктир");



   
   ОбластьШапка.Параметры.НазваниеОрганизации=Константы.СвояТочка.Получить();
   ТабДок.Вывести(ОбластьШапка);

	Запрос = Новый Запрос;
	Если МассивОрганизаторов = неопределено Тогда
		Запрос.Текст = ПолучитьТекстЗапросаДляЧекаПоступления();
	Иначе
		Запрос.Текст = ПолучитьТекстЗапросаДляЧекаПоступления("ДляЧекаСОтборомПоОрганизаторам");
		Запрос.УстановитьПараметр("Организаторы", МассивОрганизаторов);	
	КонецЕсли;		                                                    
	Запрос.УстановитьПараметр("ТарифГруппа", 2);	
	Запрос.УстановитьПараметр("ТарифОдиночный", 5);	
	Запрос.УстановитьПараметр("ТарифРазбор", 1);	
	Запрос.УстановитьПараметр("ТарифТара", 0);	
	Запрос.УстановитьПараметр("ТарифНегаборит", 1);	
	
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	пактеы= Запрос.ВыполнитьПакет();
	РезультатЗапроса = пактеы[1];
	РезультатИтоги   = пактеы[2];
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Итого		= 0;
	ИтогоРуб 	= 0;
	Пока ВыборкаСсылка.Следующий() Цикл
		ОбластьСсылка.Параметры.Заполнить(ВыборкаСсылка);
		ТабДок.Вывести(ОбластьСсылка);
		ВыборкаКоробка = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКоробка.Следующий() Цикл
			Если ТипЗнч(ВыборкаКоробка.Коробка) = Тип("Строка") Тогда
				ОбластьКоробка.Параметры.Коробка=ВыборкаКоробка.Коробка;
			Иначе    
				безКоробки = (ВыборкаКоробка.Коробка = Справочники.Коробки.БезКоробки);
				Если безКоробки Тогда              
					
				Иначе	
					ТабДок.Вывести(ОбластьПунктир);
					ОбластьКоробка.Параметры.Коробка=ВыборкаКоробка.Коробка.Наименование+
											 "; о:"+ВыборкаКоробка.Коробка.Организатор+
											 "; шт:"+ВыборкаКоробка.Коробка.Количество;  
					ТабДок.Вывести(ОбластьКоробка);
				КонецЕсли;
											// "; тчк:"+ВыборкаКоробка.Коробка.ТочкаНазначения;
			КонецЕсли;
			
			ВыборкаОрганизатор = ВыборкаКоробка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
			Пока ВыборкаОрганизатор.Следующий() Цикл
				Если безКоробки Тогда              
					ТабДок.Вывести(ОбластьПунктир);
                КонецЕсли;
				ОбластьОрганизатор.Параметры.Заполнить(ВыборкаОрганизатор);
				Если  ВыборкаКоробка.Коробка <> "Оборотная тара" Тогда
					ТабДок.Вывести(ОбластьОрганизатор);
				КонецЕсли;
				ВыборкаПокупка = ВыборкаОрганизатор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
				Пока ВыборкаПокупка.Следующий() Цикл
					ОбластьПокупка.Параметры.Заполнить(ВыборкаПокупка);                       
					Если ТипЗнч(ВыборкаПокупка.Покупка) =Тип("СправочникСсылка.Посылки") Тогда
						ОбластьПокупка.Параметры.Покупка=Лев(ВыборкаПокупка.Покупка.Наименование, 12) ;						
						
					КонецЕсли;
					Если ТипЗнч(ВыборкаПокупка.Покупка) =Тип("СправочникСсылка.Коробки") Тогда
						ОбластьПокупка.Параметры.Покупка=ВыборкаПокупка.Покупка.Наименование+
						"; о:"+ВыборкаПокупка.Покупка.Организатор+
						"; шт:"+ВыборкаПокупка.Покупка.Количество;
					//	"; тчк:"+ВыборкаПокупка.Покупка.ТочкаНазначения;
					КонецЕсли;
					Если ТипЗнч(ВыборкаПокупка.Покупка) =Тип("СправочникСсылка.ОборотнаяТара") Тогда
						ОбластьПокупка.Параметры.Покупка=ВыборкаПокупка.Покупка.Наименование ;
					КонецЕсли;
					
					Если (ТипЗнч(ВыборкаПокупка.Покупка) = Тип("СправочникСсылка.Пристрой")  или
						ТипЗнч(ВыборкаПокупка.Покупка) = Тип("СправочникСсылка.ЗаявкаНаДоставку"))
						и
						ТипЗнч(ВыборкаПокупка.Ссылка)  = Тип("ДокументСсылка.ПоступлениеПристроя") Тогда
						ОбластьПокупка.Параметры.Покупка=ВыборкаПокупка.Покупка.Наименование+
						" - "+ВыборкаПокупка.Сумма + " руб.";
						ИтогоРуб	= ИтогоРуб + ВыборкаПокупка.Сумма;
					КонецЕсли;		
					ТабДок.Вывести(ОбластьПокупка);
					

					ВыборкаДетальныеЗаписи = ВыборкаПокупка.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл   
						ОбластьГабарит.Параметры.Заполнить(ВыборкаДетальныеЗаписи);  
						Если показыватьМХ Тогда
							ОбластьДетали.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
						КонецЕсли;;	
						Если  ВыборкаКоробка.Коробка <> "Оборотная тара" Тогда
							ТабДок.Вывести(ОбластьГабарит);       
							Если показыватьМХ Тогда
								ТабДок.Вывести(ОбластьДетали);
							КонецЕсли;	
						КонецЕсли;
						
						
					КонецЦикла;
					
					
					
		//			ВыборкаГабарит = ВыборкаПокупка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//			
		//			Пока ВыборкаГабарит.Следующий() Цикл
		//				ОбластьГабарит.Параметры.Заполнить(ВыборкаГабарит);
		//				Если  ВыборкаКоробка.Коробка <> "Оборотная тара" Тогда
		//					ТабДок.Вывести(ОбластьГабарит);
		//				КонецЕсли;
		//
		//				ВыборкаДетальныеЗаписи = ВыборкаГабарит.Выбрать();
		//				
		//				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//					Если ТипЗнч(ВыборкаДетальныеЗаписи.Покупка) =Тип("СправочникСсылка.Коробки") Тогда
		//						ОбластьДетали.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		//						ТабДок.Вывести(ОбластьДетали);
		//						Итого=Итого+1;
		//					Иначе
		//						Для сч=1 по ВыборкаДетальныеЗаписи.Количество Цикл
		//							ОбластьДетали.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		//							Если  ВыборкаКоробка.Коробка <> "Оборотная тара" Тогда
		//								ТабДок.Вывести(ОбластьДетали);
		//							КонецЕсли;									
		//							Итого=Итого+1;
		//						КонецЦикла;
		//					КонецЕсли;
		//				КонецЦикла;
		//			КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//ОбластьПодвал.Параметры.Итого		= Итого;
	//ОбластьПодвал.Параметры.ИтогоРуб	= ИтогоРуб;
	//
	//ТабДок.Вывести(ОбластьПодвал); 
	
	
	ВыборкаИтоги = РезультатИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Итого		= 0;
	ИтогоРуб 	= 0;
	Пока ВыборкаИтоги.Следующий() Цикл
		ВыборкаТипПоступления = ВыборкаИтоги.Выбрать();
		Пока ВыборкаТипПоступления.Следующий() Цикл 
			ОбластьТипПоступления.Параметры.Заполнить(ВыборкаТипПоступления);
        	ТабДок.Вывести(ОбластьТипПоступления);
		КонецЦикла;	 
		ОбластьИтог.Параметры.Заполнить(ВыборкаИтоги);
        ТабДок.Вывести(ОбластьИтог);
	КонецЦикла;		
	
	ТабДок.АвтоМасштаб = Истина;
	Возврат ТабДок;
КонецФункции


Функция ТабДок_ЧекаПоступления_НЗ(ОбъектПечати) Экспорт
   ТабДок = Новый ТабличныйДокумент;
	
   Макет = ПолучитьОбщийМакет("ПФ_MXL_ЧекПоступления");
   ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
   ОбластьСсылка 			= Макет.ПолучитьОбласть("Ссылка");
   ОбластьКоробка 			= Макет.ПолучитьОбласть("Коробка");
   ОбластьОрганизатор 		= Макет.ПолучитьОбласть("Организатор");
   ОбластьПокупка 			= Макет.ПолучитьОбласть("Покупка");
   ОбластьДетали 			= Макет.ПолучитьОбласть("Детали");
   ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
   ОбластьГабарит       	= Макет.ПолучитьОбласть("Габарит");
   ОбластьРазделитель      	= Макет.ПолучитьОбласть("Разделитель");
   
   ОбластьШапка.Параметры.НазваниеОрганизации=Константы.СвояТочка.Получить();
   ТабДок.Вывести(ОбластьШапка);


	Итого		= 0;
	ИтогоРуб 	= 0;

		ОбластьСсылка.Параметры.Ссылка = "Отправление для "+ОбъектПечати.Участник;
		ТабДок.Вывести(ОбластьСсылка);

		ОбластьКоробка.Параметры.Коробка = ОбъектПечати.ТочкаНазначения;
		ТабДок.Вывести(ОбластьКоробка);


			Для каждого элем из ОбъектПечати.Заказы Цикл
					ОбластьПокупка.Параметры.Покупка 		= "("+элем.Посылка.Код+")"+"("+элем.ВремяХранения+" дн.)"+элем.Покупка.Наименование;
					ОбластьДетали.Параметры.Участник 		= элем.Покупка.Организатор;
					ОбластьДетали.Параметры.МестоХранения 	= элем.МестоХранения;
					ОбластьДетали.Параметры.НСтроки	 		= элем.НомерСтроки;
					
					ТабДок.Вывести(ОбластьРазделитель);
					ТабДок.Вывести(ОбластьПокупка);
					ТабДок.Вывести(ОбластьДетали);
			КонецЦикла;
		ТабДок.Вывести(ОбластьРазделитель);
	
//	ОбластьПодвал.Параметры.Итого		= Итого;
//	ОбластьПодвал.Параметры.ИтогоРуб	= ИтогоРуб;
//	
//	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.АвтоМасштаб = Истина;
	Возврат ТабДок;
КонецФункции




Функция ТабДок_СпискаУчастников(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("ПФ_MXL_СписокУчастниковПоступления");
	ОбластьЗаголовок 	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьУчастники 		= Макет.ПолучитьОбласть("Участники");
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходнаяПокупки.Ссылка КАК Ссылка,
	|	ПриходнаяПокупки.Участник КАК Участник
	|ПОМЕСТИТЬ Пред
	|ИЗ
	|	Документ.Приходная.Покупки КАК ПриходнаяПокупки
	|ГДЕ
	|	ПриходнаяПокупки.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ПоступлениеПристрояЗаказы.Ссылка,
	|	ПоступлениеПристрояЗаказы.Пристрой.Участник
	|ИЗ
	|	Документ.ПоступлениеПристроя.Заказы КАК ПоступлениеПристрояЗаказы
	|ГДЕ
	|	ПоступлениеПристрояЗаказы.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходнаяПосылки.Ссылка,
	|	ПриходнаяПосылки.Посылка.Участник
	|ИЗ
	|	Документ.Приходная.Посылки КАК ПриходнаяПосылки
	|ГДЕ
	|	ПриходнаяПосылки.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РазборКоробкиПокупки.Ссылка,
	|	РазборКоробкиПокупки.Участник
	|ИЗ
	|	Документ.РазборКоробки.Покупки КАК РазборКоробкиПокупки
	|ГДЕ
	|	РазборКоробкиПокупки.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РазборКоробкиПосылки.Ссылка,
	|	РазборКоробкиПосылки.Посылка.Участник
	|ИЗ
	|	Документ.РазборКоробки.Посылки КАК РазборКоробкиПосылки
	|ГДЕ
	|	РазборКоробкиПосылки.Ссылка В(&Ссылка)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пред.Ссылка КАК Ссылка,
	|	Пред.Участник КАК Участник
	|ИЗ
	|	Пред КАК Пред
	|
	|СГРУППИРОВАТЬ ПО
	|	Пред.Ссылка,
	|	Пред.Участник
	|ИТОГИ ПО
	|	Ссылка";
	Запрос.Параметры.Вставить("Ссылка", МассивОбъектов);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	ВыборкаСсылка 		= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);


	ТабДок.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	ТабДок.Вывести(ОбластьЗаголовок);
	Пока ВыборкаСсылка.Следующий() Цикл
		ОбластьШапка.Параметры.Заполнить(ВыборкаСсылка);
		ТабДок.Вывести(ОбластьШапка);
		
		ВыборкаУчастники = ВыборкаСсылка.Выбрать();
		Пока ВыборкаУчастники.Следующий() Цикл
			ОбластьУчастники.Параметры.Заполнить(ВыборкаУчастники);
			ТабДок.Вывести(ОбластьУчастники);
		КонецЦикла;
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	ТабДок.АвтоМасштаб = Истина;
	Возврат ТабДок;
КонецФункции




 Функция ТабДок_РасходнаяЧекНЗ(объект) экспорт
	ТабДок 				= Новый ТабличныйДокумент;
		сжатыйЧек = Константы.СжатыйЧекВыдачи.Получить();
		Если сжатыйЧек Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Расходная.ПФ_MXL_ЧекСжатый");	
		Иначе	
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Расходная.ПФ_MXL_Чек");
		КонецЕсли;

	ОбластьШтрихКод		= Макет.ПолучитьОбласть("ШтрихКод");   
	ОбластьШтрихКодСтрока = Макет.ПолучитьОбласть("ШтрихКодСтрока"); 		
	Шапка 				= Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупкиШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупки 		= Макет.ПолучитьОбласть("Покупки");
	ОбластьПокупкиБВ	= Макет.ПолучитьОбласть("ПокупкиБВ");
	ОбластьПредоплатаИтог 		= Макет.ПолучитьОбласть("Предоплата");
	ОбластьПодвал 		= Макет.ПолучитьОбласть("Подвал");
	ЗаПоискНика 		= Макет.ПолучитьОбласть("ЗаПоискНика");

	ТабДок.Очистить();
	ВставлятьРазделительСтраниц = Ложь;
	
	ПоказыватьШтрихкод = Константы.ИспользоватьДвухЭтапнуюВыдачуЗаказа.Получить() или Константы.ПоказыватьШтрихкодВРасходной.Получить();
	Если ПоказыватьШтрихкод Тогда

		ШтрихКодДокумента = "65" + Формат(Объект.Участник.Код,"ЧЦ=8; ЧВН=; ЧГ=0");	
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина", 450);
		ПараметрыШтрихкода.Вставить("Высота", 120);
		ПараметрыШтрихкода.Вставить("Штрихкод", ШтрихКодДокумента);
		ПараметрыШтрихкода.Вставить("ТипКода", 4);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
		ПараметрыШтрихкода.Вставить("РазмерШрифта", 10);
		ПараметрыШтрихкода.Вставить("УголПоворота", 0); //Одно из следующих значений: 0, 90, 180, 270.
		ПараметрыШтрихкода.Вставить("ПрозрачныйФон", Истина);
		ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0); //Одно из следующих значений: //0, 1, 2, 3. Соответствует: L, M, Q, H.
		РисунокШтрихкод 				= ОбластьШтрихКод.Рисунки.РисунокШтрихкод;
		РисунокШтрихкод.Картинка		= МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		РисунокШтрихкод.РазмерКартинки 	= РазмерКартинки.Пропорционально; 
		РисунокШтрихкод.Расположить(ОбластьШтрихКод.Области.ШтрихКод);
		ТабДок.Вывести(ОбластьШтрихКод);
		
		ОбластьШтрихКодСтрока.Параметры.ШтрихКодСтрока = ШтрихКодДокумента;
		ТабДок.Вывести(ОбластьШтрихКодСтрока);	
	КонецЕсли;	
	
	Итого						=0;
	
	Если не сжатыйЧек Тогда                           
		Шапка.Параметры.Номер				= "Не записан";	
		Шапка.Параметры.Дата				= Формат(ТекущаяДата(),"ДЛФ=ДД");
		Шапка.Параметры.НазваниеОрганизации	= Константы.НазваниеОрганизации.Получить();	
		Шапка.Параметры.КодУчастника		= Объект.Участник.Код;  	
		Шапка.Параметры.КартаУчастника		=?(ЗначениеЗаполнено(Объект.КартаУчастника),Объект.КартаУчастника,"без карты");
	КонецЕсли;
	Шапка.Параметры.Участник			= Объект.Участник.Наименование + " ("+Объект.Участник.Код+")" ;
	
	
	ТабДок.Вывести(Шапка);	
	
	нпп=1;
	ОплачиваетОрганизатор = 0;
	Для каждого ЭлемПокупки из Объект["Покупки"] Цикл
		//Если ЭлемПокупки.БесплатнаяВыдача Тогда
		//	ОбластьВыводаПокупки = ОбластьПокупкиБВ;
		//	ОбластьВыводаПокупки.Параметры.ОплачиваетУчастник = ЭлемПокупки.ОплачиваетУчастник;
		//Иначе
		//	ОбластьВыводаПокупки = ОбластьПокупки;
		//КонецЕсли;		
		
		
		Если ЭлемПокупки.БесплатнаяВыдача Тогда
			ОбластьВыводаПокупки = ОбластьПокупкиБВ;
			ОбластьВыводаПокупки.Параметры.ОплачиваетУчастник	= ЭлемПокупки.ОплачиваетУчастник;
			ОбластьВыводаПокупки.Параметры.СтоимостОрганизатор	= ЭлемПокупки.ОплачиваетОрганизатор;    
			
			Если ЭлемПокупки.ОплачиваетУчастник Тогда
				ОбластьВыводаПокупки.Параметры.ВидПредоплаты			= "предоп. уч.";    	
			Иначе
				ОбластьВыводаПокупки.Параметры.ВидПредоплаты			= "предоп. орг.";    				
			КонецЕсли;
			
			
		Иначе	 
			ОбластьВыводаПокупки = ОбластьПокупки;
			ОбластьВыводаПокупки.Параметры.СтоимостьИтого	= ЭлемПокупки.СтоимостьИтого;
		КонецЕсли;		
		
		ОплачиваетОрганизатор = ОплачиваетОрганизатор + ЭлемПокупки.ОплачиваетОрганизатор;
		
		ОбластьВыводаПокупки.Параметры.нпп				= нпп;
		ОбластьВыводаПокупки.Параметры.Организатор		= ?(ТипЗнч(ЭлемПокупки.Покупка)=Тип("СправочникСсылка.Покупки"),ЭлемПокупки.Покупка.Владелец,ЭлемПокупки.Покупка.Организатор);
		ОбластьВыводаПокупки.Параметры.Покупка			= ЭлемПокупки.Покупка;
		ОбластьВыводаПокупки.Параметры.ПокупкаСпр		= ЭлемПокупки.ПокупкаСпр;
		ОбластьВыводаПокупки.Параметры.МестоХранения	= ?(ЭлемПокупки.МестоХранения.Родитель=Справочники.МестаХранения.ПустаяССылка(),ЭлемПокупки.МестоХранения,ЭлемПокупки.МестоХранения.Родитель.Наименование+"\"+ ЭлемПокупки.МестоХранения);
		ОбластьВыводаПокупки.Параметры.Габарит        	= ЭлемПокупки.Габарит;
		ОбластьВыводаПокупки.Параметры.ВремяХранения  	= ЭлемПокупки.ВремяХранения;

	//	ОбластьВыводаПокупки.Параметры.СтоимостьИтого		= ЭлемПокупки.СтоимостьИтого;
		Если ЭлемПокупки.Количество>1 Тогда
			ОбластьВыводаПокупки.Параметры.КоличествоМест	="мест: "+ЭлемПокупки.Количество;	
		КонецЕсли;	
		
		ТабДок.Вывести(ОбластьВыводаПокупки);
		Итого	= Итого	+ ЭлемПокупки.ОплачиваетУчастник;
		нпп		= нпп	+ 1;
	КонецЦикла;
	
	Если Объект.ПоискНикаСтоимость<>0 Тогда
		ЗаПоискНика.Параметры.ЗаПоискНика	= Объект.ПоискНикаСтоимость;
		ТабДок.Вывести(ЗаПоискНика);
	КонецЕсли;
	

	Если не сжатыйЧек Тогда
		ОбластьПодвал.Параметры.Участник			= Объект.Участник;
	КонецЕсли;	
	ОбластьПодвал.Параметры.Итого = Итого + Объект.ПоискНикаСтоимость;  
	
	
	Если Объект.ПредоплатаОрганизатор >0 Тогда
		ОбластьПредоплатаИтог.Параметры.бесплатнаяВыдача	= Объект.ПредоплатаОрганизатор;
		ОбластьПредоплатаИтог.Параметры.ВидПредоплаты		= "пледоплата организатор";
		ТабДок.Вывести(ОбластьПредоплатаИтог);				
	КонецЕсли;	
	
	Если Объект.ПредоплатаУчастник >0 Тогда
		ОбластьПредоплатаИтог.Параметры.бесплатнаяВыдача	= Объект.ПредоплатаУчастник;
		ОбластьПредоплатаИтог.Параметры.ВидПредоплаты		= "пледоплата участник";
		ТабДок.Вывести(ОбластьПредоплатаИтог);				
	КонецЕсли;	

		
	ТабДок.Вывести(ОбластьПодвал);
	возврат ТабДок;
КонецФункции // ПолучитМакетЧека()


  

Функция ТабДок_РасходнаяЧекНЗ_ПоУчастнику(Участник) Экспорт
	ТабДок				= Новый ТабличныйДокумент;           
	
		сжатыйЧек = Константы.СжатыйЧекВыдачи.Получить();
		Если сжатыйЧек Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Расходная.ПФ_MXL_ЧекСжатый");	
		Иначе	
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Расходная.ПФ_MXL_Чек");
		КонецЕсли;	
//	Макет 				= Документы.Расходная.ПолучитьМакет("ПФ_MXL_Чек");
	ОбластьШтрихКод		= Макет.ПолучитьОбласть("ШтрихКод");   
	ОбластьШтрихКодСтрока = Макет.ПолучитьОбласть("ШтрихКодСтрока");   
	Шапка 				= Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупкиШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупки 		= Макет.ПолучитьОбласть("Покупки");
	ОбластьПодвал 		= Макет.ПолучитьОбласть("Подвал");
	ЗаПоискНика 		= Макет.ПолучитьОбласть("ЗаПоискНика");
	
	
	
	
	
	ВставлятьРазделительСтраниц = Ложь;
	Итого=0;
	
	//ПоказыватьШтрихкод = Константы.ИспользоватьДвухЭтапнуюВыдачуЗаказа.Получить() или Константы.ПоказыватьШтрихкодВРасходной.Получить();
	//Если ПоказыватьШтрихкод Тогда

		ШтрихКодДокумента = "65" + Формат(Участник.Код,"ЧЦ=8; ЧВН=; ЧГ=0");	
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина", 450);
		ПараметрыШтрихкода.Вставить("Высота", 120);
		ПараметрыШтрихкода.Вставить("Штрихкод", ШтрихКодДокумента);
		ПараметрыШтрихкода.Вставить("ТипКода", 4);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
		ПараметрыШтрихкода.Вставить("РазмерШрифта", 10);
		ПараметрыШтрихкода.Вставить("УголПоворота", 0); //Одно из следующих значений: 0, 90, 180, 270.
		ПараметрыШтрихкода.Вставить("ПрозрачныйФон", Истина);
		ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0); //Одно из следующих значений: //0, 1, 2, 3. Соответствует: L, M, Q, H.
		РисунокШтрихкод 				= ОбластьШтрихКод.Рисунки.РисунокШтрихкод;
		РисунокШтрихкод.Картинка		= МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		РисунокШтрихкод.РазмерКартинки 	= РазмерКартинки.Пропорционально; 
		РисунокШтрихкод.Расположить(ОбластьШтрихКод.Области.ШтрихКод);
		ТабДок.Вывести(ОбластьШтрихКод);
		
		ОбластьШтрихКодСтрока.Параметры.ШтрихКодСтрока = ШтрихКодДокумента;
		ТабДок.Вывести(ОбластьШтрихКодСтрока);	
	//КонецЕсли;		
	
	Если не сжатыйЧек Тогда                           
		Шапка.Параметры.Номер				= "Не записан";	
		Шапка.Параметры.Дата				= Формат(ТекущаяДата(),"ДЛФ=ДД");
		Шапка.Параметры.НазваниеОрганизации	= Константы.НазваниеОрганизации.Получить();	
		Шапка.Параметры.КодУчастника		= Участник.Код;  	
	КонецЕсли;
	Шапка.Параметры.Участник			= Участник.Наименование + " ("+Участник.Код+")" ;
	
	
	ЗаПоискНика.Параметры.ЗаПоискНика=0;//ПоискНикаСтоимость;

	ТабДок.Вывести(Шапка);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиТоваровОстатки.Габарит,
		|	ОстаткиТоваровОстатки.Участник,
		|	ОстаткиТоваровОстатки.МестоХранения,
		|	ОстаткиТоваровОстатки.Покупка,
		|	ОстаткиТоваровОстатки.Партия,
		|	ОстаткиТоваровОстатки.Оплачен,
		|	Покупки.Ссылка КАК ПокупкаСсылка,
		|	ОстаткиТоваровОстатки.КоличествоОстаток,
		|	РАЗНОСТЬДАТ(ОстаткиТоваровОстатки.Партия.Дата, &ДатаОтчета, ДЕНЬ) КАК ВремяХранения
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваров.Остатки(, Участник = &Участник) КАК ОстаткиТоваровОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Покупки КАК Покупки
		|		ПО ОстаткиТоваровОстатки.Покупка = Покупки.Код
		|ГДЕ
		|	ОстаткиТоваровОстатки.КоличествоОстаток > 0";
    Запрос.УстановитьПараметр("ДатаОтчета", ТекущаяДата());
	Запрос.УстановитьПараметр("Участник", Участник);

	РезультатЗапр = Запрос.Выполнить();

	Выборка = РезультатЗапр.Выбрать();
	
	

	
	Пока Выборка.Следующий() Цикл
		ПокупкаСсылка	=	Выборка.Покупка;
		Если ТипЗнч(ПокупкаСсылка)=Тип("СправочникСсылка.Покупки") Тогда
			ОбластьПокупки.Параметры.Организатор=ПокупкаСсылка.Владелец.Наименование;
		Иначе
			ОбластьПокупки.Параметры.Организатор=ПокупкаСсылка.Организатор.Наименование;
		КонецЕсли;	
		ОбластьПокупки.Параметры.Покупка		= Выборка.Покупка.Код;
		ОбластьПокупки.Параметры.ПокупкаСпр		= ПокупкаСсылка.Наименование;
		ОбластьПокупки.Параметры.МестоХранения	= ?(Выборка.МестоХранения.Родитель=Справочники.МестаХранения.ПустаяССылка(),Выборка.МестоХранения,Выборка.МестоХранения.Родитель.Наименование+"\"+ Выборка.МестоХранения);
		ОбластьПокупки.Параметры.Габарит        = Выборка.Габарит;
		ОбластьПокупки.Параметры.ВремяХранения  = Выборка.ВремяХранения;
		
		СтоимостьХранения	= Выборка.Габарит.СтоимостьХранения;
		ХранитсяНаСкладе	= Выборка.Габарит.ДниХранения;
			если Выборка.ВремяХранения > ХранитсяНаСкладе тогда
				СтоимостьХранения=СтоимостьХранения+(Выборка.ВремяХранения-Выборка.Габарит.ДниХранения)*Выборка.Габарит.ДобавочнаяСтоимость ;
			КонецЕсли;

		ОбластьПокупки.Параметры.СтоимостьИтого  =СтоимостьХранения;
		ТабДок.Вывести(ОбластьПокупки);
		Итого= Итого+СтоимостьХранения;

	КонецЦикла;

	Если не сжатыйЧек Тогда
		ОбластьПодвал.Параметры.Участник=Участник;
	КонецЕсли;	
	ОбластьПодвал.Параметры.Итого=Итого;//+ПоискНикаСтоимость;
	ТабДок.Вывести(ОбластьПодвал);
	возврат ТабДок;
КонецФункции



 Функция ТабДок_ПередачаВозвратовОрганизаторуЧекНЗ(объект) экспорт
	ТабДок 				= Новый ТабличныйДокумент;
	Макет 				= Документы.ПередачаВозвратовОрганизатору.ПолучитьМакет("ПФ_MXL_Чек");
	
	
	ОбластьЗаголовок 	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка		= Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупки 		= Макет.ПолучитьОбласть("Покупки");
	ОбластьПодвал 		= Макет.ПолучитьОбласть("Подвал");
	ТабДок.Очистить();
	
	СуммаИтого						= 0;
	КоличествоИтого					= 0;

	ТабДок.Вывести(ОбластьЗаголовок);

	ОбластьШапка.Параметры.Дата				= ТекущаяДата();
	ОбластьШапка.Параметры.Номер			= "Не записан";
	ОбластьШапка.Параметры.Получатель		= Объект.Получатель;
	ТабДок.Вывести(ОбластьШапка);	
	
	нпп=1;

	Для каждого ЭлемПокупки из Объект["Покупки"] Цикл
		
		ОбластьПокупки.Параметры.Заполнить(ЭлемПокупки);
		
		
		ТабДок.Вывести(ОбластьПокупки);
		
		СуммаИтого		= СуммаИтого 		+ ЭлемПокупки.Сумма;
		КоличествоИтого	= КоличествоИтого	+ ЭлемПокупки.Количество;
		
		нпп		= нпп	+ 1;
	КонецЦикла;

	ОбластьПодвал.Параметры.ИтогоШт 	= КоличествоИтого;
	ОбластьПодвал.Параметры.ИтогоРуб 	= СуммаИтого;

		
	ТабДок.Вывести(ОбластьПодвал);
	возврат ТабДок;
КонецФункции // ПолучитМакетЧека()


Функция ПолучитьТекстЗапросаДляЧекаПоступления(ТипЗапроса = "ДляЧека")
ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПоступлениеПристрояЗаказы.Ссылка КАК Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки) КАК Коробка,
		|	ПоступлениеПристрояЗаказы.Заявка КАК Покупка,
		|	ПоступлениеПристрояЗаказы.Заявка.Участник КАК Участник,
		|	1 КАК Количество,
		|	ПоступлениеПристрояЗаказы.Габарит КАК Габарит,
		|	ПоступлениеПристрояЗаказы.Заявка.УчастникОтправитель КАК Организатор,
		|	ПоступлениеПристрояЗаказы.МестоХранения КАК МестоХранения,
		|	ПоступлениеПристрояЗаказы.Сумма КАК Сумма,
		|	""Пристрой"" КАК ТипПоступления
		|ПОМЕСТИТЬ ПРед
		|ИЗ
		|	Документ.ПоступлениеПристроя.ЗаявкиНаДоставку КАК ПоступлениеПристрояЗаказы
		|ГДЕ
		|	ПоступлениеПристрояЗаказы.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеПристрояЗаказы.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки),
		|	ПоступлениеПристрояЗаказы.Пристрой,
		|	ПоступлениеПристрояЗаказы.Пристрой.Участник,
		|	1,
		|	ПоступлениеПристрояЗаказы.Габарит,
		|	ПоступлениеПристрояЗаказы.Пристрой.УчастникОтправитель,
		|	ПоступлениеПристрояЗаказы.МестоХранения,
		|	ПоступлениеПристрояЗаказы.Сумма,
		|	""Заявка на доставку""
		|ИЗ
		|	Документ.ПоступлениеПристроя.Заказы КАК ПоступлениеПристрояЗаказы
		|ГДЕ
		|	ПоступлениеПристрояЗаказы.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриходнаяПокупки.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки),
		|	ПриходнаяПокупки.Покупка,
		|	ПриходнаяПокупки.Участник,
		|	1,//ПриходнаяПокупки.Количество,
		|	ПриходнаяПокупки.Габарит,
		|	ПриходнаяПокупки.Организатор,
		|	ПриходнаяПокупки.МестоХранения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА &ТарифГруппа
		|		ИНАЧЕ Выбор КОгда ПриходнаяПокупки.ОтдельнымМестом Тогда &ТарифНегаборит  иначе  &ТарифОдиночный Конец
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяПокупки.Покупка) = ТИП(Справочник.Коробки)
		|			ТОГДА ""Группа""
		|		ИНАЧЕ Выбор КОгда ПриходнаяПокупки.ОтдельнымМестом Тогда ""Негабарит""  иначе  ""Одиночный"" Конец
		|	КОНЕЦ
		|ИЗ
		|	Документ.Приходная.Покупки КАК ПриходнаяПокупки
		|ГДЕ
		|	ПриходнаяПокупки.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РазборКоробкиПокупки.Ссылка,
		|	РазборКоробкиПокупки.Коробка,
		|	РазборКоробкиПокупки.Покупка,
		|	РазборКоробкиПокупки.Участник,
		|	1, //РазборКоробкиПокупки.Количество,
		|	РазборКоробкиПокупки.Габарит,
		|	РазборКоробкиПокупки.Организатор,
		|	РазборКоробкиПокупки.МестоХранения,
		|	ВЫБОР
		|		КОГДА РазборКоробкиПокупки.Коробка = Значение(Справочник.КОробки.БезКоробки)
		|			ТОГДА Выбор КОгда РазборКоробкиПокупки.ОтдельнымМестом Тогда &ТарифНегаборит  иначе  &ТарифОдиночный Конец
		|		ИНАЧЕ &ТарифРазбор
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РазборКоробкиПокупки.Коробка = Значение(Справочник.КОробки.БезКоробки)
		|			ТОГДА Выбор КОгда РазборКоробкиПокупки.ОтдельнымМестом Тогда ""Негабарит""  иначе  ""Одиночный"" Конец
		|		ИНАЧЕ ""Разбор""
		|	КОНЕЦ
		|	
		|ИЗ
		|	Документ.РазборКоробки.Покупки КАК РазборКоробкиПокупки
		|ГДЕ
		|	РазборКоробкиПокупки.Ссылка.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриходнаяПокупки.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки),
		|	ПриходнаяПокупки.Посылка,
		|	ПриходнаяПокупки.Посылка.Участник,
		|	1,
		|	ПриходнаяПокупки.Габарит,
		|	ПриходнаяПокупки.Посылка.Организатор,
		|	ПриходнаяПокупки.МестоХранения,     
		|	Выбор КОгда ПриходнаяПокупки.ОтдельнымМестом Тогда &ТарифНегаборит  иначе  &ТарифОдиночный Конец,
		|	Выбор КОгда ПриходнаяПокупки.ОтдельнымМестом Тогда ""Негабарит""  иначе  ""Одиночный"" Конец
		|ИЗ
		|	Документ.Приходная.Посылки КАК ПриходнаяПокупки
		|ГДЕ
		|	ПриходнаяПокупки.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РазборКоробкиПокупки.Ссылка,
		|	РазборКоробкиПокупки.Коробка,
		|	РазборКоробкиПокупки.Посылка,
		|	РазборКоробкиПокупки.Посылка.Участник,
		|	1,
		|	РазборКоробкиПокупки.Габарит,
		|	РазборКоробкиПокупки.Посылка.Организатор,
		|	РазборКоробкиПокупки.МестоХранения,  
		|	ВЫБОР
		|		КОГДА РазборКоробкиПокупки.Коробка = Значение(Справочник.КОробки.БезКоробки)
		|			ТОГДА Выбор КОгда РазборКоробкиПокупки.ОтдельнымМестом Тогда &ТарифНегаборит  иначе  &ТарифОдиночный Конец
		|		ИНАЧЕ &ТарифРазбор
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РазборКоробкиПокупки.Коробка = Значение(Справочник.КОробки.БезКоробки)
		|			ТОГДА Выбор КОгда РазборКоробкиПокупки.ОтдельнымМестом Тогда ""Негабарит""  иначе  ""Одиночный"" Конец
		|		ИНАЧЕ ""Разбор""
		|	КОНЕц	
		|ИЗ
		|	Документ.РазборКоробки.Посылки КАК РазборКоробкиПокупки
		|ГДЕ
		|	РазборКоробкиПокупки.Ссылка.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РазборКоробкиГруппыНаТранзит.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки),
		|	РазборКоробкиГруппыНаТранзит.Коробка,
		|	РазборКоробкиГруппыНаТранзит.ПунктВыдачи,
		|	1,//РазборКоробкиГруппыНаТранзит.Количество,
		|	РазборКоробкиГруппыНаТранзит.Габарит,
		|	РазборКоробкиГруппыНаТранзит.Коробка.Организатор,
		|	РазборКоробкиГруппыНаТранзит.МестоХранения,
		|	&ТарифГруппа,
		|	""Группа""
		|ИЗ
		|	Документ.РазборКоробки.ГруппыНаТранзит КАК РазборКоробкиГруппыНаТранзит
		|ГДЕ
		|	РазборКоробкиГруппыНаТранзит.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РазборКоробкиОборотнаяТара.Ссылка,
		|	""Оборотная тара"",
		|	РазборКоробкиОборотнаяТара.Тара,
		|	РазборКоробкиОборотнаяТара.ПунктВыдачи,
		|	1,
		|	""Оборотная тара"",
		|	""---"",
		|	""---"",
		|	&ТарифТара,
		|	""Тара""
		|ИЗ
		|	Документ.РазборКоробки.ОборотнаяТара КАК РазборКоробкиОборотнаяТара
		|ГДЕ
		|	РазборКоробкиОборотнаяТара.Ссылка В(&Ссылка)
		|;
		|//ТекстЗапроса";	
		
		
		ТекстВыборкиОрганизаторов ="
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРед.Организатор КАК Организатор
		|ИЗ
		|	ПРед КАК ПРед
		|СГРУППИРОВАТЬ ПО
		|	ПРед.Организатор";
		
		ТекстВыборкиДляЧекаСотборомПоОрганизатору ="
		|ВЫБРАТЬ
		|	ПРед.Ссылка КАК Ссылка,
		|	ПРед.Коробка КАК Коробка,
		|	ПРед.Покупка КАК Покупка,
		|	ПРед.Участник КАК Участник,
		|	ПРед.Количество КАК Количество,
		|	ПРед.Габарит КАК Габарит,
		|	ПРед.Организатор КАК Организатор,
		|	ПРед.МестоХранения КАК МестоХранения,
		 |	ПРед.ТипПоступления КАК ТипПоступления,
		|	ПРед.Сумма КАК Сумма
		|ИЗ
		|	ПРед КАК ПРед
		|ГДЕ
		|	ПРед.Организатор В (&Организаторы)
		|ИТОГИ      
		|	СУММА(Количество),
		|	СУММА(Сумма)
		|ПО
		|	Ссылка,
		|	Коробка,
		|	Организатор,
		|	Покупка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРед.ТипПоступления КАК ТипПоступления,
		|	СУММА(ПРед.Сумма) КАК Сум,
		|	СУММА(ПРед.Количество) КАК Кол
		|ИЗ
		|	ПРед КАК ПРед    
		|ГДЕ
		|	ПРед.Организатор В (&Организаторы)

		|
		|СГРУППИРОВАТЬ ПО
		|	ПРед.ТипПоступления
		|ИТОГИ ПО
		|	ОБЩИЕ";
		
		ТекстВыборкиДляЧека ="ВЫБРАТЬ
		                     |	ПРед.Ссылка КАК Ссылка,
		                     |	ПРед.Коробка КАК Коробка,
		                     |	ПРед.Покупка КАК Покупка,
		                     |	ПРед.Участник КАК Участник,
		                     |	ПРед.Количество КАК Количество,
		                     |	ПРед.Габарит КАК Габарит,
		                     |	ПРед.Организатор КАК Организатор,
		                     |	ПРед.МестоХранения КАК МестоХранения,
		                     |	ПРед.ТипПоступления КАК ТипПоступления,
		                     |	ПРед.Сумма КАК Сумма
		                     |ИЗ
		                     |	ПРед КАК ПРед
		                     |ИТОГИ
		                     |	СУММА(Количество),
		                     |	СУММА(Сумма)
		                     |ПО
		                     |	Ссылка,
		                     |	Коробка,
		                     |	Организатор,
		                     |	Покупка
		                     |;
		                     |
		                     |////////////////////////////////////////////////////////////////////////////////
		                     |ВЫБРАТЬ
		                     |	ПРед.ТипПоступления КАК ТипПоступления,
		                     |	СУММА(ПРед.Сумма) КАК Сум,
		                     |	СУММА(ПРед.Количество) КАК Кол
		                     |ИЗ
		                     |	ПРед КАК ПРед
		                     |
		                     |СГРУППИРОВАТЬ ПО
		                     |	ПРед.ТипПоступления
		                     |ИТОГИ ПО
		                     |	ОБЩИЕ";		
		
	Если ТипЗапроса = "Организаторы" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//ТекстЗапроса" , ТекстВыборкиОрганизаторов);
	ИначеЕсли ТипЗапроса = "ДляЧекаСОтборомПоОрганизаторам" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//ТекстЗапроса" , ТекстВыборкиДляЧекаСотборомПоОрганизатору);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//ТекстЗапроса" , ТекстВыборкиДляЧека);		
	КонецЕсли;			
		
Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьОрганизаторовВЧекеПоступления(МассивОбъектов) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляЧекаПоступления("Организаторы");
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);    
	Запрос.УстановитьПараметр("ТарифГруппа", 2);	
	Запрос.УстановитьПараметр("ТарифОдиночный", 5);	
	Запрос.УстановитьПараметр("ТарифРазбор", 1);	
	Запрос.УстановитьПараметр("ТарифТара", 0);	
	Запрос.УстановитьПараметр("ТарифНегаборит", 1);	

	
	РезультатЗапроса = Запрос.Выполнить();	
	Возврат РезультатЗапроса.Выгрузить()
КонецФункции	

