
Функция ПолучитьПараметрыТекцщейБазы()  Экспорт
	Если Найти(СтрокаСоединенияИнформационнойБазы(), "Srvr") > 0 Тогда
		// серверный вариант
		Поиск1 = Найти(СтрокаСоединенияИнформационнойБазы(), "Srvr=");
		ПодстрокаПоиска = Сред(СтрокаСоединенияИнформационнойБазы(), Поиск1 + 6);
		ИмяСервера = Лев(ПодстрокаПоиска, Найти(ПодстрокаПоиска, """") - 1);
		// теперь ищем имя базы
		Поиск1 = Найти(СтрокаСоединенияИнформационнойБазы(), "Ref=");
		ПодстрокаПоиска = Сред(СтрокаСоединенияИнформационнойБазы(), Поиск1 + 5);
		ИмяБазы = Лев(ПодстрокаПоиска, Найти(ПодстрокаПоиска, """") - 1);
	Иначе
		ИмяСервера 	= "";
		ИмяБазы		= "";
	КонецЕсли;;
	ПараметрыБазы = Новый Структура;
	ПараметрыБазы.Вставить("Сервер",	ИмяСервера);
    ПараметрыБазы.Вставить("ИмяБазы",	ИмяБазы);
	Возврат ПараметрыБазы;
КонецФункции	
	
Функция ПолучитьКоннектор()
	Возврат  Новый COMОбъект("v83.COMConnector");
КонецФункции

Функция ПолучитьАгента(Коннектор = Неопределено)
	Если Коннектор = Неопределено Тогда
		коннектор = ПолучитьКоннектор();
	КонецЕсли;
	ПараметрыБазы = ПолучитьПараметрыТекцщейБазы();
	ИмяСервера = ПараметрыБазы.Сервер;
	Возврат  Коннектор.ConnectAgent(ИмяСервера);
КонецФункции	

Функция ПолучитьКластеры(Агент=Неопределено)
	Если Агент=Неопределено Тогда
		Агент = ПолучитьАгента();;
	КонецЕсли;
	Возврат  Агент.GetClusters();;
КонецФункции

Функция ПолучитьПараметрыАдминистратораКластера()
	ПараметрыТекущейБазы = ПолучитьПараметрыТекцщейБазы();

	Параметры =новый Структура;
	Параметры.Вставить("АдминистраторКластера", "");
	Параметры.Вставить("ПарольКластера",		"");
	Параметры.Вставить("Сервер",				ПараметрыТекущейБазы.Сервер);
	Параметры.Вставить("ТекущаяБаза",			ПараметрыТекущейБазы.ИмяБазы);
	Возврат Параметры;
КонецФункции	


Функция ПолучитьБазыДанных(Параметры=Неопределено) Экспорт
	СписокБаз = новый СписокЗначений;
	Если Параметры=Неопределено Тогда
		Параметры =ПолучитьПараметрыАдминистратораКластера();
	КонецЕсли;
	Коннектор = ПолучитьКоннектор();
	Агент 		= ПолучитьАгента(Коннектор);
	Кластеры 	= ПолучитьКластеры(Агент);;
	Для каждого Кластер из Кластеры Цикл

		Агент.Authenticate(Кластер, Параметры.АдминистраторКластера, Параметры.ПарольКластера);
			
		Базы = Агент.GetInfoBases(Кластер);
		Для каждого База из Базы Цикл
			базаСтр= новый структура;
			базаСтр.Вставить("Имя",база.Name);
			
			СписокБаз.Добавить(БазаСтр);
		КонецЦикла;
	КонецЦикла;
	Возврат СписокБаз
КонецФункции

Процедура ЗавершитьСеансыБазы(БазаСП) Экспорт
	ПараметрыКластера = ПолучитьПараметрыАдминистратораКластера();
	Коннектор 			= ПолучитьКоннектор();
	Агент 				= ПолучитьАгента();
	Кластеры 			= ПолучитьКластеры(Агент);
	Для каждого Кластер из Кластеры Цикл
		
		Агент.Authenticate(Кластер, ПараметрыКластера.АдминистраторКластера, ПараметрыКластера.ПарольКластера);
		Процессы = Агент.GetWorkingProcesses(Кластер);
		Для каждого Процесс из Процессы Цикл
			Порт 	= Процесс.MainPort;
			РабПроц = Коннектор.ConnectWorkingProcess(ПараметрыКластера.Сервер + ":" + СтрЗаменить(Порт, Символы.НПП, ""));
			РабПроц.AddAuthentication(БазаСП.Администратор, БазаСП.ПарольАдминистратора);
			ИнформационнаяБаза = "";
			
			Базы = Агент.GetInfoBases(Кластер);
			Для каждого База из Базы Цикл
				Если Врег(База.Name) = Врег(БазаСП.ИмяБазы) Тогда
					ИнформационнаяБаза = База;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ИнформационнаяБаза = "" Тогда
				// база не найдена
			КонецЕсли;
			Сеансы = Агент.GetInfoBaseSessions(Кластер, ИнформационнаяБаза);
			Для каждого Сеанс из Сеансы Цикл
				Если нРег(Сеанс.AppID) = "backgroundjob" ИЛИ нРег(Сеанс.AppID) = "designer" Тогда
					// если это сеансы конфигуратора или фонового задания, то не отключаем
					Продолжить;
				КонецЕсли;
				Если Сеанс.SessionID =  БазаСП.ТекущийСеанс Тогда
					Продолжить;
				КонецЕсли;	
				
				//Если Сеанс.UserName = ИмяПользователя() Тогда
				//	// это текущий пользователь
				//	Продолжить;
				//КонецЕсли;
				Попытка
				
					Агент.TerminateSession(Кластер, Сеанс);	
				
				Исключение
				
				КонецПопытки;
				
			КонецЦикла;
			

			СоединенияБазы = Агент.GetInfoBaseConnections(Кластер, ИнформационнаяБаза);
			// Разорвать соединения клиентских приложений.
			Для Каждого Соединение Из СоединенияБазы Цикл
				
				Если 	нРег(Соединение.Application) = "backgroundjob" 
					ИЛИ нРег(Соединение.Application) = "designer" 
					или нРег(Соединение.Application) = "jobscheduler"
					или нРег(Соединение.Application) = "srvrconsole"Тогда
					// если это соединение конфигуратора или фонового задания, то не отключаем
					Продолжить;
				КонецЕсли;
				
				Если Соединение.ConnID =  БазаСП.ТекушееСоединение Тогда
					Продолжить;
				КонецЕсли;
				
				//Если Соединение.UserName = ИмяПользователя() Тогда
				//	// это текущий пользователь
				//	Продолжить;
				//КонецЕсли;
				Попытка
				
					РабПроц.Disconnect(Соединение);	
				
				Исключение
				
				КонецПопытки;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла			
			
		

	
КонецПроцедуры


Процедура ЗавершитьВсеСеансыКромеТекущего() Экспорт
	База = ПолучитьПараметрыТекцщейБазы();
	База.Вставить("Администратор", 			"upd");
	База.Вставить("ПарольАдминистратора", 	"456258");
	База.Вставить("Код", 					"SPedt");
	База.Вставить("ТекущийСеанс",	      	НомерСеансаИнформационнойБазы());
	База.Вставить("ТекушееСоединение",      НомерСоединенияИнформационнойБазы());
	
	
	СП_COM_Коннектор.ЗавершитьСеансыБазы(База);

	
КонецПроцедуры	