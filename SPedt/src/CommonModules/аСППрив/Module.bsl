#Область ПрограммнфйИнтерфейс
//Используется в регламентном задании "Загрузка с сайта"
//аналогичная процедура в Обработке ЗагрузкаССайта ЗагрузкаNew(Команда)
Процедура ВыполнитьЗагрузкуССайта()  Экспорт
	ЗагрузкаСправочников 		= Документы.СинхронизацияСправочников.СоздатьДокумент();
	ЗагрузкаСправочников.ЗаполнитьПеродыЗагрузки();
	ЗагрузкаСправочников.Дата	= ТекущаяДата();
	ЗагрузкаСправочников.ЗагрузитьСправочники();
	Попытка
		ЗагрузкаСправочников.Записать(РежимЗаписиДокумента.Проведение)
	Исключение
	    ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	
	
	
	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	//
	//АнтейТранзит = Справочники.ТочкиРаздачи.НайтиПоКоду("0039");
	//Если Константы.СвояТочка.Получить() <> АнтейТранзит Тогда
	//	ЗаказовНаТранзите = СтоСПОбмен_ЗаказыНаТранзите.Получить(АнтейТранзит);
	//	константы.ЗаказовНаТранзите.Установить("На транзите " + Строка(ЗаказовНаТранзите) + " шт , на "+ ТекущаяДата());
	//	//СП_ПокупкиВПути.ЗагрузитьВыехавшиеТранзиты();
	//	
	//КонецЕсли;
	//СтоСПОбмен_ПокупкиВПути.Получить();
	//
	//аспПроцедурыОбменаДанными.ПолучитьССайта();
	//
	//#Область СупперГруппыПоДате
	//стрОтвета 					= СтоСПОбмен_СупперГруппы.Загрузить_СуперГруппыПоДате();
	//#КонецОбласти 
	//
	//аспПроцедурыОбменаДанными.ДогрузитьСправочникиССайта();

КонецПроцедуры	



#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура  ЗапуститьВосстановлениеТранзита() Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();

	ЗаписьЖурналаРегистрации("Восстановление транзита",,,,"Запуск !!!",);
	//ПараметрыСеанса.глОбработкаПерепроведения_ВосстановлениеСерий = Ложь;
	НачПериодаТранзит =НачалоДня(Последовательности.Транзит.ПолучитьГраницу().Дата-60*60*24);
	КонПериода=НачалоДня(ТекущаяДата())-1;
	Пока НачПериодаТранзит<=КонПериода Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Приходная.Ссылка
		|ИЗ
		|	Документ.Приходная КАК Приходная
		|ГДЕ
		|	Приходная.Проведен
		|	И Приходная.Дата МЕЖДУ &НачалоДня И &КонецДня
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РазборКоробки.Ссылка
		|ИЗ
		|	Документ.РазборКоробки КАК РазборКоробки
		|ГДЕ
		|	РазборКоробки.Дата МЕЖДУ &НачалоДня И &КонецДня
		|	И РазборКоробки.Проведен";
		
		Запрос.Параметры.Вставить("НачалоДня",НачалоДня(НачПериодаТранзит));
		Запрос.Параметры.Вставить("КонецДня",КонецДня(НачПериодаТранзит));
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий()  Цикл
			об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Попытка
				об.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ЗаписьЖурналаРегистрации("Восстановление транзита",,,,"Ошибка !!!"+ОписаниеОшибки(),);
			КонецПопытки;
		КонецЦикла;
			
		НачПериодаТранзит=НачПериодаТранзит+24*60*60;
		Последовательности.Транзит.УстановитьГраницу(КонецДня(НачПериодаТранзит),);
		ЗаписьЖурналаРегистрации("Восстановление транзита",,,,"подвинулись на "+КонецДня(НачПериодаТранзит),);
	КонецЦикла;
КонецПроцедуры





Процедура ВыполнитьВыгрузкунаСайт() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	
	СтоСПОбмен_Посылки.ВыгрузитьНеВыгруженныеПосылки();
	
	аспПроцедурыОбменаДанными.ОтправитьНеОтправленныеПакеты();
	СтоСПФоновые.Запустить_Выгрузку_100СП();
	аспПроцедурыОбменаДанными.СформироватИОтправитьПакет();
	
	
КонецПроцедуры	



Процедура ПодпискаНаСобытие1ПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	//Если источник
	
КонецПроцедуры

Процедура ЭкспортОценкиПроизводительности() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры


//РегламентноеЗадание
Процедура ЗагрузкаГруппДоставки(ДатаЗагрузки=неопределено) Экспорт
	Если Константы.ИспользоватьТранспортныеКомпании.Получить() Тогда
		Результат	= СтоСПОбмен_ГруппыДоставки.Получить_ПоДате(ДатаЗагрузки);
		
		
		СтоСПОбмен_ГруппыДоставки.ПолучитьГруппыДоставкиСпризнаком_Догрузить();
		
		СтоСПОбмен_ГруппыДоставки.ВыгрузитьИзмененияНаСайт();
		
		СтоСП_ГруппыДоставки.РасчитатьОстаткиПоГруппамДоставки();
		
		Если Результат.ВсегоГруппОбработано>0  Тогда
			ПараметрыСеанса.ЗапуститьУчетГруппДоставки=Истина;	
		КонецЕСли;
	КонецЕСли;
КонецПроцедуры	

Процедура ЗагрузкаКурьерской(ДатаЗагрузки=неопределено) Экспорт
	Если Константы.КурьерскаяДоставка.Получить() Тогда
		массГрупп	= СП_КурьерскаяДоставка.Получить_ПоДате(ДатаЗагрузки);
		
		
		СП_КурьерскаяДоставка.ПолучитьДоставкиСпризнаком_Догрузить();
		//	СтоСПОбмен_ГруппыДоставки.ВыгрузитьИзмененияНаСайт();
		
		//СтоСП_ГруппыДоставки.РасчитатьОстаткиПоГруппамДоставки();	
		//Если массГрупп.Количество()>0  Тогда
		//	ПараметрыСеанса.ЗапуститьУчетГруппДоставки=Истина;	
		//КонецЕСли;	
	КонецЕсли;
КонецПроцедуры	




Процедура ОтчетПоБесплатнойВыдаче_Отправить_РегЗадание() Экспорт
	отправлятьОтчет = Константы.БесплатнаяВыдачаОтправлятьОтчет.Получить() или Константы.РазборНаЕРЦОтправлятьОтчет.Получить();
	
	Если не отправлятьОтчет Тогда Возврат; КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтчетБухгалтеру.Дата КАК ПериодОтчета,
		|	ОтчетБухгалтеру.Ссылка КАК Документ,
		|	ОтчетБухгалтеру.Проведен
		|ИЗ
		|	Документ.ОтчетБухгалтеру КАК ОтчетБухгалтеру
		|ГДЕ
		|	ОтчетБухгалтеру.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода";
	Запрос.УстановитьПараметр("НачалоПериода", 		КонецМесяца(НачалоГода(ТекущаяДата())-1));
	Запрос.УстановитьПараметр("ОкончаниеПериода", 	КонецГода(ТекущаяДата()));
	РезультатЗапроса 		= Запрос.Выполнить();
	тзСформированныеОтчеты 	= РезультатЗапроса.Выгрузить();  

	массНеПроведенныеОтчеты = тзСформированныеОтчеты.НайтиСтроки(новый Структура("Проведен",Ложь));

	Для Каждого элем Из массНеПроведенныеОтчеты Цикл
		док = элем.Документ.ПолучитьОбъект();
		док.СохранитьОтправитьФайлыОтчетов(док.Дата);
		Попытка
			док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ДатаОтчета = КонецМесяца(НачалоГода(ТекущаяДата())-1);
	Пока ДатаОтчета < ТекущаяДата()  Цикл 
		массСтрок = тзСформированныеОтчеты.НайтиСтроки(новый Структура("ПериодОтчета",ДатаОтчета));
		Если массСтрок.Количество() = 0 Тогда
			новыйДокумент = Документы.ОтчетБухгалтеру.СоздатьДокумент();
			новыйДокумент.СохранитьОтправитьФайлыОтчетов(ДатаОтчета);
			Попытка
				новыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
			КонецПопытки;
		КонецЕсли;
		ДатаОтчета = КонецМесяца(ДатаОтчета+1);
	КонецЦикла;
КонецПроцедуры	



#КонецОбласти
