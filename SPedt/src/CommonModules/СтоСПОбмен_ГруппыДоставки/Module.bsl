Процедура УдалитьЗаказыИзНеПравильныхГрупп()  Экспорт
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Коробки.Ссылка КАК ГруппаДоставки,
		|	Коробки.ТочкаНазначения КАК ТочкаНазначения,
		|	Коробки.ДатаМодификации КАК ДатаМодификации
		|ПОМЕСТИТЬ ОтборКоробок
		|ИЗ
		|	Справочник.Коробки КАК Коробки
		|ГДЕ
		|	Коробки.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
		|	И Коробки.ТочкаНазначения.Код <> ""0100""
		|	И Коробки.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForOrders)
		|	И Коробки.ДатаМодификации <= &ДатаМодификации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоробкиСостав.Ссылка КАК ГруппаДоставки,
		|	КоробкиСостав.НомерСтроки КАК НомерСтроки,
		|	КоробкиСостав.Покупка КАК Покупка,
		|	КоробкиСостав.Участник КАК Участник,
		|	КоробкиСостав.Исключить КАК Исключить,
		|	КоробкиСостав.Удалить КАК Удалить,
		|	КоробкиСостав.СообщениеУдаления КАК СообщениеУдаления,
		|	КоробкиСостав.Поступило КАК Поступило,
		|	КоробкиСостав.Цена КАК Цена,
		|	КоробкиСостав.КодЗаказа КАК КодЗаказа
		|ИЗ
		|	Справочник.Коробки.Состав КАК КоробкиСостав
		|ГДЕ
		|	КоробкиСостав.Ссылка В
		|			(ВЫБРАТЬ
		|				ОтборКоробок.ГруппаДоставки КАК ГруппаДоставки
		|			ИЗ
		|				ОтборКоробок КАК ОтборКоробок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборКоробок.ГруппаДоставки КАК ГруппаДоставки,
		|	ОтборКоробок.ТочкаНазначения КАК ТочкаНазначения,
		|	ОтборКоробок.ДатаМодификации КАК ДатаМодификации
		|ИЗ
		|	ОтборКоробок КАК ОтборКоробок
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаМодификации";

	Запрос.Параметры.Вставить("ДатаМодификации", Дата(2020,12,31));
	Пакет = Запрос.ВыполнитьПакет();
	РезультатЗапроса = Пакет[1];
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	таблицаУдаления = Документы.ЗапросыГруппДоставки.ТаблицаУдаления();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		новаяСтрока = таблицаУдаления.добавить();
		ЗаполнитьЗначенияСвойств(новаяСтрока, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	СтоСПОбмен_ГруппыДоставки.УдалитьЗаказы(таблицаУдаления, "Очистка не правильных групп.ПВ не ТК");
	РезультатГруппы = Пакет[2];
	
	СписокГрупп = новый СписокЗначений;
	СписокГрупп.ЗагрузитьЗначения(РезультатГруппы.выгрузить().ВыгрузитьКолонку("ГруппаДоставки"));
	
	СтоСПОбмен_ГруппыДоставки.Получить_ПоКодам(СписокГрупп);

	
	
	


КонецПроцедуры


#Область ФормированиеГруппПоДаннымСайта

Функция ПолучитьТаблицуСоставаГруппы() 
	табл = новый ТаблицаЗначений;
	
	табл.КОлонки.Добавить("КодПокупки" , 				новый ОписаниеТипов("Число"));
	табл.КОлонки.Добавить("КодКоробки" , 				новый ОписаниеТипов("Строка"));
	табл.КОлонки.Добавить("КодУчастника" , 				новый ОписаниеТипов("Число"));
	табл.КОлонки.Добавить("КодЗаказа" , 				новый ОписаниеТипов("Строка"));
	табл.КОлонки.Добавить("ТипПокупки" , 				новый ОписаниеТипов("Строка"));
	табл.КОлонки.Добавить("Цена" , 						новый ОписаниеТипов("Число"));
	
	//табл.Колонки.Добавить("Группа", новый ОписаниеТипов("СправочникСсылка.Коробки"));
	//табл.КОлонки.Добавить("Покупка" , 				новый ОписаниеТипов("СправочникСсылка.Покупки"));
	//табл.КОлонки.Добавить("Участник" , 				новый ОписаниеТипов("СправочникСсылка.Участники"));
	Возврат табл;
КонецФункции	

Функция ПолучитьТоблицуГруппы() 
	ТЗ = новый ТаблицаЗначений;
	
	ТЗ.КОлонки.Добавить("КодКоробки" , 				новый ОписаниеТипов("Строка"));
	ТЗ.КОлонки.Добавить("КодУчастника" ,			новый ОписаниеТипов("Число"));	
	ТЗ.КОлонки.Добавить("КодТочкиСбора" , 			новый ОписаниеТипов("Строка"));
	ТЗ.КОлонки.Добавить("КодТочкиНазначения" , 		новый ОписаниеТипов("Строка"));
	
	ТЗ.КОлонки.Добавить("МетодОплаты" , 			новый ОписаниеТипов("ПеречислениеСсылка.МетодыОплаты"));
	ТЗ.КОлонки.Добавить("СрокХраненияГруппы" , 		новый ОписаниеТипов("Число"));
	ТЗ.КОлонки.Добавить("СтоимостьВыбралУчастник" , новый ОписаниеТипов("Число"));
	ТЗ.КОлонки.Добавить("ВидРПОВыбралУчастник" , 	новый ОписаниеТипов("Строка"));
	ТЗ.КОлонки.Добавить("СтатусГруппыДоставки" , 	новый ОписаниеТипов("ПеречислениеСсылка.СтатусыГруппыДоставки"));
	ТЗ.КОлонки.Добавить("МинДатаДоставки" , 		новый ОписаниеТипов("Дата"));
	ТЗ.КОлонки.Добавить("МаксДатаДоставки" , 		новый ОписаниеТипов("Дата"));
	ТЗ.КОлонки.Добавить("ДатаСоздания" , 			новый ОписаниеТипов("Дата"));
	ТЗ.КОлонки.Добавить("ДатаМодификации" , 		новый ОписаниеТипов("Дата"));
	ТЗ.КОлонки.Добавить("РасчетнаяСтоимость" , 		новый ОписаниеТипов("Число"));
	ТЗ.КОлонки.Добавить("СуммаДоставкиОплаченная" ,	новый ОписаниеТипов("Число"));
	
	
	//ТЗ.Колонки.Добавить("Группа", 					новый ОписаниеТипов("СправочникСсылка.Коробки"));
	//ТЗ.Колонки.Добавить("Участник", 				новый ОписаниеТипов("СправочникСсылка.участники"));
	//ТЗ.Колонки.Добавить("ТочкаСбора", 				новый ОписаниеТипов("СправочникСсылка.ТочкиРаздачи"));
	//ТЗ.Колонки.Добавить("ТочкаНазначения", 			новый ОписаниеТипов("СправочникСсылка.ТочкиРаздачи"));
	
	
	Возврат ТЗ;
КонецФункции

Функция СозданиеГруппПоДаннымСайта(СписокXDTO,СвойстваДаты=неопределено) Экспорт
	//Тип_Списка=СписокXDTO.ВладеющееСвойство.Тип;
	Начало = ТекущаяДата();
	таблицаГруппы			= ПолучитьТоблицуГруппы(); 
	таблицаСоставаГруппы 	= ПолучитьТаблицуСоставаГруппы();
	
	Для каждого элем из СписокXDTO Цикл
		КодТочкиНазначения		= ?(элем .recipient_code = "", "0000",Формат(Число(элем .recipient_code),"ЧЦ=4; ЧН=0; ЧВН=; ЧГ=0"));
		Если КодТочкиНазначения = "0100" Тогда Продолжить; КонецЕсли; //Курьерская доставка
		
		
		стр_тз							=	таблицаГруппы.Добавить();
		стр_тз.КодКоробки				= "гд_" + Формат(Число(элем.id), "ЧЦ=11; ЧВН=; ЧГ=0");
	///	стр_тз.Группа 					= СП_РаботаСоСправочниками.ПолучитьКоробкуПо_Коду(стр_тз.КодКоробки);
		стр_тз.КодТочкиСбора			= Формат(Число(элем .distributor_code),"ЧЦ=4; ЧН=0; ЧВН=; ЧГ=0");
		стр_тз.КодТочкиНазначения		= КодТочкиНазначения;
		стр_тз.КодУчастника				= ?(элем.uid = "", 0, Число(элем.uid));
		
		стр_тз.МетодОплаты 				= ?(элем.selectedDeliveryMethod.type = Неопределено,Перечисления.МетодыОплаты.ПустаяСсылка(), Перечисления.МетодыОплаты[элем.selectedDeliveryMethod.type]);
		стр_тз.СрокХраненияГруппы 		= ?(элем.date_range_limit = "",0,Число(элем.date_range_limit));
		стр_тз.СтоимостьВыбралУчастник 	= ?(	элем.selectedDeliveryMethod.type = Неопределено,0,Число(элем.selectedDeliveryMethod.price));
		стр_тз.ВидРПОВыбралУчастник		= ?(	элем.selectedDeliveryMethod.name = Неопределено,"", элем.selectedDeliveryMethod.name);
		стр_тз.МинДатаДоставки 			= НачалоДня(СтоСПОбмен_Общий.ДатаИзСтроки(элем.min_delivery_date));
		стр_тз.МаксДатаДоставки 		= НачалоДня(СтоСПОбмен_Общий.ДатаИзСтроки(элем.max_delivery_date));
		стр_тз.ДатаСоздания 			= СтоСПОбмен_Общий.ДатаИзСтроки(элем.created_at);
		стр_тз.ДатаМодификации	 		= СтоСПОбмен_Общий.ДатаИзСтроки(элем.updated_at);
		стр_тз.РасчетнаяСтоимость		= ?(элем.deliveryGroupPrice = "", 0, Число(элем.deliveryGroupPrice));
		стр_тз.СуммаДоставкиОплаченная	= ?(элем.deliveryGroupPaidSum = "", 0, Число(элем.deliveryGroupPaidSum));
		
		Если элем.orders.order.Количество() = 0 Тогда
			стр_тз.СтатусГруппыДоставки	= Перечисления.СтатусыГруппыДоставки.empty;
		Иначе
			стр_тз.СтатусГруппыДоставки	= Перечисления.СтатусыГруппыДоставки[элем.status];
			
			Для каждого зкз из элем.orders.order Цикл
				строкаСостава 			 	= таблицаСоставаГруппы.Добавить();
				строкаСостава.КодКоробки	= стр_тз.КодКоробки;
				строкаСостава.КодЗаказа 	= зкз.orderId;
				строкаСостава.ТипПОкупки 	= зкз.orderType;
				Если зкз.orderType = "bulletin" Тогда
					КодПокупки 	= ?(зкз.orderId = "", 0, Число(зкз.orderId));
				Иначе	
					КодПокупки 	= ?(зкз.pid = "", 0, Число(зкз.pid));
				КонецЕсли;	
				строкаСостава.КодПокупки 	= КодПокупки;
				строкаСостава.КодУчастника 	= стр_тз.КодУчастника;
				строкаСостава.Цена  		= Число(зкз.payment_sum);
				
				//строкаСостава.Покупка	= СП_РаботаСоСправочниками.ПолучитьЗаказПоXDTO(зкз,"orderType");
				//строкаСостава.Участник	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(зкз.uid);
				
			КонецЦикла;	
		КонецЕсли;
		
		//Если тз.Колонки.Найти("groupCode")<> Неопределено и стр_тз.groupCode<> "" Тогда
		//	стр_тз.groupCode = Формат(Число(стр_тз.groupCode),"ЧЦ=8; ЧВН=; ЧГ=0");
		//КонецЕсли;	
		Если СвойстваДаты =Неопределено тогда Продолжить; КонецЕсли;
		Для Каждого св из СвойстваДаты Цикл
			стр_тз[св]=СтоСПОбмен_Общий.ДатаИзСтроки(элем[св]);
		КонецЦикла;	
	КонецЦикла;
	Результат = СозданиеГруппПоДаннымСайта_Завершение(таблицаГруппы, таблицаСоставаГруппы);

	Возврат Результат;           
КонецФункции

функция СозданиеГруппПоДаннымСайта_Завершение(тзИзФайла, таблицаСоставаГруппы) Экспорт
	Результат = Новый Структура();
	Начало = ТекущаяДата();
	Конец = ТекущаяДата();	
	Результат = Новый Структура("Начало, Конец, ПолученоЭлементов, Ошибок", Начало, Конец, 0, 0);	
	Ошибок = 0;
	Если Не ЗначениеЗаполнено(тзИзФайла) Или тзИзФайла.количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

// Формирование новых элементов справочников	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тзФ.ДатаСоздания КАК ДатаСоздания,
	|	тзФ.ДатаМодификации КАК ДатаМодификации,
	|	тзФ.МинДатаДоставки КАК МинДатаДоставки,
	|	тзФ.МаксДатаДоставки КАК МаксДатаДоставки,
	|	тзФ.СрокХраненияГруппы КАК СрокХраненияГруппы,
	|	тзФ.СтоимостьВыбралУчастник КАК СтоимостьВыбралУчастник,
	|	тзФ.СтатусГруппыДоставки КАК СтатусГруппыДоставки,
	|	тзФ.ВидРПОВыбралУчастник КАК ВидРПОВыбралУчастник,
	|	тзФ.МетодОплаты КАК МетодОплаты,
	|	тзФ.КодУчастника КАК КодУчастника,
	|	тзФ.КодТочкиНазначения КАК КодТочкиНазначения,
	|	тзФ.КодКоробки КАК КодКоробки,
	|	тзФ.СуммаДоставкиОплаченная КАК СуммаДоставкиОплаченная,
	|	тзФ.КодТочкиСбора КАК КодТочкиСбора
	|ПОМЕСТИТЬ Ф
	|ИЗ
	|	&тзФ КАК тзФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тзФСостав.Цена КАК Цена,
	|	тзФСостав.КодЗаказа КАК КодЗаказа,
	|	тзФСостав.КодПокупки КАК КодПокупки,
	|	тзФСостав.ТипПокупки КАК ТипПокупки,
	|	тзФСостав.КодКоробки КАК КодКоробки
	|ПОМЕСТИТЬ ФСостав
	|ИЗ
	|	&тзФСостав КАК тзФСостав
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ф.КодУчастника КАК КодУчастника,
	|	ВЫРАЗИТЬ(Ф.КодТочкиНазначения КАК СТРОКА(4)) КАК КодТочкиНазначения,
	|	ВЫРАЗИТЬ(Ф.КодТочкиСбора КАК СТРОКА(4)) КАК КодТочкиСбора,
	|	ВЫРАЗИТЬ(Ф.КодКоробки КАК СТРОКА(25)) КАК КодКоробки,
	|	ЕСТЬNULL(ТочкиРаздачи.Ссылка, ЗНАЧЕНИЕ(Справочник.точкиРаздачи.ПУстаяССылка)) КАК ТочкаНазначения,
	|	ЕСТЬNULL(Коробки.Ссылка, ЗНАЧЕНИЕ(Справочник.Коробки.ПУстаяССылка)) КАК Группа,
	|	ЕСТЬNULL(ТочкиРаздачи1.Ссылка, ЗНАЧЕНИЕ(Справочник.точкиРаздачи.ПУстаяССылка)) КАК ТочкаСбора,
	|	ЕСТЬNULL(Участники.Ссылка, ЗНАЧЕНИЕ(Справочник.Участники.ПУстаяССылка)) КАК УчастникГД
	|ПОМЕСТИТЬ ВсеГруппы
	|ИЗ
	|	Ф КАК Ф
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиРаздачи КАК ТочкиРаздачи
	|		ПО ((ВЫРАЗИТЬ(Ф.КодТочкиНазначения КАК СТРОКА(4))) = ТочкиРаздачи.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиРаздачи КАК ТочкиРаздачи1
	|		ПО ((ВЫРАЗИТЬ(Ф.КодТочкиСбора КАК СТРОКА(4))) = ТочкиРаздачи1.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Коробки КАК Коробки
	|		ПО ((ВЫРАЗИТЬ(Ф.КодКоробки КАК СТРОКА(25))) = Коробки.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Участники КАК Участники
	|		ПО Ф.КодУчастника = Участники.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФСостав.Цена КАК Цена,
	|	ФСостав.КодЗаказа КАК КодЗаказа,
	|	ФСостав.КодПокупки КАК КодПокупки,
	|	Выразить(ФСостав.ТипПокупки как строка(8)) КАК ТипПокупки,
	|	Выбор когда  (Выразить(ФСостав.ТипПокупки как строка(8)) = ""bulletin"") Тогда
	|       ЕСТЬNULL(Пристрой.Ссылка, ЗНАЧЕНИЕ(Справочник.Пристрой.ПУстаяССылка))
	|	Иначе
	|		ЕСТЬNULL(Покупки.Ссылка, ЗНАЧЕНИЕ(Справочник.Покупки.ПУстаяССылка)) Конец КАК Покупка
	|ПОМЕСТИТЬ Состав
	|ИЗ
	|	ФСостав КАК ФСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Покупки КАК Покупки
	|		ПО (Выразить(ФСостав.ТипПокупки как строка(2)) = ""sp"") и ФСостав.КодПокупки = Покупки.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пристрой КАК Пристрой
	|		ПО (Выразить(ФСостав.ТипПокупки как строка(8)) = ""bulletin"") и Выразить(ФСостав.КодЗаказа как Строка(12)) = Пристрой.Код
	
	|			
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеГруппы.КодТочкиНазначения КАК КодТочки
	|ПОМЕСТИТЬ сборПВ
	|ИЗ
	|	ВсеГруппы КАК ВсеГруппы
	|ГДЕ
	|	ВсеГруппы.ТочкаНазначения = ЗНАЧЕНИЕ(Справочник.точкиРаздачи.ПУстаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеГруппы.КодТочкиНазначения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеГруппы.КодТочкиСбора
	|ИЗ
	|	ВсеГруппы КАК ВсеГруппы
	|ГДЕ
	|	ВсеГруппы.ТочкаСбора = ЗНАЧЕНИЕ(Справочник.точкиРаздачи.ПУстаяССылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеГруппы.КодУчастника КАК КодУчастника
	|ИЗ
	|	ВсеГруппы КАК ВсеГруппы
	|ГДЕ
	|	ВсеГруппы.УчастникГД = ЗНАЧЕНИЕ(Справочник.Участники.ПУстаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеГруппы.КодУчастника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	сборПВ.КодТочки КАК КодТочки
	|ИЗ
	|	сборПВ КАК сборПВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеГруппы.КодКоробки КАК КодКоробки
	|ИЗ
	|	ВсеГруппы КАК ВсеГруппы
	|ГДЕ
	|	ВсеГруппы.Группа = ЗНАЧЕНИЕ(Справочник.Коробки.ПУстаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеГруппы.КодКоробки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выразить(Состав.КодЗаказа как Строка(12)) КАК КодЗаказа,
	|	Состав.ТипПокупки КАК ТипПокупки,
	|	Состав.КодПокупки КАК КодПокупки
	|ИЗ
	|	Состав КАК Состав
	|ГДЕ
	|	Состав.Покупка = ЗНАЧЕНИЕ(Справочник.Покупки.ПУстаяССылка)
	|	или Состав.Покупка = ЗНАЧЕНИЕ(Справочник.Пристрой.ПУстаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|Выразить(Состав.КодЗаказа как Строка(12)),
	|	Состав.ТипПокупки, 
	|	Состав.КодПокупки";	
	Запрос.Параметры.Вставить("тзФ",тзИзФайла);
	Запрос.Параметры.Вставить("тзФСостав",таблицаСоставаГруппы);
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	ВыборкаУчастники = РезультатПакет[5].Выбрать();
	НовыеУчастники = ВыборкаУчастники.Количество();
	Результат.Вставить("НовыеУчастники",НовыеУчастники);
	
	Пока ВыборкаУчастники.Следующий() Цикл
		СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(ВыборкаУчастники.КодУчастника);	
	КонецЦикла;
	
	ВыборкаПунктыВыдачи = РезультатПакет[6].Выбрать();
	новыйПунктыВыдачи = ВыборкаПунктыВыдачи.Количество();
	Результат.Вставить("новыйПунктыВыдачи",новыйПунктыВыдачи);
	Пока ВыборкаПунктыВыдачи.Следующий() Цикл
		СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(ВыборкаПунктыВыдачи.КодТочки);	
	КонецЦикла;	
	
	ВыборкаКоробки = РезультатПакет[7].Выбрать();
	новыеКоробки = ВыборкаКоробки.Количество();
	Результат.Вставить("новыеКоробки",новыеКоробки);
	
	Пока ВыборкаКоробки.Следующий() Цикл
		СП_РаботаСоСправочниками.ПолучитьКоробкуПо_Коду(ВыборкаКоробки.КодКоробки, Перечисления.ВидыСтикеров.ГруппаДоставки);	
	КонецЦикла;		
	
	ВыборкаПокупки = РезультатПакет[8].Выбрать();
	новыеПокупки = ВыборкаПокупки.Количество();
	Результат.Вставить("новыеПокупки",новыеПокупки);
	Пока ВыборкаПокупки.Следующий() Цикл
		Если ВыборкаПокупки.ТипПокупки = "sp" тогда
			СП_РаботаСоСправочниками.ПолучитьПокупкуПо_Коду(ВыборкаПокупки.КодПокупки);	
		Иначе	
			СП_РаботаСоСправочниками.ПолучитьПристройПо_Коду(ВыборкаПокупки.КодПокупки);	
		КонецЕсли;	
	КонецЦикла;		
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Ф.ДатаСоздания КАК ДатаСоздания,
	|	Ф.ДатаМодификации КАК ДатаМодификации,
	|	Ф.МинДатаДоставки КАК МинДатаДоставки,
	|	Ф.МаксДатаДоставки КАК МаксДатаДоставки,
	|	Ф.СрокХраненияГруппы КАК СрокХраненияГруппы,
	|	Ф.СтоимостьВыбралУчастник КАК СтоимостьВыбралУчастник,
	|	Ф.СтатусГруппыДоставки КАК СтатусГруппыДоставки,
	|	Ф.СуммаДоставкиОплаченная КАК СуммаДоставкиОплаченная,
	|	Выразить(Ф.ВидРПОВыбралУчастник как Строка(100)) КАК ВидРПОВыбралУчастник,
	|	Ф.МетодОплаты КАК МетодОплаты,
	|	ЕСТЬNULL(ТочкиРаздачи.Ссылка, ЗНАЧЕНИЕ(Справочник.точкиРаздачи.ПУстаяССылка)) КАК ТочкаНазначения,
	|	ЕСТЬNULL(ТочкиРаздачи1.Ссылка, ЗНАЧЕНИЕ(Справочник.точкиРаздачи.ПУстаяССылка)) КАК ТочкаСбора,
	|	ЕСТЬNULL(Коробки.Ссылка, ЗНАЧЕНИЕ(Справочник.Коробки.ПУстаяССылка)) КАК Группа,
	|	ЕСТЬNULL(Участники.Ссылка, ЗНАЧЕНИЕ(Справочник.Участники.ПУстаяССылка)) КАК УчастникГД
	|ПОМЕСТИТЬ ГруппыИтог
	|ИЗ
	|	Ф КАК Ф
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиРаздачи КАК ТочкиРаздачи
	|		ПО ((ВЫРАЗИТЬ(Ф.КодТочкиНазначения КАК СТРОКА(4))) = ТочкиРаздачи.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиРаздачи КАК ТочкиРаздачи1
	|		ПО ((ВЫРАЗИТЬ(Ф.КодТочкиСбора КАК СТРОКА(4))) = ТочкиРаздачи1.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Коробки КАК Коробки
	|		ПО ((ВЫРАЗИТЬ(Ф.КодКоробки КАК СТРОКА(25))) = Коробки.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Участники КАК Участники
	|		ПО Ф.КодУчастника = Участники.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФСостав.Цена КАК Цена,
	|	ВЫРАЗИТЬ(ФСостав.КодЗаказа КАК СТРОКА(12)) КАК КодЗаказа,
	|	ФСостав.КодПокупки КАК КодПокупки,
	|	ФСостав.ТипПокупки КАК ТипПокупки,
	|	ФСостав.КодКоробки КАК КодКоробки,
	|	ЕСТЬNULL(Коробки.Ссылка, ЗНАЧЕНИЕ(Справочник.Коробки.ПУстаяССылка)) КАК Группа,
	|	Выбор
	|		когда (Выразить(ФСостав.ТипПокупки как строка(8)) = ""bulletin"")
	|			Тогда ЕСТЬNULL(Пристрой.Ссылка, ЗНАЧЕНИЕ(Справочник.Пристрой.ПУстаяССылка))
	|		Иначе ЕСТЬNULL(Покупки.Ссылка, ЗНАЧЕНИЕ(Справочник.Покупки.ПУстаяССылка))
	|	Конец КАК Покупка
	|ПОМЕСТИТЬ СоставИтог
	|ИЗ
	|	ФСостав КАК ФСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Покупки КАК Покупки
	|		ПО (Выразить(ФСостав.ТипПокупки как строка(2)) = ""sp"")
	|		и ФСостав.КодПокупки = Покупки.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пристрой КАК Пристрой
	|		ПО (Выразить(ФСостав.ТипПокупки как строка(8)) = ""bulletin"")
	|		и Выразить(ФСостав.КодЗаказа как Строка(12)) = Пристрой.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Коробки КАК Коробки
	|		ПО ((ВЫРАЗИТЬ(ФСостав.КодКоробки КАК СТРОКА(25))) = Коробки.Код)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вз.Группа КАК Группа,
	|	вз.КодЗаказа КАК КодЗаказа,
	|	СУММА(вз.ЦенаВБазе) КАК ЦенаВБазе,
	|	СУММА(вз.ЦенаНаСайте) КАК ЦенаНаСайте,
	|	СУММА(вз.КоличествоВБазе) КАК КоличествоВБазе,
	|	СУММА(вз.КоличествоНаСайте) КАК КоличествоНаСайте
	|ПОМЕСТИТЬ Сравнение
	|ИЗ
	|	(ВЫБРАТЬ
	|		КоробкиСостав.Ссылка КАК Группа,
	|		КоробкиСостав.КодЗаказа КАК КодЗаказа,
	|		КоробкиСостав.Цена КАК ЦенаВБазе,
	|		0 КАК ЦенаНаСайте,
	|		1 КАК КоличествоВБазе,
	|		0 КАК КоличествоНаСайте
	|	ИЗ
	|		Справочник.Коробки.Состав КАК КоробкиСостав
	|	ГДЕ
	|		КоробкиСостав.Ссылка В
	|			(ВЫБРАТЬ
	|				ГруппыИтог.Группа КАК Группа
	|			ИЗ
	|				ГруппыИтог КАК ГруппыИтог)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		СоставИтог.Группа,
	|		СоставИтог.КодЗаказа,
	|		0,
	|		СоставИтог.Цена,
	|		0,
	|		1
	|	ИЗ
	|		СоставИтог КАК СоставИтог) КАК вз
	|СГРУППИРОВАТЬ ПО
	|	вз.КодЗаказа,
	|	вз.Группа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сравнение.Группа КАК Группа,
	|	Сравнение.КодЗаказа КАК КодЗаказа,
	|	Сравнение.ЦенаВБазе КАК ЦенаВБазе,
	|	Сравнение.ЦенаНаСайте КАК ЦенаНаСайте,
	|	Сравнение.КоличествоВБазе КАК КоличествоВБазе,
	|	Сравнение.КоличествоНаСайте КАК КоличествоНаСайте
	|ПОМЕСТИТЬ Сравнение2
	|ИЗ
	|	Сравнение КАК Сравнение
	|ГДЕ
	|	(Сравнение.ЦенаВБазе <> Сравнение.ЦенаНаСайте
	|	ИЛИ Сравнение.КоличествоВБазе <> Сравнение.КоличествоНаСайте)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сравнение2.Группа КАК Группа
	|ПОМЕСТИТЬ СоставИзменился
	|ИЗ
	|	Сравнение2 КАК Сравнение2
	|СГРУППИРОВАТЬ ПО
	|	Сравнение2.Группа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыИтог.ДатаСоздания КАК ДатаСоздания,
	|	ГруппыИтог.ДатаМодификации КАК ДатаМодификации,
	|	ГруппыИтог.МинДатаДоставки КАК МинДатаДоставки,
	|	ГруппыИтог.МаксДатаДоставки КАК МаксДатаДоставки,
	|	ГруппыИтог.СрокХраненияГруппы КАК СрокХраненияГруппы,
	|	ГруппыИтог.СтоимостьВыбралУчастник КАК СтоимостьВыбралУчастник,
	|	ГруппыИтог.СтатусГруппыДоставки КАК СтатусГруппыДоставки,
	|	ГруппыИтог.ВидРПОВыбралУчастник КАК ВидРПОВыбралУчастник,
	|	ГруппыИтог.СуммаДоставкиОплаченная КАК СуммаДоставкиОплаченная,
	|	ГруппыИтог.МетодОплаты КАК МетодОплаты,
	|	ГруппыИтог.ТочкаНазначения КАК ТочкаНазначения,
	|	ГруппыИтог.ТочкаСбора КАК ТочкаСбора,
	|	ГруппыИтог.Группа КАК Группа,
	|	ГруппыИтог.УчастникГД КАК УчастникГД,
	|	ВЫБОР
	|		КОГДА ГруппыИтог.Группа.ВидСтикера <> ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
	|		ИЛИ ГруппыИтог.Группа.СтатусГруппыДоставки <> ГруппыИтог.СтатусГруппыДоставки
	|		ИЛИ ГруппыИтог.Группа.ТочкаСбора <> ГруппыИтог.ТочкаСбора
	|		ИЛИ ГруппыИтог.Группа.ТочкаНазначения <> ГруппыИтог.ТочкаНазначения
	|		ИЛИ ГруппыИтог.Группа.УчастникГД <> ГруппыИтог.УчастникГД
	|		ИЛИ ГруппыИтог.Группа.МинДатаДоставки <> ГруппыИтог.МинДатаДоставки
	|		ИЛИ ГруппыИтог.Группа.МаксДатаДоставки <> ГруппыИтог.МаксДатаДоставки
	|		ИЛИ ГруппыИтог.Группа.СрокХраненияГруппы <> ГруппыИтог.СрокХраненияГруппы
	|		ИЛИ ГруппыИтог.Группа.МетодОплаты <> ГруппыИтог.МетодОплаты
	|		ИЛИ ГруппыИтог.Группа.СтоимостьВыбралУчастник <> ГруппыИтог.СтоимостьВыбралУчастник
	|		ИЛИ ГруппыИтог.Группа.ВидРПОВыбралУчастник <> ГруппыИтог.ВидРПОВыбралУчастник
	|		ИЛИ ГруппыИтог.Группа.СуммаДоставкиОплаченная <> ГруппыИтог.СуммаДоставкиОплаченная
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ШапкаИзменилась,
	|	ВЫБОР
	|		КОГДА СоставИзменился.Группа ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СоставИзменился
	|ПОМЕСТИТЬ ГруппыИтог2
	|ИЗ
	|	ГруппыИтог КАК ГруппыИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставИзменился КАК СоставИзменился
	|		ПО ГруппыИтог.Группа = СоставИзменился.Группа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыИтог2.ДатаСоздания КАК ДатаСоздания,
	|	ГруппыИтог2.ДатаМодификации КАК ДатаМодификации,
	|	ГруппыИтог2.МинДатаДоставки КАК МинДатаДоставки,
	|	ГруппыИтог2.МаксДатаДоставки КАК МаксДатаДоставки,
	|	ГруппыИтог2.СрокХраненияГруппы КАК СрокХраненияГруппы,
	|	ГруппыИтог2.СтоимостьВыбралУчастник КАК СтоимостьВыбралУчастник,
	|	ГруппыИтог2.СтатусГруппыДоставки КАК СтатусГруппыДоставки,
	|	ГруппыИтог2.ВидРПОВыбралУчастник КАК ВидРПОВыбралУчастник,
	|	ГруппыИтог2.СуммаДоставкиОплаченная КАК СуммаДоставкиОплаченная,
	|	ГруппыИтог2.МетодОплаты КАК МетодОплаты,
	|	ГруппыИтог2.ТочкаНазначения КАК ТочкаНазначения,
	|	ГруппыИтог2.ТочкаСбора КАК ТочкаСбора,
	|	ГруппыИтог2.Группа КАК Группа,
	|	ГруппыИтог2.УчастникГД КАК УчастникГД,
	|	ГруппыИтог2.ШапкаИзменилась КАК ШапкаИзменилась,
	|	ГруппыИтог2.СоставИзменился КАК СоставИзменился
	|ИЗ
	|	ГруппыИтог2 КАК ГруппыИтог2
	|ГДЕ
	|	ГруппыИтог2.ШапкаИзменилась
	|	ИЛИ ГруппыИтог2.СоставИзменился
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставИтог.Цена КАК Цена,
	|	СоставИтог.КодЗаказа КАК КодЗаказа,
	|	СоставИтог.КодПокупки КАК КодПокупки,
	|	СоставИтог.ТипПокупки КАК ТипПокупки,
	|	СоставИтог.КодКоробки КАК КодКоробки,
	|	СоставИтог.Группа КАК Группа,
	|	СоставИтог.Покупка КАК Покупка
	|ИЗ
	|	СоставИтог КАК СоставИтог
	|ГДЕ
	|	СоставИтог.Группа В
	|		(ВЫБРАТЬ
	|			СоставИзменился.Группа КАК Группа
	|		ИЗ
	|			СоставИзменился КАК СоставИзменился)"; 
	 
		РезультатПакет = Запрос.ВыполнитьПакет();
		ОбработанныеГруппы = новый Массив;
		
		ВыборкаГруппы = РезультатПакет[6].Выбрать();
		ВыборкаСостав = РезультатПакет[7].Выбрать();
		ВсегоГруппОбработано = ВыборкаГруппы.Количество();
		Результат.Вставить("ВсегоГруппОбработано",ВсегоГруппОбработано);
		
		Пока ВыборкаГруппы.Следующий() Цикл
			
				параметрыКоробки	= Новый Структура;
				параметрыКоробки.Вставить("Догрузить", 				Ложь);
				параметрыКоробки.Вставить("ДатаЗагрузки", 			ТекущаяДата());
				параметрыКоробки.Вставить("ДатаСоздания", 			ВыборкаГруппы.ДатаСоздания);
				параметрыКоробки.Вставить("ДатаМодификации", 		ВыборкаГруппы.ДатаМодификации);
				
				Если ВыборкаГруппы.ШапкаИзменилась Тогда
					параметрыКоробки.Вставить("ВидСтикера", 			Перечисления.ВидыСтикеров.ГруппаДоставки);
					параметрыКоробки.Вставить("СтатусГруппыДоставки", 	ВыборкаГруппы.СтатусГруппыДоставки);
					параметрыКоробки.Вставить("ТочкаСбора", 			ВыборкаГруппы.ТочкаСбора);
					параметрыКоробки.Вставить("ТочкаНазначения", 		ВыборкаГруппы.ТочкаНазначения);
					параметрыКоробки.Вставить("УчастникГД", 			ВыборкаГруппы.УчастникГД);
					параметрыКоробки.Вставить("МинДатаДоставки", 		ВыборкаГруппы.МинДатаДоставки);
					параметрыКоробки.Вставить("МаксДатаДоставки", 		ВыборкаГруппы.МаксДатаДоставки);
					параметрыКоробки.Вставить("СрокХраненияГруппы", 	ВыборкаГруппы.СрокХраненияГруппы);
					параметрыКоробки.Вставить("МетодОплаты", 			ВыборкаГруппы.МетодОплаты);
					параметрыКоробки.Вставить("СтоимостьВыбралУчастник",ВыборкаГруппы.СтоимостьВыбралУчастник);	
					параметрыКоробки.Вставить("ВидРПОВыбралУчастник", 	ВыборкаГруппы.ВидРПОВыбралУчастник);
					параметрыКоробки.Вставить("СуммаДоставкиОплаченная", 	ВыборкаГруппы.СуммаДоставкиОплаченная);
				КонецЕсли;
				
				Если ВыборкаГруппы.СоставИзменился Тогда
					Состав = Новый СписокЗначений;
				 	Пока ВыборкаСостав.НайтиСледующий(новый Структура("Группа", ВыборкаГруппы.Группа)) Цикл
						элемСостава = новый Структура("Покупка, Участник,Цена, КодЗаказа");
						ЗаполнитьЗначенияСвойств(элемСостава,ВыборкаСостав);
						элемСостава.Участник = ВыборкаГруппы.УчастникГД;
						Состав.Добавить(элемСостава);
					КонецЦикла;
					ВыборкаСостав.Сбросить();
					параметрыКоробки.Вставить("Состав", 				Состав);
				КОнецЕсли;	

				СП_РаботаСоСправочниками.ОбновитьКоробку(ВыборкаГруппы.Группа, параметрыКоробки);
			    ОбработанныеГруппы.Добавить(ВыборкаГруппы.Группа);
		
			КонецЦикла;
	Результат.Вставить("ОбработанныеГруппы",ОбработанныеГруппы);
	Возврат Результат;	
КонецФункции	

#КонецОбласти





#Область СинхронизацияГрупп

Функция Получить_ПоДате(ДатаЗагрузки	= неопределено) Экспорт
	хмл_отправили 		= СтоСПОбмен_Запрос.ГруппаДоставки_ПоДате(ДатаЗагрузки);
	хмл_получили 		= ПолученныеДанные(хмл_отправили);
	
	результатРазбора 	= Разбор_ПолученныхГрупп(хмл_получили);
	СтоСПОбмен_Общий.УстановитьДатуЗагрузки(Справочники.ПараметрыОбмена.ГруппыДоставки);
	Возврат результатРазбора;
	
	//Если результатРазбора.АвторизацияВыполнена Тогда
	//	
	//	массивТипов = новый Массив();
	//	массивТипов.Добавить("СправочникСсылка.Коробки");
	//	
	//	//кол = результатРазбора.deliveryGroups.Колонки.Добавить("Ссылка",Новый ОписаниеТипов(массивТипов));
	//	//Обновить_ГруппыДоставки_ПоКодуДате(результатРазбора.deliveryGroups);
	//Конецесли;
	
//	массГрупп			= результатРазбора.deliveryGroups.ВыгрузитьКолонку("Ссылка");
	
//	Возврат массГрупп;
КонецФункции

Функция Получить_ПоКодам(КодыГрупп, Интерактивно = Ложь) Экспорт
	Если КодыГрупп.Количество()=0 Тогда Возврат Ложь; КонецЕсли;
	хмл_отправили 	= СтоСПОбмен_Запрос.ГруппаДоставки_ПоКодам(КодыГрупп);
	хмл_получили 	= ПолученныеДанные(хмл_отправили);
	//хмл_получили 	= СтрЗаменить(хмл_получили,"waitForDistributor", "waitForOrders");
	
	результатРазбора = Разбор_ПолученныхГрупп(хмл_получили);
	//Если результатРазбора.АвторизацияВыполнена и Интерактивно = Ложь Тогда
	//	кол = результатРазбора.deliveryGroups.Колонки.Добавить("Ссылка",Новый ОписаниеТипов("СправочникСсылка.Коробки"));
	//	Обновить_ГруппыДоставки_ПоКодуДате(результатРазбора.deliveryGroups);
	//Конецесли;	
	Возврат  результатРазбора.ОбработанныеГруппы;
	
КонецФункции	

Процедура ПолучитьГруппыДоставкиСпризнаком_Догрузить() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Коробки.Ссылка.Код КАК Код
		|ИЗ
		|	Справочник.Коробки КАК Коробки
		|ГДЕ
		|	Коробки.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
		|	И Коробки.Догрузить";
	

	
	РезультатЗапроса = Запрос.Выполнить();
	СписокКодов = новый СписокЗначений;
	СписокКодов.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Код"));
	
	Получить_ПоКодам(СписокКодов);
КонецПроцедуры

Процедура Обновить_ГруппыДоставки_ПоКодуДате(тзГрупп) Экспорт 
	курьерскаяДоставка = тзГрупп.НайтиСтроки(Новый Структура("recipient_code","100"));
	Для каждого элем из курьерскаяДоставка Цикл
		тзГрупп.Удалить(Элем);
		
	КонецЦикла;	
	
	Ошибки		= Неопределено;
	Для каждого стр из тзГрупп Цикл
		Если стр.result="error" Тогда
			ТекстОшибки 	= "При получении с сайта группы Доставки  №"+стр.id+" возникли ошибка:";
			Если стр.message	<> "" Тогда
				ТекстОшибки	= ТекстОшибки + Символы.ПС + стр.message+";";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,"",ТекстОшибки,);
			КонецЕсли
		Иначе	
			КодКоробки	= "гд_" + Формат(Число(стр.id), "ЧЦ=11; ЧВН=; ЧГ=0");
			Если стр.orders.order.Количество() = 0 Тогда
				СтатусГруппыДоставки	= Перечисления.СтатусыГруппыДоставки.empty;
			Иначе
				СтатусГруппыДоставки	= Перечисления.СтатусыГруппыДоставки[стр.status];
			КонецЕсли;
			
			стр.Ссылка	= СП_РаботаСоСправочниками.ПолучитьКоробкуПо_Коду(КодКоробки);
			
			параметрыКоробки	= Новый Структура;
			параметрыКоробки.Вставить("ВидСтикера", 			Перечисления.ВидыСтикеров.ГруппаДоставки);
			параметрыКоробки.Вставить("СтатусГруппыДоставки", 	СтатусГруппыДоставки);
			параметрыКоробки.Вставить("ТочкаСбора", 			СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(стр.distributor_code));
			параметрыКоробки.Вставить("ТочкаНазначения", 		?(	стр.recipient_code = "",
			Справочники.ТочкиРаздачи.ТочкаНеОпределена, 
			СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(стр.recipient_code)));
			параметрыКоробки.Вставить("УчастникГД", 			СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(стр.uid));
			параметрыКоробки.Вставить("МинДатаДоставки", 		НачалоДня(СтоСПОбмен_Общий.ДатаИзСтроки(стр.min_delivery_date)));
			параметрыКоробки.Вставить("МаксДатаДоставки", 		НачалоДня(СтоСПОбмен_Общий.ДатаИзСтроки(стр.max_delivery_date)));
			параметрыКоробки.Вставить("СрокХраненияГруппы", 	?(стр.date_range_limit = "",0,Число(стр.date_range_limit)));
			//	параметрыКоробки.Вставить("ДатаЗагрузки", 			СтоСПОбмен_Общий.ДатаИзСтроки(стр.created_at));
			//	параметрыКоробки.Вставить("ДатаМодификации", 		СтоСПОбмен_Общий.ДатаИзСтроки(стр.updated_at));
			
			
			параметрыКоробки.Вставить("МетодОплаты", 			?(	стр.selectedDeliveryMethod.type = Неопределено,
			Перечисления.МетодыОплаты.ПустаяСсылка(), 
			Перечисления.МетодыОплаты[стр.selectedDeliveryMethod.type]));
			параметрыКоробки.Вставить("СтоимостьВыбралУчастник",?(	стр.selectedDeliveryMethod.type = Неопределено,
			0, 
			Число(стр.selectedDeliveryMethod.price)));																		
			
			параметрыКоробки.Вставить("ВидРПОВыбралУчастник", 	?(	стр.selectedDeliveryMethod.name = Неопределено,
			"", 
			стр.selectedDeliveryMethod.name));																		
			
			//параметрыКоробки.Вставить("ДатаЗагрузки", 			СтоСПОбмен_Общий.ДатаИзСтроки(стр.created_at));
			параметрыКоробки.Вставить("Состав", 				стр.orders);
			параметрыКоробки.Вставить("Догрузить", 				Ложь);
			
			
			СП_РаботаСоСправочниками.ОбновитьКоробку(стр.Ссылка, параметрыКоробки);

		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
КонецПроцедуры	



#КонецОбласти

#Область ЗагрузкаГруппПоКодам

Функция Разбор_ПолученныхГрупп(ПолученныеДанные) 
	ПолученныеДанные 		= СтрЗаменить(ПолученныеДанные,"uid=""""","uid=""0""");
	ПолученныеДанные 		= СтрЗаменить(ПолученныеДанные,"<firstPid></firstPid>","<firstPid>0</firstPid>");
	ПолученныеДанные 		= СтрЗаменить(ПолученныеДанные,"<date_range_limit></date_range_limit>","<date_range_limit>0</date_range_limit>");
	ПолученныеДанные 		= СтрЗаменить(ПолученныеДанные,"<date_range_limit/>","<date_range_limit>0</date_range_limit>");

	стр_Результат			= Новый Структура;

	пространствоИмен		= "http://www.100sp.ru/api/distributor/upload/back";
	авторизацияВыполнена	= ложь;
	Тип_distributors		= ФабрикаXDTO.Тип(пространствоИмен, "distributors");
		
	ПолученныеДанные		= СтрЗаменить(ПолученныеДанные, "http://www.100sp.ru","http://www.100sp.ru/api/distributor/upload/back");
	ЧтениеXML 				= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Объект_distributors		= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	Если Объект_distributors.auth.result	= "ok" Тогда
		авторизацияВыполнена	= истина;
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат ложь;
	КонецЕсли;
	                                                                                      
	Если Объект_distributors.deliveryGroups						<> Неопределено Тогда
		//ТЗ	= СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.deliveryGroups.deliveryGroup);
		//стр_Результат.Вставить("deliveryGroups",ТЗ);
		Результат = СозданиеГруппПоДаннымСайта(Объект_distributors.deliveryGroups.deliveryGroup);
		стр_Результат.Вставить("ОбработанныеГруппы",Результат.ОбработанныеГруппы);
		
	ИначеЕсли Объект_distributors.dataByDates.deliveryGroups	<> Неопределено Тогда
		//ТЗ	= СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.dataByDates.deliveryGroups.deliveryGroup);
		
		Результат = СозданиеГруппПоДаннымСайта(Объект_distributors.dataByDates.deliveryGroups.deliveryGroup);
		стр_Результат.Вставить("ОбработанныеГруппы",Результат.ОбработанныеГруппы);
	КонецЕсли;

	стр_Результат.Вставить("авторизацияВыполнена",авторизацияВыполнена);
	Возврат стр_Результат;

КонецФункции

#КонецОбласти





#Область ЗапросТочкиСбораЗаказа
 
// Сформировать xml запрос Для указанныхЗаказов
//
// Параметры:
//   Парам - ТаблицаЗначений - поля:
//   Участник- СправочникСсылка.Участники - Участник заказа
//   Покупка - СправочникСсылка.Покупки, СправочникСсылка.Заказы , СправочникСсылка.Пристрой Покупка заказа
// Возвращаемое значение: - Строка  
Функция ПолучитьХМЛ_ЗапросТочкиСбора(ТЗЗаказов) 
	Тип_order					=ФабрикаXDTO.Тип("http://www.100sp.ru/out","order");
	Тип_deliveryGroupTransitCode=ФабрикаXDTO.Тип("http://www.100sp.ru/out","deliveryGroupTransitCode");
	Тип_distributors			=ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	
	Объект_deliveryGroupTransitCode=ФабрикаXDTO.Создать(Тип_deliveryGroupTransitCode);
	Для каждого стр из ТЗЗаказов Цикл
		Объект_order=ФабрикаXDTO.Создать(Тип_order);
		Если 	  ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Покупки") Тогда
			Объект_order.orderType="sp";	
			Объект_order.pid=стр.Покупка.Код;
		ИначеЕсли ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Заказы") Тогда
			Объект_order.orderType="shop";	
			Объект_order.orderId=стр.Покупка.Код;
		ИначеЕсли ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Пристрой") Тогда
			Объект_order.orderType="bulletin";	
			Объект_order.orderId=стр.Покупка.Код;
		ИначеЕсли ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Посылки") Тогда
			Объект_order.orderType="package";	
			Объект_order.packageId=стр.Покупка.Код;
		Иначе
			Продолжить;
		КонецЕсли;
		Объект_order.uid=стр.Участник.Код;
	    Объект_deliveryGroupTransitCode.order.Добавить(Объект_order);
	КонецЦикла;
	Объект_distributors=ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.deliveryGroupTransitCode=Объект_deliveryGroupTransitCode;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект_distributors);
	ДанныеXML = Запись.Закрыть();
	ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML; 
КонецФункции

Функция Разбор_ЗапросТочкиСбора(ТЗЗаказов,ПолученныеДанные) 
	авторизацияВыполнена=ложь;
	Если ПолученныеДанные = "Не удалось соеденится с сайтом" Тогда Возврат авторизацияВыполнена; КонецЕсли;
	Тип_distributors=ФабрикаXDTO.Тип("http://www.100sp.ru", "distributors");
	Тип_deliveryGroupTransitCode=ФабрикаXDTO.Тип("http://www.100sp.ru", "deliveryGroupTransitCode");
	
	ТЗЗаказов.Колонки.Добавить("result");
	ТЗЗаказов.Колонки.Добавить("message");
	ТЗЗаказов.Колонки.Добавить("distributor_code");
	ТЗЗаказов.Колонки.Добавить("ПунктВыдачиНазначение", 	новый ОписаниеТипов("СправочникСсылка.ТочкиРаздачи"));
	ТЗЗаказов.Колонки.Добавить("ГабаритНазначение",			новый ОписаниеТипов("СправочникСсылка.Габариты"));
	ТЗЗаказов.Колонки.Добавить("МестоХраненияНазначение",	новый ОписаниеТипов("СправочникСсылка.МестаХранения"));
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Объект_distributors= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена=истина;
	КонецЕсли;
	Если Объект_distributors.deliveryGroupTransitCode=Неопределено Тогда
		Возврат авторизацияВыполнена;
	КонецЕсли;	
	
	Для каждого Заказ из Объект_distributors.deliveryGroupTransitCode.order Цикл
		Покупка  = СП_РаботаСоСправочниками.ПолучитьЗаказПоXDTO(Заказ, "orderType");
		Участник = СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(Заказ.uid);
		Если ТипЗнч(Покупка)= Тип("СправочникСсылка.Посылки") Тогда
			найденыСтроки=ТЗЗаказов.НайтиСтроки(новый Структура("Покупка",Покупка));
		Иначе	
			найденыСтроки=ТЗЗаказов.НайтиСтроки(новый Структура("Покупка, Участник",Покупка, Участник));
		Конецесли;	
		Для каждого стр из найденыСтроки Цикл
			стр.result           			= Заказ.result;
			стр.message          			= Заказ.message;
			стр.distributor_code 			= Заказ.distributor_code;
			Если стр.result="ok" или стр.result="ap" Тогда
				стр.ПунктВыдачиНазначение		= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(Заказ.distributor_code);
				стр.ГабаритНазначение           = стр.Габарит;
				стр.МестоХраненияНазначение     = стр.МестоХранения;
			КонецЕСли;
		КонецЦикла	
	КонецЦикла;
	Возврат авторизацияВыполнена;
КонецФункции


// Компанует Заказы по группам 
//
// Параметры:
//   Парам - ТаблицаЗначений - поля:
//   Участник- СправочникСсылка.Участники - Участник заказа
//   Покупка - СправочникСсылка.Покупки, СправочникСсылка.Заказы , СправочникСсылка.Пристрой Покупка заказа
// Возвращаемое значение: - Структура   - поля:
//   Автроизация 	- булево - Удалось ли подключиться к сайту
//   ЗаказыБезГрупп - ТаблицаЗначений
//   Ошибки			- ТаблицаЗначений
//   ЗаказыДругихТочек - ТаблицаЗначений
Функция Компановка_ЗапросТочкиСбора(ТЗЗаказов) 
	Если ТЗЗаказов.Колонки.Найти("result")=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось проверить заказы Других точек");
		Возврат новый Структура("Авторизация",Ложь);
	Конецесли;	
	
	отбор_ОдиночныеЗаказы	= новый Структура("result,message","error","Заказ без группы доставки");
	ТЗ_ЗаказыБезГрупп		= ТЗЗаказов.Скопировать(отбор_ОдиночныеЗаказы);
	строки_Кудалению		= ТЗЗаказов.НайтиСтроки(отбор_ОдиночныеЗаказы);
	Для каждого стр из строки_Кудалению Цикл
		ТЗЗаказов.Удалить(стр);
	КонецЦикла;
	
	отбор_Ошибки			= новый Структура("result","error");
	ТЗ_Ошибки				= ТЗЗаказов.Скопировать(отбор_Ошибки);
	строки_Кудалению		= ТЗЗаказов.НайтиСтроки(отбор_Ошибки);
	Для каждого стр из строки_Кудалению Цикл
		ТЗЗаказов.Удалить(стр);
	КонецЦикла;
	
	отбор_ЗаказыВСвоихГруппах	= новый Структура("ПунктВыдачиНазначение",Константы.СвояТочка.Получить());
	ТЗ_ЗаказыВСвоихГруппах		= ТЗЗаказов.Скопировать(отбор_ЗаказыВСвоихГруппах);
	строкиСвои					= ТЗЗаказов.НайтиСтроки(отбор_ЗаказыВСвоихГруппах);
	Для каждого стр из строкиСвои Цикл
		ТЗЗаказов.Удалить(стр);
	КонецЦикла;	
	
	Возврат новый Структура("Авторизация,ЗаказыБезГрупп, Ошибки, ЗаказыДругихТочек,ЗаказыВСвоихГруппах",истина,ТЗ_ЗаказыБезГрупп,ТЗ_Ошибки,ТЗЗаказов,ТЗ_ЗаказыВСвоихГруппах);
КонецФункции


// Компанует Заказы на остатках Для ТК
//
// Возвращаемое значение: - Структура   - поля:
//   Автроизация 	- булево - Удалось ли подключиться к сайту
//   ЗаказыБезГрупп - ТаблицаЗначений
//   Ошибки			- ТаблицаЗначений
//   ЗаказыДругихТочек - ТаблицаЗначений
Функция ЗаказыДругихТочек_ПроверитьОстатки() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Покупка КАК Покупка,
		|	ВложенныйЗапрос.Участник КАК Участник,
		|	ВложенныйЗапрос.Посылка КАК Посылка,
		|	КоробкиСостав.Ссылка КАК Коробка
		|ПОМЕСТИТЬ ПосылкиНаТранзитеТК
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказыВПосылкахОстатки.Покупка КАК Покупка,
		|		ЗаказыВПосылкахОстатки.Участник КАК Участник,
		|		ЗаказыВПосылкахОстатки.Посылка КАК Посылка,
		|		ЗаказыВПосылкахОстатки.КодЗаказа КАК КодЗаказа
		|	ИЗ
		|		РегистрНакопления.ЗаказыВПосылках.Остатки(, ) КАК ЗаказыВПосылкахОстатки) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Коробки.Состав КАК КоробкиСостав
		|		ПО ВложенныйЗапрос.Покупка = КоробкиСостав.Покупка
		|			И ВложенныйЗапрос.Участник = КоробкиСостав.Участник
		|			И (КоробкиСостав.Ссылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки))
		|			И ВложенныйЗапрос.КодЗаказа = КоробкиСостав.КодЗаказа
		|ГДЕ
		|	КоробкиСостав.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТранзитОстатки.Габарит КАК Габарит,
		|	ТранзитОстатки.Участник КАК Участник,
		|	ТранзитОстатки.МестоХранения КАК МестоХранения,
		|	ТранзитОстатки.Партия КАК Партия,
		|	ТранзитОстатки.ПокупкаСсылка КАК ПокупкаСсылка,
		|	ТранзитОстатки.Точка КАК Точка,
		|	ТранзитОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	КоробкиСостав.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Пред
		|ИЗ
		|	РегистрНакопления.Транзит.Остатки(
		|			,
		|			Точка.ТранспортнаяКомпания
		|				И (ТИПЗНАЧЕНИЯ(ПокупкаСсылка) = ТИП(Справочник.Покупки)
		|					ИЛИ ТИПЗНАЧЕНИЯ(ПокупкаСсылка) = ТИП(Справочник.Заказы)
		|					ИЛИ ТИПЗНАЧЕНИЯ(ПокупкаСсылка) = ТИП(Справочник.Пристрой))) КАК ТранзитОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Коробки.Состав КАК КоробкиСостав
		|		ПО ТранзитОстатки.ПокупкаСсылка = КоробкиСостав.Покупка
		|			И ТранзитОстатки.Участник = КоробкиСостав.Участник
		|			И (КоробкиСостав.Ссылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки))
		|ГДЕ
		|	КоробкиСостав.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТранзитОстатки.Габарит,
		|	ТранзитОстатки.Участник,
		|	ТранзитОстатки.МестоХранения,
		|	ТранзитОстатки.Партия,
		|	ТранзитОстатки.ПокупкаСсылка,
		|	ТранзитОстатки.Точка,
		|	ТранзитОстатки.КоличествоОстаток,
		|	NULL
		|ИЗ
		|	РегистрНакопления.Транзит.Остатки(
		|			,
		|			Точка.ТранспортнаяКомпания
		|				И ПокупкаСсылка В
		|					(ВЫБРАТЬ
		|						ПосылкиНаТранзитеТК.Посылка КАК Посылка
		|					ИЗ
		|						ПосылкиНаТранзитеТК КАК ПосылкиНаТранзитеТК)) КАК ТранзитОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пред.Габарит КАК Габарит,
		|	Пред.Участник КАК Участник,
		|	Пред.МестоХранения КАК МестоХранения,
		|	Пред.Партия КАК Партия,
		|	Пред.ПокупкаСсылка КАК Покупка,
		|	Пред.Точка КАК ПунктВыдачи,
		|	Пред.КоличествоОстаток КАК Количество
		|ИЗ
		|	Пред КАК Пред
		|ГДЕ
		|	Пред.КоличествоОстаток > 0
		|	И ТИПЗНАЧЕНИЯ(Пред.ПокупкаСсылка) <> ТИП(Справочник.Заказы)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ=РезультатЗапроса.Выгрузить();
	хмл_отправили=ПолучитьХМЛ_ЗапросТочкиСбора(ТЗ);
	хмл_получили =ПолученныеДанные(хмл_отправили);
	//Если хмл_получили= "Не удалось соеденится с сайтом" Тогда Возврат КонецЕсли;
	Разбор_ЗапросТочкиСбора(ТЗ,хмл_получили);
	Возврат Компановка_ЗапросТочкиСбора(ТЗ);
КонецФункции


// Компанует Заказы по группам 
//
// Параметры:
//   Парам - ТаблицаЗначений - поля:
//   Участник- СправочникСсылка.Участники - Участник заказа
//   Покупка - СправочникСсылка.Покупки, СправочникСсылка.Заказы , СправочникСсылка.Пристрой Покупка заказа
// Возвращаемое значение: - Структура   - поля:
//   Автроизация 	- булево - Удалось ли подключиться к сайту
//   ЗаказыБезГрупп - ТаблицаЗначений
//   Ошибки			- ТаблицаЗначений
//   ЗаказыДругихТочек - ТаблицаЗначений
Функция ЗаказыДругихТочек_ПроверитьЗаказы(Заказы) Экспорт
	хмл_отправили=ПолучитьХМЛ_ЗапросТочкиСбора(Заказы);
	хмл_получили =ПолученныеДанные(хмл_отправили);
	//Если хмл_получили= "Не удалось соеденится с сайтом" Тогда Возврат КонецЕсли;
	Разбор_ЗапросТочкиСбора(Заказы,хмл_получили);
	Возврат Компановка_ЗапросТочкиСбора(Заказы);
КонецФункции


#КонецОбласти




#Область СтатусыГруппы

Функция ПолучитьСтатусыГруппы(группа) Экспорт

	код_группы		= Число(СтрЗаменить(группа.Код,"гд_",""));
	хмл_отправили	= ПолучитьХМЛ_СтатусыГруппы(код_группы);
	хмл_получили 	= ПолученныеДанные(хмл_отправили,Ложь);

	стр_Ответ=Новый структура;
	Разбор_СтатусыГруппы(стр_Ответ,хмл_получили);
	Возврат стр_Ответ.deliveryGroupStatusesLogs;
КонецФункции	



Функция ПолучитьХМЛ_СтатусыГруппы(кодГруппы) 
	Тип_deliveryGroupStatusesLogs		= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.deliveryGroupStatusesLogs");
	Тип_distributors					= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	
	Объект_deliveryGroupStatusesLogs	= ФабрикаXDTO.Создать(Тип_deliveryGroupStatusesLogs);
	
	Объект_deliveryGroupStatusesLogs.deliveryGroupStatusesLog.Добавить(кодГруппы);

	Объект_distributors					= ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.deliveryGroupStatusesLogs = Объект_deliveryGroupStatusesLogs;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект_distributors);
	ДанныеXML = Запись.Закрыть();
	ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML; 
КонецФункции



Функция Разбор_СтатусыГруппы(стр_Ответ,ПолученныеДанные) 
	пространствоИмен="http://www.100sp.ru/api/distributor/upload/back";
	ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"http://www.100sp.ru",пространствоИмен);
	
	авторизацияВыполнена=ложь;
	Если ПолученныеДанные = "Не удалось соеденится с сайтом" Тогда Возврат авторизацияВыполнена; КонецЕсли;
	
	Тип_distributors			 	= ФабрикаXDTO.Тип(пространствоИмен, "distributors");
	Тип_deliveryGroupStatusesLogs	= ФабрикаXDTO.Тип(пространствоИмен, "distributors.deliveryGroupStatusesLogs");
	
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Объект_distributors= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	
	
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена=истина;
	Иначе	
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Объект_distributors.auth.message);
	КонецЕсли;
	Если Объект_distributors.deliveryGroupStatusesLogs=Неопределено Тогда
		Возврат авторизацияВыполнена;
	КонецЕсли;	
	
	массивТиповОтветственный = новый Массив;
	массивТиповОтветственный.Добавить("СправочникСсылка.Участники");
	массивТиповОтветственный.Добавить("СправочникСсылка.ТочкиРаздачи");
	
	тзРезультат = новый ТаблицаЗначений;
	тзРезультат.Колонки.Добавить("ГруппаДоставки", 	новый ОписаниеТипов("СправочникСсылка.Коробки"));
	тзРезультат.Колонки.Добавить("Статус", 		новый ОписаниеТипов("ПеречислениеСсылка.СтатусыГруппыДоставки"));
	//тзРезультат.Колонки.Добавить("Ответственный",	новый ОписаниеТипов(массивТиповОтветственный));
	тзРезультат.Колонки.Добавить("Ответственный",	новый ОписаниеТипов("Строка"));
	тзРезультат.Колонки.Добавить("Период",			новый ОписаниеТипов("Строка"));


	
	
	Для каждого группа из Объект_distributors.deliveryGroupStatusesLogs.deliveryGroupStatusesLog Цикл

		Для каждого элемИстории из группа.statusesLog.status Цикл
			новаяСтрока = тзРезультат.Добавить();
			новаяСтрока.ГруппаДоставки 	= СП_РаботаСоСправочниками.ПолучитьКоробкуПо_Коду("гд_"+Формат(группа.id,"ЧЦ=11; ЧН=0; ЧВН=; ЧГ=0"));
			НоваяСтрока.Статус			= Перечисления.СтатусыГруппыДоставки[элемИстории.status];
			новаяСтрока.Период			= элемИстории.date;
			новаяСтрока.Ответственный 	= элемИстории.comment;
			//ПозицияПВ 		= СтрНайти(элемИстории.comment,"did");
			//ПозицияУчастник = СтрНайти(элемИстории.comment,"uid");
			//Если ПозицияПВ>0 Тогда
			//	кодПВ 			= Прав(элемИстории.comment,СтрДлина(элемИстории.comment)-(ПозицияПВ+4));
			//	кодПВ			= Формат(Число(кодПВ),"ЧЦ=4; ЧН=0; ЧВН=; ЧГ=0");
			//	новаяСтрока.Ответственный 		= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(кодПВ);
			//ИначеЕсли ПозицияУчастник>0 Тогда
			//	кодУчастника 	= Прав(элемИстории.comment,СтрДлина(элемИстории.comment)-(ПозицияУчастник+4));
			//	новаяСтрока.Ответственный 		= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(кодУчастника);
			//КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	стр_Ответ.Вставить("result","ok");
	стр_Ответ.Вставить("deliveryGroupStatusesLogs",тзРезультат);
	
	Возврат авторизацияВыполнена;
КонецФункции



#КонецОбласти





#Область ИсторияДоставки

Функция ПолучитьИсториюДоставки(группа) Экспорт

	код_группы		= Число(СтрЗаменить(группа.Код,"гд_",""));
	хмл_отправили	= ПолучитьХМЛ_ИсторияДоставки(код_группы);
	хмл_получили 	= ПолученныеДанные(хмл_отправили,Ложь);

	стр_Ответ=Новый структура;
	Разбор_ИсторияДоставки(стр_Ответ,хмл_получили);
	Возврат стр_Ответ.deliveryGroupsHistory;
КонецФункции	



Функция ПолучитьХМЛ_ИсторияДоставки(кодГруппы) 
	Тип_deliveryGroupsHistory	= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.deliveryGroupsHistory");
	Тип_distributors			= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	
	Объект_deliveryGroupsHistory = ФабрикаXDTO.Создать(Тип_deliveryGroupsHistory);
	
	Объект_deliveryGroupsHistory.deliveryGroupHistory.Добавить(кодГруппы);

	Объект_distributors=ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.deliveryGroupsHistory = Объект_deliveryGroupsHistory;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект_distributors);
	ДанныеXML = Запись.Закрыть();
	ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML; 
КонецФункции



Функция Разбор_ИсторияДоставки(стр_Ответ,ПолученныеДанные) 
	пространствоИмен="http://www.100sp.ru/api/distributor/upload/back";
	ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"http://www.100sp.ru",пространствоИмен);
	
	авторизацияВыполнена=ложь;
	Если ПолученныеДанные = "Не удалось соеденится с сайтом" Тогда Возврат авторизацияВыполнена; КонецЕсли;
	
	Тип_distributors			 = ФабрикаXDTO.Тип(пространствоИмен, "distributors");
	Тип_deliveryGroupsHistory	 = ФабрикаXDTO.Тип(пространствоИмен, "distributors.deliveryGroupsHistory");
	
	//ТЗ_Ответ.Колонки.Добавить("result");
	//ТЗ_Ответ.Колонки.Добавить("message");
	//ТЗ_Ответ.Колонки.Добавить("deliveryGroupsHistory");
	
	
	
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Объект_distributors= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	
	
	//СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.deliveryGroupsHistory.deliveryGroupHistory)
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена=истина;
	КонецЕсли;
	Если Объект_distributors.deliveryGroupsHistory=Неопределено Тогда
		Возврат авторизацияВыполнена;
	КонецЕсли;	
	
	массивТиповОтветственный = новый Массив;
	массивТиповОтветственный.Добавить("СправочникСсылка.Участники");
	массивТиповОтветственный.Добавить("СправочникСсылка.ТочкиРаздачи");
	
	тзРезультат = новый ТаблицаЗначений;
	тзРезультат.Колонки.Добавить("ГруппаДоставки", 	новый ОписаниеТипов("СправочникСсылка.Коробки"));
	тзРезультат.Колонки.Добавить("Покупка", 		новый ОписаниеТипов("СправочникСсылка.Покупки"));
	тзРезультат.Колонки.Добавить("Участник", 		новый ОписаниеТипов("СправочникСсылка.Участники"));
	тзРезультат.Колонки.Добавить("КодЗаказа", 		новый ОписаниеТипов("Число"));
	тзРезультат.Колонки.Добавить("Ответственный",	новый ОписаниеТипов(массивТиповОтветственный));
	тзРезультат.Колонки.Добавить("ТипОперации",		новый ОписаниеТипов("Строка"));
	тзРезультат.Колонки.Добавить("Посылки",			новый ОписаниеТипов("Строка"));
	тзРезультат.Колонки.Добавить("Период",			новый ОписаниеТипов("Строка"));


	
	
	Для каждого группа из Объект_distributors.deliveryGroupsHistory.deliveryGroupHistory Цикл

		Для каждого элемИстории из группа.history.operation Цикл
			новаяСтрока = тзРезультат.Добавить();
			новаяСтрока.ГруппаДоставки 	= СП_РаботаСоСправочниками.ПолучитьКоробкуПо_Коду("гд_"+Формат(группа.id,"ЧЦ=11; ЧН=0; ЧВН=; ЧГ=0"));
			новаяСтрока.Покупка 		= Справочники[СтоСПОбмен_Общий.ПолучитьСправочник(элемИстории.orderType)].НайтиПоКоду(элемИстории.pid);
			новаяСтрока.Участник 		= Справочники["Участники"].НайтиПоКоду(элемИстории.uid);
			новаяСтрока.КодЗаказа 		= элемИстории.orderId;
			Если элемИстории.performerType = "distributor" тогда
				КодОтветственного = Формат(Число(элемИстории.performerId),"ЧЦ=4; ЧН=0; ЧВН=; ЧГ=0");
			иначе
				КодОтветственного = элемИстории.performerId;
			КонецЕсли;	
			новаяСтрока.Ответственный	= ?(КодОтветственного = Неопределено , "system", Справочники[СтоСПОбмен_Общий.ПолучитьСправочник(элемИстории.performerType)].НайтиПоКоду(КодОтветственного));
			новаяСтрока.Период			= элемИстории.operationDate;
			новаяСтрока.Посылки			= "";
			новаяСтрока.ТипОперации		= элемИстории.operationType;
			Если элемИстории.packages  <> неопределено Тогда
				Для каждого элемПосылки из элемИстории.packages.package Цикл
					новаяСтрока.Посылки 	= новаяСтрока.Посылки + Формат(элемПосылки,"ЧГ=0") + ", ";
				КонецЦикла;	
			КонецЕсли;
			новаяСтрока.Посылки 		= Лев(новаяСтрока.Посылки,СтрДлина(новаяСтрока.Посылки)-2);
		КонецЦикла;
	КонецЦикла;
	
	//строкаОтвета 						= ТЗ_Ответ.Добавить();
	//строкаОтвета.result 				= "ok";
	//строкаОтвета.deliveryGroupsHistory 	= тзРезультат;
	
	стр_Ответ.Вставить("result","ok");
	стр_Ответ.Вставить("deliveryGroupsHistory",тзРезультат);
	
	Возврат авторизацияВыполнена;
КонецФункции



#КонецОбласти

#Область УстановитьМетодОплатыНалПлатеж

Функция ПолучитьХМЛ_УстановитьНалПлатеж(код_группы) 
	Тип_group					=ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.deliveryGroupsSetCod.group");
	Тип_deliveryGroupsSetCod	=ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.deliveryGroupsSetCod");
	Тип_distributors			=ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	
	Объект_deliveryGroupsSetCod=ФабрикаXDTO.Создать(Тип_deliveryGroupsSetCod);
	
	Объект_group=ФабрикаXDTO.Создать(Тип_group);
	Объект_group.delivery_group_id=Число(код_группы);	
	
	Объект_deliveryGroupsSetCod.group.Добавить(Объект_group);
	
	
	Объект_distributors=ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.deliveryGroupsSetCod=Объект_deliveryGroupsSetCod;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект_distributors);
	ДанныеXML = Запись.Закрыть();
	ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML; 
КонецФункции

Функция Разбор_УстановитьНалПлатеж(ТЗ_Ответ,ПолученныеДанные) 
	пространствоИмен="http://www.100sp.ru/api/distributor/upload/back";
	ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"http://www.100sp.ru",пространствоИмен);
	
	авторизацияВыполнена=ложь;
	Если ПолученныеДанные = "Не удалось соеденится с сайтом" Тогда Возврат авторизацияВыполнена; КонецЕсли;
	
	Тип_distributors			 = ФабрикаXDTO.Тип(пространствоИмен, "distributors");
	Тип_deliveryGroupsSetCod = ФабрикаXDTO.Тип(пространствоИмен, "distributors.deliveryGroupsSetCod");
	
	ТЗ_Ответ.Колонки.Добавить("result");
	ТЗ_Ответ.Колонки.Добавить("message");
	ТЗ_Ответ.Колонки.Добавить("delivery_group_id");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Объект_distributors= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена=истина;
	КонецЕсли;
	Если Объект_distributors.deliveryGroupsSetCod=Неопределено Тогда
		Возврат авторизацияВыполнена;
	КонецЕсли;	
	
	Для каждого группа из Объект_distributors.deliveryGroupsSetCod.group Цикл
		стр_ответа=ТЗ_Ответ.Добавить();
		ЗаполнитьЗначенияСвойств(стр_ответа,группа);
	КонецЦикла;
	Возврат авторизацияВыполнена;
КонецФункции

Функция УстановитьНаложенныйПлатеж(группа) Экспорт

	код_группы=Число(СтрЗаменить(группа.Код,"гд_",""));
	хмл_отправили=ПолучитьХМЛ_УстановитьНалПлатеж(код_группы);
	хмл_получили =ПолученныеДанные(хмл_отправили,Истина);
	//Если хмл_получили= "Не удалось соеденится с сайтом" Тогда Возврат КонецЕсли;
	ТЗ_Ответ=Новый ТаблицаЗначений;
	Разбор_УстановитьНалПлатеж(ТЗ_Ответ,хмл_получили);
	найденые_Строки=ТЗ_Ответ.НайтиСтроки(новый Структура("delivery_group_id",код_группы));
	Если найденые_Строки.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для группы с кодом "+код_группы+" не получен ответ при установке метода оплаты!");	
		Возврат ложь;
	КонецЕсли;	
	Если найденые_Строки[0].result="error" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для группы с кодом "+код_группы+" при установке метода оплаты возникла ошибка : "+найденые_Строки[0].message);	
		Возврат ложь;
	Конецесли;	
	
	КодыГрупп = новый СписокЗначений;
	КодыГрупп.Добавить(группа);
	Получить_ПоКодам(КодыГрупп);
	Возврат Истина;
КонецФункции	

#КонецОбласти


#Область ИзменитьАдресГруппыДоставки

Функция ПолучитьХМЛ_ИзменитьАдресГруппыДоставки(код_группы) 
	Тип_group						= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.groupsWaitDistributor.group");
	Тип_groupsWaitDistributor		= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.groupsWaitDistributor");
	Тип_distributors				= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	                            	
	Объект_groupsWaitDistributor	= ФабрикаXDTO.Создать(Тип_groupsWaitDistributor);
	
	Объект_group					= ФабрикаXDTO.Создать(Тип_group);
	Объект_group.delivery_group_id	= Число(код_группы);	
	
	Объект_groupsWaitDistributor.group.Добавить(Объект_group);
	
	
	Объект_distributors=ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.groupsWaitDistributor	= Объект_groupsWaitDistributor;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект_distributors);
	ДанныеXML = Запись.Закрыть();
	ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML; 
КонецФункции

Функция Разбор_ИзменитьАдресГруппыДоставки(ТЗ_Ответ,ПолученныеДанные) 
	пространствоИмен="http://www.100sp.ru/api/distributor/upload/back";
	ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"http://www.100sp.ru",пространствоИмен);
	
	авторизацияВыполнена=ложь;
	Если ПолученныеДанные = "Не удалось соеденится с сайтом" Тогда Возврат авторизацияВыполнена; КонецЕсли;
	
	Тип_distributors			 = ФабрикаXDTO.Тип(пространствоИмен, "distributors");
	Тип_groupsWaitDistributor	 = ФабрикаXDTO.Тип(пространствоИмен, "distributors.groupsWaitDistributor");
	
	ТЗ_Ответ.Колонки.Добавить("result");
	ТЗ_Ответ.Колонки.Добавить("message");
	ТЗ_Ответ.Колонки.Добавить("delivery_group_id");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Объект_distributors= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена=истина;
	КонецЕсли;
	Если Объект_distributors.groupsWaitDistributor=Неопределено Тогда
		Возврат авторизацияВыполнена;
	КонецЕсли;	
	
	Для каждого группа из Объект_distributors.groupsWaitDistributor.group Цикл
		стр_ответа=ТЗ_Ответ.Добавить();
		ЗаполнитьЗначенияСвойств(стр_ответа,группа);
	КонецЦикла;
	Возврат авторизацияВыполнена;
КонецФункции

Функция ИзменитьАдресГруппыДоставки(группа) Экспорт

	код_группы=Число(СтрЗаменить(группа.Код,"гд_",""));
	хмл_отправили=ПолучитьХМЛ_ИзменитьАдресГруппыДоставки(код_группы);
	хмл_получили =ПолученныеДанные(хмл_отправили,Истина);
	//Если хмл_получили= "Не удалось соеденится с сайтом" Тогда Возврат КонецЕсли;
	ТЗ_Ответ=Новый ТаблицаЗначений;
	Разбор_ИзменитьАдресГруппыДоставки(ТЗ_Ответ,хмл_получили);
	найденые_Строки=ТЗ_Ответ.НайтиСтроки(новый Структура("delivery_group_id",код_группы));
	Если найденые_Строки.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для группы с кодом "+код_группы+" не получен ответ при установке метода оплаты!");	
		Возврат ложь;
	КонецЕсли;	
	Если найденые_Строки[0].result="error" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для группы с кодом "+код_группы+" при установке статуса ""смена адреса"" возникла ошибка : "+найденые_Строки[0].message);	
		Возврат ложь;
	Конецесли;	
	
	Если найденые_Строки[0].result="ok" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для группы с кодом "+код_группы+" запрос на смену адреса отправлен");	
	Конецесли;	
	
	
	КодыГрупп = новый СписокЗначений;
	КодыГрупп.Добавить(группа);
	Получить_ПоКодам(КодыГрупп);
	Возврат Истина;
КонецФункции	

#КонецОбласти





#Область ЗапросМетодаОплаты_Удаление_Исключение



Функция ВыгрузитьИзмененияНаСайт() Экспорт
	ДокЗапрос	= Документы.ЗапросыГруппДоставки.СоздатьДокумент();
	СписокГрупп = ДокЗапрос.ВыполнитьОбмен();
	Попытка
		ДокЗапрос.Записать(РежимЗаписиДокумента.Проведение);
		Возврат СписокГрупп;
	Исключение
		Возврат Неопределено;	
	КонецПопытки;
КонецФункции

Функция ПеревестиВСтатусЗапросОплаты(Группа) Экспорт
	ДокЗапрос=Документы.ЗапросыГруппДоставки.СоздатьДокумент();
	СписокГрупп = ДокЗапрос.ВыполнитьОбмен_ВернутьЗапросОплаты(Группа);
	Попытка
		ДокЗапрос.Записать(РежимЗаписиДокумента.Проведение);
		
		КодыГрупп = новый СписокЗначений;
		КодыГрупп.Добавить(группа);
		Получить_ПоКодам(КодыГрупп);		
		Возврат ИСтина;
	Исключение
		Возврат Ложь;	
	КонецПопытки;
КонецФункции

Функция  ВыполнитьОбменЗапросОплаты(Отправление) Экспорт
	док = Документы.Выгрузка_100СП.СоздатьДокумент();
	док.Дата = ТекущаяДата();
	док.ЗаполнитьНеОтправленными(Отправление);
	док.ВыгрузитьНаСайт();
	Попытка
		док.Записать(РежимЗаписиДокумента.Проведение);
		
		КодыГрупп = новый СписокЗначений;
		КодыГрупп.Добавить(Отправление.Коробка);
		Получить_ПоКодам(КодыГрупп);		
		Возврат ИСтина;
	Исключение
		Возврат Ложь;	
	КонецПопытки;
	
	
КонецФункции

Функция УдалитьЗаказы(ТаблицаЗаказов, Коментарий = "") Экспорт
	Если не РольДоступна("АдминистированиеГруппДоставки") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не достаточно прав для выполнения данной функции");
		Возврат Неопределено;
	КонецЕсли;	
	Параметры = Новый Структура("ЗапросыУдаления",ТаблицаЗаказов);
	
	ДокЗапрос=Документы.ЗапросыГруппДоставки.СоздатьДокумент();
	ДокЗапрос.Комментарий = Коментарий;
	СписокГрупп = ДокЗапрос.Синхронизировать(Параметры);
	Для каждого элем из ДокЗапрос.ЗапросыУдаления	 Цикл
		Если не элем.Успех Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка удаления "+элем.ГруппаДоставки +", "+элем.КодЗаказа +", "+ элем.СообщениеОшибки);	
		КонецЕсли; 	
	КонецЦикла;
	Попытка
		ДокЗапрос.Записать(РежимЗаписиДокумента.Проведение);
		Возврат ДокЗапрос;
	Исключение
		текстОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(текстОшибки);
		Возврат Неопределено;	
	КонецПопытки;
	
	//списокКодов = новый СписокЗначений;
	//списокКодов.Добавить(Объект.Ссылка);
	//СтоСПОбмен_ГруппыДоставки.Загрузить_ПоКодам(СписокГрупп);
	
	
КонецФункции



#КонецОбласти


Функция 	ПолученныеДанные(ДанныеXML,Выгрузка=Ложь) 
	Параметры    = новый Структура;
	Параметры.Вставить("token",Константы.Токен.Получить());
	Параметры.Вставить("xml", ДанныеXML);
	Если Выгрузка Тогда
		АдресСкрипта = Константы.АдресВыгрузкиНасайт.Получить();
	Иначе	
		АдресСкрипта = Константы.АдресЗагрузкиССайта.Получить();
	КОнецЕсли;	

	ПолученныйФайл		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры,АдресСкрипта);
	Если ПолученныйФайл	= Неопределено Тогда Возврат "Не удалось соеденится с сайтом"; КонецЕсли; 
	ПолученныеДанные	= СтоСПОбмен_Общий.ФайлВСтроку(ПолученныйФайл);
	Возврат ПолученныеДанные;
КонецФункции

Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра = "ЗапуститьУчетГруппДоставки" Тогда
		ПараметрыСеанса.ЗапуститьУчетГруппДоставки = Ложь;
		УстановленныеПараметры.Добавить("ЗапуститьУчетГруппДоставки");
	КонецЕсли;
КонецПроцедуры

#Область ПолучитьНадбавкуПунктаВыдачиДляГруппы

Функция ПолучитьНадбавку(группа) Экспорт
	код_группы		= Число(СтрЗаменить(группа.Код,"гд_",""));
	хмл_отправили	= ПолучитьХМЛ_НадбавкаПунктаВыдачи(код_группы);
	хмл_получили 	= ПолученныеДанные(хмл_отправили,Ложь);

	стр_Ответ=Новый структура;
	СуммаНадбавки = Разбор_НадбавкаПунктаВыдачи(стр_Ответ,хмл_получили);
	Возврат СуммаНадбавки;
КонецФункции	

Функция ПолучитьХМЛ_НадбавкаПунктаВыдачи(кодГруппы) 
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	
	СтоСПОбмен_Запрос.ДобавитьАтрибутыКорня(ЗаписьXML);
	ЗаписьXML.ЗаписатьНачалоЭлемента("deliveryGroupsAdditionalCost");
		
	СтоСПОбмен_Запрос.ДобавитьЭлемент(ЗаписьXML, "deliveryGroupAdditionalCost", Формат(КодГруппы,"ЧГ=0"));
		
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //deliveryGroupsAdditionalCost
	
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	ОтправленныеДанные ="<?xml version=""1.0"" encoding=""UTF-8""?> " +ОтправленныеДанные;
	
	Возврат ОтправленныеДанные; 
КонецФункции


Функция Разбор_НадбавкаПунктаВыдачи(стр_Ответ,ПолученныеДанные) 
	пространствоИмен="http://www.100sp.ru/api/distributor/upload/back";
	ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"http://www.100sp.ru",пространствоИмен);
	
	авторизацияВыполнена=ложь;
	Если ПолученныеДанные = "Не удалось соеденится с сайтом" Тогда Возврат авторизацияВыполнена; КонецЕсли;
	//
	Тип_distributors			 = ФабрикаXDTO.Тип(пространствоИмен, "distributors");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	//
	Объект_distributors= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	//СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.deliveryGroupsAdditionalCost.deliveryGroupAdditionalCost)
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена=истина;
	КонецЕсли;
	Если Объект_distributors.deliveryGroupsAdditionalCost=Неопределено Тогда
		Возврат авторизацияВыполнена;
	КонецЕсли;	
	Если Объект_distributors.deliveryGroupsAdditionalCost.deliveryGroupAdditionalCost.Количество() >0  Тогда
		СуммаНадбавки = Число(Объект_distributors.deliveryGroupsAdditionalCost.deliveryGroupAdditionalCost[0].cost);
	Иначе
		СуммаНадбавки = 0;
	КонецЕсли;	
	Возврат СуммаНадбавки;
КонецФункции

#КонецОбласти

//Процедура ЗагрузитьСоставПосылокКурьерскойДоставки() Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	Коробки.Ссылка.Код КАК Код
//		|ИЗ
//		|	Справочник.Коробки КАК Коробки
//		|ГДЕ
//		|	Коробки.ВидСтикера 				= Значение(Перечисление.ВидыСтикеров.ГруппаДоставки)
//		|	И Коробки.ТочкаНазначения 		= &ТочкаНазначения
//		|	И Коробки.СтатусГруппыДоставки 	= Значение(Перечисление.СтатусыГруппыДоставки.waitForOrders)";
//	
//	Запрос.УстановитьПараметр("ТочкаНазначения", СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0100"));
//	
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	СписокКодов = новый СписокЗначений;
//	СписокКодов.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Код"));
//	
//	Загрузить_ПоКодам(СписокКодов);
//КонецПроцедуры	
