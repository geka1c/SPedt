
#Область ПрограммныйИнтерфейс


// Отразить движения по регистру.
// 
// Переносит данные из таблицы в дополнительных свойствах в указанный регистр
// Параметры:
//  НазваниеРегистра - Строка - Название регистра
//  ДополнительныеСвойства - Структура - Дополнительные свойства
//  Движения - КоллекцияДвижений - Движения 
//  Отказ - Булево - Отказ
Процедура ОтразитьДвиженияПоРегистру(НазваниеРегистра, ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений["Таблица"+НазваниеРегистра];
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРегистра = Движения[НазваниеРегистра];
	ДвиженияРегистра.Записывать = Истина;
	ДвиженияРегистра.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

// Провести проверить отрицательные остатки по регистру ОстаткиТоваров.
// 
// Выполняет запись движений по регистру "ОстаткиТоваров"
// с проверкой отрицательных остатков, по новой методике
//  
// Параметры:
//  ДополнительныеСвойства -  Структура -  Дополнительные свойства
//  Движения - КоллекцияДвижений- Движения
//  Отказ- Булево - Принимает Истина в случае наличия отрицательных остатков
Процедура ПровестиПроверитьОтрицательныеОстаткиОстаткиТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	Ссылка = ДополнительныеСвойства.ДляПроведения.Ссылка;
	
	Движения.ОстаткиТоваров.Записать();
	Движения.ОстаткиТоваров.БлокироватьДляИзменения = Истина;
	ОтразитьДвиженияПоРегистру("ОстаткиТоваров", ДополнительныеСвойства, Движения, Отказ);	
	Движения.ОстаткиТоваров.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходнаяПокупки.Покупка КАК Покупка,
		|	РасходнаяПокупки.НомерСтроки
		|ПОМЕСТИТЬ втПосылки
		|ИЗ
		|	Документ.Расходная.Покупки КАК РасходнаяПокупки
		|ГДЕ
		|	РасходнаяПокупки.Ссылка = &Ссылка и
		|	 РасходнаяПокупки.Подбор 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Покупка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТоваровОстатки.КоличествоОстаток,
		|	ОстаткиТоваровОстатки.Покупка как Покупка,
		|	втПосылки.НомерСтроки,
		|	ОстаткиТоваровОстатки.Покупка.Представление КАК ПокупкаПредставление
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваров.Остатки(&Гранца, Покупка В
		|		(ВЫБРАТЬ
		|			втПосылки.Покупка
		|		ИЗ
		|			втПосылки КАК втПосылки)) КАК ОстаткиТоваровОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПосылки КАК втПосылки
		|		ПО ОстаткиТоваровОстатки.Покупка = втПосылки.Покупка
		|ГДЕ
		|	ТранзитОстатки.КоличествоОстаток < 0";
	
	Запрос.УстановитьПараметр("Гранца", Новый Граница(Ссылка.МоментВремени(),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		Выборка= РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщениея = СтрШаблон("Заказ %1 в строке %2 отсутствует на складе.",Выборка.ПокупкаПредставление, Выборка.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщениея,Ссылка,СтрШаблон("Покупки[%1].Покупка",Выборка.НомерСтроки-1),"Объект");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Провести проверить отрицательные остатки транзит.
// 
// Выполняет запись движений по регистру "Транзит"
// с проверкой отрицательных остатков, по новой методике
//  
// Параметры:
//  ДополнительныеСвойства -  Структура -  Дополнительные свойства
//  Движения - КоллекцияДвижений- Движения
//  Отказ- Булево - Принимает Истина в случае наличия отрицательных остатков
Процедура ПровестиПроверитьОтрицательныеОстаткиТранзит(ДополнительныеСвойства, Движения, Отказ) Экспорт
	Ссылка = ДополнительныеСвойства.ДляПроведения.Ссылка;
	
	Движения.Транзит.Записать();
	Движения.Транзит.БлокироватьДляИзменения = Истина;
	ОтразитьДвиженияПоРегистру("Транзит", ДополнительныеСвойства, Движения, Отказ);	
	Движения.Транзит.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыдачаТранзитаПокупки.Покупка КАК Покупка,
		|	ВыдачаТранзитаПокупки.НомерСтроки
		|ПОМЕСТИТЬ втПосылки
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|ГДЕ
		|	ВыдачаТранзитаПокупки.Ссылка = &Ссылка и
		|	 ВыдачаТранзитаПокупки.Подбор И
		|	 НЕ ВыдачаТранзитаПокупки.Упакован И
		|	 НЕ ВыдачаТранзитаПокупки.Ссылка.ПоОбмену
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Покупка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТранзитОстатки.КоличествоОстаток,
		|	ТранзитОстатки.ПокупкаСсылка как Покупка,
		|	втПосылки.НомерСтроки,
		|	ТранзитОстатки.ПокупкаСсылка.Представление КАК ПокупкаПредставление
		|ИЗ
		|	РегистрНакопления.Транзит.Остатки(&Гранца, ПокупкаСсылка В
		|		(ВЫБРАТЬ
		|			втПосылки.Покупка
		|		ИЗ
		|			втПосылки КАК втПосылки)) КАК ТранзитОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПосылки КАК втПосылки
		|		ПО ТранзитОстатки.ПокупкаСсылка = втПосылки.Покупка
		|ГДЕ
		|	ТранзитОстатки.КоличествоОстаток < 0";
	
	Запрос.УстановитьПараметр("Гранца", Новый Граница(Ссылка.МоментВремени(),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		Выборка= РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщениея = СтрШаблон("Заказ %1 в строке %2 отсутствует на складе.",Выборка.ПокупкаПредставление, Выборка.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщениея,Ссылка,СтрШаблон("Покупки[%1].Покупка",Выборка.НомерСтроки-1),"Объект");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Провести проверить отрицательные остатки Упакованные заказы.
// 
// Выполняет запись движений по регистру "УпакованныеЗаказы"
// с проверкой отрицательных остатков, по новой методике
//  
// Параметры:
//  ДополнительныеСвойства -  Структура -  Дополнительные свойства
//  Движения - КоллекцияДвижений- Движения
//  Отказ- Булево - Принимает Истина в случае наличия отрицательных остатков
Процедура ПровестиПроверитьОтрицательныеОстаткиУпакованныеЗаказы(ДополнительныеСвойства, Движения, Отказ) Экспорт
	Ссылка = ДополнительныеСвойства.ДляПроведения.Ссылка;
	
	Движения.УпакованныеЗаказы.Записать();
	Движения.УпакованныеЗаказы.БлокироватьДляИзменения = Истина;
	ОтразитьДвиженияПоРегистру("УпакованныеЗаказы", ДополнительныеСвойства, Движения, Отказ);	
	Движения.УпакованныеЗаказы.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыдачаТранзитаПокупки.Покупка КАК Покупка,
		|	ВыдачаТранзитаПокупки.НомерСтроки
		|ПОМЕСТИТЬ втПосылки
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|ГДЕ
		|	ВыдачаТранзитаПокупки.Ссылка = &Ссылка
		|	и ВыдачаТранзитаПокупки.Подбор
		|	И ВыдачаТранзитаПокупки.Упакован
		|	И НЕ ВыдачаТранзитаПокупки.Ссылка.ПоОбмену
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Покупка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УпакованоОстатки.КоличествоОстаток,
		|	УпакованоОстатки.Покупка как Покупка,
		|	втПосылки.НомерСтроки,
		|	УпакованоОстатки.Покупка.Представление КАК ПокупкаПредставление
		|ИЗ
		|	РегистрНакопления.УпакованныеЗаказы.Остатки(&Гранца, Покупка В
		|		(ВЫБРАТЬ
		|			втПосылки.Покупка
		|		ИЗ
		|			втПосылки КАК втПосылки)) КАК УпакованоОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПосылки КАК втПосылки
		|		ПО УпакованоОстатки.Покупка = втПосылки.Покупка
		|ГДЕ
		|	УпакованоОстатки.КоличествоОстаток < 0";
	
	Запрос.УстановитьПараметр("Гранца", Новый Граница(Ссылка.МоментВремени(),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		Выборка= РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщениея = СтрШаблон("Заказ %1 в строке %2 отсутствует на складе.",Выборка.ПокупкаПредставление, Выборка.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщениея,Ссылка,СтрШаблон("Покупки[%1].Покупка",Выборка.НомерСтроки-1),"Объект");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры




Процедура ОтразитьДвиженияДанныеЗаказов(ДвиженияДанныеЗаказов, Ссылка) Экспорт
	Запрос = Новый Запрос;     
	Запрос.текст  ="ВЫБРАТЬ
		              |	Посылки.Ссылка.Дата КАК Период,
		              |	Посылки.Ссылка КАК Партия,
		              |	Посылки.Посылка КАК Заказ,
		              |	Посылки.Габарит КАК Габарит,
		              |	Посылки.Вес КАК Вес,
		              |	Посылки.объем КАК Объем,
		              |	1 КАК Количество,
		              |	Посылки.ОтдельнымМестом КАК ОтдельнымМестом,
		              |	Посылки.ДатаПриема КАК ДатаПриема,
		              |	НЕ Посылки.Оплачен КАК НеОплачен,
		              |	Посылки.Коробка КАК Коробка,
		              |	Посылки.МестоХранения КАК МестоХранения
		              |ИЗ
		              |	Документ.РазборКоробки.Посылки КАК Посылки
		              |ГДЕ
		              |	Посылки.Ссылка = &Ссылка
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	Группы.Ссылка.Дата,
		              |	Группы.Ссылка,
		              |	Группы.Коробка,
		              |	Группы.Габарит,
		              |	Группы.Вес,
		              |	Группы.объем,
		              |	Группы.Количество,
		              |	Группы.ОтдельнымМестом,
		              |	Группы.ДатаПриема,
		              |	ЛОЖЬ,
		              |	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки),
		              |	Группы.МестоХранения
		              |ИЗ
		              |	Документ.РазборКоробки.ГруппыНаТранзит КАК Группы
		              |ГДЕ
		              |	Группы.Ссылка = &Ссылка
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	Посылки.Ссылка.Дата КАК Период,
		              |	Посылки.Ссылка КАК Партия,
		              |	Посылки.Посылка КАК Заказ,
		              |	Посылки.Габарит КАК Габарит,
		              |	Посылки.Вес КАК Вес,
		              |	Посылки.объем КАК Объем,
		              |	1 КАК Количество,
		              |	Посылки.ОтдельнымМестом КАК ОтдельнымМестом,
		              |	Посылки.ДатаПриема КАК ДатаПриема,
		              |	НЕ Посылки.Оплачен КАК НеОплачен,
		              |	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки) КАК Коробка,
		              |	Посылки.МестоХранения КАК МестоХранения
		              |ИЗ
		              |	Документ.Приходная.Посылки КАК Посылки
		              |ГДЕ
		              |	Посылки.Ссылка = &Ссылка
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	Покупки.Ссылка.Дата,
		              |	Покупки.Ссылка,
		              |	Покупки.Покупка,
		              |	Покупки.Габарит,
		              |	Покупки.Вес,
		              |	Покупки.объем,
		              |	1,
		              |	Покупки.ОтдельнымМестом,
		              |	Покупки.ДатаПриема,
		              |	НЕ Покупки.Оплачен,
		              |	ЗНАЧЕНИЕ(Справочник.Коробки.БезКоробки),
		              |	Покупки.МестоХранения
		              |ИЗ
		              |	Документ.Приходная.Покупки КАК Покупки
		              |ГДЕ
		              |	ТИПЗНАЧЕНИЯ(Покупки.Покупка) = ТИП(Справочник.Коробки)
		              |	И Покупки.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();        
	выборка = Результат.Выбрать();
	ДвиженияДанныеЗаказов.записывать = Истина;
	Пока Выборка.Следующий() Цикл
		движение = ДвиженияДанныеЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(движение,ВЫборка);
	КонецЦикла;		
	
КонецПроцедуры	




// Процедура формирования движений по регистру "НеВыгруженноНаСайт ".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьНеВыгруженноНаСайт(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаНеВыгруженноНаСайт = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНеВыгруженноНаСайт;
	
	Если Отказ ИЛИ ТаблицаНеВыгруженноНаСайт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНеВыгруженноНаСайт = Движения.НеВыгруженноНаСайт;
	ДвиженияНеВыгруженноНаСайт.Записывать = Истина;
	ДвиженияНеВыгруженноНаСайт.Загрузить(ТаблицаНеВыгруженноНаСайт);
	
КонецПроцедуры

Процедура ОтразитьТранзит(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаТранзит = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТранзит;
	
	Если Отказ ИЛИ ТаблицаТранзит.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияТранзит = Движения.Транзит;
	ДвиженияТранзит.Записывать = Истина;
	ДвиженияТранзит.Загрузить(ТаблицаТранзит);
	
КонецПроцедуры




Процедура ОтразитьОстаткиТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаОстаткиТоваров = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОстаткиТоваров;
	
	Если Отказ ИЛИ ТаблицаОстаткиТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОстаткиТоваров = Движения.ОстаткиТоваров;
	ДвиженияОстаткиТоваров.Записывать = Истина;
	ДвиженияОстаткиТоваров.Загрузить(ТаблицаОстаткиТоваров);
	
КонецПроцедуры


Процедура ОтразитьУпакованныеЗаказы(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаУпакованныеЗаказы = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУпакованныеЗаказы;
	
	Если Отказ ИЛИ ТаблицаУпакованныеЗаказы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияУпакованныеЗаказы= Движения.УпакованныеЗаказы;
	ДвиженияУпакованныеЗаказы.Записывать = Истина;
	ДвиженияУпакованныеЗаказы.Загрузить(ТаблицаУпакованныеЗаказы);
	
КонецПроцедуры



Процедура ОтразитьЗаказыВПосылках(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаЗаказыВПосылках = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыВПосылках;
	
	Если Отказ ИЛИ ТаблицаЗаказыВПосылках.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаказыВПосылках = Движения.ЗаказыВПосылках;
	ДвиженияЗаказыВПосылках.Записывать = Истина;
	ДвиженияЗаказыВПосылках.Загрузить(ТаблицаЗаказыВПосылках);
	
КонецПроцедуры

Процедура ОтразитьПриход(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаПриход = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПриход;
	
	Если Отказ ИЛИ ТаблицаПриход.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПриход = Движения.Приход;
	ДвиженияПриход.Записывать = Истина;
	ДвиженияПриход.Загрузить(ТаблицаПриход);
	
КонецПроцедуры

Процедура ОтразитьРасход(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица_Движений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасход;
	
	Если Отказ ИЛИ Таблица_Движений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПриход = Движения.Расход;
	ДвиженияПриход.Записывать = Истина;
	ДвиженияПриход.Загрузить(Таблица_Движений);
	
КонецПроцедуры


Процедура ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаПродажи = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи;
	
	Если Отказ ИЛИ ТаблицаПродажи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПродажи = Движения.Продажи;
	ДвиженияПродажи.Записывать = Истина;
	ДвиженияПродажи.Загрузить(ТаблицаПродажи);
	
КонецПроцедуры

Процедура ОтразитьКПолучению(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаКПолучению = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКПолучению;
	
	Если Отказ ИЛИ ТаблицаКПолучению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияКПолучению = Движения.КПолучению;
	ДвиженияКПолучению.Записывать = Истина;
	ДвиженияКПолучению.Загрузить(ТаблицаКПолучению);
	
КонецПроцедуры


#КонецОбласти