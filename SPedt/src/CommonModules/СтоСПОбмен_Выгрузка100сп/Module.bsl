// Выгрузка на сайт 100СП 
//
// Параметры:
//  хмл_отправили - Строка - xml строка выгрузки информации на сайт
// Возвращаемое значение: - Структура - поля:
//   авторизацияВыполнена	- Булево - Прошла авторизация на сайте
//   incomes - ТаблицаЗначений - Приходы
//   superGroups - ТаблицаЗначений, Супергруппы (Создание)
//	 superGroupReceipts - ТаблицаЗначений, Регистрация супергрупп (на конечной точке)
//   superGroupStages - ТаблицаЗначений, Редактирование колена маршрута супергруппы
//	 	
Функция Выгрузить(хмл_отправили) Экспорт
	АдресСкрипта = Константы.АдресВыгрузкиНасайт.Получить();
	стр_Результат=новый Структура;
	хмл_получили =ПолученныеДанные(хмл_отправили, АдресСкрипта);
	Если хмл_получили=Неопределено Тогда 
		стр_Результат.Вставить("Получили","Не удалось соединиться с сайтом");
	Иначе	
		стр_Результат.Вставить("Получили",хмл_получили);
		стр_Разбор=Разбор(хмл_получили);
		стр_Результат.Вставить("Разбор",стр_Разбор);
	КонецЕсли;

	Возврат стр_Результат;
КонецФункции	

Функция Загрузить(хмл_отправили) Экспорт
	АдресСкрипта = Константы.АдресЗагрузкиССайта.Получить();
	стр_Результат=новый Структура;
	хмл_получили =ПолученныеДанные(хмл_отправили,АдресСкрипта);
	Если хмл_получили=Неопределено Тогда 
		стр_Результат.Вставить("Получили","Не удалось соединиться с сайтом");
	Иначе	
		стр_Результат.Вставить("Получили",хмл_получили);
		стр_Разбор=Разбор2(хмл_получили);
		стр_Результат.Вставить("Разбор",стр_Разбор);
	КонецЕсли;

	Возврат стр_Результат;
КонецФункции	




Функция ПолученныеДанные(ДанныеXML, АдресСкрипта)
	Параметры    = новый Структура;
	Параметры.Вставить("token",Константы.Токен.Получить());
	Параметры.Вставить("xml", ДанныеXML);
//	АдресСкрипта = Константы.АдресВыгрузкиНасайт.Получить();

	ПолученныйФайл=СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры,АдресСкрипта);
	Если ПолученныйФайл=Неопределено Тогда Возврат Неопределено КонецЕсли;

	ПолученныеДанные=СтоСПОбмен_Общий.ФайлВСтроку(ПолученныйФайл);
	Возврат ПолученныеДанные;
КонецФункции	



//Схема http://www.100sp.ru/api/distributor/back
// Преобразует xml с сайта в структуру таблиц
//
// Параметры:
//  ПолученныеДанные  - Строка - xml строка полученная с сайта 100сп после выгрузки 
//
// Возвращаемое значение:
//   структура   - структура таблтиц ответов на выгрузку
//
//   авторизацияВыполнена	- Прошла авторизация на сайте
//   incomes                -  Приходы
//   superGroups            -  Супергруппы (Создание)
//	 superGroupReceipts     -  Регистрация супергрупп (на конечной точке)
//   superGroupStages       -  Редактирование колена маршрута супергруппы
//	 	
Функция Разбор2(ПолученныеДанные)
	пространствоИмен = "http://www.100sp.ru/api/distributor/back";

	
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"uid=""""","uid=""0""");
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"<firstPid></firstPid>","<firstPid>0</firstPid>");
    ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"<firstPid/>","<firstPid>0</firstPid>");
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"<firstIncomeCode/>","<firstIncomeCode>0</firstIncomeCode>");
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"packageId=""""","packageId=""0""");
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"http://www.100sp.ru",пространствоИмен);
	
	стр_Результат	 = Новый Структура;
	
	авторизацияВыполнена	= ложь;
	Тип_distributors		= ФабрикаXDTO.Тип(пространствоИмен, "distributors");
	
	ЧтениеXML 				= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);

	Объект_distributors		= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена = истина;
	КонецЕсли;
	Если Объект_distributors.megaordersPrices<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.megaordersPrices.item);
		стр_Результат.Вставить("megaordersPrices",ТЗ);
	КонецЕсли;
	Если Объект_distributors.tariffs<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.tariffs.tariff);
		стр_Результат.Вставить("tariffs",ТЗ);
	КонецЕсли;
	Если Объект_distributors.usersPhones<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.usersPhones.userPhone);
		стр_Результат.Вставить("userPhone",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.reusableStickerLogs<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.reusableStickerLogs.reusableStickerLog);
		стр_Результат.Вставить("reusableStickerLog",ТЗ);
	КонецЕсли;
	Если Объект_distributors.distributorTimetable<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.distributorTimetable.distributor);
		стр_Результат.Вставить("distributorTimetable",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.distributorHolidays <> Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.distributorHolidays.distributorHoliday);
		стр_Результат.Вставить("distributorHoliday",ТЗ);
	КонецЕсли;
	
	
		             
	        
	
	стр_Результат.Вставить("авторизацияВыполнена",авторизацияВыполнена);
	Возврат стр_Результат;
КонецФункции



//Схема http://www.100sp.ru/api/distributor/upload/back
// Преобразует xml с сайта в структуру таблиц
//
// Параметры:
//  ПолученныеДанные  - Строка - xml строка полученная с сайта 100сп после выгрузки 
//
// Возвращаемое значение:
//   структура   - структура таблтиц ответов на выгрузку
//
//   авторизацияВыполнена	- Прошла авторизация на сайте
//   incomes                -  Приходы
//   superGroups            -  Супергруппы (Создание)
//	 superGroupReceipts     -  Регистрация супергрупп (на конечной точке)
//   superGroupStages       -  Редактирование колена маршрута супергруппы
//	 	
Функция Разбор(ПолученныеДанные)
	пространствоИмен = "http://www.100sp.ru/api/distributor/upload/back";

	
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"uid=""""","uid=""0""");
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"<firstPid></firstPid>","<firstPid>0</firstPid>");
    ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"<firstPid/>","<firstPid>0</firstPid>");
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"<firstIncomeCode/>","<firstIncomeCode>0</firstIncomeCode>");
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"<actualFirstIncomeCode/>","<actualFirstIncomeCode>0</actualFirstIncomeCode>");
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"packageId=""""","packageId=""0""");
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"http://www.100sp.ru",пространствоИмен);
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"Comment", "comment");
	
	стр_Результат	 = Новый Структура;
	
	авторизацияВыполнена	= ложь;
	Тип_distributors		= ФабрикаXDTO.Тип(пространствоИмен, "distributors");
	
	ЧтениеXML 				= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);

	Объект_distributors		= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена = истина;
	КонецЕсли;
	
	Если Объект_distributors.reusableStickerConnects <>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.reusableStickerConnects.reusableStickerConnect);
		стр_Результат.Вставить("reusableStickerConnect",ТЗ);
	КонецЕсли;
		
		
	Если Объект_distributors.distributorHolidays<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.distributorHolidays.distributorHoliday);
		стр_Результат.Вставить("distributorHoliday",ТЗ);
	КонецЕсли;
	Если Объект_distributors.tariffs<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.tariffs.tariff);
		стр_Результат.Вставить("tariffs",ТЗ);
	КонецЕсли;	
	
	Если Объект_distributors.tariffsByDestination<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.tariffsByDestination.tariffByDestination);
		стр_Результат.Вставить("tariffsByDestination",ТЗ);
	КонецЕсли;	
	
	Если Объект_distributors.distributorHolidaysAdd<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.distributorHolidaysAdd.distributorHoliday);
		стр_Результат.Вставить("distributorHoliday",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.usersPhones<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.usersPhones.userPhone);
		стр_Результат.Вставить("userPhone",ТЗ);
	КонецЕсли;
		
		
	
	Если Объект_distributors.distributorTimetable<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.distributorTimetable.distributor);
		стр_Результат.Вставить("distributorTimetable",ТЗ);
	КонецЕсли;
		
		
	Если Объект_distributors.incomes<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.incomes.income);
		стр_Результат.Вставить("incomes",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.preIncomes<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.preIncomes.preIncome);
		стр_Результат.Вставить("preincomes",ТЗ);
	КонецЕсли;

	
	
	Если Объект_distributors.deliveries<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.deliveries.delivery);
		стр_Результат.Вставить("deliveries",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.transfers<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.transfers.transfer);
		стр_Результат.Вставить("transfers",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.returns<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.returns.return);
		стр_Результат.Вставить("returns",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.discards<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.discards.discard);
		стр_Результат.Вставить("discards",ТЗ);
	КонецЕсли;
	
	
	Если Объект_distributors.superGroups<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.superGroups.superGroup);
		стр_Результат.Вставить("superGroups",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.superGroupReceipts<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.superGroupReceipts.superGroupReceipt);
		стр_Результат.Вставить("superGroupReceipts",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.superGroupStages<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.superGroupStages.superGroupStage);
		стр_Результат.Вставить("superGroupStages",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.lostOrders<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.lostOrders.lostOrder);
		стр_Результат.Вставить("lostOrders",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.returnsTransfers<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.returnsTransfers.returnsTransfer);
		стр_Результат.Вставить("returnsTransfers",ТЗ);
	КонецЕсли;
	        
	
	стр_Результат.Вставить("авторизацияВыполнена",авторизацияВыполнена);
	Возврат стр_Результат;
КонецФункции


Функция СтруктураПротокола() Экспорт
	Возврат новый Структура ("ДатаНачала, ДатаОкончания,Описание, Отправили, Результат, ПолученныеДанные, СообщениеОшибки");
КонецФункции	

Процедура  	СохранитьПротоколОбмена(СтрокаПротокола,Документ) Экспорт
	мз					= РегистрыСведений.ПротоколыОбмена.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(мз, СтрокаПротокола);
	мз.Период			= СтрокаПротокола.ДатаНачала;
	мз.Документ			= Документ;
	мз.ДатаОкончания	= СтрокаПротокола.ДатаОкончания;
	мз.Результат		= СтрокаПротокола.Результат;
	мз.ПолученныеДанные	= СтрокаПротокола.ПолученныеДанные;
	мз.Записать();
КонецПроцедуры	