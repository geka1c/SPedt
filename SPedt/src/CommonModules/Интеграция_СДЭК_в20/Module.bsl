#Область Запросы


Функция ЗапросСписокОфисов(Параметры)
	
	Данные			= Новый Структура;
	Если Параметры.cityCode<>"" Тогда
		Данные.Вставить("city_code", 	Параметры.cityCode); 		//Код города
	КонецЕсли;
	//Данные.Вставить("weight_max", 		ТекущаяДата()); 			//максимальный вес в кг
	//Данные.Вставить("allowed_cod", 	"1"); 		//Разрешен наложенный платеж
	Данные.Вставить("is_handout", 	"1"); 		//является ли пунктом выдачи
	
	СтрокаПараметров 	="";
	ПервыйПараметр 		= Истина;
	Для каждого стр из Данные Цикл
		СтрокаПараметров 	= СтрокаПараметров+?(ПервыйПараметр,"","&")+стр.Ключ+"="+стр.Значение;
		ПервыйПараметр 		= Ложь;
	КонецЦикла;
	Возврат СтрокаПараметров;
КонецФункции	

Функция ЗапросИнформацияОЗаказеПоНомеруЗаказа(Параметры)
	Данные			= Новый Структура;
	Данные.Вставить("cdek_number", 	Параметры.НомерЗаказа); 		//uid заказа в СДЭК
	СтрокаПараметров 	= "";
	ПервыйПараметр 		= Истина;
	Для каждого стр из Данные Цикл
		СтрокаПараметров 	= СтрокаПараметров+?(ПервыйПараметр,"","&")+стр.Ключ+"="+стр.Значение;
		ПервыйПараметр 		= Ложь;
	КонецЦикла;
//	СтрокаПараметров 	= "/"+Параметры.ИдентификаторЗаказаВТК;
	Возврат СтрокаПараметров;
КонецФункции

Функция ЗапросИнформацияОЗаказе(Параметры)
	//Данные			= Новый Структура;
	//Данные.Вставить("cdek_number", 	Параметры.ИдентификаторЗаказаВТК); 		//uid заказа в СДЭК
	//СтрокаПараметров 	= "";
	//ПервыйПараметр 		= Истина;
	//Для каждого стр из Данные Цикл
	//	СтрокаПараметров 	= СтрокаПараметров+?(ПервыйПараметр,"","&")+стр.Ключ+"="+стр.Значение;
	//	ПервыйПараметр 		= Ложь;
	//КонецЦикла;
	//Если Параметры.Свойство("im_number") Тогда
	//	//СтрокаПараметров 	= "?im_number="""+Параметры.im_number+"""";
	//	СтрокаПараметров 	= "?im_number="+Параметры.im_number;

	//Иначе	
		СтрокаПараметров 	= "/"+Параметры.ВнутреннийНомер;
	//КонецЕсли;	
	Возврат СтрокаПараметров;
КонецФункции	

Функция ЗапросРасчитатьСтоимостьВсеДоступныеТарифы(Параметры)
	ПараметрыJSON	= Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ", Истина); 
	з_JSON			= новый ЗаписьJSON;
	з_JSON.УстановитьСтроку(ПараметрыJSON);
	
	Данные			= Новый Соответствие;
	Данные.Вставить("type", 		"1"); 		//интернет заказ
	//Данные.Вставить("date", 		ТекущаяДата()); 			//Сантиметры
	Данные.Вставить("currency", 	"1"); 		//Валюта рубль
	Данные.Вставить("lang", 		"rus"); 
	Данные.Вставить("from_location",Новый Структура("code", Формат(Параметры.КодГородаОтправителя,"ЧГ=0")));
	Данные.Вставить("to_location",	Новый Структура("code", Формат(Параметры.КодГородаПолучателя,"ЧГ=0")));
	СписокМест = Новый массив;
	СписокМест.Добавить(Новый Структура("weight, length, width, height", 
										Параметры.Вес,
										Параметры.Длина,
										Параметры.Ширина,
										Параметры.Высота));
	
	Данные.Вставить("packages",		СписокМест	);
	
	ЗаписатьJSON(з_JSON,Данные);
	стр_JSON=з_JSON.Закрыть();
	Возврат стр_JSON;
КонецФункции	

Функция ЗапросРегистрацияЗаказа(Параметры)
	док = Параметры.ДокументОтправления;
	
	ПараметрыJSON	= Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ", Истина); 
	з_JSON			= новый ЗаписьJSON;
	з_JSON.УстановитьСтроку(ПараметрыJSON);
	
	Данные			= Новый Соответствие;
	Данные.Вставить("type", 				"1"); 									//Тип заказа интернет заказ
	Данные.Вставить("number", 				док.Номер+"_"+Параметры.Отправление+"_"+Формат(Год(Док.Дата),"ЧГ=0;")+"_"+Месяц(Док.Дата)+"_"+День(Док.Дата)); 	//Номер заказа в ИС Клиента
	//выбранныйТариф = Параметры.РасчетКалькулятораПочта.НайтиСтроки(новый структура("ВыбралУчастник",истина));
	//Если выбранныйТариф.Количество()=0 Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран тариф!");
	//	Возврат неопределено;
	//КонецЕсли;	
	КодТарифа = ПолучитьТариф(Параметры);
	Данные.Вставить("tariff_code", 			КодТарифа ); 		//Номер заказа в ИС Клиента
	
	Данные.Вставить("shipment_point", 		док.СДЭКкодПВЗсдачи); 		//Код ПВЗ СДЭК, на который будет производиться забор отправления, либо самостоятельный привоз клиентом
	Если Параметры.Тип = "sdec" Тогда
		Данные.Вставить("delivery_point", 	док.КодПВЗ); 		//Код ПВЗ СДЭК, на который будет доставлена посылка
	КонецЕсли;
	Данные.Вставить("date_invoice",		 	ПолучитьДатуUTC(док.дата));  //Дата инвойса
	
	//Получатель начало
	recipient = Новый Структура;
	recipient.Вставить("name",док.ФИО);
	Телефоны = Новый Массив;
	Телефоны.Добавить(Новый Структура("number",док.Телефон));
	recipient.Вставить("phones",Телефоны);
	Данные.Вставить("recipient", 			recipient); 						//Получатель
	
	//Данные.Вставить("from_location",Новый Структура("code", Формат(Параметры.ГородОтправитель.Код,"ЧГ=0")));
	
	//Адрес Получения Если заказ до двери Начало
	Если Параметры.Тип = "sdecCourier" Тогда
		to_location = Новый Структура;
		to_location.Вставить("code",		док.cityCode);
		to_location.Вставить("city",		док.Город);
		to_location.Вставить("region", 		док.Регион);
		to_location.Вставить("postal_code", док.Индекс);
		to_location.Вставить("address", 	док.Адрес);
		Данные.Вставить("to_location", 	to_location); 		//Адрес Получения Если заказ до двери
	Иначе	
		Данные.Вставить("delivery_point", 	док.КодПВЗ); 
	КонецЕсли;

	
	//Список информации по местам (упаковкам) Начало
		packages = Новый Структура;
		packages.Вставить("number",		1); 					//Номер упаковки (можно использовать порядковый номер упаковки заказа или номер заказа), уникален в пределах заказа. Идентификатор заказа в ИС Клиента
		packages.Вставить("weight", 		Параметры.Вес);
		packages.Вставить("length", 		Параметры.Длина);
		packages.Вставить("width", 		    Параметры.Ширина);
		packages.Вставить("height", 		Параметры.Высота);
		
		// Позиции товаров в упаковке начало
		items = Новый массив; 										
		
		НаименованиеОтправления = "";
		Если ЗначениеЗаполнено(Параметры.Отправление) Тогда 
			ПереченьЗаказов = док.Заказы.найтистроки(Новый Структура("Отправление", Параметры.Отправление))
		Иначе	
			ПереченьЗаказов = док.Заказы;
		КонецЕсли;
		Для каждого элем из ПереченьЗаказов Цикл
			Если ЗначениеЗаполнено(элем.Посылка) Тогда
				НаименованиеОтправления = НаименованиеОтправления + "Пс("+ элем.Посылка.Код+"), ";
			Иначе
				НаименованиеОтправления = НаименованиеОтправления + "Пк("+  элем.Покупка.Код+"), ";
			КонецЕсли;	
		КонецЦикла;	
		item = Новый Структура;
		item.Вставить("name",Лев(НаименованиеОтправления,250) );     							//Наименование товара (может также содержать описание товара: размер, цвет)
		item.Вставить("ware_key", док.Коробка.Код+"_"+Параметры.Отправление);								//Идентификатор/артикул товара
		item.Вставить("payment", Новый Структура("value",0));  	//Сумма наложенного платежа (в случае предоплаты = 0)
		item.Вставить("cost",0);     						//Объявленная стоимость товара (за единицу товара в валюте взаиморасчетов, значение >=0). С данного значения рассчитывается страховка
		//item.Вставить("cost",Параметры.ОбъявленнаяСтоимость);     						//Объявленная стоимость товара (за единицу товара в валюте взаиморасчетов, значение >=0). С данного значения рассчитывается страховка
		item.Вставить("weight",Параметры.Вес);  										//	Вес (за единицу товара, в граммах)
		item.Вставить("amount",1);  													 //Количество единиц товара (в штуках) Максимальное количество - 999.
		
		items.Добавить(item);
		packages.Вставить("items", 	items);
		Данные.Вставить("packages", 	packages); 			//Список информации по местам (упаковкам)
	
	
	
	ЗаписатьJSON(з_JSON,Данные);
	стр_JSON=з_JSON.Закрыть();
	Возврат стр_JSON;
	
	
КонецФункции	

Функция ЗапросФормированиеКвитанцииКЗаказу(Параметры)
	ПараметрыJSON	= Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ", Истина); 
	з_JSON			= новый ЗаписьJSON;
	з_JSON.УстановитьСтроку(ПараметрыJSON);
	массивЗаказов = новый Массив;
	Для каждого элем из Параметры Цикл
			массивЗаказов.Добавить(Новый Структура("order_uuid",элем));
	КонецЦикла;
//			массивЗаказов.Добавить(Новый Структура("cdek_number",Параметры.НомерЗаказа));
	
	Данные			= Новый Соответствие;
	Данные.Вставить("orders", 				массивЗаказов); 		//Список заказов
	Данные.Вставить("copy_count", 			4); 					//Число копий одной квитанции на листе. Рекомендовано указывать не менее 2, одна приклеивается на груз, вторая остается у отправителя
	
	ЗаписатьJSON(з_JSON,Данные);
	стр_JSON=з_JSON.Закрыть();
	Возврат стр_JSON;
КонецФункции	


Функция ЗапросПолучениеКвитанцииКЗаказу(ИдентификаторКвитанцииВТК)

	СтрокаПараметров 	= "/"+ИдентификаторКвитанцииВТК;
	Возврат СтрокаПараметров;

КонецФункции	



////////////////

Функция ПолучитьDeleteЗапросом(Параметры,Скрипт) 
	Сервер 				= Справочники.ТранспортныеКомпании.СДЭК.Сервер; //"api.edu.cdek.ru";
	ПервыйПараметр		= Истина;
	СтрокаПараметров 	= "";                       
	Если ТипЗнч(Параметры) = Тип("Строка") Тогда
		СтрокаПараметров = Параметры;
	Иначе
		Для каждого стр из Параметры Цикл
			СтрокаПараметров 	= СтрокаПараметров+?(ПервыйПараметр,"","&")+стр.Ключ+"="+стр.Значение;
			ПервыйПараметр 		= Ложь;
		КонецЦикла;
	КонецЕсли;
	
    СтрокаСоединения 	= СтрокаСоединенияИнформационнойБазы();
    СерверИсточник 		= НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
    
    ЗаголовокHTTP 		= Новый Соответствие();
    ЗаголовокHTTP.Вставить("Referer", 		СерверИсточник);
//    ЗаголовокHTTP.Вставить("Content-Type", 	"multipart/form-data;");
    
ДанныеАвторизации = ПолучитьТокен();
ЗаголовокHTTP.Вставить("Content-Type", "application/json");
ЗаголовокHTTP.Вставить("Authorization",  "Bearer " + ДанныеАвторизации.access_token);
		
	HTTPЗапрос 			= Новый HTTPЗапрос(Скрипт, 	ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
   
	ССЛ					= Новый ЗащищенноеСоединениеOpenSSL;
	НТТР 				= Новый HTTPСоединение(Сервер,,,,,,ССЛ);
    Попытка
        ответ 	= НТТР.Удалить(HTTPЗапрос);
        тело	= ответ.ПолучитьТелоКакСтроку();
        Если ответ.КодСостояния = 200 или ответ.КодСостояния = 202 Тогда
        	Возврат Тело;
		Иначе        
			ТекстСообщения	= "Ошибка: "+ Символы.ПС + 
							  "	Код состояния: " + ответ.КодСостояния +Символы.ПС+ 
							  "	тело		 : " + тело;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			возврат Неопределено;
        КонецЕсли
    Исключение
		ТекстСообщения	= "Неудачная попытка соединения: " + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
        Возврат Неопределено;
    КонецПопытки;
КонецФункции


Функция ПолучитьПостЗапросом(Параметры,Скрипт, БезАвторизации = Ложь) 
	Тестируем = Ложь;
	Если Тестируем Тогда
		Сервер 				= "api.edu.cdek.ru";
	Иначе	
		Сервер 				= Справочники.ТранспортныеКомпании.СДЭК.Сервер; //"api.edu.cdek.ru";
	КонецЕсли;	
	ПервыйПараметр		= Истина;
	СтрокаПараметров 	= "";                       
	Если ТипЗнч(Параметры) = Тип("Строка") Тогда
		СтрокаПараметров = Параметры;
	Иначе
		Для каждого стр из Параметры Цикл
			СтрокаПараметров 	= СтрокаПараметров+?(ПервыйПараметр,"","&")+стр.Ключ+"="+стр.Значение;
			ПервыйПараметр 		= Ложь;
		КонецЦикла;
	КонецЕсли;
	
    СтрокаСоединения 	= СтрокаСоединенияИнформационнойБазы();
    СерверИсточник 		= НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
    
    ЗаголовокHTTP 		= Новый Соответствие();
    ЗаголовокHTTP.Вставить("Referer", 		СерверИсточник);
//    ЗаголовокHTTP.Вставить("Content-Type", 	"multipart/form-data;");
    
	Если БезАвторизации	Тогда
		ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");	
	Иначе	
		ДанныеАвторизации = ПолучитьТокен();
		ЗаголовокHTTP.Вставить("Content-Type", "application/json");
		ЗаголовокHTTP.Вставить("Authorization",  "Bearer " + ДанныеАвторизации.access_token);
    КонецЕсли;
    HTTPЗапрос 			= Новый HTTPЗапрос(Скрипт, 	ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
   
	ССЛ					= Новый ЗащищенноеСоединениеOpenSSL;
	НТТР 				= Новый HTTPСоединение(Сервер,,,,,,ССЛ);
    Попытка
        ответ 	= НТТР.ОтправитьДляОбработки(HTTPЗапрос);
        тело	= ответ.ПолучитьТелоКакСтроку();
        Если ответ.КодСостояния = 200 или ответ.КодСостояния = 202 Тогда
        	Возврат Тело;
		Иначе        
			ТекстСообщения	= "Ошибка: "+ Символы.ПС + 
							  "	Код состояния: " + ответ.КодСостояния +Символы.ПС+ 
							  "	тело		 : " + тело;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			возврат Неопределено;
        КонецЕсли
    Исключение
		ТекстСообщения	= "Неудачная попытка соединения: " + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
        Возврат Неопределено;
    КонецПопытки;
КонецФункции


//В ответе Возвращаем результат запроса, убрали из ответа неопределено
Функция ПолучитьПостЗапросом2(Параметры,Скрипт, БезАвторизации = Ложь) 
	Тестируем = Ложь;
	Если Тестируем Тогда
		Сервер 				= "api.edu.cdek.ru";
	Иначе	
		Сервер 				= Справочники.ТранспортныеКомпании.СДЭК.Сервер; //"api.edu.cdek.ru";
	КонецЕсли;	
	ПервыйПараметр		= Истина;
	СтрокаПараметров 	= "";                       
	Если ТипЗнч(Параметры) = Тип("Строка") Тогда
		СтрокаПараметров = Параметры;
	Иначе
		Для каждого стр из Параметры Цикл
			СтрокаПараметров 	= СтрокаПараметров+?(ПервыйПараметр,"","&")+стр.Ключ+"="+стр.Значение;
			ПервыйПараметр 		= Ложь;
		КонецЦикла;
	КонецЕсли;
	
    СтрокаСоединения 	= СтрокаСоединенияИнформационнойБазы();
    СерверИсточник 		= НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
    
    ЗаголовокHTTP 		= Новый Соответствие();
    ЗаголовокHTTP.Вставить("Referer", 		СерверИсточник);
//    ЗаголовокHTTP.Вставить("Content-Type", 	"multipart/form-data;");
    
	Если БезАвторизации	Тогда
		ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");	
	Иначе	
		ДанныеАвторизации = ПолучитьТокен();
		ЗаголовокHTTP.Вставить("Content-Type", "application/json");
		ЗаголовокHTTP.Вставить("Authorization",  "Bearer " + ДанныеАвторизации.access_token);
    КонецЕсли;
    HTTPЗапрос 			= Новый HTTPЗапрос(Скрипт, 	ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
   
	ССЛ					= Новый ЗащищенноеСоединениеOpenSSL;
	НТТР 				= Новый HTTPСоединение(Сервер,,,,,,ССЛ);
	Результат = Новый Структура("Ответ, Тело, Выполнен, Ошибка");
	Результат.Выполнен =Ложь;
    Попытка
        ответ 	= НТТР.ОтправитьДляОбработки(HTTPЗапрос);
        тело	= ответ.ПолучитьТелоКакСтроку();
		Результат.Ответ = Ответ;
		Результат.Тело 	= Тело;
		
		Если ответ.КодСостояния = 200 или ответ.КодСостояния = 202 Тогда
			Результат.Выполнен = Истина
		Иначе        
			ТекстСообщения	= "Ошибка: "+ Символы.ПС + 
							  "	Код состояния: " + ответ.КодСостояния +Символы.ПС+ 
							  "	тело		 : " + тело;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Результат.Ошибка = ТекстСообщения;
		  КонецЕсли
    Исключение
		ТекстСообщения	= "Неудачная попытка соединения: " + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
        Результат.Ошибка = ТекстСообщения;
	КонецПопытки;
	Возврат Результат;
КонецФункции


Функция ПолучитьГетЗапросом(Параметры, Скрипт,ДвоичныеД = Ложь)  
	
	Тестируем = Ложь;
	Если Тестируем Тогда
		Сервер 				= "api.edu.cdek.ru";
	Иначе	
		Сервер 				= Справочники.ТранспортныеКомпании.СДЭК.Сервер; //"api.edu.cdek.ru";
	КонецЕсли;
	
	
	ЗаголовокHTTP 		= Новый Соответствие();
//	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=UTF-8");
	ДанныеАвторизации = ПолучитьТокен();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json");
	ЗаголовокHTTP.Вставить("Authorization",  "Bearer " + ДанныеАвторизации.access_token);

	
	ССЛ					= Новый ЗащищенноеСоединениеOpenSSL;
	НТТР 				= Новый HTTPСоединение(Сервер,,,,,,ССЛ);

	HTTPЗапрос 			= Новый HTTPЗапрос(Скрипт+?(Параметры="","","?" + Параметры),ЗаголовокHTTP);
	
	Попытка
		Ответ 		 = НТТР.Получить(HTTPЗапрос);
		Если ответ.КодСостояния = 200 Тогда
			Если ДвоичныеД Тогда
				Тело = Ответ.ПолучитьТелоКакДвоичныеДанные();	
				Адрес=ПоместитьВоВременноеХранилище(Тело,новый УникальныйИдентификатор);
				Возврат Адрес
				
			Иначе
				Тело		 = Ответ.ПолучитьТелоКакСтроку();
        		Возврат Тело;
				
			КонецЕсли
		Иначе        
			Тело		 = Ответ.ПолучитьТелоКакСтроку();
			ТекстСообщения	= "Ошибка: "+ Символы.ПС + 
							  "	Код состояния: " + ответ.КодСостояния +Символы.ПС+ 
							  "	тело		 : " + тело;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			возврат Неопределено;
        КонецЕсли
	Исключение
		ТекстСообщения	= "Неудачная попытка соединения: " + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
        Возврат Неопределено;
	КонецПопытки;
КонецФункции

функция ПолучитьТокен()
	АдресСкрипта 	= "v2/oauth/token";

	ДанныеАвторизации = Константы.СДЭК_НастройкиСоединения.Получить().Получить();
	Если не (ДанныеАвторизации =  Неопределено  или
		ДанныеАвторизации.СрокДействияТокена < ТекущаяДата()) Тогда
		Возврат ДанныеАвторизации;
	КонецЕсли;
	
	Параметры			= Новый Структура;
	Параметры.Вставить("grant_type", 		"client_credentials"); 
	Тестируем = Ложь;
	Если Тестируем Тогда
		Параметры.Вставить("client_id", 		"EMscd6r9JnFiQ3bLoyjJY6eM78JrJceI"); 		
		Параметры.Вставить("client_secret", 	"PjLZkKBHEiLK3YsjtNrt3TGNG0ahs3kG"); 
	Иначе
		Параметры.Вставить("client_id", 		Справочники.ТранспортныеКомпании.СДЭК.Логин);//"EMscd6r9JnFiQ3bLoyjJY6eM78JrJceI"); 		
		Параметры.Вставить("client_secret", 	Справочники.ТранспортныеКомпании.СДЭК.Пароль);//"PjLZkKBHEiLK3YsjtNrt3TGNG0ahs3kG"); 
	КонецЕсли;	
	
	СрокДействияТокена 	= ТекущаяДата(); 
	ответ 				= ПолучитьПостЗапросом(Параметры,АдресСкрипта, Истина);
	ч_JSON				= новый ЧтениеJSON;
	ч_JSON.УстановитьСтроку(ответ);
	СтруктураОтвет 		= Интеграция_ПочтаРоссии.ОбъектJSONВструктуру(ч_JSON);
	СтруктураОтвет.вставить("СрокДействияТокена", СрокДействияТокена + СтруктураОтвет.expires_in-60);
	
	НастройкиСоединения = новый ХранилищеЗначения(СтруктураОтвет);
	Константы.СДЭК_НастройкиСоединения.Установить(НастройкиСоединения);
	
	Возврат СтруктураОтвет;
КонецФункции	

#КонецОбласти 



#Область ПрограммныйИнтерфейс

Функция ПолучитьФайлПоurl(url) Экспорт
	СтрокаПоиска 	= "v2/print/orders";
	Позиция 		= СтрНайти(url,СтрокаПоиска)-1;// = 24
	АдресСкрипта 	= Прав(url,СтрДлина(url)-Позиция);
	
	Протокол						= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола(Перечисления.ВидыОбменовСДЭК.ПолучитьКвитанцию);
	Протокол.Результат				= "error";
	


	Протокол.ОтправленныеДанные  = url;
	
	Протокол.ПолученныеДанные    = ПолучитьГетЗапросом("", АдресСкрипта, истина);
	Протокол.Результат			 = ?(Протокол.ПолученныеДанные = неопределено ,"error","ok");
	
	Протокол.ДатаОкончания = ТекущаяДата();
	
	Возврат	Протокол; 
	

КонецФункции	

Функция РассчитатьСтоимостьВсеТарифы(Параметры) Экспорт
	АдресСкрипта 					= "v2/calculator/tarifflist";
	Протокол						= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола();
	Протокол.РасчетКалькулятора		= "";
	Протокол.ТекстОшибки			= "";
	Протокол.ТарифТК				= 0;
	Если 	Параметры.ТочкаНазначения.Код = "0092" Тогда
		ДоставкаДоПунктаСдачиМин 	= 10; 
		ДоставкаДоПунктаСдачиМакс 	= 15;
	Иначе
		ДоставкаДоПунктаСдачиМин 	= 0;
		ДоставкаДоПунктаСдачиМакс 	= 0;
    КонецЕсли;
	
	

	Протокол.ОтправленныеДанные  = ЗапросРасчитатьСтоимостьВсеДоступныеТарифы(Параметры);
	Протокол.ДатаНачала			 = ТекущаяДата();
	Протокол.ВидОбмена			 = Перечисления.ВидыОбменовСДЭК.СтоимостьПоТарифу;

	Протокол.ПолученныеДанные    = ПолучитьПостЗапросом(Протокол.ОтправленныеДанные, АдресСкрипта);
	
	Если Протокол.ПолученныеДанные <> неопределено Тогда
		структураЖсон	= ОбменДаннымиСДЭК.РазобратьЖСОН(Протокол.ПолученныеДанные);
		Если структураЖсон.Свойство("errors") Тогда
			Протокол.Результат	  =	"error";
			
			Протокол.ТекстОшибки = "Возникли ошибки при расчете стоимости: "+Символы.ПС;
			
			Для каждого элем из структураЖсон.errors Цикл
				Протокол.ТекстОшибки 		= Протокол.ТекстОшибки 			+ "код ошибки:"+элем.code+"; описание: " +элем.message+Символы.ПС;
				Протокол.РасчетКалькулятора	= Протокол.РасчетКалькулятора	+ "код ошибки:"+элем.code+"; описание: " +элем.text+Символы.ПС;
			КонецЦикла;
			
		ИначеЕсли структураЖсон.Свойство("tariff_codes") Тогда
			МассивТарифов = новый Массив();
			Для Каждого элем из структураЖсон.tariff_codes Цикл
				Если не элем.Свойство("tariff_code") Тогда Продолжить; КонецЕсли;
				Если 	Параметры.ТочкаНазначения.Код = "0092"
					или Параметры.ТочкаНазначения.Код = "0083"	Тогда
					Если Параметры.Тип = "sdecCourier" Тогда 
						Добавляем = (элем.tariff_code = 137);//склад-дверь
					Иначе	
						Добавляем = (элем.tariff_code = 136);   //склад-склад
					КонецЕсли;					
					
				Иначе	
					Если Параметры.Тип = "sdecCourier" Тогда 
						Добавляем = (	элем.delivery_mode = 3);//склад-дверь
					Иначе	
						Добавляем = (элем.delivery_mode = 4);   //склад-склад
					КонецЕсли;
				КонецЕсли;	
				Если Добавляем Тогда
									
					ПротоколТарифа	= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола();
					ПротоколТарифа.РасчетКалькулятора	= "";
					ПротоколТарифа.ТекстОшибки			= "";
					ПротоколТарифа.ТарифТК				= элем.delivery_sum;
					ПротоколТарифа.СрокДоставкиМин		= элем.period_min+ДоставкаДоПунктаСдачиМин;
					ПротоколТарифа.СрокДоставкиМакс		= элем.period_max+ДоставкаДоПунктаСдачиМакс;					ПротоколТарифа.Вставить("ВидРПО", 	элем.tariff_name);
					ПротоколТарифа.Вставить("КодТарифа",элем.tariff_code);
					
					МассивТарифов.Добавить(ПротоколТарифа);

				КонецЕсли;
			КонецЦикла;

			Протокол.Вставить("МассивТарифов",	МассивТарифов);
			Протокол.Результат			= "ok";
			
		КонецЕсли;	
	КонецЕсли;
	Протокол.ДатаОкончания = ТекущаяДата();
	
	Возврат	Протокол; 
	
КОнецФункции	



Функция РассчитатьСтоимость(Параметры) Экспорт
	АдресСкрипта 					= "v2/calculator/tarifflist";
	Протокол						= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола(Перечисления.ВидыОбменовСДЭК.СтоимостьПоТарифу);
//	Протокол.РасчетКалькулятора		= "";
//	Протокол.ТекстОшибки			= "";
//	Протокол.ТарифТК				= 0;
	Если 	Параметры.ДокументОтправления.ТочкаНазначения.Код = "0092" Тогда
		ДоставкаДоПунктаСдачиМин 	= 10; 
		ДоставкаДоПунктаСдачиМакс 	= 15;
	Иначе
		ДоставкаДоПунктаСдачиМин 	= 0;
		ДоставкаДоПунктаСдачиМакс 	= 0;
    КонецЕсли;

	Если Параметры.Свойство("Отправление") Тогда
		Протокол.Отправление = Параметры.Отправление;
	КонецЕсли;	
	Протокол.ОтправленныеДанные  = ЗапросРасчитатьСтоимостьВсеДоступныеТарифы(Параметры);

	

	Протокол.ПолученныеДанные    = ПолучитьПостЗапросом(Протокол.ОтправленныеДанные, АдресСкрипта);
	
	Если Протокол.ПолученныеДанные <> неопределено Тогда
		структураЖсон	= ОбменДаннымиСДЭК.РазобратьЖСОН(Протокол.ПолученныеДанные);
		Если структураЖсон.Свойство("errors") Тогда
			Протокол.Результат	  =	"error";
			
		//	Протокол.ТекстОшибки = "Возникли ошибки при расчете стоимости: "+Символы.ПС;
			
			Для каждого элем из структураЖсон.errors Цикл
	//			Протокол.ТекстОшибки 		= Протокол.ТекстОшибки 			+ "код ошибки:"+элем.code+"; описание: " +элем.message+Символы.ПС;
				Протокол.РасчетКалькулятора	= Протокол.РасчетКалькулятора	+ "код ошибки:"+элем.code+"; описание: " +элем.text+Символы.ПС;
			КонецЦикла;
			
		ИначеЕсли структураЖсон.Свойство("tariff_codes") Тогда
			МассивТарифов = новый Массив();
			
			КодТарифа = ПолучитьТариф(Параметры);
			ТарифПолучен = Ложь;
			ПолученыКодыТарифов = "";
			
			Для Каждого элем из структураЖсон.tariff_codes Цикл
				Если не элем.Свойство("tariff_code") Тогда Продолжить; КонецЕсли;

				ПолученыКодыТарифов = ПолученыКодыТарифов +", "+элем.delivery_mode ;
				Если элем.tariff_code = КодТарифа Тогда
					
					Протокол.ТарифТК				= элем.delivery_sum;
					Протокол.Вставить("СрокДоставкиМин",  элем.period_min+ДоставкаДоПунктаСдачиМин);
					Протокол.Вставить("СрокДоставкиМакс", элем.period_max+ДоставкаДоПунктаСдачиМакс);					
					Протокол.Вставить("ВидРПО", 	элем.tariff_name);
	
					Протокол.РасчетКалькулятора="Итоговая цена: "+Протокол.ТарифТК+ " руб."+Символы.ПС+
						"Время доставки  : "+Символы.ПС+
						"	Макс (дни) : "+Протокол.СрокДоставкиМакс+Символы.ПС+
						"	Мин (дни)  : "+Протокол.СрокДоставкиМин+Символы.ПС;
						Протокол.СрокДоставки 		= " " +Протокол.СрокДоставкиМин+ " - "+ Протокол.СрокДоставкиМакс+ " дн.";
					
					Протокол.Вставить("КодТарифа",элем.tariff_code);
					ТарифПолучен = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если не ТарифПолучен Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет данных по тарифу: "+ КодТарифа +"ппри расчете получены данные по тарифам: "+ПолученыКодыТарифов);
				Протокол.Результат			= "Нет данных по тарифу: "+КодТарифа+"ппри расчете получены данные по тарифам: "+ПолученыКодыТарифов;
			Иначе	
				Протокол.Результат			= "ok";		
			КонецЕсли;

			
			
		КонецЕсли;	
	КонецЕсли;
	Протокол.ДатаОкончания = ТекущаяДата();
	
	Возврат	Протокол; 
	
КОнецФункции	



Функция ПолучитьТариф(Параметры) Экспорт
	КодТарифа = "";
	ТочкаНазначения = Параметры.ДокументОтправления.ТочкаНазначения;
	Если 	ТочкаНазначения.Код = "0092"
		или ТочкаНазначения.Код = "0083"	Тогда
		Если Параметры.Тип = "sdecCourier" Тогда 
			КодТарифа = 137;//склад-дверь
		Иначе	
			КодТарифа = 136;   //склад-склад
		КонецЕсли;					
		
	Иначе	
		Если Параметры.Тип = "sdecCourier" Тогда 
			КодТарифа = 3;//склад-дверь
		Иначе	
			КодТарифа = 4;   //склад-склад
		КонецЕсли;
	КонецЕсли;	
	Возврат КодТарифа;
	
КОнецФункции


Функция СписокОфисов(Параметры) Экспорт
	АдресСкрипта 					= "v2/deliverypoints";
	Протокол						= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола(Перечисления.ВидыОбменовСДЭК.СписокПВЗ);

	Протокол.ОтправленныеДанные  = ЗапросСписокОфисов(Параметры);

	Протокол.ПолученныеДанные    = ПолучитьГетЗапросом(Протокол.ОтправленныеДанные, АдресСкрипта);
	
	Если Протокол.ПолученныеДанные <> неопределено Тогда
		структураЖсон	= ОбменДаннымиСДЭК.РазобратьЖСОН(Протокол.ПолученныеДанные);
		Если ТипЗнч(структураЖсон) = Тип("Массив") и структураЖсон.Количество() > 0 Тогда

			Протокол.Вставить("CписокОфисов",	структураЖсон);
			Протокол.Результат			= "ok";
			
		КонецЕсли;	
	КонецЕсли;
	Протокол.ДатаОкончания = ТекущаяДата();
	
	Возврат	Протокол; 
	
КОнецФункции	

Функция СозданиеЗаказаНаДоставку(Параметры) Экспорт
	ДокументОтправления	= Параметры.ДокументОтправления;
	АдресСкрипта 					= "v2/orders";
	Протоколы = Новый Массив;
	Если ЗначениеЗаполнено(Параметры.ВнутреннийНомер)  и Не ЗначениеЗаполнено(Параметры.ТрекНомер)  Тогда
		ПротоколТрек 			=  ИнформацияОЗаказе(Параметры);
		Протоколы.Добавить(ПротоколТрек);
		Возврат Протоколы;
	Иначе

		Протокол						= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола(Перечисления.ВидыОбменовСДЭК.СозданиеЗаказаНаДоставку);
		Протокол.Отправление = Параметры.Отправление;
		Протокол.Результат	 			= "error";

		
		Протокол.ОтправленныеДанные  = ЗапросРегистрацияЗаказа(Параметры);

		Результат = ПолучитьПостЗапросом2(Протокол.ОтправленныеДанные, АдресСкрипта);
		Протокол.ПолученныеДанные = Результат.Тело;
		Если Результат.Выполнен Тогда
			Протокол.Результат = "ok";
		Иначе
			Протокол.Результат = "error";
		КонецЕсли;

		Если ЗначениеЗаполнено(Протокол.ПолученныеДанные) Тогда
			структураЖсон	= ОбменДаннымиСДЭК.РазобратьЖСОН(Протокол.ПолученныеДанные);
			Обработать_Жсон(структураЖсон, Протокол);
			Если Не ЗначениеЗаполнено(Параметры.ВнутреннийНомер) Тогда
				Параметры.ВнутреннийНомер = Протокол.ВнутреннийНомер;
			КонецЕсли;
		КонецЕсли;
		Протокол.ДатаОкончания 	= ТекущаяДата();
	//	Если Протокол.Свойство("ТрекНомер")  Тогда
	//		ДокументОтправления.НомерЗаказа	=	Протокол.ТрекНомер;
	//	КонецЕсли;	
	//	Если Протокол.Свойство("СтатусЗапроса")  Тогда
	//		ДокументОтправления.СтатусЗаказа	=	Протокол.СтатусЗапроса.Статус;
	//	КонецЕсли;	

		Если ЗначениеЗаполнено(Протокол.ВнутреннийНомер) И Не ЗначениеЗаполнено(Протокол.ТрекНомер) Тогда
			ПротоколТрек 			=  ИнформацияОЗаказе(Параметры);
		КонецЕсли;
		Протоколы.Добавить(Протокол);
		Протоколы.Добавить(ПротоколТрек);
		Возврат Протоколы;
	КонецЕсли;
КонецФункции

Функция СтатусЗаказа(ТрекНомер) Экспорт

	АдресСкрипта 					= "v2/orders";
	Протокол						= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола();
	Протокол.РасчетКалькулятора		= "";
	Протокол.ТекстОшибки			= "";
	Протокол.ТарифТК				= 0;
	Протокол.Результат				= "error";
	


	Протокол.ОтправленныеДанные  = ТрекНомер;
	Протокол.ДатаНачала			 = ТекущаяДата();
	Протокол.ВидОбмена			 = Перечисления.ВидыОбменовСДЭК.ИнформацияПоЗаказам;;
	
	Протокол.ПолученныеДанные    = ПолучитьГетЗапросом("", АдресСкрипта+"?cdek_number="+ТрекНомер);
	
	Если Протокол.ПолученныеДанные <> неопределено Тогда
		структураЖсон	= ОбменДаннымиСДЭК.РазобратьЖСОН(Протокол.ПолученныеДанные);
		Обработать_Жсон(структураЖсон, Протокол);	
	КонецЕсли;

	
	Протокол.ДатаОкончания = ТекущаяДата();
	

	
	Возврат	Протокол; 
КОнецФункции


Функция ИнформацияОЗаказе(Параметры) Экспорт

	АдресСкрипта 					= "v2/orders";
	Протокол						= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола(Перечисления.ВидыОбменовСДЭК.СозданиеЗаказаНаДоставку);
	Протокол.Отправление = Параметры.Отправление;
	Протокол.Результат				= "error";

	Протокол.ОтправленныеДанные  = ЗапросИнформацияОЗаказе(Параметры);
	
	Протокол.ПолученныеДанные    = ПолучитьГетЗапросом("", АдресСкрипта+Протокол.ОтправленныеДанные);
	
	Если Протокол.ПолученныеДанные <> неопределено Тогда
		структураЖсон	= ОбменДаннымиСДЭК.РазобратьЖСОН(Протокол.ПолученныеДанные);
		Обработать_Жсон(структураЖсон, Протокол, Истина);	
	КонецЕсли;
	
	Протокол.ДатаОкончания = ТекущаяДата();
	Возврат	Протокол; 
КОнецФункции	

Функция ИнформацияОЗаказеПоНомеруЗаказа(Параметры) Экспорт
	АдресСкрипта 					= "v2/orders";
	Протокол						= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола();
	Протокол.РасчетКалькулятора		= "";
	Протокол.ТекстОшибки			= "";
	Протокол.ТарифТК				= 0;
	


	Протокол.ОтправленныеДанные  = ЗапросИнформацияОЗаказеПоНомеруЗаказа(Параметры);
	Протокол.ДатаНачала			 = ТекущаяДата();
	Протокол.ВидОбмена			 = "информация о заказе";

	Протокол.ПолученныеДанные    = ПолучитьГетЗапросом("", АдресСкрипта+"?"+Протокол.ОтправленныеДанные);
	
	Если Протокол.ПолученныеДанные <> неопределено Тогда
		структураЖсон	= ОбменДаннымиСДЭК.РазобратьЖСОН(Протокол.ПолученныеДанные);
		Если структураЖсон.entity.Свойство("cdek_number") Тогда

			Протокол.Вставить("ТрекНомер",	структураЖсон.entity.cdek_number);
			Протокол.Результат			= "ok";
			
		КонецЕсли;	
	КонецЕсли;
	Протокол.ДатаОкончания = ТекущаяДата();
	
	Возврат	Протокол; 
	
КОнецФункции	


Функция ФормированиеКвитанцииКЗаказу(Параметры) Экспорт
	
	//Если Параметры.ИдентификаторКвитанцииВТК <> "" Тогда
	//	Возврат ПолучениеКвитанцииКЗАказу(Параметры);
	//КОнецЕсли;	
	ИдентификаторКвитанцииВТК = "";
	Если Параметры.Количество() >0 Тогда
		АдресСкрипта 					= "v2/print/orders";
		Протокол						= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола(Перечисления.ВидыОбменовСДЭК.ПолучитьКвитанцию);
		Протокол.Результат	 			= "error";
		
		Протокол.ОтправленныеДанные  = ЗапросФормированиеКвитанцииКЗаказу(Параметры);
		Протокол.ПолученныеДанные    = ПолучитьПостЗапросом(Протокол.ОтправленныеДанные, АдресСкрипта);
		
		Если Протокол.ПолученныеДанные <> неопределено Тогда
			структураЖсон	= ОбменДаннымиСДЭК.РазобратьЖСОН(Протокол.ПолученныеДанные);
			Если структураЖсон.Свойство("errors") Тогда
				
				
				Протокол.ТекстОшибки = "Возникли ошибки при расчете стоимости: "+Символы.ПС;
				
				Для каждого элем из структураЖсон.errors Цикл
					Протокол.ТекстОшибки 		= Протокол.ТекстОшибки 			+ "код ошибки:"+элем.code+"; описание: " +элем.message+Символы.ПС;
					Протокол.РасчетКалькулятора	= Протокол.РасчетКалькулятора	+ "код ошибки:"+элем.code+"; описание: " +элем.text+Символы.ПС;
				КонецЦикла;
				
			ИначеЕсли структураЖсон.Свойство("entity") Тогда
				ИдентификаторКвитанцииВТК = структураЖсон.entity.uuid;
				Протокол.Результат			= "ok";
			Иначе
				Протокол.ТекстОшибки 		= "Не получен идентификатор квитанции!";	
			КонецЕсли;	
		КонецЕсли;
		Протокол.ДатаОкончания = ТекущаяДата();

	КонецЕсли;
	Протоколы = Новый Массив();
	Протоколы.Добавить(Протокол);
	
	Если ЗначениеЗаполнено(ИдентификаторКвитанцииВТК) Тогда
		ПротоколКвитанция =  ПолучениеКвитанцииКЗАказу(ИдентификаторКвитанцииВТК);
		Протоколы.Добавить(ПротоколКвитанция);
	КОнецЕсли;	

	Возврат	Протоколы; 
	
КонецФункции


Функция ПолучениеКвитанцииКЗАказу(Параметры) Экспорт
	АдресСкрипта 					= "v2/print/orders";
	Протокол						= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола(Перечисления.ВидыОбменовСДЭК.ПолучитьКвитанцию);

	Протокол.Результат				= "error";

	Протокол.ОтправленныеДанные  = ЗапросПолучениеКвитанцииКЗаказу(Параметры);
	Протокол.ДатаНачала			 = ТекущаяДата();
	
		Время = 2;
		ВремяЗавершения = ТекущаяДата() + Время;
		Пока ТекущаяДата() < ВремяЗавершения Цикл
		КонецЦикла;
	
	Протокол.ПолученныеДанные    = ПолучитьГетЗапросом("", АдресСкрипта+Протокол.ОтправленныеДанные);
	
	Если Протокол.ПолученныеДанные <> неопределено Тогда
		структураЖсон	= ОбменДаннымиСДЭК.РазобратьЖСОН(Протокол.ПолученныеДанные);
		количествостатусов = структураЖсон.entity.statuses.Количество();
		текущийСтатус = структураЖсон.entity.statuses[количествостатусов-1];
		Если структураЖсон.entity.Свойство("url") Тогда

			Протокол.Вставить("url",	структураЖсон.entity.url);
			Протокол.Результат			= "Получена квитанция";
			
			Если Протокол.Свойство("url") Тогда
				Ответ = ПолучитьФайлПоurl(Протокол.url);
				Если Ответ.ПолученныеДанные<> Неопределено  Тогда
					Протокол.Вставить("АдресФайла",	Ответ.ПолученныеДанные);
					Протокол.Вставить("ТипФайла",	"pdf");
				Иначе	
					Протокол.Результат			= "error";
				КонецЕсли;	
			КонецЕсли;			
			
		ИначеЕсли текущийСтатус.name <> "Сформирован" Тогда	
			текстСообщения = "Квитанция не доступна! текущий статус: "+текущийСтатус.name+" от "+ текущийСтатус.date_time;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(текстСообщения);
			Возврат	Протокол; 
		Иначе	
			Для каждого элем из структураЖсон.requests Цикл
				ТекстСообщения = "Тип запроса: "+элем.type + символы.ПС+
								 "Текущее состояние: "+элем.state + символы.ПС+
								 "request_uuid: "+элем.request_uuid + символы.ПС;
				Для каждого ошибка из элем.errors Цикл
					ТекстСообщения = ТекстСообщения + "code: "+ошибка.code+ символы.ПС+
													  "message: "+ошибка.message+ символы.ПС;	
				КонецЦикла;	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	Протокол.ДатаОкончания = ТекущаяДата();
	
	Возврат	Протокол; 
	
КОнецФункции	


Функция УдалениеЗаказа(Параметры) Экспорт
	АдресСкрипта 					= "v2/orders";
	Протокол						= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола();
	Протокол.РасчетКалькулятора		= "";
	Протокол.ТекстОшибки			= "";
	Протокол.ТарифТК				= 0;
	Протокол.Результат				= "error";
	


	Протокол.ОтправленныеДанные  = ЗапросИнформацияОЗаказе(Параметры);
	Протокол.ДатаНачала			 = ТекущаяДата();
	Протокол.ВидОбмена			 = Перечисления.ВидыОбменовСДЭК.УдалениеЗаказа;;
	
	Протокол.ПолученныеДанные    = ПолучитьDeleteЗапросом("", АдресСкрипта+Протокол.ОтправленныеДанные);
	
	Если Протокол.ПолученныеДанные <> неопределено Тогда
		структураЖсон	= ОбменДаннымиСДЭК.РазобратьЖСОН(Протокол.ПолученныеДанные);
		Если структураЖсон.entity.Свойство("cdek_number") Тогда

			Протокол.Вставить("ТрекНомер",	структураЖсон.entity.cdek_number);
			Протокол.Результат			= "ok";
		Иначе	
			Для каждого элем из структураЖсон.requests Цикл
				ТекстСообщения = "Тип запроса: "+элем.type + символы.ПС+
								 "Текущее состояние: "+элем.state + символы.ПС+
								 "request_uuid: "+элем.request_uuid + символы.ПС;
				Для каждого ошибка из элем.errors Цикл
					ТекстСообщения = ТекстСообщения + "code: "+ошибка.code+ символы.ПС+
													  "message: "+ошибка.message+ символы.ПС;	
				КонецЦикла;	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	Протокол.ДатаОкончания = ТекущаяДата();
	строкаПротокола = Параметры.ПротоколыПередач.Добавить();
	ЗаполнитьЗначенияСвойств(строкаПротокола,Протокол);
	
	Возврат	Протокол; 
	
КОнецФункции	



#КонецОбласти 

Процедура Обработать_requests(структураЖсон, Протокол)
	Если структураЖсон.Свойство("requests") Тогда
		коичествоЗапроов = структураЖсон.requests.Количество();
		Если коичествоЗапроов>0 Тогда 
			
			СтатусЗапроса 	= структураЖсон.requests[коичествоЗапроов-1].state;
			ОписаниеСтатуса = "";
			Если СтатусЗапроса = "ACCEPTED" Тогда
				ОписаниеСтатуса = "запрос принят";
			ИначеЕсли СтатусЗапроса = "WAITING" Тогда
				ОписаниеСтатуса = "ожидает обработки";
			ИначеЕсли СтатусЗапроса = "SUCCESSFUL" Тогда
				ОписаниеСтатуса = "обработан успешно";
			ИначеЕсли СтатусЗапроса = "INVALID" Тогда
				ОписаниеСтатуса = "обработался с ошибкой";
			КонецЕсли;
			Протокол.Вставить("СтатусЗапроса",Новый Структура("Статус, Описание", СтатусЗапроса, ОписаниеСтатуса));	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура Обработать_Жсон(структураЖсон, Протокол, ИнформацияОЗаказе = Ложь)
	Если  структураЖсон.Свойство("entity") Тогда
		Если структураЖсон.entity.Свойство("uuid") Тогда
			Протокол.ВнутреннийНомер = структураЖсон.entity.uuid;
			Протокол.Результат			= "Получен внутренний номер";
		КонецЕсли;
                                  
		Если структураЖсон.entity.Свойство("recipient") Тогда
			Получатель = структураЖсон.entity.recipient.name;    
		Иначе	
    		Получатель = "не установлен";
		КонецЕсли;
		
		
		Если структураЖсон.entity.Свойство("statuses")     
			и ТипЗнч(структураЖсон.entity.statuses) = Тип("Массив")
			и структураЖсон.entity.statuses.Количество()>0 Тогда
			
			последнийСтатус = структураЖсон.entity.statuses[0];
			Протокол.Вставить("ПоследнийСтатусЗаказа",	последнийСтатус);
			
			Протокол.ПоследнийСтатусЗаказа.Вставить("Получатель",Получатель);
		КонецЕсли;
		
		
		Если структураЖсон.entity.Свойство("cdek_number") Тогда
			
			Протокол.ТрекНомер=структураЖсон.entity.cdek_number;
			Протокол.Результат			= "Получен трек номер";
		ИначеЕсли ИнформацияОЗаказе Тогда
			Протокол.Результат			= "Ошибка получения трек номера";
		КонецЕсли;		
	КонецЕсли;			
	
	
	Если структураЖсон.Свойство("requests") Тогда
		коичествоЗапроов = структураЖсон.requests.Количество();
		СообщениеОшибки  = "";
		Если коичествоЗапроов>0 Тогда 
			элемЗапрос		= структураЖсон.requests[коичествоЗапроов-1];
			СтатусЗапроса 	= элемЗапрос.state;
			ОписаниеСтатуса = "";
			Если СтатусЗапроса = "ACCEPTED" Тогда
				ОписаниеСтатуса = "запрос принят";
			ИначеЕсли СтатусЗапроса = "WAITING" Тогда
				ОписаниеСтатуса = "ожидает обработки";
			ИначеЕсли СтатусЗапроса = "SUCCESSFUL" Тогда
				ОписаниеСтатуса = "обработан успешно";
			ИначеЕсли СтатусЗапроса = "INVALID" Тогда
				ОписаниеСтатуса = "обработался с ошибкой";
			КонецЕсли;
			Если элемЗапрос.Свойство("errors") Тогда
				СообщениеОшибки = "Тип запроса: "+элемЗапрос.type + символы.ПС+
								 "Текущее состояние: "+элемЗапрос.state + символы.ПС+
								 "Внутренний номер: "+Протокол.ВнутреннийНомер + символы.ПС+
								 "request_uuid: "+элемЗапрос.request_uuid + символы.ПС;
								 
				Для каждого ошибка из элемЗапрос.errors Цикл
					СообщениеОшибки = СообщениеОшибки + "code: "+ошибка.code+ символы.ПС+
													  "message: "+ошибка.message+ символы.ПС;	
				КонецЦикла;	
	            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибки);
			КонецЕсли;
			Протокол.Вставить("СтатусЗапроса",Новый Структура("Статус, Описание, СообщениеОшибки", СтатусЗапроса, ОписаниеСтатуса,СообщениеОшибки));	
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры



Функция ПолучитьДатуUTC(Дата)
	//UTC=УниверсальноеВремя(Дата);
	//Возврат Формат(Дата, "ДФ=yyyy-MM-ddT00:00:00");
	Возврат Формат(Дата, "ДФ=yyyy-MM-dd");
КонецФункции	
