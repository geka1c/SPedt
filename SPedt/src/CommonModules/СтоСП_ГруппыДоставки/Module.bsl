//Регламентный пересчет состояния Групп доставки
//  ПередаемНаТранзитКурьера
//  ЗаполняемНаличие
//  ЗаполняемСтатусГруза
Процедура РасчитатьОстаткиПоГруппамДоставки() Экспорт
	


#Область ЗаполняемНаличие	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	   //В составе группы не может быть посылки
	   
	   //Нельзя сделать как у курьеров через РС с составом  заказов в посылках, тк
	   //РС заполняется при одиночной загрузке группы когда все посылки уже на складе
	   //и могут подгрузиться все посылки заказа
	   
	   //При Доставке тк Группы подгружаются заранее и еще не известно сколько у группы будет посылок
	   //Поэтому Все посылки на тк приходуются паралельно своим составом в РН ЗаказыВПосылках
	   //ПЕрвый запрос в обединении получает заказы Которые поступили не в посылках из транзита
	   //Второй ищет заказы которые поступили в посылках в РН ЗаказыВПосылках()
	   
	   
	   
		"ВЫБРАТЬ
		|	КоробкиСостав.Ссылка КАК Ссылка,
		|	КоробкиСостав.Покупка КАК Покупка,
		|	КоробкиСостав.Участник КАК Участник,
		|	КоробкиСостав.КодЗаказа КАК КодЗаказа,
		|	КоробкиСостав.Ссылка.ТочкаНазначения КАК ТочкаНазначения,
		|	КоробкиСостав.Исключить КАК Исключить
		|ПОМЕСТИТЬ ЗаказыВГруппах
		|ИЗ
		|	Справочник.Коробки.Состав КАК КоробкиСостав
		|ГДЕ
		|	КоробкиСостав.Ссылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
		|	И (КоробкиСостав.Ссылка.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForOrders)
		|	ИЛИ КоробкиСостав.Ссылка.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForDelay)
		|	ИЛИ КоробкиСостав.Ссылка.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForPayment)
		|	ИЛИ КоробкиСостав.Ссылка.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForDistributor))
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТранзитОстатки.Партия.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ПартияДата,
		|	ЗаказыВГруппах.Ссылка КАК Ссылка,
		|	ЗаказыВГруппах.Покупка КАК Покупка,
		|	ЗаказыВГруппах.Участник КАК Участник,
		|	"""" КАК КодЗаказа,
		|	ЗаказыВГруппах.ТочкаНазначения КАК ТочкаНазначения,
		|	ТранзитОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ТранзитОстатки.Партия.Дата ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Количество
		|ПОМЕСТИТЬ СОстатками
		|ИЗ
		|	ЗаказыВГруппах КАК ЗаказыВГруппах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Транзит.Остатки(, (Участник, ПокупкаСсылка) В
		|			(ВЫБРАТЬ
		|				ЗаказыВГруппах.Участник,
		|				ЗаказыВГруппах.Покупка
		|			ИЗ
		|				ЗаказыВГруппах КАК ЗаказыВГруппах)) КАК ТранзитОстатки
		|		ПО ЗаказыВГруппах.Покупка = ТранзитОстатки.ПокупкаСсылка
		|		И ЗаказыВГруппах.Участник = ТранзитОстатки.Участник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЗаказыВПосылкахОстатки.Партия.Дата, ДАТАВРЕМЯ(1, 1, 1)),
		|	ЗаказыВГруппах.Ссылка,
		|	ЗаказыВГруппах.Покупка,
		|	ЗаказыВГруппах.Участник,
		|	ЗаказыВГруппах.КодЗаказа,
		|	ЗаказыВГруппах.ТочкаНазначения,
		|	ЗаказыВПосылкахОстатки.КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ЗаказыВПосылкахОстатки.Партия.Дата ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ
		|ИЗ
		|	ЗаказыВГруппах КАК ЗаказыВГруппах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыВПосылках.Остатки(, (Участник, Покупка, КодЗаказа) В
		|			(ВЫБРАТЬ
		|				ЗаказыВГруппах.Участник,
		|				ЗаказыВГруппах.Покупка,
		|				ЗаказыВГруппах.КодЗаказа
		|			ИЗ
		|				ЗаказыВГруппах КАК ЗаказыВГруппах)) КАК ЗаказыВПосылкахОстатки
		|		ПО ЗаказыВГруппах.Покупка = ЗаказыВПосылкахОстатки.Покупка
		|		И ЗаказыВГруппах.Участник = ЗаказыВПосылкахОстатки.Участник
		|		И ЗаказыВГруппах.КодЗаказа = ЗаказыВПосылкахОстатки.КодЗаказа
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СОстатками.Ссылка КАК ГруппаДоставки,
		|	МАКСИМУМ(СОстатками.ПартияДата) КАК ДатаПоследнегоПоступления,
		|	МИНИМУМ(СОстатками.ПартияДата) КАК ПартияДата,
		|	МАКСИМУМ(СОстатками.Количество) КАК Количество,
		|	СОстатками.Участник КАК Участник,
		|	СОстатками.Покупка КАК Покупка,
		|	СОстатками.КодЗаказа КАК КодЗаказа
		|ПОМЕСТИТЬ пред
		|ИЗ
		|	СОстатками КАК СОстатками
		|ГДЕ
		|	НЕ СОстатками.ПартияДата ЕСТЬ NULL
		|СГРУППИРОВАТЬ ПО
		|	СОстатками.Ссылка,
		|	СОстатками.Участник,
		|	СОстатками.Покупка,
		|	СОстатками.КодЗаказа
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(СОстатками.Количество) > 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	пред.ГруппаДоставки КАК ГруппаДоставки,
		|	МАКСИМУМ(пред.ДатаПоследнегоПоступления) КАК ДатаПоследнегоПоступления,
		|	МИНИМУМ(пред.ПартияДата) КАК ПартияДата,
		|	СУММА(пред.Количество) КАК Количество
		|ПОМЕСТИТЬ Пред2
		|ИЗ
		|	пред КАК пред
		|СГРУППИРОВАТЬ ПО
		|	пред.ГруппаДоставки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пред2.ГруппаДоставки КАК ГруппаДоставки,
		|	Пред2.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления,
		|	Пред2.ПартияДата КАК ПартияДата,
		|	Пред2.Количество КАК Количество
		|ИЗ
		|	Пред2 КАК Пред2
		|ГДЕ
		|	(Пред2.ГруппаДоставки.ДатаПервогоПоступления <> Пред2.ПартияДата
		|	ИЛИ Пред2.ГруппаДоставки.КоличествоНаСкладе <> Пред2.Количество)";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		обГД	= Выборка.ГруппаДоставки.ПолучитьОбъект();
		обГД.ДатаПервогоПоступления		= Выборка.ПартияДата;
		обГД.ДатаПоследнегоПоступления	= Выборка.ДатаПоследнегоПоступления;
		обГД.КоличествоНаСкладе			= Выборка.Количество;
		Попытка
		    обГД.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
#КонецОбласти	

#Область ЗаполняемСтатусГруза
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КоробкиСостав.Ссылка КАК ГД
		|ПОМЕСТИТЬ ГруппыДоставки
		|ИЗ
		|	Справочник.Коробки КАК КоробкиСостав
		|ГДЕ
		|	КоробкиСостав.Ссылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
		|	И КоробкиСостав.Ссылка.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.shipment)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыДоставкиСрезПоследних.Груз КАК ГруппаДоставки,
		|	СтатусыДоставкиСрезПоследних.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.СтатусыДоставки.СрезПоследних(
		|			,
		|			Груз В
		|				(ВЫБРАТЬ
		|					ГруппыДоставки.ГД
		|				ИЗ
		|					ГруппыДоставки КАК ГруппыДоставки)) КАК СтатусыДоставкиСрезПоследних
		|ГДЕ
		|	СтатусыДоставкиСрезПоследних.Груз.СтатусГруза <> СтатусыДоставкиСрезПоследних.Статус";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		обГД=Выборка.ГруппаДоставки.ПолучитьОбъект();
		обГД.СтатусГруза=Выборка.Статус;
		Попытка
		    обГД.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;

#КонецОбласти


#Область УбираемИзКоличестваИсключенныеИудаленные
//ПЕред записью коробки

	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	КоробкиСостав.Ссылка КАК Ссылка
	//	|ПОМЕСТИТЬ ВыборкГрупп
	//	|ИЗ
	//	|	Справочник.Коробки.Состав КАК КоробкиСостав
	//	|ГДЕ
	//	|		КоробкиСостав.Ссылка.ВидСтикера 			= ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
	//	|	И (	КоробкиСостав.Ссылка.СтатусГруппыДоставки 	= ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForOrders)
	//	|	ИЛИ КоробкиСостав.Ссылка.СтатусГруппыДоставки 	= ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForDelay))
	//	|	И (			КоробкиСостав.Исключить
	//	|			ИЛИ КоробкиСостав.Удалить)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	КоробкиСостав.Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	КоробкиСостав.Ссылка КАК Коробка,
	//	|	СУММА(ВЫБОР
	//	|			КОГДА КоробкиСостав.Исключить
	//	|					ИЛИ КоробкиСостав.Удалить
	//	|				ТОГДА 1
	//	|			ИНАЧЕ 0
	//	|		КОНЕЦ) КАК КоличествоИсключенных,
	//	|	СУММА(1) КАК КоличествоВсего
	//	|ПОМЕСТИТЬ СборКоличества
	//	|ИЗ
	//	|	Справочник.Коробки.Состав КАК КоробкиСостав
	//	|ГДЕ
	//	|	КоробкиСостав.Ссылка В
	//	|			(ВЫБРАТЬ
	//	|				ВыборкГрупп.Ссылка КАК Ссылка
	//	|			ИЗ
	//	|				ВыборкГрупп КАК ВыборкГрупп)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	КоробкиСостав.Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	СборКоличества.Коробка КАК Коробка,
	//	|	СборКоличества.КоличествоИсключенных КАК КоличествоИсключенных,
	//	|	СборКоличества.КоличествоВсего КАК КоличествоВсего
	//	|ИЗ
	//	|	СборКоличества КАК СборКоличества
	//	|ГДЕ
	//	|	СборКоличества.Коробка.Количество <> СборКоличества.КоличествоВсего - СборКоличества.КоличествоИсключенных";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	обГД=Выборка.ГруппаДоставки.ПолучитьОбъект();
	//	обГД.Количество=Выборка.КоличествоВсего-Выборка.КоличествоИсключенных;
	//	Попытка
	//	    обГД.Записать();
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;
#КонецОБласти


#Область ЧистимКоличествоЗаказовВПустыхГруппах
//ПЕред записью коробки

//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	Коробки.Ссылка КАК Ссылка,
//		|	ВозвратПокупокОрганизатору.Ссылка КАК Возврат
//		|ИЗ
//		|	Справочник.Коробки КАК Коробки
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратПокупокОрганизатору КАК ВозвратПокупокОрганизатору
//		|		ПО Коробки.ОтправлениеТранзита = ВозвратПокупокОрганизатору.Основание
//		|ГДЕ
//		|	Коробки.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
//		|	И Коробки.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.empty)
//		|	И Коробки.НомерЗаказа = """"
//		|	И (Коробки.КоличествоНаСкладе > 0
//		|			ИЛИ Коробки.ОтправлениеТранзита <> ЗНАЧЕНИЕ(Документ.ОтправлениеТранзита.ПустаяСсылка))";
//	
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		обКоробка						= Выборка.Ссылка.ПолучитьОбъект();
//		обКоробка.КоличествоНаСкладе	= 0;
//		//Если ЗначениеЗаполнено(обКоробка.ОтправлениеТранзита) Тогда
//		//	отправление					= обКоробка.ОтправлениеТранзита;
//		//Иначе			
//		//	отправление 					= Документы.ОтправлениеТранзита.ПустаяСсылка();
//		//КонецЕсли;
//		//обКоробка.ОтправлениеТранзита	= Документы.ОтправлениеТранзита.ПустаяСсылка();
////		НачатьТранзакцию();
//		Попытка
//			обКоробка.Записать()
//		Исключение
//		КонецПопытки;
//		//Если ЗначениеЗаполнено(отправление) и 
//		//	 отправление.Проведен и 
//		//	ЗначениеЗаполнено(Выборка.Возврат) тогда
//		//	
//		//	докОбъект = отправление.Получитьобъект();
//		//	Попытка
//		//		докОбъект.Комментарий = докОбъект.Комментарий + "(ПУ Пустая группа)";
//		//		докОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
//		//		докОбъект.УстановитьПометкуУдаления(Истина);
//		//	Исключение
//		//	КонецПопытки;
//		//КонецЕсли;
////		ЗафиксироватьТранзакцию();
//	КонецЦикла;
#КонецОбласти

#Область УдаляемДвиженияПустыхГрупп
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Коробки.ОтправлениеТранзита КАК ОтправлениеТранзита
	//	|ИЗ
	//	|	Справочник.Коробки КАК Коробки
	//	|ГДЕ
	//	|	Коробки.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
	//	|	И Коробки.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.empty)
	//	|	И Коробки.ОтправлениеТранзита <> ЗНАЧЕНИЕ(Документ.ОтправлениеТранзита.ПустаяСсылка)
	//	|	И НЕ Коробки.ОтправлениеТранзита.ПометкаУдаления
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	Коробки.ОтправлениеТранзита";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	об=ВыборкаДетальныеЗаписи.ОтправлениеТранзита.ПолучитьОбъект();
	//	об.УстановитьПометкуУдаления(Истина);
	//КонецЦикла;
#КонецОбласти
КонецПроцедуры

Функция  ПолучитьКорректныеГруппыДляПолученияТрекНомра(СписокГрупп) Экспорт
	СписокТочекСДЭК = Новый СписокЗначений;
	СписокТочекСДЭК.Добавить(Справочники.ТочкиРаздачи.НайтиПоКоду("0092"));
	СписокТочекСДЭК.Добавить(Справочники.ТочкиРаздачи.НайтиПоКоду("0083"));
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	
	//нет документа отпавления
		"ВЫБРАТЬ
		|	Коробки.Ссылка КАК Группа
		|ПОМЕСТИТЬ втГруппыДоставки
		|ИЗ
		|	Справочник.Коробки КАК Коробки
		|ГДЕ
		|	Коробки.Ссылка В(&СписокГрупп)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втГруппыДоставки.Группа КАК Группа,
		|	втГруппыДоставки.Группа.ОтправлениеТранзита = ЗНАЧЕНИЕ(Документ.ОтправлениеТранзита.ПустаяСсылка) 	КАК ОшибкаНетОтправленияТранзита,
		|	НЕ втГруппыДоставки.Группа.ТочкаНазначения В (&ТочкиСдэк)											КАК ОшибкаДругаяТК,
		|	втГруппыДоставки.Группа.ОтправлениеТранзита.НомерЗаказа <> """" 									КАК ОщибкаТрекНомерУжеПолучен,
		|	втГруппыДоставки.Группа.ОтправлениеТранзита = ЗНАЧЕНИЕ(Документ.ОтправлениеТранзита.ПустаяСсылка)
		|		ИЛИ НЕ втГруппыДоставки.Группа.ТочкаНазначения В (&ТочкиСдэк)
		|		ИЛИ втГруппыДоставки.Группа.ОтправлениеТранзита.НомерЗаказа <> """" 							КАК ЕстьОшибка
		|ПОМЕСТИТЬ втГруппыДокумента
		|ИЗ
		|	втГруппыДоставки КАК втГруппыДоставки";
	Запрос.УстановитьПараметр("ТочкиСдэк", 		СписокТочекСДЭК);
	Запрос.УстановитьПараметр("СписокГрупп", 	СписокГрупп);
	Запрос.Выполнить();
	
	///Проверяем остатки на складе заказов из групп
	Запрос.Текст =  	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КоробкиСостав.Покупка 	КАК Покупка,
		|	КоробкиСостав.Участник 	КАК Участник,
		|	КоробкиСостав.КодЗаказа КАК КодЗаказа,
		|	КоробкиСостав.Цена 		КАК Цена,
		|	КоробкиСостав.Ссылка 	КАК Группа
		|ПОМЕСТИТЬ втЗаказыВГруппах
		|ИЗ
		|	Справочник.Коробки.Состав КАК КоробкиСостав
		|ГДЕ
		|	КоробкиСостав.Ссылка В
		|			(ВЫБРАТЬ
		|				втГруппыДоставки.Группа КАК Группа
		|			ИЗ
		|				втГруппыДоставки КАК втГруппыДоставки)
		|	И НЕ КоробкиСостав.Исключить
		|	И НЕ КоробкиСостав.Удалить
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыВПосылкахОстатки.Посылка 	КАК Посылка,
		|	втЗаказыВГруппах.Покупка 		КАК Покупка,
		|	втЗаказыВГруппах.Участник 		КАК Участник,
		|	втЗаказыВГруппах.КодЗаказа 		КАК КодЗаказа,
		|	втЗаказыВГруппах.Цена 			КАК Цена,
		|	втЗаказыВГруппах.Группа 		КАК Группа,
		|	ЛОЖЬ 							КАК ОшибкаНетКодаЗаказа
		|ПОМЕСТИТЬ втПосылкаПоКодуЗаказа
		|ИЗ
		|	втЗаказыВГруппах КАК втЗаказыВГруппах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыВПосылках.Остатки(
		|				,
		|				КодЗаказа В
		|					(ВЫБРАТЬ
		|						втЗаказыВГруппах.КодЗаказа КАК КодЗаказа
		|					ИЗ
		|						втЗаказыВГруппах КАК втЗаказыВГруппах)) КАК ЗаказыВПосылкахОстатки
		|		ПО втЗаказыВГруппах.КодЗаказа = ЗаказыВПосылкахОстатки.КодЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПосылкаПоКодуЗаказа.Посылка 				КАК Посылка,
		|	втПосылкаПоКодуЗаказа.Покупка 				КАК Покупка,
		|	втПосылкаПоКодуЗаказа.Участник 				КАК Участник,
		|	втПосылкаПоКодуЗаказа.КодЗаказа 			КАК КодЗаказа,
		|	втПосылкаПоКодуЗаказа.Цена 					КАК Цена,
		|	втПосылкаПоКодуЗаказа.Группа 				КАК Группа,
		|	ТранзитОстатки.КоличествоОстаток 			КАК КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА втПосылкаПоКодуЗаказа.Посылка ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ 										КАК ОшибкаНетПосылки
		|ПОМЕСТИТЬ втПосылкиНаСкладе
		|ИЗ
		|	втПосылкаПоКодуЗаказа КАК втПосылкаПоКодуЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Транзит.Остатки(
		|				,
		|				ПокупкаСсылка В
		|					(ВЫБРАТЬ
		|						втПосылкаПоКодуЗаказа.Посылка КАК Посылка
		|					ИЗ
		|						втПосылкаПоКодуЗаказа КАК втПосылкаПоКодуЗаказа
		|					ГДЕ
		|						НЕ втПосылкаПоКодуЗаказа.ОшибкаНетКодаЗаказа)) КАК ТранзитОстатки
		|		ПО втПосылкаПоКодуЗаказа.Посылка = ТранзитОстатки.ПокупкаСсылка";
	
	Запрос.Выполнить();
	

	
	
	//Ошибки
	
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ОтправлениеТранзитаРасчетКалькулятораПочта.Ссылка.Коробка КАК Группа,
	                |	СУММА(ВЫБОР
	                |			КОГДА ОтправлениеТранзитаРасчетКалькулятораПочта.ВыбралУчастник
	                |				ТОГДА 1
	                |			ИНАЧЕ 0
	                |		КОНЕЦ) КАК ВыбранноТариыов
	                |ПОМЕСТИТЬ ВыбраныеТарифыГруппы
	                |ИЗ
	                |	Документ.ОтправлениеТранзита.РасчетКалькулятораПочта КАК ОтправлениеТранзитаРасчетКалькулятораПочта
	                |ГДЕ
	                |	ОтправлениеТранзитаРасчетКалькулятораПочта.Ссылка.Коробка В
	                |			(ВЫБРАТЬ
	                |				втГруппыДокумента.Группа КАК Группа
	                |			ИЗ
	                |				втГруппыДокумента КАК втГруппыДокумента
	                |			ГДЕ
	                |				НЕ втГруппыДокумента.ОшибкаНетОтправленияТранзита)
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ОтправлениеТранзитаРасчетКалькулятораПочта.Ссылка.Коробка
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	втПосылкиНаСкладе.Группа 			КАК Группа,
	                |	втПосылкиНаСкладе.Посылка 			КАК Посылка,
	                |	втПосылкиНаСкладе.КодЗаказа 		КАК КодЗаказа,
	                |	втПосылкиНаСкладе.ОшибкаНетПосылки 	КАК ОшибкаНетПосылки,
	                |	ЛОЖЬ 								КАК ОшибкаНетОтправленияТранзита,
	                |	ЛОЖЬ 								КАК ОшибкаДругаяТК,
	                |	ЛОЖЬ 								КАК ОщибкаТрекНомерУжеПолучен
	                |ПОМЕСТИТЬ втВсеЗаказы
	                |ИЗ
	                |	втПосылкиНаСкладе КАК втПосылкиНаСкладе
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	втГруппыДокумента.Группа,
	                |	NULL,
	                |	NULL,
	                |	ЛОЖЬ,
	                |	втГруппыДокумента.ОшибкаНетОтправленияТранзита,
	                |	втГруппыДокумента.ОшибкаДругаяТК,
	                |	втГруппыДокумента.ОщибкаТрекНомерУжеПолучен
	                |ИЗ
	                |	втГруппыДокумента КАК втГруппыДокумента
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	втВсеЗаказы.Группа 							КАК Группа,
	                |	втВсеЗаказы.Посылка 						КАК Посылка,
	                |	втВсеЗаказы.КодЗаказа 						КАК КодЗаказа,
	                |	втВсеЗаказы.ОшибкаНетПосылки 				КАК ОшибкаНетПосылки,
	                |	втВсеЗаказы.ОшибкаНетОтправленияТранзита 	КАК ОшибкаНетОтправленияТранзита,
	                |	втВсеЗаказы.ОшибкаДругаяТК 					КАК ОшибкаДругаяТК,
	                |	втВсеЗаказы.ОщибкаТрекНомерУжеПолучен 		КАК ОщибкаТрекНомерУжеПолучен,
	                |	ВЫБОР
	                |		КОГДА ЕСТЬNULL(ВыбраныеТарифыГруппы.ВыбранноТариыов, 0) = 0
	                |			ТОГДА ИСТИНА
	                |		ИНАЧЕ ЛОЖЬ
	                |	КОНЕЦ 										КАК ОшибкаНеВыбранТариф
	                |ПОМЕСТИТЬ ГруппыСОшибками
	                |ИЗ
	                |	втВсеЗаказы КАК втВсеЗаказы
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВыбраныеТарифыГруппы КАК ВыбраныеТарифыГруппы
	                |		ПО втВсеЗаказы.Группа = ВыбраныеТарифыГруппы.Группа
	                |ГДЕ
	                |	(			втВсеЗаказы.ОщибкаТрекНомерУжеПолучен
	                |			ИЛИ втВсеЗаказы.ОшибкаДругаяТК
	                |			ИЛИ втВсеЗаказы.ОшибкаНетОтправленияТранзита
	                |			ИЛИ втВсеЗаказы.ОшибкаНетПосылки
					|			ИЛИ 
					|	(ВЫБОР
	                |		КОГДА ЕСТЬNULL(ВыбраныеТарифыГруппы.ВыбранноТариыов, 0) = 0
	                |			ТОГДА ИСТИНА
	                |		ИНАЧЕ ЛОЖЬ
	                |	КОНЕЦ) 
					|	)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ГруппыСОшибками.Группа 							КАК Группа,
	                |	ГруппыСОшибками.Посылка							КАК Посылка,
	                |	ГруппыСОшибками.КодЗаказа 						КАК КодЗаказа,
	                |	ГруппыСОшибками.ОшибкаНетПосылки 				КАК ОшибкаНетПосылки,
	                |	ГруппыСОшибками.ОшибкаНетОтправленияТранзита 	КАК ОшибкаНетОтправленияТранзита,
	                |	ГруппыСОшибками.ОшибкаДругаяТК 					КАК ОшибкаДругаяТК,
	                |	ГруппыСОшибками.ОщибкаТрекНомерУжеПолучен 		КАК ОщибкаТрекНомерУжеПолучен,
	                |	ГруппыСОшибками.ОшибкаНеВыбранТариф 			КАК ОшибкаНеВыбранТариф
	                |ИЗ
	                |	ГруппыСОшибками КАК ГруппыСОшибками";
	РезультатОшибки = Запрос.Выполнить();
	
	ОшибочныеГруппы = РезультатОшибки.Выгрузить();
	Если ОшибочныеГруппы.Количество()>0 Тогда
		СхемаКомпоновкиДанных 	= ДОкументы.СдэкИнеграция.ПолучитьМакет("ПолучениеТрекНомераГруппыСОшибками");
		СтрукьураОшибок = СП_Отчеты.ПолучитьОтчет(,СхемаКомпоновкиДанных ,"Основной",,,Новый Структура("ОшибочныеГруппы", ОшибочныеГруппы));
		СтрукьураОшибок.Вставить("КоличествоПроблемныхПозиций",	ОшибочныеГруппы.Количество());
		СтрукьураОшибок.Вставить("СКД",						  	ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,Новый УникальныйИдентификатор));
	КонецЕсли;	
	//Ошибки = Неопределено;
	//Выборка = РезультатОшибки.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ТекстОшибки = "";
	//	Если Выборка.ОшибкаНетОтправленияТранзита Тогда
	//		ТекстОшибки = " нет Документа отправления транзита";
	//	ИначеЕсли	Выборка.ОшибкаНетКодаЗаказа Тогда
	//		ТекстОшибки = " нет в наличии посылрк с кодом заказа "+Выборка.КодЗаказа;
	//	ИначеЕсли	Выборка.ОшибкаНетПосылки Тогда
	//		ТекстОшибки = " нет в наличии посылки для кода заказа "+Выборка.КодЗаказа;
	//	КонецЕсли;
	//	
	//	ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,,"Для "+ Выборка.Группа+ " "+ТекстОшибки,,,,);	
	//	
	//КонецЦикла;
	//ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);

	
	///Без ошибок
	Запрос.Текст =  "ВЫБРАТЬ
	                |	втВсеЗаказы.Группа 		КАК Группа,
	                |	втВсеЗаказы.Посылка 	КАК Посылка,
	                |	втВсеЗаказы.КодЗаказа 	КАК КодЗаказа
	                |ИЗ
	                |	втВсеЗаказы КАК втВсеЗаказы
	                |ГДЕ
	                |	не втВсеЗаказы.Группа В
	                |			(ВЫБРАТЬ
	                |				ГруппыСОшибками.Группа КАК Группа
	                |			ИЗ
	                |				ГруппыСОшибками КАК ГруппыСОшибками)
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	втВсеЗаказы.Группа,
	                |	втВсеЗаказы.Посылка,
	                |	втВсеЗаказы.КодЗаказа
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Группа";
	                

	
	РезультатБезОшибок = Запрос.Выполнить();
	Выборка = РезультатБезОшибок.Выбрать();
	
	ГруппыБезОшибок = Новый СписокЗначений;

	Пока Выборка.Следующий() цикл
		ГруппыБезОшибок.Добавить(Выборка.Группа);
	КонецЦикла;

	Возврат Новый Структура("БезОшибок, Ошибки",ГруппыБезОшибок,СтрукьураОшибок);
	
Конецфункции



Функция  АнализГруппПередПолучениемТрекНомра(СписокГрупп) Экспорт
	СписокТочекСДЭК = Новый СписокЗначений;
	СписокТочекСДЭК.Добавить(Справочники.ТочкиРаздачи.НайтиПоКоду("0092"));
	СписокТочекСДЭК.Добавить(Справочники.ТочкиРаздачи.НайтиПоКоду("0083"));
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	
	//нет документа отпавления
		"ВЫБРАТЬ
		|	Коробки.Ссылка КАК Группа
		|ПОМЕСТИТЬ втГруппыДоставки
		|ИЗ
		|	Справочник.Коробки КАК Коробки
		|ГДЕ
		|	Коробки.Ссылка В(&СписокГрупп)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втГруппыДоставки.Группа КАК Группа,
		|	""Нет Отрправления транзита"" КАК Ошибка
		|ПОМЕСТИТЬ втОшибкиГрупп1
		|ИЗ
		|	втГруппыДоставки КАК втГруппыДоставки
		|ГДЕ
		|	втГруппыДоставки.Группа.ОтправлениеТранзита = ЗНАЧЕНИЕ(Документ.ОтправлениеТранзита.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втГруппыДоставки.Группа,
		|	""Выбрана другая ТК""
		|ИЗ
		|	втГруппыДоставки КАК втГруппыДоставки
		|ГДЕ
		|	НЕ втГруппыДоставки.Группа.ТочкаНазначения В (&ТочкиСдэк)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втГруппыДоставки.Группа,
		|	""Трек номер уже получен""
		|ИЗ
		|	втГруппыДоставки КАК втГруппыДоставки
		|ГДЕ
		|	втГруппыДоставки.Группа.ОтправлениеТранзита.НомерЗаказа <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втГруппыДоставки.Группа,
		|	""Не выбрана стримость доставки""
		|ИЗ
		|	втГруппыДоставки КАК втГруппыДоставки
		|ГДЕ
		|	втГруппыДоставки.Группа.ОтправлениеТранзита <> ЗНАЧЕНИЕ(Документ.ОтправлениеТранзита.ПустаяСсылка)
		|	и втГруппыДоставки.Группа.ОтправлениеТранзита.ИтогоСтоимость = 0
		|	И втГруппыДоставки.Группа.МетодОплаты = Значение(Перечисление.МетодыОплаты.cod)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтправлениеТранзитаРасчетКалькулятораПочта.Ссылка.Коробка КАК Группа,
		|	СУММА(ВЫБОР
		|			КОГДА ОтправлениеТранзитаРасчетКалькулятораПочта.ВыбралУчастник
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВыбранноТариыов
		|ПОМЕСТИТЬ ТарифыГруппы
		|ИЗ
		|	Документ.ОтправлениеТранзита.РасчетКалькулятораПочта КАК ОтправлениеТранзитаРасчетКалькулятораПочта
		|ГДЕ
		|	ОтправлениеТранзитаРасчетКалькулятораПочта.Ссылка.Коробка В
		|			(ВЫБРАТЬ
		|				втГруппыДоставки.Группа КАК Группа
		|			ИЗ
		|				втГруппыДоставки КАК втГруппыДоставки
		|			ГДЕ
		|				втГруппыДоставки.Группа.ОтправлениеТранзита <> ЗНАЧЕНИЕ(Документ.ОтправлениеТранзита.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтправлениеТранзитаРасчетКалькулятораПочта.Ссылка.Коробка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОшибкиГрупп1.Группа КАК Группа,
		|	втОшибкиГрупп1.Ошибка КАК Ошибка
		|ПОМЕСТИТЬ втОшибкиГрупп
		|ИЗ
		|	втОшибкиГрупп1 КАК втОшибкиГрупп1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТарифыГруппы.Группа,
		|	""Не выбран тариф ТК""
		|ИЗ
		|	ТарифыГруппы КАК ТарифыГруппы
		|ГДЕ
		|	ТарифыГруппы.ВыбранноТариыов = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТарифыГруппы.Группа КАК Группа,
		|	ТарифыГруппы.ВыбранноТариыов КАК ВыбранноТариыов
		|ИЗ
		|	ТарифыГруппы КАК ТарифыГруппы";
	Запрос.УстановитьПараметр("ТочкиСдэк", 		СписокТочекСДЭК);
	Запрос.УстановитьПараметр("СписокГрупп", 	СписокГрупп);
	Результат = Запрос.Выполнить();
	
	Запрос.Текст = 
	
	 "ВЫБРАТЬ
	 |	ОтправлениеТранзитаЗаказы.Ссылка КАК Партия,
	 |	ОтправлениеТранзитаЗаказы.Ссылка.Коробка КАК Группа,
	 |	ОтправлениеТранзитаЗаказы.Покупка КАК Покупка,
	 |	ОтправлениеТранзитаЗаказы.Ссылка.Участник КАК Участник,
	 |	ОтправлениеТранзитаЗаказы.КодЗаказа КАК КодЗаказа,
	 |	ОтправлениеТранзитаЗаказы.СтоимостьХранения КАК СтоимостьХранения,
	 |	ОтправлениеТранзитаЗаказы.ОбъявленнаяСтоимость КАК Цена,
	 |	ОтправлениеТранзитаЗаказы.Посылка КАК Посылка
	 |ПОМЕСТИТЬ втНетНаСкладе
	 |ИЗ
	 |	Документ.ОтправлениеТранзита.Заказы КАК ОтправлениеТранзитаЗаказы
	 |ГДЕ
	 |	ОтправлениеТранзитаЗаказы.Ссылка.Ссылка В
	 |			(ВЫБРАТЬ
	 |				втГруппыДоставки.Группа.ОтправлениеТранзита КАК Отправление
	 |			ИЗ
	 |				втГруппыДоставки КАК втГруппыДоставки
	 |			ГДЕ
	 |				втГруппыДоставки.Группа.ОтправлениеТранзита <> ЗНАЧЕНИЕ(Документ.ОтправлениеТранзита.ПустаяСсылка))
	 |	И ОтправлениеТранзитаЗаказы.Посылка = ЗНАЧЕНИЕ(Справочник.Посылки.ПустаяСсылка)";
	

	 Запрос.Выполнить();

	

		
#Область ПроверкаОстатковВРегистре	
	/////Проверяем остатки на складе заказов из групп
	//Запрос.Текст =  	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	КоробкиСостав.Покупка КАК Покупка,
	//	|	КоробкиСостав.Участник КАК Участник,
	//	|	КоробкиСостав.КодЗаказа КАК КодЗаказа,
	//	|	КоробкиСостав.Цена КАК Цена,
	//	|	КоробкиСостав.Ссылка КАК Группа
	//	|ПОМЕСТИТЬ втЗаказыВГруппах
	//	|ИЗ
	//	|	Справочник.Коробки.Состав КАК КоробкиСостав
	//	|ГДЕ
	//	|	КоробкиСостав.Ссылка В
	//	|			(ВЫБРАТЬ
	//	|				втГруппыДоставки.Группа КАК Группа
	//	|			ИЗ
	//	|				втГруппыДоставки КАК втГруппыДоставки)
	//	|	И НЕ КоробкиСостав.Исключить
	//	|	И НЕ КоробкиСостав.Удалить
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ЗаказыВПосылкахОстатки.Посылка КАК Посылка,
	//	|	втЗаказыВГруппах.Покупка КАК Покупка,
	//	|	втЗаказыВГруппах.Участник КАК Участник,
	//	|	втЗаказыВГруппах.КодЗаказа КАК КодЗаказа,
	//	|	втЗаказыВГруппах.Цена КАК Цена,
	//	|	втЗаказыВГруппах.Группа КАК Группа
	//	|ПОМЕСТИТЬ втПосылкаПоКодуЗаказа
	//	|ИЗ
	//	|	втЗаказыВГруппах КАК втЗаказыВГруппах
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыВПосылках.Остатки(
	//	|				,
	//	|				КодЗаказа В
	//	|					(ВЫБРАТЬ
	//	|						втЗаказыВГруппах.КодЗаказа КАК КодЗаказа
	//	|					ИЗ
	//	|						втЗаказыВГруппах КАК втЗаказыВГруппах)) КАК ЗаказыВПосылкахОстатки
	//	|		ПО втЗаказыВГруппах.КодЗаказа = ЗаказыВПосылкахОстатки.КодЗаказа
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	втПосылкаПоКодуЗаказа.Посылка КАК Посылка,
	//	|	втПосылкаПоКодуЗаказа.Покупка КАК Покупка,
	//	|	втПосылкаПоКодуЗаказа.Участник КАК Участник,
	//	|	втПосылкаПоКодуЗаказа.КодЗаказа КАК КодЗаказа,
	//	|	втПосылкаПоКодуЗаказа.Цена КАК Цена,
	//	|	втПосылкаПоКодуЗаказа.Группа КАК Группа,
	//	|	ТранзитОстатки.КоличествоОстаток КАК КоличествоОстаток,
	//	|	ВЫБОР
	//	|		КОГДА втПосылкаПоКодуЗаказа.Посылка ЕСТЬ NULL
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК ОшибкаНетПосылки
	//	|ПОМЕСТИТЬ втПосылкиНаСкладе
	//	|ИЗ
	//	|	втПосылкаПоКодуЗаказа КАК втПосылкаПоКодуЗаказа
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Транзит.Остатки(
	//	|				,
	//	|				ПокупкаСсылка В
	//	|					(ВЫБРАТЬ
	//	|						втПосылкаПоКодуЗаказа.Посылка КАК Посылка
	//	|					ИЗ
	//	|						втПосылкаПоКодуЗаказа КАК втПосылкаПоКодуЗаказа)) КАК ТранзитОстатки
	//	|		ПО втПосылкаПоКодуЗаказа.Посылка = ТранзитОстатки.ПокупкаСсылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	втПосылкиНаСкладе.Посылка КАК Посылка,
	//	|	втПосылкиНаСкладе.Покупка КАК Покупка,
	//	|	втПосылкиНаСкладе.Участник КАК Участник,
	//	|	втПосылкиНаСкладе.КодЗаказа КАК КодЗаказа,
	//	|	втПосылкиНаСкладе.Цена КАК Цена,
	//	|	втПосылкиНаСкладе.Группа КАК Группа,
	//	|	втПосылкиНаСкладе.КоличествоОстаток КАК КоличествоОстаток,
	//	|	втПосылкиНаСкладе.ОшибкаНетПосылки КАК ОшибкаНетПосылки
	//	|ПОМЕСТИТЬ втНетНаСкладе
	//	|ИЗ
	//	|	втПосылкиНаСкладе КАК втПосылкиНаСкладе
	//	|ГДЕ
	//	|	втПосылкиНаСкладе.ОшибкаНетПосылки";
	//
	//Запрос.Выполнить();
	//
#КонецОбласти
	
	
	//Ошибки
	
	Запрос.Текст =  "ВЫБРАТЬ
	                |	втОшибкиГрупп.Группа КАК Группа,
	                |	втОшибкиГрупп.Ошибка КАК Ошибка
	                |ПОМЕСТИТЬ втВсеОшибки
	                |ИЗ
	                |	втОшибкиГрупп КАК втОшибкиГрупп
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	втНетНаСкладе.Группа,
					|	""Нет в наличии посылки с указанным кодом""
					|ИЗ
					|	втНетНаСкладе КАК втНетНаСкладе
					|
					|СГРУППИРОВАТЬ ПО
					|	втНетНаСкладе.Группа";
	РезультатОшибки = Запрос.Выполнить();
	
	//ОшибочныеГруппы = РезультатОшибки.Выгрузить();
	//Если ОшибочныеГруппы.Количество()>0 Тогда
	//	СхемаКомпоновкиДанных 	= ДОкументы.СдэкИнеграция.ПолучитьМакет("ПолучениеТрекНомераГруппыСОшибками");
	//	СтрукьураОшибок = СП_Отчеты.ПолучитьОтчет(,СхемаКомпоновкиДанных ,"Основной",,,Новый Структура("ОшибочныеГруппы", ОшибочныеГруппы));
	//	СтрукьураОшибок.Вставить("КоличествоПроблемныхПозиций",	ОшибочныеГруппы.Количество());
	//	СтрукьураОшибок.Вставить("СКД",						  	ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,Новый УникальныйИдентификатор));
	//КонецЕсли;	

	
	///Без ошибок
	Запрос.Текст =  "ВЫБРАТЬ
	                |	втГруппыДоставки.Группа 		КАК ГруппаДоставки
	                |ИЗ
	                |	втГруппыДоставки КАК втГруппыДоставки
	                |ГДЕ
	                |	не втГруппыДоставки.Группа В
	                |			(ВЫБРАТЬ
	                |				втВсеОшибки.Группа КАК Группа
	                |			ИЗ
	                |				втВсеОшибки КАК втВсеОшибки)
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	втГруппыДоставки.Группа	                
					|
	                |УПОРЯДОЧИТЬ ПО
	                |	Группа;
					|	/////////////////////////////////////////////////
					|ВЫБРАТЬ
	                |	втВсеОшибки.Группа КАК ГруппаДоставки,
	                |	втВсеОшибки.Ошибка КАК Ошибка
	                |ИЗ
	                |	втВсеОшибки КАК втВсеОшибки
					|ГДЕ 	
					|	втВсеОшибки.Ошибка <>  ""Трек номер уже получен"";
	                |
					|	/////////////////////////////////////////////////
					|ВЫБРАТЬ
	                |	втВсеОшибки.Группа КАК ГруппаДоставки,
	                |	втВсеОшибки.Ошибка КАК Ошибка
	                |ИЗ
	                |	втВсеОшибки КАК втВсеОшибки
					|ГДЕ 	
					|	втВсеОшибки.Ошибка =  ""Трек номер уже получен"";
	                |
					|	/////////////////////////////////////////////////
					
					|ВЫБРАТЬ
					|	втНетНаСкладе.Посылка КАК Посылка,
					|	втНетНаСкладе.Покупка КАК Покупка,
					|	втНетНаСкладе.Участник КАК Участник,
					|	втНетНаСкладе.КодЗаказа КАК КодЗаказа,
					|	втНетНаСкладе.Цена КАК Цена,
					|	втНетНаСкладе.Группа КАК ГруппаДоставки
					|ИЗ
					|	втНетНаСкладе КАК втНетНаСкладе";
	                

	
	массивРезультатов 	= Запрос.ВыполнитьПакет();
	РезультатБезОшибок 	= массивРезультатов[0];
	РезультатВсеОшибки 	= массивРезультатов[1];
	РезультатТНПолучен 	= массивРезультатов[2];

	РезультатНетВНаличии= массивРезультатов[3];
	
	Выборка = РезультатБезОшибок.Выбрать();
	ГруппыБезОшибок = Новый СписокЗначений;
	Пока Выборка.Следующий() цикл
		ГруппыБезОшибок.Добавить(Выборка.ГруппаДоставки);
	КонецЦикла;
	
	/// Выбрать Тариф ТК
	ВсеОшибки = РезультатВсеОшибки.Выгрузить();
	
	Ошибка = "Не выбран тариф ТК";
	массНеВыбранТариф = ВсеОшибки.НайтиСтроки(Новый Структура("Ошибка",Ошибка));
	
	Если массНеВыбранТариф.Количество()>0 Тогда
		СписокГруппТариф =  Новый СписокЗначений;
		Для каждого Элем из массНеВыбранТариф Цикл
			СписокГруппТариф.Добавить(Элем.ГруппаДоставки);
		КонецЦикла;
		Результат = ВыбратьТарифТК(СписокГруппТариф);
		Для каждого коробка ИЗ Результат Цикл
			массНайдено    	= ВсеОшибки.НайтиСтроки(Новый Структура("ГруппаДоставки, Ошибка",коробка, Ошибка));
			Если массНайдено.Количество()> 0 Тогда
				ВсеОшибки.Удалить(массНайдено[0]);
			КонецЕсли;
			массНайдено    	= ВсеОшибки.НайтиСтроки(Новый Структура("ГруппаДоставки",коробка));			
			Если массНайдено.Количество() = 0 Тогда
				ГруппыБезОшибок.Добавить(коробка);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	///Конец Выбрать Тариф ТК
	/// Рассчитать стомость итого
		
	Ошибка = "Не выбрана стримость доставки";
	массНеРасчитанаСтоимость = ВсеОшибки.НайтиСтроки(Новый Структура("Ошибка",Ошибка));
	
	Если массНеРасчитанаСтоимость.Количество()>0 Тогда
		СписокГруппСтоимость =  Новый СписокЗначений;
		Для каждого Элем из массНеРасчитанаСтоимость Цикл
			СписокГруппСтоимость.Добавить(Элем.ГруппаДоставки);
		КонецЦикла;
		Результат = РасчитатьСтоимостьИтого(СписокГруппСтоимость);
		Для каждого коробка ИЗ Результат Цикл
			массНайдено    	= ВсеОшибки.НайтиСтроки(Новый Структура("ГруппаДоставки, Ошибка",коробка, Ошибка));
			Если массНайдено.Количество()> 0 Тогда
				ВсеОшибки.Удалить(массНайдено[0]);
			КонецЕсли;
			массНайдено    	= ВсеОшибки.НайтиСтроки(Новый Структура("ГруппаДоставки",коробка));			
			Если массНайдено.Количество() = 0 Тогда
				ГруппыБезОшибок.Добавить(коробка);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	///Конец Рассчитать стомость итого

	
	
	
	
	СтрОшибки = Новый Структура;
	СтрОшибки.Вставить("ВсеОшибки", 	РезультатВсеОшибки.Выгрузить());
	СтрОшибки.Вставить("НетВНаличии", 	РезультатНетВНаличии.Выгрузить());
	ТНПолучен	= РезультатТНПолучен.Выгрузить();

	Возврат Новый Структура("БезОшибок, Ошибки, ТНПолучен",ГруппыБезОшибок,СтрОшибки, ТНПолучен);
	
Конецфункции


Функция ВыбратьТарифТК(СписокГрупп) Экспорт
	ТарифВыбран = Новый СписокЗначений;
	
	Для каждого Элем из СписокГрупп Цикл
		коробка		= Элем.Значение;
		Отправление = коробка.ОтправлениеТранзита;
		
		Если Отправление.РасчетСтоимостиПоВсемТарифам и ЗначениеЗаполнено(коробка.МетодОплаты) Тогда 
			помеченныеСтроки = Отправление.РасчетКалькулятораПочта.НайтиСтроки(Новый Структура("ВыбралУчастник",Истина));
			Если помеченныеСтроки.Количество() = 0 Тогда
				ОтправлениеОб 	= Отправление.ПолучитьОбъект();
				массСтрок 		= ОтправлениеОб.РасчетКалькулятораПочта.НайтиСтроки(Новый Структура("ВидРПО",Коробка.ВидРПОВыбралУчастник));			
				Если МассСтрок.Количество()>0 Тогда
					МассСтрок[0].ВыбралУчастник = Истина;
					Попытка
						ОтправлениеОб.Записать(РежимЗаписиДокумента.Проведение);
						ТарифВыбран.Добавить(коробка);
						
					Исключение
						
					КонецПопытки;
					
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	Возврат ТарифВыбран;
КонецФункции	
	

Функция РасчитатьСтоимостьИтого(СписокГрупп) Экспорт
	СтоимостьРасчитана = Новый СписокЗначений;
	
	Для каждого Элем из СписокГрупп Цикл
		коробка		= Элем.Значение;
		Отправление = коробка.ОтправлениеТранзита;
		
		ОтправлениеОб = Отправление.ПолучитьОбъект();
		Если Отправление.РасчетСтоимостиПоВсемТарифам Тогда
			
			Если коробка.МетодОплаты = Перечисления.МетодыОплаты.cod Тогда //Наложенный платеж
				
				НайденыСтроки = ОтправлениеОб.РасчетКалькулятораПочта.НайтиСтроки(Новый Структура("ВыбралУчастник",Истина));
				Если НайденыСтроки.Количество() > 0 Тогда
					ОтправлениеОб.ИтогоСтоимость = НайденыСтроки[0].СтоимостьНалПлатеж;
				КонецЕсли;
			Иначе	
				ОтправлениеОб.ИтогоСтоимость				= 0;
			КонецЕсли;
		Иначе
			Если коробка.МетодОплаты = Перечисления.МетодыОплаты.prepay Тогда
				ОтправлениеОб.ИтогоСтоимость				= 0;//(Объект.ТарифТК+Объект.ТарифПВ);
			ИначеЕсли коробка.МетодОплаты = Перечисления.МетодыОплаты.cod Тогда
				ОтправлениеОб.ИтогоСтоимость				= Окр((ОтправлениеОб.ТарифТК + ОтправлениеОб.ТарифПВнп
					+ ОтправлениеОб.ОбъявленнаяСтоимость * ОтправлениеОб.ПроцентОС / 100) + (ОтправлениеОб.ТарифТК + ОтправлениеОб.ТарифПВнп
					+ ОтправлениеОб.ОбъявленнаяСтоимость * ОтправлениеОб.ПроцентОС / 100) * ОтправлениеОб.Процент / 100, 0);
			КонецЕсли;
		КонецЕсли;
		Попытка
			ОтправлениеОб.Записать(РежимЗаписиДокумента.Проведение);
			СтоимостьРасчитана.Добавить(коробка);
			
		Исключение
			
		КонецПопытки;
	КонецЦикла;	
	Возврат СтоимостьРасчитана;
КонецФункции

