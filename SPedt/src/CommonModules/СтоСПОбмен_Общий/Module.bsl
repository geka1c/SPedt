Процедура УстановитьДатуЗагрузки(ПараметрОбмена, ДатаЗагрузки = Неопределено) Экспорт
	обПараметрОбмена 				= ПараметрОбмена.ПолучитьОбъект();
	Если ДатаЗагрузки = Неопределено Тогда
		обПараметрОбмена.ДатаЗагрузки  	= ТекущаяДата();
	Иначе
		обПараметрОбмена.ДатаЗагрузки  	= ДатаЗагрузки;
	КонецЕсли;	
	обПараметрОбмена.Записать();
КонецПроцедуры

		

Функция Загрузить(ДанныеXML,АдресСкрипта = Неопределено) Экспорт
	Параметры    	= новый Структура;
	Параметры.Вставить("token",	Константы.Токен.Получить());
	Параметры.Вставить("xml", 	ДанныеXML);
	Если АдресСкрипта = Неопределено Тогда
		АдресСкрипта 	= Константы.АдресЗагрузкиССайта.Получить();
	КонецЕсли;
		
	ПолученныйФайл	= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры,АдресСкрипта);
	Если ПолученныйФайл=Неопределено Тогда Возврат Неопределено КонецЕсли;

	ПолученныеДанные=СтоСПОбмен_Общий.ФайлВСтроку(ПолученныйФайл);
	Возврат ПолученныеДанные;
КонецФункции

Функция ПолучитьПостЗапросом(Параметры,АдресСкрипта) Экспорт 

	Сервер              = Константы.Сервер.Получить();
	Порт				= Константы.Порт.Получить();
	
	ИмяФайлаОтвета   = ПолучитьИмяВременногоФайла("xml");
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("xml");

    ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.UTF8, Символы.ПС, ЛОЖЬ);
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
    ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	Для каждого стр из Параметры Цикл
		ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
		ФайлОтправки.ЗаписатьСтроку("Content-disposition: form-data; name="""+стр.Ключ+"""" + Символы.ПС);
		ФайлОтправки.ЗаписатьСтроку(стр.Значение);
		ФайлОтправки.ЗаписатьСтроку("--" + Boundary);
	КонецЦикла;
    ФайлОтправки.Закрыть();

	
	
    ЗаголовокHTTP = Новый Соответствие();
    СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
    СерверИсточник = НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
    ЗаголовокHTTP.Вставить("Referer", СерверИсточник);
	ЗаголовокHTTP.Вставить("X-100sp-1C-version", метаданные.Версия);

    ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);
    ФайлОтправки = Новый Файл(ИмяФайлаОтправки);
    РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
    ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
	
	ССЛ=Новый ЗащищенноеСоединениеOpenSSL;
	НТТР = Новый HTTPСоединение(Сервер,,,,,,ССЛ);
    Попытка
        Ответ = НТТР.ОтправитьДляОбработки(ИмяФайлаОтправки, АдресСкрипта, ИмяФайлаОтвета, ЗаголовокHTTP);
    Исключение
		ТекстСообщения	= "Неудачная попытка соединения: " + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
        Возврат Неопределено;
    КонецПопытки;
    //Удалим файл отправки POST-запроса. Больше он нам не нужен.
    УдалитьФайлы(ИмяФайлаОтправки);
	Возврат ИмяФайлаОтвета;
КонецФункции

Функция ПолучитьПостЗапросом_Ответ(Параметры,Скрипт) Экспорт 
	Сервер              = Константы.Сервер.Получить();
	Порт				= Константы.Порт.Получить();
	
	ПервыйПараметр		= Истина;
	СтрокаПараметров 	= "";	 
	Для каждого стр из Параметры Цикл
		СтрокаПараметров 	= СтрокаПараметров+?(ПервыйПараметр,"","&")+стр.Ключ+"="+стр.Значение;
		ПервыйПараметр 		= Ложь;
	КонецЦикла;
    
    СтрокаСоединения 	= СтрокаСоединенияИнформационнойБазы();
    СерверИсточник 		= НСтр(СтрокаСоединения, "Srvr") + НСтр(СтрокаСоединения, "Ref");
    
    ЗаголовокHTTP 		= Новый Соответствие();
    ЗаголовокHTTP.Вставить("Referer", 		СерверИсточник);
	ЗаголовокHTTP.Вставить("X-100sp-1C-version", метаданные.Версия);
//    ЗаголовокHTTP.Вставить("Content-Type", 	"multipart/form-data;");
    ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
    
    HTTPЗапрос 			= Новый HTTPЗапрос(Скрипт, 	ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
   
	ССЛ					= Новый ЗащищенноеСоединениеOpenSSL;
	НТТР 				= Новый HTTPСоединение(Сервер,,,,,,ССЛ);
    Попытка
        ответ 	= НТТР.ОтправитьДляОбработки(HTTPЗапрос);
        тело	= ответ.ПолучитьТелоКакСтроку();
        Если ответ.КодСостояния = 200 Тогда
        	Возврат Тело;
		Иначе        
			ТекстСообщения	= "Ошибка: "+ Символы.ПС + 
							  "	Код состояния: " + ответ.КодСостояния +Символы.ПС+ 
							  "	тело		 : " + тело;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			возврат Неопределено;
        КонецЕсли
    Исключение
		ТекстСообщения	= "Неудачная попытка соединения: " + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
        Возврат Неопределено;
    КонецПопытки;
КонецФункции



Функция ФайлВСтроку(ИмяФайлаОтвета)  Экспорт
		ТекстФайла="";
		Текст=Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаОтвета,КодировкаТекста.UTF8);
		Стр = Текст.ПрочитатьСтроку();
		Пока Стр <> Неопределено Цикл 
			ТекстФайла=ТекстФайла+Стр;
			Стр = Текст.ПрочитатьСтроку();
		КонецЦикла;
		/////
		ТекстФайла=СтрЗаменить(ТекстФайла,"<auth>",				"<auth>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"<group",				Символы.ПС+"<group");    
		ТекстФайла=СтрЗаменить(ТекстФайла,"<deliveryGroup>",	Символы.ПС+"<deliveryGroup>");		
		ТекстФайла=СтрЗаменить(ТекстФайла,"<package",			Символы.ПС+"<package");
		ТекстФайла=СтрЗаменить(ТекстФайла,"<order>",			Символы.ПС+"<order>");
		ТекстФайла=СтрЗаменить(ТекстФайла,"<orders>",			Символы.ПС+"<orders>");
		ТекстФайла=СтрЗаменить(ТекстФайла,"<superGroups>",		"<superGroups>"+Символы.ПС);
		ТекстФайла=СтрЗаменить(ТекстФайла,"</superGroups>",		Символы.ПС+"</superGroups>");
		ТекстФайла=СтрЗаменить(ТекстФайла,"</distributors>",	Символы.ПС+"</distributors>");
		ТекстФайла=СтрЗаменить(ТекстФайла,"<distributors",		"<distributors xmlns=""http://www.100sp.ru""  ");
		
		ТекстФайла=СтрЗаменить(ТекстФайла,"<item>",				Символы.ПС+"<item>"+Символы.ПС);
		
		СписокПерпеносВКонце	= новый СписокЗначений;
		
		СписокПерпеносВКонце.Добавить("auth");
		СписокПерпеносВКонце.Добавить("groups");
		СписокПерпеносВКонце.Добавить("barcode");
		СписокПерпеносВКонце.Добавить("distributorName");
		СписокПерпеносВКонце.Добавить("ownerName");
		СписокПерпеносВКонце.Добавить("ordersNumber");
		СписокПерпеносВКонце.Добавить("code");
		СписокПерпеносВКонце.Добавить("createdAt");
		СписокПерпеносВКонце.Добавить("name");
		СписокПерпеносВКонце.Добавить("result");
		
		//Покупки
		СписокПерпеносВКонце.Добавить("purchases");
		СписокПерпеносВКонце.Добавить("purchase");
		СписокПерпеносВКонце.Добавить("id");
		СписокПерпеносВКонце.Добавить("city_id>");
		СписокПерпеносВКонце.Добавить("name>");
		СписокПерпеносВКонце.Добавить("orgid>");
		СписокПерпеносВКонце.Добавить("modified>");
		СписокПерпеносВКонце.Добавить("secureCode>");
		
		
		//история заказоав
		СписокПерпеносВКонце.Добавить("itemType");
		СписокПерпеносВКонце.Добавить("createdIn1c");
		СписокПерпеносВКонце.Добавить("createdIn100sp");
		СписокПерпеносВКонце.Добавить("distributorCode");
		СписокПерпеносВКонце.Добавить("distributorPrevCode");
		СписокПерпеносВКонце.Добавить("isTransit");
		СписокПерпеносВКонце.Добавить("arrivalNum");
		СписокПерпеносВКонце.Добавить("sizedCategoryName");
		СписокПерпеносВКонце.Добавить("sizedCategoryNum");
		СписокПерпеносВКонце.Добавить("isBig");
		СписокПерпеносВКонце.Добавить("isFree");
		СписокПерпеносВКонце.Добавить("hasDistributorFee");
		СписокПерпеносВКонце.Добавить("isGroup");
		СписокПерпеносВКонце.Добавить("stickerGroupId");
		СписокПерпеносВКонце.Добавить("paidSum");
		
		Для Каждого элем из СписокПерпеносВКонце Цикл 
			ТекстФайла=СтрЗаменить(ТекстФайла,"</"+элем.Значение+">",	"</"+элем.Значение+">"+Символы.ПС);
			ТекстФайла=СтрЗаменить(ТекстФайла,"<"+элем.Значение+"/>",	"<"+элем.Значение+"/>"+Символы.ПС);
		КонецЦикла;	

		Возврат ТекстФайла ;
КонецФункции

Функция ДатаИзСтроки(Знач СтроковаяДата,Вариант = 0) Экспорт
	Если Вариант = 0 Тогда
		СтроковаяДата = СтрЗаменить(СтроковаяДата , "-","");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , ".","");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , ":","");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , " ","");
		Попытка
			НоваяДата = Дата(СтроковаяДата ); 
		Исключение
			НоваяДата = Дата(1,1,1); 	
		КонецПопытки;
		
	ИначеЕсли Вариант = 1 Тогда
		День  		= Число(Лев(СтроковаяДата,2));
		Месяц 		= Число(Сред(СтроковаяДата,4,2));
		Год	  		= Число(Сред(СтроковаяДата,7,4));
		Час	  	  	= Число(Сред(СтроковаяДата,12,2));
		Минута	  	= Число(Сред(СтроковаяДата,15,2));
		Секунда	  	= Число(Сред(СтроковаяДата,18,2));
		НоваяДата = Дата(Год, Месяц, День,Час, Минута, Секунда);
	Иначе
		НоваяДата = Дата(1,1,1);
	КонецЕсли;
	Возврат НоваяДата; 	
КонецФункции

Функция ПолучитьСтрокуXML(ОбъектXDTO) Экспорт
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTO);
	ДанныеXML = Запись.Закрыть();
	ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML;	
КонецФункции

Процедура ЗаполнитьТэгиЗаказаПо_ШК(ШК,результат) Экспорт
	ЭтоХМЛ=(ТипЗнч(результат)=Тип("ЗаписьXML"));
	
	Если ТипЗнч(ШК)=Тип("СправочникСсылка.Мегаордера") или ТипЗнч(ШК)=Тип("Структура") Тогда
		Если ТипЗнч(ШК.Покупка)=Тип("СправочникСсылка.Покупки") Тогда
			Если ЭтоХМЛ Тогда
				СтоСП.Вставить_Тэг(результат,"pid",               Формат(Число(ШК.Покупка.Код),"ЧГ=0"));
				СтоСП.Вставить_Тэг(результат,"orderType",         "sp");
			Иначе	
				результат.Вставить("pid",             			  Формат(Число(ШК.Покупка.Код),"ЧГ=0"));
				результат.Вставить("orderType", 	   			  "sp");
			КонецЕсли;
		ИначеЕсли ТипЗнч(ШК.Покупка)=Тип("СправочникСсылка.Пристрой") Тогда
			Если ЭтоХМЛ Тогда
				СтоСП.Вставить_Тэг(результат,"orderId",           Формат(Число(ШК.Покупка.Код),"ЧГ=0"));
				СтоСП.Вставить_Тэг(результат,"orderType",         "bulletin");
				СтоСП.Вставить_Тэг(результат,"stickerId",         Формат(Число(Сред(ШК.Код,3,10)),"ЧГ=0"));
			Иначе	
				результат.Вставить("orderId",           		  Формат(Число(ШК.Покупка.Код),"ЧГ=0"));
				результат.Вставить("orderType", 	    		  "bulletin");
				результат.Вставить("stickerId",					  Формат(Число(Сред(ШК.Код,3,10)),"ЧГ=0"));
			КонецЕсли;
		ИначеЕсли ТипЗнч(ШК.Покупка)=Тип("СправочникСсылка.Заказы") Тогда
			Если ЭтоХМЛ Тогда
				СтоСП.Вставить_Тэг(результат,"orderId",           Формат(Число(ШК.Покупка.Код),"ЧГ=0"));
				СтоСП.Вставить_Тэг(результат,"orderType",         "shop");
			Иначе	
				результат.Вставить("orderId",         			  Формат(Число(ШК.Покупка.Код),"ЧГ=0"));
				результат.Вставить("orderType", 	    		  "shop");
			КонецЕсли;
		ИначеЕсли ТипЗнч(ШК.Покупка)=Тип("СправочникСсылка.Коробки") Тогда
			Если ЭтоХМЛ Тогда
				СтоСП.Вставить_Тэг(результат,"groupCode",         Формат(Число(ШК.Покупка.Код),"ЧГ=0"));
				СтоСП.Вставить_Тэг(результат,"orderType",         "group");
			Иначе	
				результат.Вставить("groupCode",         		  Формат(Число(ШК.Покупка.Код),"ЧГ=0"));
				результат.Вставить("orderType", 	   			  "group");
			КонецЕсли;
		ИначеЕсли ТипЗнч(ШК.Покупка)=Тип("СправочникСсылка.СобранныеЗаказы") Тогда
			Если ЭтоХМЛ Тогда
				СтоСП.Вставить_Тэг(результат,"groupCode",         Формат(Число(ШК.Покупка.Код),"ЧГ=0"));
				СтоСП.Вставить_Тэг(результат,"orderType",         "group");
			Иначе	
				результат.Вставить("groupCode",         		  Формат(Число(ШК.Покупка.Код),"ЧГ=0"));
				результат.Вставить("orderType", 	   			  "group");
			КонецЕсли;
		ИначеЕсли  ТипЗнч(ШК.Покупка)=Тип("СправочникСсылка.Посылки") Тогда
			Если ЭтоХМЛ Тогда
				СтоСП.Вставить_Тэг(результат,"packageId",         Формат(Число(ШК.Покупка.Код),"ЧГ=0"));
				СтоСП.Вставить_Тэг(результат,"orderType",         "package");
			Иначе	
				результат.Вставить("packageId",         		  Формат(Число(ШК.Покупка.Код),"ЧГ=0"));
				результат.Вставить("orderType", 	   			  "package");
			КонецЕсли;
			
			
		КонецЕсли;
	ИначеЕсли  ТипЗнч(ШК)=Тип("СправочникСсылка.Посылки") Тогда
		Если ЭтоХМЛ Тогда
			СтоСП.Вставить_Тэг(результат,"packageId",         Формат(Число(ШК.Код),"ЧГ=0"));
			СтоСП.Вставить_Тэг(результат,"orderType",         "package");
		Иначе	
			результат.Вставить("packageId",         		  Формат(Число(ШК.Код),"ЧГ=0"));
			результат.Вставить("orderType", 	   			  "package");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСправочник(ТипТэга) Экспорт
	Если ТипТэга = "sp" Тогда
		Возврат  "Покупки";
	КонецЕсли;	
	Если ТипТэга = "user" Тогда
		Возврат  "Участники";
	КонецЕсли;	
	Если ТипТэга = "distributor" Тогда
		Возврат  "ТочкиРаздачи";
	КонецЕсли;	
	
	
КонецФункции	

Функция ПолучитьOrder_ID(Посылка)
	Возврат Посылка.Состав[0].КодЗаказа
КонецФункции	

Функция Получить_Order(ШК) Экспорт
	Тип_order		= ФабрикаXDTO.Тип("http://www.100sp.ru/out","order");
	Объект_order	= ФабрикаXDTO.Создать(Тип_order);
	
	Если ТипЗнч(ШК.Покупка)	= Тип("СправочникСсылка.Посылки") Тогда
		Объект_order.packageId	= Формат(ШК.Покупка.код, 	"ЧГ=0");
		Объект_order.orderType  = "package";
		//Объект_order.pid		= Формат(ШК.Покупка.Покупка.код, 	"ЧГ=0");
		//Объект_order.uid		= Формат(ШК.Покупка.Участник.Код, 	"ЧГ=0");
		//Объект_order.orderType  = "sp";
		
	ИначеЕсли ТипЗнч(ШК.Покупка)	= Тип("СправочникСсылка.Покупки") Тогда
		Объект_order.pid		= Формат(ШК.Покупка.код, 	"ЧГ=0");
		Объект_order.uid		= Формат(ШК.Участник.код, 	"ЧГ=0");
		Объект_order.orderType  = "sp";
		
	КонецЕсли;
	Возврат Объект_order;
КонецФункции	



Процедура ЧистимСтарыеДвиженияОбмена(ДатаОчистки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Обмен100спСрезПоследних.Партия КАК Партия
		|ПОМЕСТИТЬ НеИсправленныеОшибки
		|ИЗ
		|	РегистрСведений.Обмен100сп.СрезПоследних КАК Обмен100спСрезПоследних
		|ГДЕ
		|	Обмен100спСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Ошибка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Обмен100спСрезПоследних.Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Обмен100сп.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.Обмен100сп КАК Обмен100сп
		|ГДЕ
		|	НЕ Обмен100сп.Партия В
		|				(ВЫБРАТЬ
		|					НеИсправленныеОшибки.Партия КАК Партия
		|				ИЗ
		|					НеИсправленныеОшибки КАК НеИсправленныеОшибки)
		|	И Обмен100сп.Период <= &ДатаОчистки
		|
		|СГРУППИРОВАТЬ ПО
		|	Обмен100сп.Регистратор";
	
	Запрос.УстановитьПараметр("ДатаОчистки", ДатаОчистки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОчистимСтарыеДвиженияДокумента(ВыборкаДетальныеЗаписи.Регистратор)
	КонецЦикла;
	Константы.ДатаХраненияДвиженийОбмена.Установить(ДатаОчистки);
КонецПроцедуры	


#Область Движения


Процедура ОчистимСтарыеДвиженияДокумента(Док)
	НЗ = РегистрыСведений.Обмен100сп.СоздатьНаборЗаписей();
	НЗ.Отбор.Регистратор.Установить(Док);
	нз.Прочитать();
	НЗ.Очистить();
	Попытка
		НЗ.Записать(Истина);
	Исключение
	
	КонецПопытки;
	
	
	НЗ = РегистрыСведений.Обмен100спСообщения.СоздатьНаборЗаписей();
	НЗ.Отбор.Регистратор.Установить(Док);
	нз.Прочитать();
	НЗ.Очистить();
	Попытка
		НЗ.Записать(Истина);
	Исключение
	КонецПопытки;
КонецПроцедуры	


// Процедура формирования движений по регистру "СтоСПОбмен ".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьСтоСПОбмен(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаОбмен100сп = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОбмен100сп;
	
	Если Отказ ИЛИ ТаблицаОбмен100сп.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОбмен100сп = Движения.Обмен100сп;
	ДвиженияОбмен100сп.Записывать = Истина;
	ДвиженияОбмен100сп.Загрузить(ТаблицаОбмен100сп);
	
КонецПроцедуры

// Процедура формирования движений по регистру "СтоСПОбмен ".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьСтоСПОбмен_РН(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаОбмен100СПрн = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОбмен100СПрн;
	
	Если Отказ ИЛИ ТаблицаОбмен100СПрн.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОбмен100сп = Движения.Обмен100СПрн;
	ДвиженияОбмен100сп.Записывать = Истина;
	ДвиженияОбмен100сп.Загрузить(ТаблицаОбмен100СПрн);
	
КонецПроцедуры


// Процедура формирования движений по регистру "Обмен100СПрн_Ошибки ".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьСтоСПОбмен_РН_Ошибки(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаОбмен100СПрн_Ошибки = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОбмен100СПрн_Ошибки;
	
	Если Отказ ИЛИ ТаблицаОбмен100СПрн_Ошибки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияОбмен100сп_Ошибки = Движения.Обмен100СПрн_Ошибки;
	ДвиженияОбмен100сп_Ошибки.Записывать = Истина;
	ДвиженияОбмен100сп_Ошибки.Загрузить(ТаблицаОбмен100СПрн_Ошибки);
	
КонецПроцедуры


Функция Получить_ТекстЗапроса_Обмен100сп(Запрос, ТекстыЗапроса, Регистры) Экспорт
	//Запрос.Параметры.Ссылка
	ИмяРегистра = "Обмен100сп";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	//ТекстЗапроса = "
	//			   |
	
	
	ТекстЗапроса = "
				   |
				   |ВЫБРАТЬ
	               |	ПриходнаяПокупки.Ссылка.Дата КАК Период,
	               |	ПриходнаяПокупки.Ссылка КАК Регистратор,
				   |	ПриходнаяПокупки.НомерСтроки КАК НомерСтроки,
	               |	ПриходнаяПокупки.ШК КАК Мегаордер,
	               |	ПриходнаяПокупки.Ссылка КАК Партия,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена,
				   |	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
	               |ИЗ
	               |	Документ.Приходная.Покупки КАК ПриходнаяПокупки
	               |ГДЕ
				   |	ПриходнаяПокупки.Ссылка = &Ссылка
				   |
				   |Объединить все
				   |
				   |ВЫБРАТЬ
	               |	РазборКоробкиПокупки.Ссылка.Дата КАК Период,
	               |	РазборКоробкиПокупки.Ссылка КАК Регистратор,
				   |	РазборКоробкиПокупки.НомерСтроки КАК НомерСтроки,
	               |	РазборКоробкиПокупки.ШК КАК Мегаордер,
	               |	РазборКоробкиПокупки.Ссылка КАК Партия,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена,
				   |	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
	               |ИЗ
	               |	Документ.РазборКоробки.Покупки КАК РазборКоробкиПокупки
	               |ГДЕ
				   |	РазборКоробкиПокупки.Ссылка = &Ссылка
				   |
				   |Объединить все
				   |
				   |ВЫБРАТЬ
	               |	РазборКоробкиКоробки.Ссылка.Дата КАК Период,
	               |	РазборКоробкиКоробки.Ссылка КАК Регистратор,
				   |	РазборКоробкиКоробки.НомерСтроки КАК НомерСтроки,
	               |	РазборКоробкиКоробки.ШК КАК Мегаордер,
	               |	РазборКоробкиКоробки.Ссылка КАК Партия,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена,
				   |	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
	               |ИЗ
	               |	Документ.РазборКоробки.Коробки КАК РазборКоробкиКоробки
	               |ГДЕ
				   |	РазборКоробкиКоробки.Ссылка = &Ссылка и
				   |	(РазборКоробкиКоробки.Коробка<>Значение(Справочник.Коробки.БезКоробки) или
				   |	(РазборКоробкиКоробки.Коробка.ТочкаНазначения.КРазбору и не РазборКоробкиКоробки.Коробка.КРазбору))
				   |
				   |Объединить все
				   |
				   |ВЫБРАТЬ
	               |	ФормированиеКоробкиНовыеПокупки.Ссылка.Дата КАК Период,
	               |	ФормированиеКоробкиНовыеПокупки.Ссылка КАК Регистратор,
				   |	ФормированиеКоробкиНовыеПокупки.НомерСтроки КАК НомерСтроки,
	               |	ФормированиеКоробкиНовыеПокупки.ШК КАК Мегаордер,
	               |	ФормированиеКоробкиНовыеПокупки.Ссылка КАК Партия,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена,
				   |	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
	               |ИЗ
	               |	Документ.ФормированиеКоробки.НовыеПокупки КАК ФормированиеКоробкиНовыеПокупки
	               |ГДЕ
				   |	ФормированиеКоробкиНовыеПокупки.Ссылка = &Ссылка и
				   |	ФормированиеКоробкиНовыеПокупки.Ссылка.Статус = Значение(Перечисление.СтатусОтпавкиНаСайт.Отправлен)
				   |
				   |Объединить все
				   |
				   |ВЫБРАТЬ
	               |	ПоступлениеПристрояЗаказы.Ссылка.Дата КАК Период,
	               |	ПоступлениеПристрояЗаказы.Ссылка КАК Регистратор,
				   |	ПоступлениеПристрояЗаказы.НомерСтроки КАК НомерСтроки,
	               |	ПоступлениеПристрояЗаказы.ШК КАК Мегаордер,
	               |	ПоступлениеПристрояЗаказы.Ссылка КАК Партия,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена,
				   |	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
	               |ИЗ
	               |	Документ.ПоступлениеПристроя.Заказы КАК ПоступлениеПристрояЗаказы
	               |ГДЕ
				   |	ПоступлениеПристрояЗаказы.Ссылка = &Ссылка 
				   |
				   |Объединить все
				   |
				   |ВЫБРАТЬ
	               |	РегистрацияСупперГруппыГруппы.Ссылка.Дата КАК Период,
	               |	РегистрацияСупперГруппыГруппы.Ссылка КАК Регистратор,
				   |	РегистрацияСупперГруппыГруппы.НомерСтроки КАК НомерСтроки,
	               |	РегистрацияСупперГруппыГруппы.СупперГруппа КАК Мегаордер,
	               |	РегистрацияСупперГруппыГруппы.Ссылка КАК Партия,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппаРегистрация) КАК ТипОбмена,
				   |	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
	               |ИЗ
	               |	Документ.РегистрацияСупперГруппы.Группы КАК РегистрацияСупперГруппыГруппы
	               |ГДЕ
				   |	РегистрацияСупперГруппыГруппы.Ссылка = &Ссылка 
				   |
				   |Объединить все
				   |
				   |ВЫБРАТЬ
	               |	ЗаполнитьКоленоМаршрута.Ссылка.Дата КАК Период,
	               |	ЗаполнитьКоленоМаршрута.Ссылка КАК Регистратор,
				   |	1 КАК НомерСтроки,
	               |	ЗаполнитьКоленоМаршрута.Супергруппа КАК Мегаордер,
	               |	ЗаполнитьКоленоМаршрута.Ссылка КАК Партия,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппаКолено) КАК ТипОбмена,
				   |	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
	               |ИЗ
	               |	Документ.ЗаполнитьКоленоМаршрута КАК ЗаполнитьКоленоМаршрута
	               |ГДЕ
				   |	ЗаполнитьКоленоМаршрута.Ссылка = &Ссылка 
				   |
				   |Объединить все
				   |
				   |ВЫБРАТЬ
	               |	ЗаполнитьСупергруппу.Ссылка.Дата КАК Период,
	               |	ЗаполнитьСупергруппу.Ссылка КАК Регистратор,
				   |	1 КАК НомерСтроки,
	               |	ЗаполнитьСупергруппу.Супергруппа КАК Мегаордер,
	               |	ЗаполнитьСупергруппу.Ссылка КАК Партия,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппа) КАК ТипОбмена,
				   |	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
	               |ИЗ
	               |	Документ.ЗаполнитьСупергруппу КАК ЗаполнитьСупергруппу
	               |ГДЕ
				   |	ЗаполнитьСупергруппу.Ссылка = &Ссылка 
				   |
				   |
				   |";

				   //|
				   //|";
				   
	ТекстЗапроса_ИсправлениеОшибокОбмена="";
	//Для каждого табл из Метаданные.Документы.ИсправлениеОшибокОбмена.ТабличныеЧасти Цикл	
	//	ТабЧасть=табл.Имя;
	//	ТекстЗапроса_ИсправлениеОшибокОбмена=ТекстЗапроса_ИсправлениеОшибокОбмена+"
	//          	   |
	//			   |Объединить все
	//			   |
	//			   |ВЫБРАТЬ
	//               |	ИсправлениеОшибокОбмена"+ТабЧасть+".Ссылка.Дата КАК Период,
	//               |	ИсправлениеОшибокОбмена"+ТабЧасть+".Ссылка 		КАК Регистратор,
	//			   |	ИсправлениеОшибокОбмена"+ТабЧасть+".НомерСтроки КАК НомерСтроки,
	//               |	ИсправлениеОшибокОбмена"+ТабЧасть+".Мегаордер 	КАК Мегаордер,
	//               |	ИсправлениеОшибокОбмена"+ТабЧасть+".Партия 		КАК Партия,
	//               |	ИсправлениеОшибокОбмена"+ТабЧасть+".ТипОбмена	КАК ТипОбмена,
	//			   |	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Исправлено) как Статус
	//               |ИЗ
	//               |	Документ.ИсправлениеОшибокОбмена."+ТабЧасть+" КАК ИсправлениеОшибокОбмена"+ТабЧасть+"
	//               |ГДЕ
	//			   |	ИсправлениеОшибокОбмена"+ТабЧасть+".Ссылка = &Ссылка и
	//			   |	ИсправлениеОшибокОбмена"+ТабЧасть+".Исправлено
	//			   |
	//			   |";
	//КонецЦикла;
	ТекстЗапроса=ТекстЗапроса+ТекстЗапроса_ИсправлениеОшибокОбмена;
					   
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции


//МетодДляРегистра накопления тк в Сведенях тормоза
Функция Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Обмен100СПрн";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	//////////////////////
	
	Если 	ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Движение")
		 //и	Запрос.Параметры.Ссылка.НовыеПокупки.Количество()=0	
		 
		 Тогда
		 ТекстЗапроса = "ВЫБРАТЬ
		                |	ДокументПоступления.Ссылка.Дата КАК Период,
		                |	1 КАК КоличествоНеОтправленых,
		                |	ДокументПоступления.Ссылка КАК Партия,
		                |	ВЫБОР
		                |		КОГДА ДокументПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОпераций_ДвижениеСклад.Списание)
		                |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Списание)
		                |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход)
		                |	КОНЕЦ КАК ТипОбмена
		                |ИЗ
		                |	Документ.Движение КАК ДокументПоступления
		                |ГДЕ
		                |	ДокументПоступления.Ссылка = &Ссылка
		                |	И (ДокументПоступления.Ссылка.Габарит <> ЗНАЧЕНИЕ(Справочник.Габариты.ПустаяСсылка)
						|  или ДокументПоступления.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОпераций_ДвижениеСклад.Списание))
						|";

		    ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
			Возврат ТекстЗапроса;
	КонецЕсли; 
	
	
	
	
	
	Если 	ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ФормированиеКоробки")
		 и	Запрос.Параметры.Ссылка.НовыеПокупки.Количество()=0	Тогда
		 ТекстЗапроса = "
		 |
		 |ВЫБРАТЬ   
		 |	ДокументПоступления.Ссылка.Дата КАК Период,		
		 |	1 как КоличествоНеОтправленых,		
		 |	ДокументПоступления.Ссылка КАК Партия,
		 |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена
		 |ИЗ
		 |	"+Запрос.Параметры.ИдентификаторМетаданных.ПолноеИмя+" КАК ДокументПоступления
		 |ГДЕ
		 |	 Ложь
		 |
		 |";

		    ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
			Возврат ТекстЗапроса;
	КонецЕсли; 
	
	
	Если     ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ПоступлениеПристроя")
		 или ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ФормированиеКоробки")
		Тогда
		 ТекстЗапроса = "
		 |
		 |ВЫБРАТЬ   
		 |	ДокументПоступления.Ссылка.Дата КАК Период,		
		 |	1 как КоличествоНеОтправленых,		
		 |	ДокументПоступления.Ссылка КАК Партия,
		 |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена
		 |ИЗ
		 |	"+Запрос.Параметры.ИдентификаторМетаданных.ПолноеИмя+" КАК ДокументПоступления
		 |ГДЕ
		 |	ДокументПоступления.Ссылка = &Ссылка
		 |
		 |";
	 КонецЕсли;	
	 
	//Если     ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ДвижениеТранзита") 
	//	Тогда
	//	 ТекстЗапроса = "
	//	 |
	//	 |ВЫБРАТЬ   
	//	 |	ДокументПоступления.Ссылка.Дата 				КАК Период,		
	//	 |	1 												как КоличествоНеОтправленых,		
	//	 |	ДокументПоступления.Ссылка 						КАК Партия,
	//	 |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) 	КАК ТипОбмена
	//	 |ИЗ
	//	 |	Документ.ДвижениеТранзита.ПокупкиТранзит 		КАК ДокументПоступления
	//	 |ГДЕ
	//	 |	ДокументПоступления.Ссылка = &Ссылка
	//	 |	и ДокументПоступления.Ссылка.ВидОперации =Значение(Перечисление.ВидыОпераций_ДвижениеТранзита.ТранзитНаОстатки)
	//	 |
	//	 |СГРУППИРОВАТЬ ПО
	//	 |	ДокументПоступления.Ссылка,
	//	 |	ДокументПоступления.Ссылка.Дата
	//	 |
	//	 |";
	// КонецЕсли;		 
	 
	//Если     ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Приходная") 
	//	Тогда
	//	 ТекстЗапроса = "
	//	 |
	//	 |ВЫБРАТЬ   
	//	 |	ДокументПоступления.Ссылка.Дата КАК Период,		
	//	 |	1 как КоличествоНеОтправленых,		
	//	 |	ДокументПоступления.Ссылка КАК Партия,
	//	 |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена
	//	 |ИЗ
	//	 |	Документ.Приходная.Покупки КАК ДокументПоступления
	//	 |ГДЕ
	//	 |	ДокументПоступления.Ссылка = &Ссылка
	//	 |
	//	 |СГРУППИРОВАТЬ ПО
	//	 |	ДокументПоступления.Ссылка,
	//	 |	ДокументПоступления.Ссылка.Дата
	//	 |
	//	 |";
	// КонецЕсли;	 
	// 
	//Если     ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.РазборКоробки") 
	//	Тогда
	//	 ТекстЗапроса = "
	//	 |
	//	 |ВЫБРАТЬ
	//	 |	ДокументПоступления.Ссылка.Дата КАК Период,
	//	 |	1 КАК КоличествоНеОтправленых,
	//	 |	ДокументПоступления.Ссылка КАК Партия,
	//	 |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена
	//	 |ИЗ
	//	 |	Документ.РазборКоробки.Покупки КАК ДокументПоступления
	//	 |ГДЕ
	//	 |	ДокументПоступления.Ссылка = &Ссылка
	//	 |
	//	 |СГРУППИРОВАТЬ ПО
	//	 |	ДокументПоступления.Ссылка,
	//	 |	ДокументПоступления.Ссылка.Дата
	//	 |
	//	 |";

	//КонецЕсли;	
	 
#Область Супергруппы	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.РегистрацияСупперГруппы") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	РегистрацияСупперГруппыГруппы.Ссылка.Дата КАК Период,
		|	1 как КоличествоНеОтправленых,
		|	РегистрацияСупперГруппыГруппы.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппаРегистрация) КАК ТипОбмена
		|ИЗ
		|	Документ.РегистрацияСупперГруппы.Группы КАК РегистрацияСупперГруппыГруппы
		|ГДЕ
		|	РегистрацияСупперГруппыГруппы.Ссылка = &Ссылка 
		|
		|";
	КонецЕсли;	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ЗаполнитьКоленоМаршрута") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ЗаполнитьКоленоМаршрута.Ссылка.Дата КАК Период,
		|	1 как КоличествоНеОтправленых,
		|	ЗаполнитьКоленоМаршрута.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппаКолено) КАК ТипОбмена
		|ИЗ
		|	Документ.ЗаполнитьКоленоМаршрута КАК ЗаполнитьКоленоМаршрута
		|ГДЕ
		|	ЗаполнитьКоленоМаршрута.Ссылка = &Ссылка 
		|
		|";
	КонецЕсли;				  
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ЗаполнитьСупергруппу") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ЗаполнитьСупергруппу.Ссылка.Дата КАК Период,
		|	1 как КоличествоНеОтправленых,
		|	ЗаполнитьСупергруппу.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппа) КАК ТипОбмена
		|ИЗ
		|	Документ.ЗаполнитьСупергруппу КАК ЗаполнитьСупергруппу
		|ГДЕ
		|	ЗаполнитьСупергруппу.Ссылка = &Ссылка 
		|
		|
		|";
	КонецЕсли;	
	//Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ВыдачаТранзита") Тогда
	//	ТекстЗапроса = "ВЫБРАТЬ
	//	               |	ВыдачаТранзитаПокупки.Ссылка.Дата КАК Период,
	//	               |	1 КАК КоличествоНеОтправленых,
	//	               |	ВыдачаТранзитаПокупки.Ссылка КАК Партия,
	//	               |	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппа) КАК ТипОбмена
	//	               |ИЗ
	//	               |	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
	//	               |ГДЕ
	//	               |	ТИПЗНАЧЕНИЯ(ВыдачаТранзитаПокупки.Покупка) = ТИП(Справочник.Мегаордера)
	//	               |
	//	               |СГРУППИРОВАТЬ ПО
	//	               |	ВыдачаТранзитаПокупки.Ссылка,
	//	               |	ВыдачаТранзитаПокупки.Ссылка.Дата";
	//КонецЕсли;	
#КонецОбласти	

#Область Возвраты
	//Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ВозвратПокупокОрганизатору") Тогда
	//	ТекстЗапроса = "
	//	|
	//	|ВЫБРАТЬ
	//	|	ВозвратПокупокОрганизатору.Ссылка.Дата КАК Период,
	//	|	1 как КоличествоНеОтправленых,
	//	|	ВозвратПокупокОрганизатору.Ссылка КАК Партия,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Возврат) КАК ТипОбмена
	//	|ИЗ
	//	|	Документ.ВозвратПокупокОрганизатору КАК ВозвратПокупокОрганизатору
	//	|ГДЕ
	//	|	ВозвратПокупокОрганизатору.Ссылка = &Ссылка 
	//	|
	//	|";
	//КонецЕсли;	
	
	
	//Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ВозвратГруппОрганизатору") Тогда
	//	ТекстЗапроса = "
	//	|
	//	|ВЫБРАТЬ
	//	|	ВозвратПокупокОрганизатору.Ссылка.Дата КАК Период,
	//	|	1 как КоличествоНеОтправленых,
	//	|	ВозвратПокупокОрганизатору.Ссылка КАК Партия,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Возврат) КАК ТипОбмена
	//	|ИЗ
	//	|	Документ.ВозвратПокупокОрганизатору КАК ВозвратПокупокОрганизатору
	//	|ГДЕ
	//	|	ВозвратПокупокОрганизатору.Ссылка = &Ссылка 
	//	|
	//	|";
	//КонецЕсли;	
	
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ПередачаВозвратовОрганизатору") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ПередачаВозвратовОрганизатору.Ссылка.Дата КАК Период,
		|	1 как КоличествоНеОтправленых,
		|	ПередачаВозвратовОрганизатору.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.ПередачаВозврата) КАК ТипОбмена
		|ИЗ
		|	Документ.ПередачаВозвратовОрганизатору КАК ПередачаВозвратовОрганизатору
		|ГДЕ
		|	ПередачаВозвратовОрганизатору.Ссылка = &Ссылка 
		|
		|";
	КонецЕсли;		

#КонецОбласти					   

#Область ВыдачаПокупок
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Расходная") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	Расходная.Ссылка.Дата КАК Период,
		|	1 как КоличествоНеОтправленых,
		|	Расходная.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Расход) КАК ТипОбмена
		|ИЗ
		|	Документ.Расходная КАК Расходная
		|ГДЕ
		|	Расходная.Ссылка = &Ссылка 
		|
		|";
	КонецЕсли;
	
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ВыдачаТранзита") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ВыдачаТранзитаПокупки.Ссылка.Дата КАК Период,
		|	1 КАК КоличествоНеОтправленых,
		|	ВыдачаТранзитаПокупки.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Транзит) КАК ТипОбмена
		|ИЗ
       |	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
       |ГДЕ
       |	ВыдачаТранзитаПокупки.Ссылка = &Ссылка
       |	И ВыдачаТранзитаПокупки.ШК <> ЗНАЧЕНИЕ(Справочник.Мегаордера.Нулевой)
       |
       |СГРУППИРОВАТЬ ПО
       |	ВыдачаТранзитаПокупки.Ссылка";

		
		
	КонецЕсли;		

	
	//Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.УпаковатьЗаказы") Тогда
	//	ТекстЗапроса = "
	//	|
	//	|ВЫБРАТЬ
	//	|	УпаковатьЗаказы.Ссылка.Дата КАК Период,
	//	|	1 как КоличествоНеОтправленых,
	//	|	УпаковатьЗаказы.Ссылка КАК Партия,
	//	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Транзит) КАК ТипОбмена
	//	|ИЗ
	//	|	Документ.УпаковатьЗаказы КАК УпаковатьЗаказы
	//	|ГДЕ
	//	|	УпаковатьЗаказы.Ссылка = &Ссылка 
	//	|
	//	|";
	//КонецЕсли;	
#КонецОбласти	


	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти


#Область СтарыеМетоды

//МетодДляРегистра накопления тк в Сведенях тормоза
Функция Получить_ТекстЗапроса_Обмен100СП_РН_OLD(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Обмен100СПрн";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.Приходная") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ПриходнаяПокупки.Ссылка.Дата КАК Период,
		|	ПриходнаяПокупки.Ссылка КАК Регистратор,
		|	ПриходнаяПокупки.НомерСтроки КАК НомерСтроки,
		|	Значение(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ПриходнаяПокупки.НомерСтроки КАК СтрокаВПартии,
		|	1 как КоличествоНеОтправленых,
		|	ПриходнаяПокупки.ШК КАК Мегаордер,
		|	ПриходнаяПокупки.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
		|ИЗ
		|	Документ.Приходная.Покупки КАК ПриходнаяПокупки
		|ГДЕ
		|	ПриходнаяПокупки.Ссылка = &Ссылка
		|
		|";
	КонецЕсли;
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.РазборКоробки") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	РазборКоробкиПокупки.Ссылка.Дата КАК Период,
		|	РазборКоробкиПокупки.Ссылка КАК Регистратор,
		|	РазборКоробкиПокупки.НомерСтроки КАК НомерСтроки,
		|	Значение(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	РазборКоробкиПокупки.НомерСтроки КАК СтрокаВПартии,
		|	1 как КоличествоНеОтправленых,
		|	РазборКоробкиПокупки.ШК КАК Мегаордер,
		|	РазборКоробкиПокупки.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
		|ИЗ
		|	Документ.РазборКоробки.Покупки КАК РазборКоробкиПокупки
		|ГДЕ
		|	РазборКоробкиПокупки.Ссылка = &Ссылка
		|
		//|Объединить все
		//|
		//|ВЫБРАТЬ
		//|	РазборКоробкиКоробки.Ссылка.Дата КАК Период,
		//|	РазборКоробкиКоробки.Ссылка КАК Регистратор,
		//|	РазборКоробкиКоробки.НомерСтроки КАК НомерСтроки,
		//|	Значение(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		//|	РазборКоробкиКоробки.НомерСтроки КАК СтрокаВПартии,
		//|	1 как КоличествоНеОтправленых,
		//|	РазборКоробкиКоробки.ШК КАК Мегаордер,
		//|	РазборКоробкиКоробки.Ссылка КАК Партия,
		//|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена,
		//|	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
		//|ИЗ
		//|	Документ.РазборКоробки.Коробки КАК РазборКоробкиКоробки
		//|ГДЕ
		//|	РазборКоробкиКоробки.Ссылка = &Ссылка и
		//|	(РазборКоробкиКоробки.Коробка<>Значение(Справочник.Коробки.БезКоробки) или
		//|	(РазборКоробкиКоробки.Коробка.ТочкаНазначения.КРазбору и не РазборКоробкиКоробки.Коробка.КРазбору))
		|
		|";
	КонецЕсли;
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ФормированиеКоробки") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ФормированиеКоробкиНовыеПокупки.Ссылка.Дата КАК Период,
		|	ФормированиеКоробкиНовыеПокупки.Ссылка КАК Регистратор,
		|	ФормированиеКоробкиНовыеПокупки.НомерСтроки КАК НомерСтроки,
		|	Значение(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ФормированиеКоробкиНовыеПокупки.НомерСтроки КАК СтрокаВПартии,
		|	1 как КоличествоНеОтправленых,
		|	ФормированиеКоробкиНовыеПокупки.ШК КАК Мегаордер,
		|	ФормированиеКоробкиНовыеПокупки.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
		|ИЗ
		|	Документ.ФормированиеКоробки.НовыеПокупки КАК ФормированиеКоробкиНовыеПокупки
		|ГДЕ
		|	ФормированиеКоробкиНовыеПокупки.Ссылка = &Ссылка и
		|	ФормированиеКоробкиНовыеПокупки.Ссылка.Статус = Значение(Перечисление.СтатусОтпавкиНаСайт.Отправлен)
		|
		|";
	КонецЕсли;
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ПоступлениеПристроя") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ПоступлениеПристрояЗаказы.Ссылка.Дата КАК Период,
		|	ПоступлениеПристрояЗаказы.Ссылка КАК Регистратор,
		|	ПоступлениеПристрояЗаказы.НомерСтроки КАК НомерСтроки,
		|	Значение(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ПоступлениеПристрояЗаказы.НомерСтроки КАК СтрокаВПартии,
		|	1 как КоличествоНеОтправленых,
		|	ПоступлениеПристрояЗаказы.ШК КАК Мегаордер,
		|	ПоступлениеПристрояЗаказы.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.Приход) КАК ТипОбмена,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
		|ИЗ
		|	Документ.ПоступлениеПристроя.Заказы КАК ПоступлениеПристрояЗаказы
		|ГДЕ
		|	ПоступлениеПристрояЗаказы.Ссылка = &Ссылка 
		|
		|";
	КонецЕсли;
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.РегистрацияСупперГруппы") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	РегистрацияСупперГруппыГруппы.Ссылка.Дата КАК Период,
		|	РегистрацияСупперГруппыГруппы.Ссылка КАК Регистратор,
		|	РегистрацияСупперГруппыГруппы.НомерСтроки КАК НомерСтроки,
		|	Значение(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	РегистрацияСупперГруппыГруппы.НомерСтроки КАК СтрокаВПартии,
		|	1 как КоличествоНеОтправленых,
		|	РегистрацияСупперГруппыГруппы.СупперГруппа КАК Мегаордер,
		|	РегистрацияСупперГруппыГруппы.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппаРегистрация) КАК ТипОбмена,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
		|ИЗ
		|	Документ.РегистрацияСупперГруппы.Группы КАК РегистрацияСупперГруппыГруппы
		|ГДЕ
		|	РегистрацияСупперГруппыГруппы.Ссылка = &Ссылка 
		|
		|";
	КонецЕсли;	
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ЗаполнитьКоленоМаршрута") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ЗаполнитьКоленоМаршрута.Ссылка.Дата КАК Период,
		|	ЗаполнитьКоленоМаршрута.Ссылка КАК Регистратор,
		|	1 КАК НомерСтроки,
		|	Значение(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	1 КАК СтрокаВПартии,
		|	1 как КоличествоНеОтправленых,
		|	ЗаполнитьКоленоМаршрута.Супергруппа КАК Мегаордер,
		|	ЗаполнитьКоленоМаршрута.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппаКолено) КАК ТипОбмена,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
		|ИЗ
		|	Документ.ЗаполнитьКоленоМаршрута КАК ЗаполнитьКоленоМаршрута
		|ГДЕ
		|	ЗаполнитьКоленоМаршрута.Ссылка = &Ссылка 
		|
		|";
	КонецЕсли;				  
	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ЗаполнитьСупергруппу") Тогда
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	ЗаполнитьСупергруппу.Ссылка.Дата КАК Период,
		|	ЗаполнитьСупергруппу.Ссылка КАК Регистратор,
		|	1 КАК НомерСтроки,
		|	Значение(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	1 КАК СтрокаВПартии,
		|	1 как КоличествоНеОтправленых,
		|	ЗаполнитьСупергруппу.Супергруппа КАК Мегаордер,
		|	ЗаполнитьСупергруппу.Ссылка КАК Партия,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбменов100сп.СуперГруппа) КАК ТипОбмена,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Сформирован) как Статус
		|ИЗ
		|	Документ.ЗаполнитьСупергруппу КАК ЗаполнитьСупергруппу
		|ГДЕ
		|	ЗаполнитьСупергруппу.Ссылка = &Ссылка 
		|
		|
		|";
	КонецЕсли;			

	Если ТипЗнч(Запрос.Параметры.Ссылка)=Тип("ДокументСсылка.ИсправлениеОшибокОбмена") Тогда
		ТекстЗапроса="";
		Для каждого табл из Метаданные.Документы.ИсправлениеОшибокОбмена.ТабличныеЧасти Цикл	
			ТабЧасть=табл.Имя;
			ТекстЗапроса=ТекстЗапроса+"
			|Объединить все
			|
			|ВЫБРАТЬ
			|	ИсправлениеОшибокОбмена"+ТабЧасть+".Ссылка.Дата КАК Период,
			|	ИсправлениеОшибокОбмена"+ТабЧасть+".Ссылка 		КАК Регистратор,
			|	ИсправлениеОшибокОбмена"+ТабЧасть+".НомерСтроки КАК НомерСтроки,
			|	Значение(ВидДвиженияНакопления.Приход) 			КАК	ВидДвижения,
			|	ИсправлениеОшибокОбмена"+ТабЧасть+".НомерСтроки КАК СтрокаВПартии,
			|	1 как КоличествоНеОтправленых,
			|	ИсправлениеОшибокОбмена"+ТабЧасть+".Мегаордер 	КАК Мегаордер,
			|	ИсправлениеОшибокОбмена"+ТабЧасть+".Партия 		КАК Партия,
			|	ИсправлениеОшибокОбмена"+ТабЧасть+".ТипОбмена	КАК ТипОбмена,
			|	ЗНАЧЕНИЕ(Перечисление.СтатусОтпавкиНаСайт.Исправлено) как Статус
			|ИЗ
			|	Документ.ИсправлениеОшибокОбмена."+ТабЧасть+" КАК ИсправлениеОшибокОбмена"+ТабЧасть+"
			|ГДЕ
			|	ИсправлениеОшибокОбмена"+ТабЧасть+".Ссылка = &Ссылка и
			|	ИсправлениеОшибокОбмена"+ТабЧасть+".Исправлено
			|
			|";
		КонецЦикла;
	КонецЕсли;
					   
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции


#КонецОбласти



Функция ТЗпоСтруктуре(СтруктураКолонок) Экспорт
	тз=новый ТаблицаЗначений;
	Для каждого стр из СтруктураКолонок Цикл
		Если ТипЗнч(стр.Значение)=Тип("Структура") Тогда
			тз.Колонки.Добавить(стр.Ключ,новый ОписаниеТипов("ТаблицаЗначений"));	
		Иначе	
			тз.Колонки.Добавить(стр.Ключ,новый ОписаниеТипов(стр.Значение));	
		КонецЕсли;
	КонецЦикла;
	возврат тз;
КонецФункции	


// Формирует таблицу значений по СпискуXDTO
//
// Параметры:
//  СписокXDTO  - СписокXDTO - Исходный СписокXDTO
//                 
//  СвойстваДаты  - Массив - реквизитов Списка для преобразования в дату Время
//                 
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Результирующая таблица
//
Функция ТЗ_поСпискуXDTO(СписокXDTO,СвойстваДаты=неопределено) Экспорт
	Тип_Списка=СписокXDTO.ВладеющееСвойство.Тип;
	
	ТЗ=ТЗСтруктура_поСпискуXDTO(Тип_Списка.Свойства,СвойстваДаты);
	Для каждого элем из СписокXDTO Цикл
		стр_тз=ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(стр_тз,элем);
		
		Если тз.Колонки.Найти("groupCode")<> Неопределено и стр_тз.groupCode<> "" Тогда
			стр_тз.groupCode = Формат(Число(стр_тз.groupCode),"ЧЦ=8; ЧВН=; ЧГ=0");
		КонецЕсли;	
		Если СвойстваДаты =Неопределено тогда Продолжить; КонецЕсли;
		Для Каждого св из СвойстваДаты Цикл
			стр_тз[св]=ДатаИзСтроки(элем[св]);
		КонецЦикла;	
	КонецЦикла;
	Возврат ТЗ;           
КонецФункции



Функция ТЗСтруктура_поСпискуXDTO(ТипСписокXDTO_Свойства,СвойстваДаты,тз=неопределено,СвойствоРодитель="")
	Если тз=неопределено Тогда
		тз=новый ТаблицаЗначений;
	КонецЕсли;	
	Для каждого стр из ТипСписокXDTO_Свойства Цикл
		имя_колонки	=?(ЗначениеЗаполнено(стр.ЛокальноеИмя),стр.ЛокальноеИмя,стр.Имя);
		
		тип_колонки =Тип_ПоТипуXDTO(стр.Тип);
		
		Если (тип_колонки=новый ОписаниеТипов("ОбъектXDTO")) Тогда
			тз.Колонки.Добавить(имя_колонки,новый ОписаниеТипов("ОбъектXDTO"));		
		Иначе	
			Если СвойстваДаты<>Неопределено и СвойстваДаты.Найти(имя_колонки)<>Неопределено Тогда
				тз.Колонки.Добавить(имя_колонки,новый ОписаниеТипов("Дата"));
				Продолжить;
			КонецЕсли;	
			тз.Колонки.Добавить(имя_колонки,тип_колонки);
		КонецЕсли;
		
	КонецЦикла;
	возврат тз;
КонецФункции	


Функция Тип_ПоТипуXDTO(ТипXDTO)
	наштип="ОбъектXDTO";
	Если ТипXDTO.Имя="integer" Тогда
		наштип="Число";
	ИначеЕсли ТипXDTO.Имя="boolean" Тогда           
		наштип="Булево";
	ИначеЕсли ТипXDTO.Имя="string" Тогда           
		наштип="Строка";
	КонецЕсли;	
	Возврат новый ОписаниеТипов(наштип);
КонецФункции	


//// Формирует таблицу значений по СпискуXDTO
////
//// Параметры:
////  СписокXDTO  - СписокXDTO - Исходный СписокXDTO
////                 
////  СвойстваДаты  - Массив - реквизитов Списка для преобразования в дату Время
////                 
////
//// Возвращаемое значение:
////   ТаблицаЗначений   - Результирующая таблица
////
//Функция ТЗГруппТК_поСпискуXDTO(СписокXDTO,СвойстваДаты=неопределено) Экспорт
//	Тип_Списка=СписокXDTO.ВладеющееСвойство.Тип;
//	
//	ТЗ=ТЗСтруктура_поСпискуXDTO(Тип_Списка.Свойства,СвойстваДаты);
//	таблицаСоставаГруппы = ПолучитьТаблицуСоставаГруппы();
//	
//	ТЗ.Колонки.Добавить("Группа", новый ОписаниеТипов("СправочникСсылка.Коробки"));
//	ТЗ.КОлонки.Добавить("КодКоробки" , 				новый ОписаниеТипов("Строка"));
//	ТЗ.КОлонки.Добавить("МетодОплаты" , 			новый ОписаниеТипов("ПеречислениеСсылка.МетодыОплаты"));
//	ТЗ.КОлонки.Добавить("СрокХраненияГруппы" , 		новый ОписаниеТипов("Число"));
//	ТЗ.КОлонки.Добавить("СтоимостьВыбралУчастник" , новый ОписаниеТипов("Число"));
//	ТЗ.КОлонки.Добавить("ВидРПОВыбралУчастник" , 	новый ОписаниеТипов("Строка"));
//	ТЗ.КОлонки.Добавить("СтатусГруппыДоставки" , 	новый ОписаниеТипов("ПеречислениеСсылка.СтатусыГруппыДоставки"));
//	ТЗ.КОлонки.Добавить("МинДатаДоставки" , 		новый ОписаниеТипов("Дата"));
//	ТЗ.КОлонки.Добавить("МаксДатаДоставки" , 		новый ОписаниеТипов("Дата"));
//	ТЗ.КОлонки.Добавить("uidint" ,			 		новый ОписаниеТипов("Число"));
//	
//	Для каждого элем из СписокXDTO Цикл
//		стр_тз=ТЗ.Добавить();
//		ЗаполнитьЗначенияСвойств(стр_тз,элем);
//		стр_тз.КодКоробки				= "гд_" + Формат(Число(элем.id), "ЧЦ=11; ЧВН=; ЧГ=0");
//		стр_тз.Группа 					= СП_РаботаСоСправочниками.ПолучитьКоробкуПо_Коду(стр_тз.КодКоробки);
//		стр_тз.distributor_code 			= Формат(Число(элем .distributor_code),"ЧЦ=4; ЧН=0; ЧВН=; ЧГ=0");
//		стр_тз.recipient_code 			= ?(элем .recipient_code = "", "0099",Формат(Число(элем .recipient_code),"ЧЦ=4; ЧН=0; ЧВН=; ЧГ=0"));
//		стр_тз.МетодОплаты 				= ?(элем.selectedDeliveryMethod.type = Неопределено,Перечисления.МетодыОплаты.ПустаяСсылка(), Перечисления.МетодыОплаты[элем.selectedDeliveryMethod.type]);
//		стр_тз.СрокХраненияГруппы 		= ?(элем.date_range_limit = "",0,Число(элем.date_range_limit));
//		стр_тз.СтоимостьВыбралУчастник 	= ?(	элем.selectedDeliveryMethod.type = Неопределено,0,Число(элем.selectedDeliveryMethod.price));
//		стр_тз.ВидРПОВыбралУчастник		= ?(	элем.selectedDeliveryMethod.name = Неопределено,"", элем.selectedDeliveryMethod.name);
//		Если элем.orders.order.Количество() = 0 Тогда
//			стр_тз.СтатусГруппыДоставки	= Перечисления.СтатусыГруппыДоставки.empty;
//		Иначе
//			стр_тз.СтатусГруппыДоставки	= Перечисления.СтатусыГруппыДоставки[элем.status];
//			
//			Для каждого зкз из элем.orders.order Цикл
//				строкаСостава 			 	= таблицаСоставаГруппы.Добавить();
//				строкаСостава.Группа 		= стр_тз.Группа;
//				строкаСостава.КодЗаказа 	= зкз.orderId;
//				строкаСостава.КодПокупки 	= зкз.pid;
//				строкаСостава.КодУчастника 	= зкз.uid;
//				строкаСостава.Покупка	= СП_РаботаСоСправочниками.ПолучитьЗаказПоXDTO(зкз,"orderType");
//				строкаСостава.Участник	= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(зкз.uid);
//				строкаСостава.Цена  		= Число(зкз.payment_sum);
//			КонецЦикла;	
//		КонецЕсли;
//		стр_тз.МинДатаДоставки 			= НачалоДня(СтоСПОбмен_Общий.ДатаИзСтроки(элем.min_delivery_date));
//		стр_тз.МаксДатаДоставки 		= НачалоДня(СтоСПОбмен_Общий.ДатаИзСтроки(элем.max_delivery_date));
//		стр_тз.uidint 					= ?(элем.uid = "", 0, Число(элем.uid));
//		
//		
//		
//		Если тз.Колонки.Найти("groupCode")<> Неопределено и стр_тз.groupCode<> "" Тогда
//			стр_тз.groupCode = Формат(Число(стр_тз.groupCode),"ЧЦ=8; ЧВН=; ЧГ=0");
//		КонецЕсли;	
//		Если СвойстваДаты =Неопределено тогда Продолжить; КонецЕсли;
//		Для Каждого св из СвойстваДаты Цикл
//			стр_тз[св]=ДатаИзСтроки(элем[св]);
//		КонецЦикла;	
//	КонецЦикла;
//	Возврат Новый структура("Группы, СоставГруппы",ТЗ, таблицаСоставаГруппы);           
//КонецФункции





//Функция ПолучитьТаблицуСоставаГруппы() 
//	табл = новый ТаблицаЗначений;
//	табл.Колонки.Добавить("Группа", новый ОписаниеТипов("СправочникСсылка.Коробки"));
//	табл.КОлонки.Добавить("КодПокупки" , 				новый ОписаниеТипов("Строка"));
//	табл.КОлонки.Добавить("КодУчастника" , 				новый ОписаниеТипов("Строка"));
//	табл.КОлонки.Добавить("КодЗаказа" , 				новый ОписаниеТипов("Строка"));
//	табл.КОлонки.Добавить("Цена" , 				новый ОписаниеТипов("Число"));
//	табл.КОлонки.Добавить("Покупка" , 				новый ОписаниеТипов("СправочникСсылка.Покупки"));
//	табл.КОлонки.Добавить("Участник" , 				новый ОписаниеТипов("СправочникСсылка.Участники"));
//	Возврат табл;
//КонецФункции
