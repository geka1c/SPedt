///////////////////////////////////////////////////////////////////////////////////
// Процедуры для подготовки и записи движений документа.

// Процедура инициализирует общие структуры, используемые при проведении документов.
// Вызывается из модуля документов при проведении.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);

КонецПроцедуры

Процедура ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства) Экспорт

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура выполняет пордготовку наборов записей документа к записи движений.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имеет движения
// Вызывается из модуля документов при проведении.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект) Экспорт

	Для Каждого НаборЗаписей Из Объект.Движения Цикл

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;

	КонецЦикла;

	Если Не Объект.ДополнительныеСвойства.ЭтоНовый Тогда

		// Регистры, движения по которым формируются не из модуля менеджера документа.
		ИсключаемыеРегистры = Новый Массив;
		ИсключаемыеРегистры.Добавить("ГрафикДвиженияТоваров");

		МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(Объект.Ссылка,
				Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения,
				ИсключаемыеРегистры);

		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
// в модули наборов записей для выполнения регистрации изменений в движениях.
// Процедура вызывается из модуля документов при проведении.
//
Процедура ЗаписатьНаборыЗаписей(Объект) Экспорт
	Перем РегистрыДляКонтроля;

	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда

				// Установка флага регистрации изменений в наборе записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Истина);
				НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);

				// Структура для передачи данных в модули наборов записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
						Новый Структура("СтруктураВременныеТаблицы", Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Объект.Движения.Записать();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Процедуры контроля движений документов по регистрам.

// Функция проверяет наличие изменений в таблице регистра.
//
Функция ЕстьИзмененияВТаблице(СтруктураДанных, Ключ)
	Перем ЕстьИзменения;

	Возврат СтруктураДанных.Свойство(Ключ, ЕстьИзменения) И ЕстьИзменения;

КонецФункции

// Процедура выполняет контроль результатов проведения.
// Процедура вызывается из модуля документов при проведении.
//
Процедура ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ) Экспорт

	Если Объект.ДополнительныеСвойства.ДляПроведения.РегистрыДляКонтроля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДанныеТаблиц    = Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ПакетЗапросов   = Новый Запрос;
	МассивКонтролей = Новый Массив;
	ТекстЗапроса    = "";

	// Контроль отрицательных остатков потоварам
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияСвободныеОстаткиИзменение")
		Или ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияДвижениеТоваровИзменение") Тогда

		ТекстЗапроса = ТекстЗапроса + 
				СформироватьЗапросПоКонтролюДоступныхОстатков(ПакетЗапросов, МассивКонтролей, ДанныеТаблиц)

	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыНаСборку.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыНаСборкуИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыНаСборку"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказНаСборку      КАК ЗаказНаСборку,
		|	ТаблицаОстатков.Номенклатура       КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика     КАК Характеристика,
		|	ТаблицаОстатков.ТипСборки          КАК ТипСборки,
		|	ТаблицаОстатков.КОформлениюОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыНаСборку.Остатки(,
		|			(ЗаказНаСборку, Номенклатура, Характеристика, ТипСборки) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказНаСборку,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.ТипСборки
		|				ИЗ
		|					ДвиженияЗаказыНаСборкуИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыНаПеремещение.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыНаПеремещениеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыНаПеремещение"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказНаПеремещение КАК Заказ,
		|	ТаблицаОстатков.Номенклатура       КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика     КАК Характеристика,
		|	ТаблицаОстатков.КОформлениюОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(,
		|			(ЗаказНаПеремещение, Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказНаПеремещение,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика
		|				ИЗ
		|					ДвиженияЗаказыНаПеремещениеИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыНаВнутреннееПотребление.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыНаВнутреннееПотреблениеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыНаВнутреннееПотребление"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказНаВнутреннееПотребление  КАК Заказ,
		|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                КАК Характеристика,
		|	ТаблицаОстатков.КОформлениюОстаток            КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(,
		|			(ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказНаВнутреннееПотребление,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика
		|				ИЗ
		|					ДвиженияЗаказыНаВнутреннееПотреблениеИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ТоварыКОтгрузке.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыКОтгрузкеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыКОтгрузке"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ДокументОтгрузки              КАК ДокументОтгрузки,
		|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                КАК Характеристика,
		|	ТаблицаОстатков.Склад                         КАК Склад,
		|	ТаблицаОстатков.КОтгрузкеОстаток
		|	 - ТаблицаОстатков.СобираетсяОстаток
		|    - ТаблицаОстатков.СобраноОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(,
		|			(ДокументОтгрузки, Номенклатура, Характеристика, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.ДокументОтгрузки,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Склад
		|				ИЗ
		|					ДвиженияТоварыКОтгрузкеИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОтгрузкеОстаток - ТаблицаОстатков.СобираетсяОстаток - ТаблицаОстатков.СобраноОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыКлиентов.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыКлиентовИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыКлиентов"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказКлиента                   КАК Заказ,
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.КодСтроки                      КАК КодСтроки,
		|	ТаблицаОстатков.КОформлениюОстаток             КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(,
		|			(ЗаказКлиента, Номенклатура, Характеристика, КодСтроки) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказКлиента,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.КодСтроки
		|				ИЗ
		|					ДвиженияЗаказыКлиентовИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыПоставщикам.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыПоставщикамИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыПоставщикам"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказПоставщику                КАК Заказ,
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.КодСтроки                      КАК КодСтроки,
		|	ТаблицаОстатков.КОформлениюОстаток             КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(,
		|			(ЗаказПоставщику, Номенклатура, Характеристика, КодСтроки) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказПоставщику,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.КодСтроки
		|				ИЗ
		|					ДвиженияЗаказыПоставщикамИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаявкиНаВозвратТоваровОтКлиентов.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаявкиНаВозвратТоваровОтКлиентов"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаявкаНаВозвратТоваровОтКлиента КАК Заявка,
		|	ТаблицаОстатков.Номенклатура                    КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения   КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                  КАК Характеристика,
		|	ТаблицаОстатков.КодСтроки                       КАК КодСтроки,
		|	ТаблицаОстатков.КОформлениюОстаток              КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(,
		|			(ЗаявкаНаВозвратТоваровОтКлиента, Номенклатура, Характеристика, КодСтроки) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаявкаНаВозвратТоваровОтКлиента,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.КодСтроки
		|				ИЗ
		|					ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков по ДенежныеСредстваКВыплате.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияДенежныеСредстваКВыплатеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ДенежныеСредстваКВыплате"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств.Валюта КАК Валюта,
		|	ТаблицаОстатков.СтатьяДвиженияДенежныхСредств       КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам           КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаОстатков.ПодотчетноеЛицо                     КАК ПодотчетноеЛицо,
		|	ТаблицаОстатков.Заказ                               КАК Заказ,
		|	ТаблицаОстатков.СтатьяРасходов                      КАК СтатьяРасходов,
		|	ТаблицаОстатков.АналитикаРасходов                   КАК АналитикаРасходов,
		|	ТаблицаОстатков.СуммаОстаток                        КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
		|			(ЗаявкаНаРасходованиеДенежныхСредств,
		|				СтатьяДвиженияДенежныхСредств,
		|				АналитикаУчетаПоПартнерам,
		|				ПодотчетноеЛицо,
		|				Заказ,
		|				СтатьяРасходов,
		|				АналитикаРасходов) В
		|			(ВЫБРАТЬ
		|				Таблица.ЗаявкаНаРасходованиеДенежныхСредств,
		|				Таблица.СтатьяДвиженияДенежныхСредств,
		|				Таблица.АналитикаУчетаПоПартнерам,
		|				Таблица.ПодотчетноеЛицо,
		|				Таблица.Заказ,
		|				Таблица.СтатьяРасходов,
		|				Таблица.АналитикаРасходов
		|			ИЗ
		|				ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.СуммаОстаток > 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль предоплаты по РасчетыСКлиентами.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменение") Тогда

		МассивКонтролей.Добавить(Врег("РасчетыСКлиентами"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаЗаказы.ЗаказКлиента КАК ЗаказКлиента,
		|	ТаблицаЗаказы.Валюта       КАК Валюта,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
		|				ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ)                 КАК СуммаЗаказа,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ)                 КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ТаблицаЗаказы
		|ГДЕ
		|	(ТаблицаЗаказы.ЗаказКлиента, ТаблицаЗаказы.Валюта, ТаблицаЗаказы.Активность) В
		|			(ВЫБРАТЬ
		|				Таблица.ЗаказКлиента,
		|				Таблица.Валюта,
		|				ИСТИНА
		|			ИЗ
		|				ДвиженияРасчетыСКлиентамиИзменение КАК Таблица)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказы.Валюта,
		|	ТаблицаЗаказы.ЗаказКлиента
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
		|				ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ) > 0
		|	И
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
		|				ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ) > СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ);
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль остатков в ячейках по ТоварыВЯчейках.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыВЯчейкахИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыВЯчейках"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТоварыВЯчейкахОстатки.Номенклатура              КАК Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика            КАК Характеристика,
		|	ТоварыВЯчейкахОстатки.Упаковка                  КАК Упаковка,
		|	ТоварыВЯчейкахОстатки.Упаковка.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыВЯчейкахОстатки.Ячейка                    КАК Ячейка,
		|	ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(,
		|			(Номенклатура, Характеристика, Упаковка, Ячейка) В
		|				(ВЫБРАТЬ
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Упаковка,
		|					Таблица.Ячейка
		|				ИЗ
		|					ДвиженияТоварыВЯчейкахИзменение КАК Таблица)
		|	) КАК ТоварыВЯчейкахОстатки
		|ГДЕ
		|	ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль остатков в ячейках по ТоварыНаСкладах (осуществляется при использовании помещений)
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыНаСкладахИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыНаСкладах"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура                  КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика                КАК Характеристика,
		|	ТоварыНаСкладахОстатки.Склад                         КАК Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыНаСкладахОстатки.Помещение                     КАК Помещение,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.ВРезервеОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(,
		|			(Номенклатура, Характеристика, Склад, Помещение) В
		|				(ВЫБРАТЬ
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Склад,
		|					Таблица.Помещение
		|				ИЗ
		|					ДвиженияТоварыНаСкладахИзменение КАК Таблица)
		|			) КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.ВРезервеОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль остатков в ячейках по ТоварыКОтбору.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыКОтборуИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыКОтбору"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТоварыВЯчейкахОстатки.Номенклатура                  КАК Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика                КАК Характеристика,
		|	ТоварыВЯчейкахОстатки.Распоряжение                  КАК Распоряжение,
		|	ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыВЯчейкахОстатки.КОтборуОстаток - ТоварыВЯчейкахОстатки.ОтобраноОстаток - ТоварыВЯчейкахОстатки.ОтбираетсяОстаток КАК Количество,
		|	ТоварыВЯчейкахОстатки.ОтобраноОстаток КАК КоличествоОтобрано
		|ИЗ
		|	РегистрНакопления.ТоварыКОтбору.Остатки(
		|			,
		|			(Распоряжение, Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					Таблица.Распоряжение,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика
		|				ИЗ
		|					ДвиженияТоварыКОтборуИзменение КАК Таблица)
		|			) КАК ТоварыВЯчейкахОстатки
		|ГДЕ
		|	ТоварыВЯчейкахОстатки.КОтборуОстаток - ТоварыВЯчейкахОстатки.ОтобраноОстаток - ТоварыВЯчейкахОстатки.ОтбираетсяОстаток < 0
		|	ИЛИ ТоварыВЯчейкахОстатки.ОтобраноОстаток < 0";
	КонецЕсли;
	
	Если МассивКонтролей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПакетЗапросов.Текст = ТекстЗапроса;
	ПакетЗапросов.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	МассивРезультатов = ПакетЗапросов.ВыполнитьПакет();

	Итератор = -1;
	Для Каждого Результат Из МассивРезультатов Цикл

		Итератор = Итератор + 1;
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;

		ИмяКонтроля = МассивКонтролей[Итератор];

		Если ИмяКонтроля = Врег("ТоварыКОтгрузке") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыКОтгрузке(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("СвободныеОстатки") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструСвободныеОстатки(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ГрафикДвиженияТоваров") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструГрафикДвиженияТоваров(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ДенежныеСредстваКВыплате") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваКВыплате(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("РасчетыСКлиентами") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструРасчетыСКлиентами(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ЗаказыНаВнутреннееПотребление")
			  Или ИмяКонтроля = Врег("ЗаказыНаПеремещение") Тогда

			СообщитьОбОшибкахПроведенияПриОформленииДокументов(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ЗаказыКлиентов")
			  Или ИмяКонтроля = Врег("ЗаказыПоставщикам") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструЗаказыКлиентовПоставщикам(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ЗаявкиНаВозвратТоваровОтКлиентов") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструЗаявкиНаВозвратТоваровОтКлиентов(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ЗаказыНаСборку") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструЗаказыНаСборку(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ТоварыВЯчейках") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыВЯчейках(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ТоварыНаСкладах") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыНаСкладах(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ТоварыКОтбору") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыКОтбору(Объект, Отказ, Результат);
			
		Иначе

			ВызватьИсключение НСтр("ru = 'Ошибка контроля проведения!'");

		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда

		Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТекстСообщения = НСтр("ru = 'Проведение не выполнено '");
		Иначе
			ТекстСообщения = НСтр("ru = 'Отмена проведения не выполнена '");
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения + Строка(Объект), Объект);

	КонецЕсли;

КонецПроцедуры

// Процедуры выдачи сообщений об ошибках проведения.

Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваКВыплате(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'По заявке %Заявка% 
		|Оплачено больше, чем утверждено в заявке, на %Сумма% %Валюта%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Заявка%", Строка(Выборка.ЗаявкаНаРасходованиеДенежныхСредств));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сумма%",  Строка(Выборка.Сумма));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%",  Строка(Выборка.Валюта));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыКОтгрузке(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% 
		|Отгружено со склада %Склад% больше, чем указано в распоряжении на отгрузку, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		//ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
		//							ОбщегоНазначенияУТ.ПолучитьПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаказыКлиентовПоставщикам(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%
		|По строке %КодСтроки% оформлено больше, чем указано в распоряжении на оформление, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		//ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
		//				ОбщегоНазначенияУТ.ПолучитьПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСтроки%",  Строка(Выборка.КодСтроки));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаявкиНаВозвратТоваровОтКлиентов(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%
		|По строке %КодСтроки% оформлено больше, чем указано в заявке на возврат, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		//ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
		//				ОбщегоНазначенияУТ.ПолучитьПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСтроки%",  Строка(Выборка.КодСтроки));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструСвободныеОстатки(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%
		|Превышен свободный остаток товара на складе %Склад% на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		//ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
		//				ОбщегоНазначенияУТ.ПолучитьПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструГрафикДвиженияТоваров(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%
		|Запланированные отгрузки превышают планируемый остаток товара на складе %Склад% на %Количество% %Единица% на %Период%'");

	СтруктураСтроки = Новый Структура("Номенклатура, Характеристика, Склад,
										 |Период, ЕдиницаИзмерения, Количество");
	Выборка    = РезультатЗапроса.Выбрать();
	ЕстьЗаписи = Выборка.Следующий();
	Пока ЕстьЗаписи Цикл

		ТекСклад          = Выборка.Склад;
		ТекНоменклатура   = Выборка.Номенклатура;
		ТекХарактеристика = Выборка.Характеристика;

		НарастающийИтог    = 0;
		ИзмениласьЗапись   = Ложь;
		ЕстьМинусыВПериоде = Ложь;

		// Цикл по одному сочетанию номенклатура\характеристика\склад.
		Пока Не ИзмениласьЗапись Цикл

			НарастающийИтог = НарастающийИтог + Выборка.НачОстаток + Выборка.ОборотЗаДень;
			Если НарастающийИтог < 0 Тогда

				СтруктураСтроки.Количество = НарастающийИтог;
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка, "Номенклатура, Характеристика, Склад,
																	|Период, ЕдиницаИзмерения");

				ЕстьМинусыВПериоде = Истина;

			КонецЕсли;

			// Переход к следующей записи.
			ЕстьЗаписи       = Выборка.Следующий();
			ИзмениласьЗапись = Не ЕстьЗаписи Или (Выборка.Номенклатура <> ТекНоменклатура
							Или Выборка.Склад <> ТекСклад
							Или Выборка.Характеристика <> ТекХарактеристика);
		КонецЦикла;

		Если ЕстьМинусыВПериоде Тогда

			//ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
			//	ОбщегоНазначенияУТ.ПолучитьПредставлениеНоменклатуры(СтруктураСтроки.Номенклатура, СтруктураСтроки.Характеристика));

			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-СтруктураСтроки.Количество));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(СтруктураСтроки.Склад));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%",     Формат(СтруктураСтроки.Период, "ДЛФ=D"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(СтруктураСтроки.ЕдиницаИзмерения));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструРасчетыСКлиентами(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Нарушены условия оплаты, необходимые для обеспечения/отгрузки по заказу %Заказ%,
		|Требуется %СуммаЗаказа% %Валюта% оплачено %СуммаОплаты% %Валюта%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Заказ%",      Строка(Выборка.ЗаказКлиента));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%",      Строка(Выборка.Валюта));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаЗаказа%", Строка(Выборка.СуммаЗаказа));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОплаты%", Строка(Выборка.СуммаОплаты));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПриОформленииДокументов(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% 
		|Оформлено больше, чем указано в распоряжении на оформление, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		//ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
		//				ОбщегоНазначенияУТ.ПолучитьПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаказыНаСборку(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% 
		|Оформлено больше, чем указано в распоряжении на оформление, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		//ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
		//				ОбщегоНазначенияУТ.ПолучитьПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыВЯчейках(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% в упаковке %Упаковка% 
		|Превышен свободный остаток в ячейке %Ячейка% на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		//ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
		//							ОбщегоНазначенияУТ.ПолучитьПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ячейка%",     Строка(Выборка.Ячейка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Упаковка%",   Строка(Выборка.Упаковка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыНаСкладах(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% 
		|Превышен оперативный складской остаток на складе ""%Склад%"" на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
		//							ОбщегоНазначенияУТ.ПолучитьПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		//ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",
		//							АдресныйСкладСервер.ПолучитьПредставлениеСклада(Выборка.Склад, Выборка.Помещение));		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыКОтбору(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщенияОтбор = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% 
		|Отобрано из ячеек больше, чем указано в распоряжении на отбор, на %Количество% %Единица%'");

	ШаблонСообщенияОтгрузка = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% 
		|Отгружается больше, чем отобрано из ячеек по распоряжению на отбор, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.КоличествоОтобрано > 0 Тогда
			ТекстСообщения = СтрЗаменить(ШаблонСообщенияОтбор, "%Количество%", Строка(-Выборка.Количество));
		Иначе
			ТекстСообщения = СтрЗаменить(ШаблонСообщенияОтгрузка, "%Количество%", Строка(-Выборка.КоличествоОтобрано));
		КонецЕсли;

		//ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НоменклатураХарактеристика%",
		//							ОбщегоНазначенияУТ.ПолучитьПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%", Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры.

// Функция вызывается из модулей наборов записей для проверки необходимости
// контроля изменений движений в регистре.
//
Функция РассчитыватьИзменения(ДополнительныеСвойстваНабораЗаписей) Экспорт
	Перем РассчитыватьИзменения;

	Возврат ДополнительныеСвойстваНабораЗаписей.Свойство("РассчитыватьИзменения", РассчитыватьИзменения)
		И РассчитыватьИзменения;

КонецФункции

// Процедура формирует запрос по временной таблице.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	ИмяВременнойТаблицы - Строка - Имя временной таблицы
//
Процедура ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц,ИмяВременнойТаблицы, Комментарий = "") Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ИмяВременнойТаблицы
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыбратьСтроку(ИмяВременнойТаблицы + ":" + Комментарий);
	
КонецПроцедуры // ПоказатьВременнуюТаблицу()

// Процедура для формирования запроса по контролю доступных остатков склада.
//
Функция СформироватьЗапросПоКонтролюДоступныхОстатков(ПакетЗапросов, МассивКонтролей, ДанныеТаблиц)

	Результат       = "";
	ВариантКонтроля = ДанныеТаблиц.ВариантКонтроля;

	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияСвободныеОстаткиИзменение") Тогда

		ПакетЗапросов.УстановитьПараметр("ВариантКонтроля", ВариантКонтроля);
		МассивКонтролей.Добавить(Врег("СвободныеОстатки"));
		Результат = Результат + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.Склад                          КАК Склад,
		|	ВЫБОР
		|		КОГДА &ВариантКонтроля = Значение(Перечисление.ВариантыКонтроля.Остатки) ТОГДА
		|			ТаблицаОстатков.ВНаличииОстаток
		|		КОГДА &ВариантКонтроля = Значение(Перечисление.ВариантыКонтроля.ОстаткиСУчетомРезерва) ТОГДА
		|			ТаблицаОстатков.ВНаличииОстаток - ТаблицаОстатков.ВРезервеОстаток
		|		КОГДА &ВариантКонтроля = Значение(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика) ТОГДА
		|			ТаблицаОстатков.ВНаличииОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ                                          КАК Количество
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(,
		|			(Номенклатура, Характеристика, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Склад
		|				ИЗ
		|					ДвиженияСвободныеОстаткиИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ТаблицаОстатков.Склад.ВариантКонтроля = Значение(Перечисление.ВариантыКонтроля.Остатки) ТОГДА
		|			ТаблицаОстатков.ВНаличииОстаток
		|		КОГДА ТаблицаОстатков.Склад.ВариантКонтроля = Значение(Перечисление.ВариантыКонтроля.ОстаткиСУчетомРезерва) ТОГДА
		|			ТаблицаОстатков.ВНаличииОстаток - ТаблицаОстатков.ВРезервеОстаток
		|		КОГДА ТаблицаОстатков.Склад.ВариантКонтроля = Значение(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика) ТОГДА
		|			ТаблицаОстатков.ВНаличииОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	Если ДанныеТаблиц.ВариантКонтроля <> Перечисления.ВариантыКонтроля.ОстаткиСУчетомГрафика Тогда
		Возврат Результат;
	КонецЕсли;

	ТекстЗапроса = "";
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияСвободныеОстаткиИзменение") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДатаВремя(1,1,1)       КАК Период,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад
		|ИЗ
		|	ДвиженияСвободныеОстаткиИзменение КАК Таблица
		|";
	КонецЕсли;

	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияДвижениеТоваровИзменение") Тогда
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса),""," ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ
		|	Таблица.Период         КАК Период,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад
		|ИЗ
		|	ДвиженияДвижениеТоваровИзменение КАК Таблица
		|";
	КонецЕсли;

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Период         КАК Период,
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Склад          КАК Склад
	|
	|ПОМЕСТИТЬ ВтТаблицаИзменений
	|	ИЗ ( " + ТекстЗапроса + " ) КАК Таблица
	|;
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Таблица.Склад.ГраницаГрафикаДоступности) КАК ГраницаГрафика,
	|	МИНИМУМ(Таблица.Склад.ВариантКонтроля)           КАК ВариантКонтроля,
	|	МИНИМУМ(Таблица.Склад.СрокПоставки)              КАК ДлинаПериода,
	|	МИНИМУМ(Таблица.Период)                          КАК НачалоПериодаКонтроля
	|ИЗ
	|	ВтТаблицаИзменений КАК Таблица
	|ИМЕЮЩИЕ
	|	СУММА(1) > 0
	|;";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();

	ОкончаниеПериода = '00010101';
	НачалоПериода    = '00010101';
	Если Выборка.Следующий() Тогда

		ТекущаяДата   = НачалоДня(ТекущаяДата());
		НачалоПериода = НачалоДня(Выборка.НачалоПериодаКонтроля);

		Если ТекущаяДата > НачалоПериода Тогда
			НачалоПериода = ТекущаяДата;
		КонецЕсли;

		Если Выборка.ГраницаГрафика >= ТекущаяДата Тогда
			ОкончаниеПериода = Выборка.ГраницаГрафика;
		ИначеЕсли Выборка.ДлинаПериода > 0 Тогда
			ОкончаниеПериода = ТекущаяДата + Выборка.ДлинаПериода * 86400;
		КонецЕсли;

	КонецЕсли;

	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(ОкончаниеПериода)
	   И НачалоПериода<=ОкончаниеПериода Тогда

		ПакетЗапросов.УстановитьПараметр("НачПериодаКонтроляГрафика", НачалоПериода);
		ПакетЗапросов.УстановитьПараметр("КонПериодаКонтроляГрафика", НачалоДня(ОкончаниеПериода));

		МассивКонтролей.Добавить(Врег("ГрафикДвиженияТоваров"));
		Результат = Результат + "
		|ВЫБРАТЬ
		|	Таблица.Период              КАК Период,
		|	Таблица.Номенклатура        КАК Номенклатура,
		|	Таблица.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	Таблица.Характеристика      КАК Характеристика,
		|	Таблица.Склад               КАК Склад,
		|	СУММА(Таблица.НачОстаток)   КАК НачОстаток,
		|	СУММА(Таблица.ОборотЗаДень) КАК ОборотЗаДень
		|ИЗ
		|	(ВЫБРАТЬ
		|		График.Номенклатура   КАК Номенклатура,
		|		График.Характеристика КАК Характеристика,
		|		График.Склад          КАК Склад,
		|		ВЫБОР
		|			КОГДА График.ДатаСобытия <= &НачПериодаКонтроляГрафика ТОГДА
		|				&НачПериодаКонтроляГрафика
		|			ИНАЧЕ График.ДатаСобытия
		|		КОНЕЦ                 КАК Период,
		|		ВЫБОР
		|			КОГДА График.ДатаСобытия <= &НачПериодаКонтроляГрафика ТОГДА
		|				График.КоличествоОстаток
		|			ИНАЧЕ 0
		|		КОНЕЦ                 КАК НачОстаток,
		|		ВЫБОР
		|			КОГДА График.ДатаСобытия <= &НачПериодаКонтроляГрафика ТОГДА
		|				0
		|			ИНАЧЕ
		|				График.КоличествоОстаток
		|		КОНЕЦ                 КАК ОборотЗаДень
		|	ИЗ
		|		РегистрНакопления.ГрафикДвиженияТоваров.Остатки(,
		|				(Номенклатура, Характеристика, Склад) В
		|						(ВЫБРАТЬ
		|							Т.Номенклатура,
		|							Т.Характеристика,
		|							Т.Склад
		|						ИЗ
		|							ВтТаблицаИзменений КАК Т
		|						ГДЕ
		|							Т.Период <= КОНЕЦПЕРИОДА(&КонПериодаКонтроляГрафика, ДЕНЬ))
		|				И ДатаСобытия <= &КонПериодаКонтроляГрафика) КАК График
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Остатки.Номенклатура                            КАК Номенклатура,
		|		Остатки.Характеристика                          КАК Характеристика,
		|		Остатки.Склад                                   КАК Склад,
		|		НАЧАЛОПЕРИОДА(&НачПериодаКонтроляГрафика, ДЕНЬ) КАК Период,
		|		Остатки.ВНаличииОстаток                         КАК НачОстаток,
		|		0                                               КАК ОборотЗаДень
		|	ИЗ
		|		РегистрНакопления.СвободныеОстатки.Остатки(,
		|				(Номенклатура, Характеристика, Склад) В
		|				(ВЫБРАТЬ
		|					Т2.Номенклатура,
		|					Т2.Характеристика,
		|					Т2.Склад
		|				ИЗ
		|					ВтТаблицаИзменений КАК Т2
		|				ГДЕ
		|					Т2.Период <= КОНЕЦПЕРИОДА(&КонПериодаКонтроляГрафика, ДЕНЬ))
		|		) КАК Остатки
		|	) КАК Таблица
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Период,
		|	Таблица.Склад,
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Период
		|;";
	КонецЕсли;

	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры

Процедура УстановитьРежимПроведения(ДокументОбъект, РежимЗаписи, РежимПроведения) Экспорт
	Если ДокументОбъект.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

КонецПроцедуры

// Определяет необходимость подготовить таблицу для формирования движений
//
// Параметры:
//  ИмяРегистра	- Строка - имя регистра. Например "ТоварыНаСкладах"
//  Регистры	- Строка, Структура, Неопределено - список регистров, разделенных запятой, или структура, в ключах которой - имена регистров
//													Если неопределено - то всегда возвращается ИСТИНА
// 
// Возвращаемое значение:
//   - Булево - Истина, если требуется инициализировать указанную таблицу
//
Функция ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Экспорт

	Если ЗначениеЗаполнено(Регистры) Тогда
		
		Если ТипЗнч(Регистры) = Тип("Строка") Тогда
			МассивРегистров = Новый Структура(Регистры);
		Иначе
			МассивРегистров = Регистры;
		КонецЕсли;
		
		Если НЕ МассивРегистров.Свойство(ИмяРегистра) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции




// Процедура компонует текст запроса, выполняет запрос и выгружает результаты запроса в таблицы.
//
// Параметры:
//  Запрос					 - Запрос	 - запрос, параметры которого предварительно установлены.
//  ТекстыЗапроса			 - СписокЗначений	 - в списке перечислены тексты запросов и их имена.
//  Таблицы					 - Структура		 - структура в которую будут помещены полученные таблицы для движений.
//  ДобавитьРазделитель		 - Булево			 - Истина, если нужно добавить разделитель ";" между запросами.
//  ДобавлятьСловоТаблица	 - Булево			 - Истина, если к имени таблицы движений нужно вначало добавить слово "Таблица".
//  ТолькоОтмеченные		 - Булево			 - признак пропуска инициализации таблицы движения.
//
Процедура ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, Таблицы, ДобавитьРазделитель = Ложь, ДобавлятьСловоТаблица = Истина, ТолькоОтмеченные = Ложь) Экспорт
	
	ТаблицыЗапроса = ОбщегоНазначенияПереопределяемый.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, ДобавитьРазделитель);
	
	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл

		ИмяТаблицы = ТекстЗапроса.Представление;

		Если Не ПустаяСтрока(ИмяТаблицы) И (Не ТолькоОтмеченные Или ТекстЗапроса.Пометка) Тогда

			Если ДобавлятьСловоТаблица Тогда
				// Таблицы для проведения должны начинаться с "Таблица"
				Если НЕ СтрНачинаетсяС(ИмяТаблицы, "Таблица") Тогда
					ИмяТаблицы = "Таблица" + ИмяТаблицы;
				КонецЕсли;
			КонецЕсли;
			
			Таблицы.Вставить(ИмяТаблицы, ТаблицыЗапроса[ТекстЗапроса.Представление]);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры
