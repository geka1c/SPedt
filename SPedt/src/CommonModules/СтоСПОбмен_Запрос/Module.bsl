//Получить строку запроса api
//
//  Параметры:
//		СписокЗаказов 	- Массив - массив структур("ГруппаДоставки, Участник, КодЗаказа")
// Возвращаемое значение:
//  	Строка			- xml

Функция ГруппаДоставки_ПоДате(ДатаЗагрузки)  Экспорт
	Тип_dataByDates						= ФабрикаXDTO.Тип("http://www.100sp.ru/out","dataByDates");
	Тип_distributors					= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	
	Объект_dataByDates					= ФабрикаXDTO.Создать(Тип_dataByDates);
	Объект_dataByDates.deliveryGroups	= ?(ДатаЗагрузки = Неопределено, Справочники.ПараметрыОбмена.ГруппыДоставки.ДатаЗагрузки - 60*24*60*10 , ДатаЗагрузки- 60*24*60*10);
	
	Объект_distributors					= ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.apiVersion		="2";
	Объект_distributors.dataByDates		= Объект_dataByDates;
	
	Запись				= Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект_distributors);
	ДанныеXML 			= Запись.Закрыть();
	ДанныеXML			= "<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML; 
КонецФункции

// Сформировать xml запрос Для указанныхЗаказов
//
// Параметры:
//   Парам - ТаблицаЗначений - поля:
//   Участник- СправочникСсылка.Участники - Участник заказа
//   Покупка - СправочникСсылка.Покупки, СправочникСсылка.Заказы , СправочникСсылка.Пристрой Покупка заказа
// Возвращаемое значение: - Строка  
Функция ГруппаДоставки_ПоКодам(КодыГрупп) Экспорт 
	Тип_deliveryGroups	= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.deliveryGroups");
	Тип_distributors	= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	
	Объект_deliveryGroups=ФабрикаXDTO.Создать(Тип_deliveryGroups);
	Для каждого стр из КодыГрупп Цикл
		Если ТипЗнч(стр.Значение) = Тип("СправочникСсылка.Коробки") Тогда
			кодГруппы = стр.Значение.Код;
		Иначе	
			кодГруппы = стр.Значение;
		КонецЕсли;	
		код = число(СтрЗаменить(кодГруппы,"гд_",""));
	    Объект_deliveryGroups.deliveryGroup.Добавить(Формат(код,"ЧГ=0"));
	КонецЦикла;
	Объект_distributors					= ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.apiVersion		="2";
	Объект_distributors.deliveryGroups	= Объект_deliveryGroups;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект_distributors);
	ДанныеXML = Запись.Закрыть();
	ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML; 
КонецФункции





Функция ГруппаДоставки_УдалитьЗаказ(СписокЗаказов) Экспорт
	
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	
	ДобавитьАтрибутыКорня(ЗаписьXML);
	
	
	
	Для каждого стр из СписокЗаказов Цикл 
		
		КодГруппыДоставки = Формат(Число(СтрЗаменить(стр.ГруппаДоставки.Код,"гд_","")),"ЧГ=0");
		стр.Вставить("КодГруппыДоставки", КодГруппыДоставки);
		ЗаписьXML.ЗаписатьНачалоЭлемента("groupsUnlink");
		ЗаписьXML.ЗаписатьНачалоЭлемента("group");
		
		ДобавитьЭлемент(ЗаписьXML, "delivery_group_id", стр.КодГруппыДоставки);
		ДобавитьЭлемент(ЗаписьXML, "orderType", 		?(ТипЗнч(стр.Покупка) = Тип("СправочникСсылка.Пристрой"),"bulletin","sp"));
		ДобавитьЭлемент(ЗаписьXML, "uid",	 		 	Формат(стр.Участник.Код,"ЧГ=0"));
		ДобавитьЭлемент(ЗаписьXML, "orderId", 		 	Формат(стр.КодЗаказа,"ЧГ=0"));
		
		
		ЗаписьXML.ЗаписатьКонецЭлемента();     //group
		ЗаписьXML.ЗаписатьКонецЭлемента();		//groupsUnlink 
		
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 	
	
КонецФункции	

Функция УчастникПоИД(СписокУчастников) Экспорт
	ЗаписьXML	= Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ДобавитьАтрибутыКорня(ЗаписьXML);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("users");
	Для Каждого элСписка Из СписокУчастников Цикл
		Если ТипЗнч(элСписка.Значение) = Тип("Число") или ТипЗнч(элСписка.Значение) = Тип("Строка") Тогда
			идУчастника = Формат(элСписка.Значение, "ЧГ=0");
		Иначе	
			идУчастника = Формат(элСписка.Значение.Код, "ЧГ=0");
		КонецЕсли;
		ДобавитьЭлемент(ЗаписьXML, "user", идУчастника);
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();     //users

	ЗаписьXML.ЗаписатьКонецЭлемента();     //distributors
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 	

КонецФункции

Функция СоставПосвлки(СписокКодов) Экспорт
	ЗаписьXML	= Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ДобавитьАтрибутыКорня(ЗаписьXML);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("packages");
	
	
	Для каждого элем из СписокКодов Цикл
		Если ТипЗнч(элем.Значение) = Тип("СправочникСсылка.Посылки") Тогда
			КодПосылки = элем.Значение.Код;
		Иначе	
			КодПосылки = элем.Значение;
		КонецЕсли;	
		ДобавитьЭлемент(ЗаписьXML, "package", Формат(КодПосылки, "ЧГ=0"));
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();     //users

	ЗаписьXML.ЗаписатьКонецЭлемента();     //distributors
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 	

КонецФункции



Функция	УчастникПоНомеруТелефона(номерТелефона) Экспорт
		
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd","http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьАтрибут("apiVersion","6");
	///////
	ЗаписьXML.ЗаписатьНачалоЭлемента("usersPhones");	

	ДобавитьЭлемент(ЗаписьXML, "userPhone", номерТелефона);	

	ЗаписьXML.ЗаписатьКонецЭлемента();           //incomes
	//////
	ЗаписьXML.ЗаписатьКонецЭлемента();           //distributors
	Возврат ЗаписьXML.Закрыть();
КонецФункции


Функция АдресДоставкиЗаказа(Заказ, КодЗаказа = Неопределено, Участник = Неопределено) Экспорт
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ДобавитьАтрибутыКорня(ЗаписьXML);
	
	ДобавитьАтрибутыКорня("deliveryDetails");
	ДобавитьАтрибутыКорня("sticker");
	
	Если КодЗаказа<>неопределено Тогда
		ДобавитьЭлемент(ЗаписьXML, "orderId", КодЗаказа);	
	КонецЕсли;	
	Если Участник<>неопределено Тогда
		ДобавитьЭлемент(ЗаписьXML, "uid", Формат(Участник.Код,"ЧГ=0"));	
	КонецЕсли;		

	Если ТипЗнч(Заказ.Покупка)		= Тип("СправочникСсылка.Покупки") Тогда
		ДобавитьЭлемент(ЗаписьXML, "orderType", "sp");	
		Если КодЗаказа=неопределено Тогда
			ДобавитьЭлемент(ЗаписьXML, "pid", Формат(Заказ.Покупка.Код,"ЧГ=0"));	
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Заказ.Покупка)	= Тип("СправочникСсылка.Заказы") Тогда		
		ДобавитьЭлемент(ЗаписьXML, "orderType", "shop");	
	ИначеЕсли ТипЗнч(Заказ.Покупка)	= Тип("СправочникСсылка.Посылки")  Тогда	
			Если 	ТипЗнч(Заказ.Покупка.Покупка)=Тип("СправочникСсылка.Пристрой") Тогда
				ДобавитьЭлемент(ЗаписьXML, "orderType", "bulletin");
			Иначе
				ДобавитьЭлемент(ЗаписьXML, "orderType", "sp");	
			КонецЕсли;
	ИначеЕсли ТипЗнч(Заказ.Покупка)	= Тип("СправочникСсылка.Пристрой") Тогда			
			ДобавитьЭлемент(ЗаписьXML, "orderType", "bulletin");
	КонецЕсли;		
		
	ЗаписьXML.ЗаписатьКонецЭлемента();     //sticker
	ЗаписьXML.ЗаписатьКонецЭлемента();     //deliveryDetails

	ЗаписьXML.ЗаписатьКонецЭлемента();		//distributors
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 
КонецФункции

Функция	ВыгрузкаПоступлений_income(Объект, номерСтроки = Неопределено) Экспорт
		
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd","http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьАтрибут("apiVersion","16");
	///////
	ЗаписьXML.ЗаписатьНачалоЭлемента("incomes");	
	хмл_income			= Документы[Объект.метаданные().Имя].ПолучитьТэг_Income_Посылки(Объект.Ссылка, номерСтроки);
	ЗаписьXML.ЗаписатьБезОбработки(хмл_income);
	ЗаписьXML.ЗаписатьКонецЭлемента();           //incomes
	//////
	
	///////
	ЗаписьXML.ЗаписатьНачалоЭлемента("preIncomes");	
	хмл_income			= Документы[Объект.метаданные().Имя].ПолучитьТэг_preIncome_Посылки(Объект.Ссылка, номерСтроки);
	ЗаписьXML.ЗаписатьБезОбработки(хмл_income);
	ЗаписьXML.ЗаписатьКонецЭлемента();           //preincomes
	//////
	
	ЗаписьXML.ЗаписатьКонецЭлемента();           //distributors
	Возврат ЗаписьXML.Закрыть();
КонецФункции



#Область ГрафикиРаботы
Функция СписокПраздничныхДней_distributorHolidays(ДатаНачала) Экспорт
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	
	ДобавитьАтрибутыКорня(ЗаписьXML);
		
		ДобавитьЭлемент(ЗаписьXML, "distributorHolidays", Формат(ДатаНачала,"ДФ=dd.MM.yyyy"));
	//	ДобавитьЭлемент(ЗаписьXML, "distributorHolidays", Формат(КонецГода(ДатаНачала)+1,"ДФ=dd.MM.yyyy"));
		
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 		
	
КонецФункции

Функция РежимРаботы_distributorTimetable() Экспорт
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ДобавитьАтрибутыКорня(ЗаписьXML);

	ЗаписьXML.ЗаписатьНачалоЭлемента("distributorTimetable");

	
	
		
		ДобавитьЭлемент(ЗаписьXML, "distributor", Формат(Число(Константы.СвояТочка.Получить().Код),"ЧГ=0"));
		
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributorTimetable

	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 		
	
КонецФункции

Функция ДобавитьНеРабочиеДни_distributorHolidaysAdd(НеРабочиеДни) Экспорт
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ДобавитьАтрибутыКорня(ЗаписьXML);
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributorHolidaysAdd");
	Для каждого выходной из НеРабочиеДни Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("distributorHoliday");
		ДобавитьЭлемент(ЗаписьXML, "date", 		Формат(выходной.Дата,				"ДФ=dd.MM.yyyy"));
		ДобавитьЭлемент(ЗаписьXML, "from", 		Формат(выходной.ВремяНачала,		"ДФ=ЧЧ:мм"));
		ДобавитьЭлемент(ЗаписьXML, "to", 		Формат(выходной.ВремяОкончания, 	"ДФ=ЧЧ:мм"));
		ДобавитьЭлемент(ЗаписьXML, "comment", 	выходной.Комментарий);
		ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributorHoliday
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributorHolidaysAdd
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 		
КонецФункции	
#КонецОбласти

#Область Тариыф

Функция ВыгрузитьТарифы_tariffs_ПоОбъекту(Объект) Экспорт
	
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	
	ДобавитьАтрибутыКорня(ЗаписьXML);
	ЗаписьXML.ЗаписатьНачалоЭлемента("tariffs");
	

	Для каждого тариф из Объект.Тарифы Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("tariff");
		ДобавитьЭлемент(ЗаписьXML, "period", 		Формат(Объект.Дата,"ДФ=dd.MM.yyyy"));
		
		Позиция = СтрНайти(тариф.Габарит.Код,"-");
		Если Позиция = 0   Тогда
			КодОтправили = Число(тариф.Габарит.Код);
		Иначе	
			КодОтправили = Число(Прав(тариф.Габарит.Код,СтрДлина(тариф.Габарит.Код)-Позиция));
		КонецЕсли;
		ДобавитьЭлемент(ЗаписьXML, "id", 			КодОтправили);
		ДобавитьЭлемент(ЗаписьXML, "name",  		тариф.Габарит.Наименование);

		ДобавитьЭлемент(ЗаписьXML, "time", 			Формат(тариф.СрокХранения,"ЧДЦ=2; ЧГ=0"));
		ДобавитьЭлемент(ЗаписьXML, "forfeit", 		Формат(тариф.Штраф,"ЧДЦ=2; ЧГ=0"));
		ДобавитьЭлемент(ЗаписьXML, "frost", 		?(тариф.Заморозка,"1", "0"));
		ДобавитьЭлемент(ЗаписьXML, "oversized", 	?(тариф.Негабарит,"1", "0"));
		Если тариф.Негабарит Тогда
			ДобавитьЭлемент(ЗаписьXML, "costKG",	Формат(тариф.ЦенаЗаКГ,"ЧДЦ=2; ЧГ=0"));	
			ДобавитьЭлемент(ЗаписьXML, "costСub",	Формат(тариф.ЦенаЗаКуб,"ЧДЦ=2; ЧГ=0"));	
		Иначе
			ДобавитьЭлемент(ЗаписьXML, "cost", 		Формат(тариф.ЦенаХранения,"ЧДЦ=2; ЧГ=0"));	
		КонецЕсли;
		Если тариф.Отменен Тогда
			ДобавитьЭлемент(ЗаписьXML, "cancel", 	"1");
		КОнецЕсли;	
		ЗаписьXML.ЗаписатьКонецЭлемента();	  //tariff
		
		
		
	КонецЦикла;	

	ЗаписьXML.ЗаписатьКонецЭлемента();	  //tariffs
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 		
	
КонецФункции

Функция ВыгрузитьТарифы_tariffs(Объект) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 	 "ВЫБРАТЬ
	 |	ТарифыСрезПоследних.Период КАК Период,
	 |	ТарифыСрезПоследних.Регистратор КАК Регистратор,
	 |	ТарифыСрезПоследних.НомерСтроки КАК НомерСтроки,
	 |	ТарифыСрезПоследних.Активность КАК Активность,
	 |	ТарифыСрезПоследних.Габарит КАК Габарит,
	 |	ТарифыСрезПоследних.ЦенаХранения КАК ЦенаХранения,
	 |	ТарифыСрезПоследних.СрокХранения КАК СрокХранения,
	 |	ТарифыСрезПоследних.Штраф КАК Штраф,
	 |	ТарифыСрезПоследних.Заморозка КАК Заморозка,
	 |	ТарифыСрезПоследних.Негабарит КАК Негабарит,
	 |	ТарифыСрезПоследних.ЦенаЗаКГ КАК ЦенаЗаКГ,
	 |	ТарифыСрезПоследних.ЦенаЗаКуб КАК ЦенаЗаКуб,
	 |	ТарифыСрезПоследних.Отменен КАК Отменен,
	 |	ТарифыСрезПоследних.кодТарифа КАК кодТарифа
	 |ИЗ
	 |	РегистрСведений.Тарифы.СрезПоследних КАК ТарифыСрезПоследних";
	Результат = Запрос.Выполнить();
	
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	
	ДобавитьАтрибутыКорня(ЗаписьXML);
	ЗаписьXML.ЗаписатьНачалоЭлемента("tariffs");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("tariff");
		ДобавитьЭлемент(ЗаписьXML, "period", 		Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy"));
		
		Позиция = СтрНайти(Выборка.Габарит.Код,"-");
		Если Позиция = 0   Тогда
			КодОтправили = Число(Выборка.Габарит.Код);
		Иначе	
			КодОтправили = Число(Прав(Выборка.Габарит.Код,СтрДлина(Выборка.Габарит.Код)-Позиция));
		КонецЕсли;
		ДобавитьЭлемент(ЗаписьXML, "id", 			КодОтправили );
		ДобавитьЭлемент(ЗаписьXML, "name",  		Выборка.Габарит.Наименование);

		ДобавитьЭлемент(ЗаписьXML, "time", 			Формат(Выборка.СрокХранения,"ЧДЦ=2; ЧГ=0"));
		ДобавитьЭлемент(ЗаписьXML, "forfeit", 		Формат(Выборка.Штраф,"ЧДЦ=2; ЧГ=0"));
		ДобавитьЭлемент(ЗаписьXML, "frost", 		?(Выборка.Заморозка,"1", "0"));
		ДобавитьЭлемент(ЗаписьXML, "oversized", 	?(Выборка.Негабарит,"1", "0"));
		Если Выборка.Негабарит Тогда
			ДобавитьЭлемент(ЗаписьXML, "costKG",	Формат(Выборка.ЦенаЗаКГ,"ЧДЦ=2; ЧГ=0"));	
			ДобавитьЭлемент(ЗаписьXML, "costСub",	Формат(Выборка.ЦенаЗаКуб,"ЧДЦ=2; ЧГ=0"));	
		Иначе
			ДобавитьЭлемент(ЗаписьXML, "cost", 		Формат(Выборка.ЦенаХранения,"ЧДЦ=2; ЧГ=0"));	
		КонецЕсли;
		Если Выборка.Отменен Тогда
			ДобавитьЭлемент(ЗаписьXML, "cancel", 	"1");
		КОнецЕсли;	
		ЗаписьXML.ЗаписатьКонецЭлемента();	  //tariff
		
		
		
	КонецЦикла;	

	ЗаписьXML.ЗаписатьКонецЭлемента();	  //tariffs
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 		
	
КонецФункции



Функция ВыгрузитьТарифыПоНаправлениямсей_tariffsByDestination_ПоОбъекту(Объект) Экспорт
	
	
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distriffsbutors");
	
	ДобавитьАтрибутыКорня(ЗаписьXML);
	ЗаписьXML.ЗаписатьНачалоЭлемента("tariffsByDestination");	
	
	Для каждого тариф из Объект.Тарифы Цикл
		Позиция = СтрНайти(тариф.Габарит.Код,"-");
		Если Позиция = 0   Тогда
			КодОтправили = Число(тариф.Габарит.Код);
		Иначе	
			КодОтправили = Число(Прав(тариф.Габарит.Код,СтрДлина(тариф.Габарит.Код)-Позиция));
		КонецЕсли;

		
		ЗаписьXML.ЗаписатьНачалоЭлемента("tariffByDestination");
		ДобавитьЭлемент(ЗаписьXML, "period", 		Формат(Объект.Дата,"ДФ=dd.MM.yyyy"));
		ДобавитьЭлемент(ЗаписьXML, "idtariff", 		Формат(КодОтправили,"ЧЦ=; ЧГ=0"));
		ДобавитьЭлемент(ЗаписьXML, "from",  		Формат(тариф.Откуда.Код,"ЧЦ=; ЧГ=0"));

		ДобавитьЭлемент(ЗаписьXML, "to", 			Формат(тариф.Куда.Код,"ЧЦ=; ЧГ=0"));
		ДобавитьЭлемент(ЗаписьXML, "cost", 			Формат(тариф.Стоимость,"ЧДЦ=2; ЧГ=0"));	
		Если тариф.Отменен Тогда
			ДобавитьЭлемент(ЗаписьXML, "cancel", 	"1");
		КОнецЕсли;	
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //tariffs
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 		
	
КонецФункции

Функция ВыгрузитьТарифыПоНаправлениямсей_tariffsByDestination(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТарифыПоНаправлениямСрезПоследних.Период КАК Период,
		|	ТарифыПоНаправлениямСрезПоследних.Регистратор КАК Регистратор,
		|	ТарифыПоНаправлениямСрезПоследних.НомерСтроки КАК НомерСтроки,
		|	ТарифыПоНаправлениямСрезПоследних.Активность КАК Активность,
		|	ТарифыПоНаправлениямСрезПоследних.Габарит КАК Габарит,
		|	ТарифыПоНаправлениямСрезПоследних.Откуда.Код КАК ОткудаКод,
		|	ТарифыПоНаправлениямСрезПоследних.Куда.Код КАК КудаКод,
		|	ТарифыПоНаправлениямСрезПоследних.Стоимость КАК Стоимость,
		|	ТарифыПоНаправлениямСрезПоследних.Отменен КАК Отменен
		|ИЗ
		|	РегистрСведений.ТарифыПоНаправлениям.СрезПоследних КАК ТарифыПоНаправлениямСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distriffsbutors");
	
	ДобавитьАтрибутыКорня(ЗаписьXML);
	ЗаписьXML.ЗаписатьНачалоЭлемента("tariffsByDestination");	
	
	Пока Выборка.Следующий() Цикл
		Позиция = СтрНайти(Выборка.Габарит.Код,"-");
		Если Позиция = 0   Тогда
			КодОтправили = Число(Выборка.Габарит.Код);
		Иначе	
			КодОтправили = Число(Прав(Выборка.Габарит.Код,СтрДлина(Выборка.Габарит.Код)-Позиция));
		КонецЕсли;

		
		ЗаписьXML.ЗаписатьНачалоЭлемента("tariffByDestination");
		ДобавитьЭлемент(ЗаписьXML, "period", 		Формат(Выборка.Период,"ДФ=dd.MM.yyyy"));
		ДобавитьЭлемент(ЗаписьXML, "idtariff", 		Формат(КодОтправили,"ЧЦ=; ЧГ=0"));
		ДобавитьЭлемент(ЗаписьXML, "from",  		Формат(Выборка.ОткудаКод,"ЧЦ=; ЧГ=0"));

		ДобавитьЭлемент(ЗаписьXML, "to", 			Формат(Выборка.КудаКод,"ЧЦ=; ЧГ=0"));
		ДобавитьЭлемент(ЗаписьXML, "cost", 			Формат(Выборка.Стоимость,"ЧДЦ=2; ЧГ=0"));	
		Если Выборка.Отменен Тогда
			ДобавитьЭлемент(ЗаписьXML, "cancel", 	"1");
		КОнецЕсли;	
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //tariffs
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 		
	
КонецФункции


#КонецОбласти


Функция СтоимостьОтправлений(СписокОтправлений) Экспорт
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	
	ДобавитьАтрибутыКорня(ЗаписьXML);
	ЗаписьXML.ЗаписатьНачалоЭлемента("megaordersPrices");
		Для каждого элем из СписокОтправлений Цикл	

		Если ТипЗнч(Элем.Значение) = Тип("СправочникСсылка.Посылки") Тогда		
			ТипОтправления = "package";			
		ИначеЕсли ТипЗнч(Элем.Значение) = Тип("СправочникСсылка.Коробки") Тогда		
			ТипОтправления = "group";			               
		Иначе	                                                            
			ТекстСообщения = "Нельза получить цену для отаравления: "+ элем + ". Можно получить только для посылок и коробок.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;	
		ЗаписьXML.ЗаписатьНачалоЭлемента("item");   
	
		
		ДобавитьЭлемент(ЗаписьXML, "id", 			Формат(Элем.Значение.Код,"ЧГ=0"));
		ДобавитьЭлемент(ЗаписьXML, "type",  		ТипОтправления);

		ЗаписьXML.ЗаписатьКонецЭлемента();	  //item
		
		КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //megaordersPrices
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 

КонецФункции

Функция ОборотнаяТараПривязать(Коробка, ОборотнаяТара) Экспорт
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	
	ДобавитьАтрибутыКорня(ЗаписьXML);
	ЗаписьXML.ЗаписатьНачалоЭлемента("reusableStickerConnects");
	

	
		ЗаписьXML.ЗаписатьНачалоЭлемента("reusableStickerConnect");
		ДобавитьЭлемент(ЗаписьXML, "id", 			Формат(ОборотнаяТара.Код,"ЧГ=0"));
		ДобавитьЭлемент(ЗаписьXML, "code",  		Формат(Число(Коробка.Код),"ЧГ=0"));

		ЗаписьXML.ЗаписатьКонецЭлемента();	  //reusableStickerConnect
		

	ЗаписьXML.ЗаписатьКонецЭлемента();	  //reusableStickerConnects
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 

КонецФункции	

Функция ОборотнаяТараИстория(ОборотнаяТара) Экспорт
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	
	ДобавитьАтрибутыКорня(ЗаписьXML);
	ЗаписьXML.ЗаписатьНачалоЭлемента("reusableStickerLogs");

		ДобавитьЭлемент(ЗаписьXML, "reusableStickerLog", 			Формат(ОборотнаяТара.Код,"ЧГ=0"));

	ЗаписьXML.ЗаписатьКонецЭлемента();	  //reusableStickerConnects
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 

КонецФункции



#Область ЗагрузкаСправочниковПоДате
Функция ЗагрузитьСправочникиПоДате(ПараметрыпоДате, ПараметрыОтдельно) Экспорт
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	
	ДобавитьАтрибутыКорня(ЗаписьXML);
	
	Если ПараметрыпоДате.Количество()>0 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("dataByDates");
		Для каждого элем из ПараметрыпоДате Цикл
			ДобавитьЭлемент(ЗаписьXML, элем.Ключ, Элем.Значение);
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();	  //dataByDates
	КонецЕсли;
	Для каждого элем из ПараметрыОтдельно Цикл
		ДобавитьЭлемент(ЗаписьXML, элем.Ключ, Элем.Значение);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	ОтправленныеДанные ="<?xml version=""1.0"" encoding=""UTF-8""?> " +ОтправленныеДанные;
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 		
	
КонецФункции


Функция Тарифы_tariffs() Экспорт
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ДобавитьАтрибутыКорня(ЗаписьXML);

	ЗаписьXML.ЗаписатьНачалоЭлемента("tariffs");

	ЗаписьXML.ЗаписатьКонецЭлемента();	  //tariffs

	ЗаписьXML.ЗаписатьКонецЭлемента();	  //distributors
	
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	//ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	
	Возврат ОтправленныеДанные; 		
	
КонецФункции



#КонецОбласти  


Функция ПривязатьСтикерВозврата(Ссылка) Экспорт  
	ЗаписьXML	= новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ДобавитьАтрибутыКорня(ЗаписьXML);
	
	
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd","http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьАтрибут("apiVersion","10");
	///////
	ЗаписьXML.ЗаписатьНачалоЭлемента("returns");	
	хмл_income			= Документы.ВозвратПокупокОрганизатору.ПолучитьТэг_return_right(Ссылка);
	ЗаписьXML.ЗаписатьБезОбработки(хмл_income);

	ЗаписьXML.ЗаписатьКонецЭлемента();           //incomes
	//////
	ЗаписьXML.ЗаписатьКонецЭлемента();           //distributors   
	
	
	ОтправленныеДанные = ЗаписьXML.Закрыть();	
	ОтправленныеДанные = СтрЗаменить(ОтправленныеДанные,"xmlns=""http://www.100sp.ru/XMLSchema-instance"" ","");
	
	Возврат ОтправленныеДанные;
	
	
КонецФункции	




Процедура ДобавитьАтрибутыКорня(ЗаписьXML) Экспорт
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьАтрибут("apiVersion","12");
КонецПроцедуры	

Процедура ДобавитьЭлемент(ЗаписьXML,Имя,Значение) Экспорт
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
	ЗаписьXML.ЗаписатьТекст(Строка(Значение));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры	
