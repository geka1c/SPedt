
#Область ПрограммныйИнтерфейс

// Создание заказа на доставку.
// 
// Параметры:
//  Структура - Параметры для формирования заказа
// 
// Возвращаемое значение:
//  Массив - Протоколы создания заказа, Получения информации по заказу
Функция СозданиеЗаказаНаДоставку(Параметры) Экспорт
	Протоколы = новый Массив;
		
	Протокол	= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола(Перечисления.ВидыОбменовСДЭК.СозданиеЗаказаНаДоставку);
	ЭтоEMS = ( Параметры.ДокументОтправления.ТочкаНазначения.Код = "0201");
	Уч_данные=ПолучитьУчетныеДанные(ЭтоEMS);
	ПараметрыОтправления = ПараметрыОтправления(Параметры.ДокументОтправления);
	
	Протокол.Вставить("ПараметрыОтправления", 	ПараметрыОтправления);

	Протокол.Отправление = 	Параметры["Отправление"];


	// Вставить содержимое обработчика.
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ", Истина); 
	з_JSON=новый ЗаписьJSON;
	з_JSON.УстановитьСтроку(ПараметрыJSON);
	
	Данные= Новый Соответствие;
	Данные.Вставить("brand-name", 		    "100sp.ru"); 	
	Для Каждого Парам Из Параметрыотправления Цикл
		Если Парам.Значение = Неопределено Тогда Продолжить; КонецЕсли; 
		Данные.Вставить(СтрЗаменить(Парам.ключ,"_", "-"), Парам.Значение);
	КонецЦикла;	
	Данные.Вставить("order-num",		    Параметры["НомерГС"]);											//Номер заказа. Внешний идентификатор заказа, который формируется отправителем 
	Если Данные["mail-category"]= Перечисления.КатегорияРПО.WITH_DECLARED_VALUE_AND_CASH_ON_DELIVERY Тогда
		Данные.Вставить("payment", 				Параметры["payment"]); 											//Сумма наложенного платежа (копейки) 
	КонецЕсли;
	Данные.Вставить("insr-value", 			Параметры["ОбъявленнаяСтоимость"]);								//Сумма объявленной ценности (копейки) 
	Данные.Вставить("dimension", 			Параметры["dimension"]); 										//Линейные размеры 
	Если  Параметры["негабарит"] Тогда											
		Данные.Вставить("dimension-type",	"OVERSIZED");
	КонецЕсли;	
	Данные.Вставить("fragile", 				Параметры["fragile"]); 		 									//Осторожно хрупко
	Данные.Вставить("mass", 				Параметры["mass"]); 			 								//Масса отправления в граммах 	
	Данные.Вставить("surname",				Параметры["Фамилия"]);											//Фамилия
	Данные.Вставить("given-name",		    Параметры["Имя"]);												//Имя получателя  	
	Данные.Вставить("middle-name",		    Параметры["Отчество"]);											//Отчество получателя   
	Данные.Вставить("address-type-to",	    "DEFAULT"); 													//Тип адреса. 	
	Данные.Вставить("mail-direct", 			643); 															//Код страныю Россия: 643 	
	Данные.Вставить("region-to",			Параметры["Регион"]);											//Область, регион 	
	Данные.Вставить("place-to",			    Параметры["Город"]);											//Населенный пункт 
	Данные.Вставить("postoffice-code",		Параметры["ИндексОтправителя"]);								//Индекс места приема 
	Данные.Вставить("street-to",			Параметры["Улица"]);											//Часть адреса: Улица 
	Данные.Вставить("house-to",		    	Параметры["НомерДома"]);										//Часть адреса: Номер здания 
	Данные.Вставить("index-to",		    	Параметры["Индекс"]);   										//Почтовый индекс  
	Данные.Вставить("tel-address",			Параметры["Телефон"]);											//Телефон получателя (может быть обязательным для некоторых типов отправлений) 

	МасДанных=Новый Массив;
	масДанных.Добавить(Данные);
	ЗаписатьJSON(з_JSON,масДанных);
	Стр_JSON=з_JSON.Закрыть();
	
	Сервер = "otpravka-api.pochta.ru/1.0/user/backlog";
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());  
	с = Новый HTTPСоединение(Сервер,,,,,5,ssl);
	з = Новый HTTPЗапрос();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "AccessToken "+уч_данные.Токен);
	Заголовки.Вставить("X-User-Authorization", "Basic "+уч_данные.Encoded);
	
	з.Заголовки = Заголовки;
	
	з.УстановитьТелоИзСтроки(стр_JSON,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	
	имяФайлаОтвета=ПолучитьИмяВременногоФайла("txt");
	стрОтвета=новый Структура;
	строка_Ответа = "";
	Попытка
		ответ=с.Записать(з);
		строка_Ответа=ответ.ПолучитьТелоКакСтроку();
		ч_JSON=новый ЧтениеJSON;
		ч_JSON.УстановитьСтроку(строка_Ответа);
		стрОтвета=ОбъектJSONВструктуру(ч_JSON);
		стрОтвета.Вставить("ПолученныеДанные",строка_Ответа);
		стрОтвета.Вставить("Успешно",Истина);
		
	Исключение
		стрОтвета.Вставить("Успешно",Ложь);
		стрОтвета.Вставить("ПолученныеДанные",ОписаниеОшибки());
		строка_Ответа = 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки()+ ИнформацияОбОшибке());
	КонецПопытки;
	стрОтвета.Вставить("ОтправленныеДанные",стр_JSON);
	
	Протокол.ОтправленныеДанные	= стрОтвета.ОтправленныеДанные;
	Протокол.ПолученныеДанные	= стрОтвета.ПолученныеДанные;
	Протокол.ДатаОкончания		= ТекущаяДата();
	
	Если стрОтвета.Свойство("resultids") Тогда
		ВнутреннийНомер=Формат(стрОтвета.resultids[0],"ЧГ=0");
		Протокол.ВнутреннийНомер = ВнутреннийНомер;
		Протокол.Результат="Получен внутренний номер";
		Протоколы.Добавить(Протокол);

		////////////////// Получаем трек
		ПротоколТрек	= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола(Перечисления.ВидыОбменовСДЭК.СозданиеЗаказаНаДоставку);
		Результат=Интеграция_ПочтаРоссии.ПолучитьИнформациюПоЗаказу(ВнутреннийНомер,ЭтоEMS);
		ПротоколТрек.ПолученныеДанные =	Результат.ПолученныеДанные;
		ПротоколТрек.Отправление = 	Параметры["Отправление"];
		ПротоколТрек.ОтправленныеДанные = Результат.ОтправленныеДанные;
		ПротоколТрек.ДатаОкончания = ТекущаяДата();
		Если Результат.Успешно и Результат.Свойство("barcode") Тогда
			ТрекНомер=Формат(Результат.barcode,"ЧГ=0");
			ПротоколТрек.ТрекНомер = Результат.barcode;
			ПротоколТрек.Результат="Получен трек номер";
		Иначе	
			ПротоколТрек.Результат="Ошибка получения трек номера";
		КонецЕсли;
		Протоколы.Добавить(ПротоколТрек);			
		
	Иначе
		Протокол.Результат = "Ошибка получения внутреннего номера";
		Протоколы.Добавить(Протокол);
	КонецЕсли;
	Возврат Протоколы;
КонецФункции	


// Рассчитать стоимость.
// 
// Параметры:
//  Параметры - 
// Параметры
// 
// Возвращаемое значение:
//  Структура - Рассчитать стоимость:
// * ДатаНачала - Дата - 
// * Отправление 
// * ОтправленныеДанные 
// * ПолученныеДанные 
// * ВидОбмена 
// * ДатаОкончания 
// * Результат 
// * ТрекНомер 
// * ВнутреннийНомер 
// * Тариф - Строка - 
// * СрокДоставки - Строка - 
// * РасчетКалькулятора 
// * ТекстОшибки 
Функция РассчитатьСтоимость(Параметры) Экспорт
	Протокол	= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола(Перечисления.ВидыОбменовСДЭК.СтоимостьПоТарифу);
	
	ПараметрыОтправления = ПараметрыОтправления(Параметры.ДокументОтправления);
		
	Параметры.Вставить("ПараметрыОтправления", ПараметрыОтправления);
		
	Если Параметры.Свойство("Отправление") Тогда	
		Протокол.Отправление = 	Параметры.Отправление;
	КонецЕсли;

	Протокол.Вставить("Тариф", 			Строка(ПараметрыОтправления.mail_category) + " "  + ПараметрыОтправления.mail_type);
	Протокол.Вставить("СрокДоставки", 	" ");
		
 	СтруктураРасчета			= РасчетСтоимости(Параметры);	
	Протокол.ОтправленныеДанные	= СтруктураРасчета.ОтправленныеДанные;
	Протокол.ПолученныеДанные	= СтруктураРасчета.ПолученныеДанные;
	Протокол.ДатаОкончания		= ТекущаяДата();

	Если СтруктураРасчета.Успешно  и 
		 СтруктураРасчета.Свойство("totalrate") и 
		 СтруктураРасчета.totalrate <> 0 Тогда
		Протокол.Результат	  =	"ok";
		Протокол.ТарифТК	  = (СтруктураРасчета.totalrate/100) + (СтруктураРасчета.totalvat/100);
		
		Если СтруктураРасчета.Свойство("deliverytime") Тогда 
			Если СтруктураРасчета.deliverytime.Свойство("mindays") Тогда 
				Протокол.Вставить("СрокДоставкиМин",СтруктураРасчета.deliverytime.mindays);
			КонецЕсли;
			Если СтруктураРасчета.deliverytime.Свойство("maxdays") Тогда
				Протокол.Вставить("СрокДоставкиМакс", СтруктураРасчета.deliverytime.maxdays);
			КонецЕсли;
			Протокол.СрокДоставки = СтруктураРасчета.deliverytime.maxdays;	
		КонецЕсли;
		Протокол.Вставить("РасчетКалькулятора", "Итоговая цена: "+Протокол.ТарифТК+ " руб."+Символы.ПС+
		"	Плата всего: "+?(СтруктураРасчета.Свойство("totalrate"),СтруктураРасчета.totalrate/100," --- ")+ " "+Символы.ПС+
		"	Всего НДС  : "+?(СтруктураРасчета.Свойство("totalvat"),СтруктураРасчета.totalvat/100," --- ")+ " "+Символы.ПС);
		Если  СтруктураРасчета.Свойство("deliverytime") Тогда		
			Протокол.РасчетКалькулятора	= Протокол.РасчетКалькулятора+
			"Время доставки  : "+Символы.ПС+
			"	Макс (дни) : "+?(СтруктураРасчета.deliverytime.Свойство("maxdays"),СтруктураРасчета.deliverytime.maxdays," --- ")+ " "+Символы.ПС+
			"	Мин (дни)  : "+?(СтруктураРасчета.deliverytime.Свойство("mindays"),СтруктураРасчета.deliverytime.mindays," --- ")+ " "+Символы.ПС;
			Протокол.Вставить("СрокДоставки", ?(СтруктураРасчета.deliverytime.Свойство("mindays"),Строка(СтруктураРасчета.deliverytime.mindays),"???")+ " - "+
										  +?(СтруктураРасчета.deliverytime.Свойство("maxdays"),Строка(СтруктураРасчета.deliverytime.maxdays),"???")+ " дн.");
		КОнецЕсли;			
		
	Иначе
		Протокол.Результат	  =	"error";
		Если СтруктураРасчета.Свойство("desc") Тогда
			Протокол.Вставить("РасчетКалькулятора", СтруктураРасчета.desc);
		КонецЕсли;
		Протокол.Вставить("ТекстОшибки", Протокол.РасчетКалькулятора);
	КонецЕсли;	

	Возврат	Протокол; 
	
КОнецФункции	

Функция РассчитатьСтоимостьВсеТарифы(Параметры) Экспорт
	
	Протокол		= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола();
	МассивТарифов 	= новый Массив();
	

	Параметры.КатегорияРПО 			= Перечисления.КатегорияРПО.WITH_DECLARED_VALUE;
	Параметры.ВидРПО 				= Перечисления.ВидРПО.ONLINE_PARCEL; //Посылка Онлайн
	ПротоколТарифа					= РассчитатьСтоимость(Параметры);
	Протокол.ОтправленныеДанные 	= Протокол.ОтправленныеДанные 	+ "1: " + ПротоколТарифа.ОтправленныеДанные + Символы.ПС;
	Протокол.ПолученныеДанные		= Протокол.ПолученныеДанные 	+ "1: " + ПротоколТарифа.ПолученныеДанные 	+ Символы.ПС;
	Протокол.Результат				= Протокол.Результат			+ "1: " + ПротоколТарифа.Результат 			+ Символы.ПС;
	МассивТарифов.Добавить(ПротоколТарифа);
	
	Параметры.КатегорияРПО 			= Перечисления.КатегорияРПО.WITH_DECLARED_VALUE;
	Параметры.ВидРПО 				= Перечисления.ВидРПО.POSTAL_PARCEL; //Посылка Нестандартная
	ПротоколТарифа					= РассчитатьСтоимость(Параметры);
	Протокол.ОтправленныеДанные 	= Протокол.ОтправленныеДанные 	+ "2: " + ПротоколТарифа.ОтправленныеДанные + Символы.ПС;
	Протокол.ПолученныеДанные		= Протокол.ПолученныеДанные 	+ "2: " + ПротоколТарифа.ПолученныеДанные 	+ Символы.ПС;
	Протокол.Результат				= Протокол.Результат			+ "2: " + ПротоколТарифа.Результат 			+ Символы.ПС;
	МассивТарифов.Добавить(ПротоколТарифа);

	Параметры.КатегорияРПО 			= Перечисления.КатегорияРПО.WITH_DECLARED_VALUE;
	Параметры.ВидРПО 				= Перечисления.ВидРПО.PARCEL_CLASS_1; //Посылка 1 го класса
	ПротоколТарифа					= РассчитатьСтоимость(Параметры);
	Протокол.ОтправленныеДанные 	= Протокол.ОтправленныеДанные 	+ "3: " + ПротоколТарифа.ОтправленныеДанные + Символы.ПС;
	Протокол.ПолученныеДанные		= Протокол.ПолученныеДанные 	+ "3: " + ПротоколТарифа.ПолученныеДанные 	+ Символы.ПС;
	Протокол.Результат				= Протокол.Результат			+ "3: " + ПротоколТарифа.Результат 			+ Символы.ПС;
	МассивТарифов.Добавить(ПротоколТарифа);

	Протокол.Вставить("МассивТарифов",	МассивТарифов);
	
	Возврат Протокол;

КонецФункции


Функция ПараметрыОтправления(ДокументОтправления) Экспорт
	ЭтоПочтаРоссии = ( ДокументОтправления.ТочкаНазначения.Код = "0020"); // Иначе ПочтаРоссииАвиа
	ЭтоПочтаРоссииАвиа = ( ДокументОтправления.ТочкаНазначения.Код = "0021"); // Иначе ПочтаРоссииАвиа
	ЭтоПочтаEMS = ( ДокументОтправления.ТочкаНазначения.Код = "0201");
	
	Результат = новый Структура("transport_type, mail_category, mail_type, payment_method");
	
	РасчетПоСтарымТарифам = (ДокументОтправления.Коробка.ВерсияТарифов = "0");
	Если РасчетПоСтарымТарифам  Тогда
		Если ЭтоПочтаРоссии Тогда
//			Результат.transport_type = "SURFACE";
			Результат.mail_category  = "ORDINARY";
			Результат.mail_type =  "ONLINE_PARCEL";
	//		Результат.payment_method = "CASHLESS";
		КонецЕсли
		;

		Если ЭтоПочтаРоссииАвиа Тогда
//			Результат.transport_type = "EXPRESS";
			Результат.mail_category  = "ORDINARY";
			Результат.mail_type =  "PARCEL_CLASS_1";
			//Результат.payment_method = "CASHLESS";
		КонецЕсли
		;

		Если ЭтоПочтаEMS Тогда
			Результат.transport_type = "SURFACE";
			Результат.mail_category  = "ORDINARY";
			Результат.mail_type =  "EMS_RT";
			Результат.payment_method = "CASHLESS";
		КонецЕсли
		;
	
	
	Иначе
		Если ЭтоПочтаРоссии Тогда
			Результат.transport_type = "SURFACE";
			Результат.mail_category  = "WITH_DECLARED_VALUE_AND_COMPULSORY_PAYMENT";
			Результат.mail_type =  "ECOM_MARKETPLACE";
			Результат.payment_method = "CASHLESS";
		КонецЕсли
		;

		Если ЭтоПочтаРоссииАвиа Тогда
			Результат.transport_type = "EXPRESS";
			Результат.mail_category  = "WITH_DECLARED_VALUE_AND_COMPULSORY_PAYMENT";
			Результат.mail_type =  "ECOM_MARKETPLACE";
			Результат.payment_method = "CASHLESS";
		КонецЕсли
		;

		Если ЭтоПочтаEMS Тогда
			Результат.transport_type = "SURFACE";
			Результат.mail_category  = "ORDINARY";
			Результат.mail_type =  "EMS_RT";
			Результат.payment_method = "CASHLESS";
		КонецЕсли
		;
	КонецЕсли;
	Возврат Результат;
КонецФункции	




Функция ПолучитьАдресаВызоваКурьера(ТочкаНазначения,ЭтоEMS=ложь) Экспорт
	уч_данные=ПолучитьУчетныеДанные(ЭтоEMS);
	//ВидРПО = ПолучитьВидРПО(ТочкаНазначения);
	
	Сервер = "otpravka-api.pochta.ru/1.0/courier/COURIER_CALL/find-addresses";
	//Сервер = "otpravka-api.pochta.ru/1.0/courier/ONLINE_PARCEL/find-addresses";
	//Сервер = "otpravka.pochta.ru/document/downloadForms/1255371";
	
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());  
	с = Новый HTTPСоединение(Сервер,,,,,,ssl);
	з = Новый HTTPЗапрос();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "AccessToken "+уч_данные.Токен);
	Заголовки.Вставить("X-User-Authorization", "Basic "+уч_данные.Encoded);
	
	з.Заголовки = Заголовки;
	имяФайлаОтвета=ПолучитьИмяВременногоФайла("txt");
	стрОтвета=новый Структура;
	
	Попытка
		ответ=с.Получить(з,имяФайлаОтвета);
		строка_Ответа=ответ.ПолучитьТелоКакСтроку();
		ч_JSON=новый ЧтениеJSON;
		ч_JSON.ОткрытьФайл(имяФайлаОтвета);
		стрОтвета= новый Структура( );
		стрОтвета.Вставить("Адреса", ОбъектJSONВМассив(ч_JSON));
		
		стрОтвета.Вставить("КодСостояния",ответ.КодСостояния);
		стрОтвета.Вставить("имяФайлаОтвета",имяФайлаОтвета);
		
		ПолученныеДанные = "Код ответа: "+ответ.КодСостояния; 
		Если ответ.КодСостояния=403 Тогда
			ПолученныеДанные="Нарушение доступа";
		ИначеЕсли ответ.КодСостояния=404 Тогда
			ПолученныеДанные="Заказ не найден";
		ИначеЕсли ответ.КодСостояния=500 Тогда
			ПолученныеДанные="Внутренняя ошибка сервиса";
		Конецесли;
		Двоичное=Новый ДвоичныеДанные(имяФайлаОтвета);
		Адрес=ПоместитьВоВременноеХранилище(Двоичное,Новый УникальныйИдентификатор);
		
		
		стрОтвета.Вставить("ПолученныеДанные",СтоСПОбмен_Общий.ФайлВСтроку(имяФайлаОтвета));
		стрОтвета.Вставить("Адрес",Адрес);
		стрОтвета.Вставить("Успешно",Истина);
		
	Исключение
		стрОтвета.Вставить("Успешно",Ложь);
		стрОтвета.Вставить("ПолученныеДанные",ОписаниеОшибки());
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки()+ ИнформацияОбОшибке());
	КонецПопытки;
//	стрОтвета.Вставить("ОтправленныеДанные",НЗаказа);
	Возврат стрОтвета;
КонецФункции	

Функция ПолучитьДатыВремяВызоваКурьера(ИДАдреса,ЭтоEMS=ложь) Экспорт
	уч_данные=ПолучитьУчетныеДанные(ЭтоEMS);
	//ВидРПО = ПолучитьВидРПО(ТочкаНазначения);
	
	Сервер = "otpravka-api.pochta.ru/1.0/courier/"+ИДАдреса+"/COURIER_CALL/find-dates";
	//Сервер = "otpravka-api.pochta.ru/1.0/courier/ONLINE_PARCEL/find-addresses";
	//Сервер = "otpravka.pochta.ru/document/downloadForms/1255371";
	
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());  
	с = Новый HTTPСоединение(Сервер,,,,,,ssl);
	з = Новый HTTPЗапрос();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "AccessToken "+уч_данные.Токен);
	Заголовки.Вставить("X-User-Authorization", "Basic "+уч_данные.Encoded);
	
	з.Заголовки = Заголовки;
	имяФайлаОтвета=ПолучитьИмяВременногоФайла("txt");
	стрОтвета=новый Структура;
	
	Попытка
		ответ=с.Получить(з,имяФайлаОтвета);
		строка_Ответа=ответ.ПолучитьТелоКакСтроку();
		ч_JSON=новый ЧтениеJSON;
		ч_JSON.ОткрытьФайл(имяФайлаОтвета);
		стрОтвета= новый Структура( );
		стрОтвета.Вставить("Варианты", ОбъектJSONВМассив(ч_JSON));
		
		стрОтвета.Вставить("КодСостояния",ответ.КодСостояния);
		стрОтвета.Вставить("имяФайлаОтвета",имяФайлаОтвета);
		
		ПолученныеДанные = "Код ответа: "+ответ.КодСостояния; 
		Если ответ.КодСостояния=403 Тогда
			ПолученныеДанные="Нарушение доступа";
		ИначеЕсли ответ.КодСостояния=404 Тогда
			ПолученныеДанные="Заказ не найден";
		ИначеЕсли ответ.КодСостояния=500 Тогда
			ПолученныеДанные="Внутренняя ошибка сервиса";
		Конецесли;
		Двоичное=Новый ДвоичныеДанные(имяФайлаОтвета);
		Адрес=ПоместитьВоВременноеХранилище(Двоичное,Новый УникальныйИдентификатор);
		
		
		стрОтвета.Вставить("ПолученныеДанные",СтоСПОбмен_Общий.ФайлВСтроку(имяФайлаОтвета));
		стрОтвета.Вставить("Адрес",Адрес);
		стрОтвета.Вставить("Успешно",Истина);
		
	Исключение
		стрОтвета.Вставить("Успешно",Ложь);
		стрОтвета.Вставить("ПолученныеДанные",ОписаниеОшибки());
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки()+ ИнформацияОбОшибке());
	КонецПопытки;
//	стрОтвета.Вставить("ОтправленныеДанные",НЗаказа);
	Возврат стрОтвета;
КонецФункции	

Функция ОформитьЗаявкуНаВызовКурьера(Параметры,ЭтоEMS=ложь) Экспорт
	Протоколы = новый Массив;
		
	Протокол	= Интеграция_ТранспортныеКомпании_Общий.ПолучитьСтруктуруПротокола(Перечисления.ВидыОбменовСДЭК.СозданиеЗаказаНаДоставку);
	уч_данные=ПолучитьУчетныеДанные(ЭтоEMS);
	
//	ПараметрыОтправления = Интеграция_ПочтаРоссии.ПараметрыОтправления(Параметры.ДокументОтправления);
//	
//	Протокол.Вставить("КатегорияРПО", 	ПараметрыОтправления.КатегорияРПО);
//	Протокол.Вставить("ВидРПО", 		ПараметрыОтправления.ВидРПО);

	//Протокол.Отправление = 	Параметры["ДокументОтправления"];

	// Вставить содержимое обработчика.
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ", Истина); 
	з_JSON=новый ЗаписьJSON;
	з_JSON.УстановитьСтроку(ПараметрыJSON);
	
	Данные= Новый Соответствие;
	Данные.Вставить("Address", Параметры.Адрес); //Адрес приезда курьера 
	Данные.Вставить("address-id", Параметры.ИдАдреса); //Инедетификатор адреса приезда курьера
	Данные.Вставить("batch-names", 	Параметры.МассивПартий); //Идентификаторы партии
	Данные.Вставить("contact-name",	Параметры.КонтактноеЛицо);	//Имя контактного лица
	Данные.Вставить("contact-phone",Параметры.КонтактныйТелефон);	//КонтактныйТелефон 
	Данные.Вставить("country-to-code",	1);	//Код страны назначения
	Данные.Вставить("order-date",	Параметры.ДатаВызоваКурьера);	//ДатаВызоваКурьера
	Данные.Вставить("print-documents",	Истина);	//Имя контактного лица
	Данные.Вставить("time-interval-id",	Параметры.ИдДатаВремя);	//Временной интервал вызова курьера
	
//	масДанных=Новый Массив;
//	масДанных.Добавить(Данные);
	ЗаписатьJSON(з_JSON,Данные);
	стр_JSON=з_JSON.Закрыть();
	
	Сервер = "otpravka-api.pochta.ru/1.0/courier/order";

	
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());  
	с = Новый HTTPСоединение(Сервер,,,,,5,ssl);
	з = Новый HTTPЗапрос();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "AccessToken "+уч_данные.Токен);
	Заголовки.Вставить("X-User-Authorization", "Basic "+уч_данные.Encoded);
	
	з.Заголовки = Заголовки;
	
	з.УстановитьТелоИзСтроки(стр_JSON,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	
	имяФайлаОтвета=ПолучитьИмяВременногоФайла("txt");
	стрОтвета=новый Структура;
	строка_Ответа = "";
	Попытка
		ответ=с.Записать(з);
		строка_Ответа=ответ.ПолучитьТелоКакСтроку();
		ч_JSON=новый ЧтениеJSON;
		ч_JSON.УстановитьСтроку(строка_Ответа);
		
		стрОтвета=ОбъектJSONВструктуру(ч_JSON);
		//СформироватьДерево(ч_JSON, стрОтвета);

		Протокол.Вставить("ПолученныеДанные",строка_Ответа);
		Протокол.Вставить("Успешно",Истина);
		
	Исключение
		Протокол.Вставить("Успешно",Ложь);
		Протокол.Вставить("ПолученныеДанные",ОписаниеОшибки());
	КонецПопытки;
	стрОтвета.Вставить("ОтправленныеДанные",стр_JSON);
	
	Протокол.ОтправленныеДанные	= стр_JSON;
	Протокол.ДатаОкончания		= ТекущаяДата();
	
	стрОтвета.Вставить("Протокол",Протокол);
	
	Возврат стрОтвета;
		
КонецФункции	


#КонецОбласти 





Функция РасчетСтоимости(Параметры) Экспорт
	
	уч_данные=ПолучитьУчетныеДанные(Параметры.ЭтоEMS);
	
	// Вставить содержимое обработчика.
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ", Истина); 
	з_JSON=новый ЗаписьJSON;
	з_JSON.УстановитьСтроку(ПараметрыJSON);
	
	Данные= Новый Соответствие;
	Данные.Вставить("declared-value", 		Параметры.ОбъявленнаяСтоимость*100); 		//Объявленная стоимость целое
	Данные.Вставить("dimension", 			Новый Структура("height ,length ,width", 
												Параметры.Высота,
												Параметры.Длина,
												Параметры.Ширина)); 			//Сантиметры
	Если Параметры.негабарит Тогда											
		Данные.Вставить("dimension-type",	"OVERSIZED");
	КонецЕсли;
													
	Данные.Вставить("fragile", 				Параметры.Хрупкое); 		 		//Осторожно хрупко 
	Данные.Вставить("index-from", 			Параметры.ИндексОтправителя); 			//Откуда
	Данные.Вставить("index-to", 			Параметры.ИндексПолучателя); 			//КУда
	Для Каждого Парам Из Параметры.Параметрыотправления Цикл 
		Если Парам.Значение = Неопределено Тогда Продолжить; КонецЕсли;
		Данные.Вставить(СтрЗаменить(Парам.ключ,"_", "-"), Парам.Значение);
	КонецЦикла;
	Данные.Вставить("mass", 				Параметры.Вес); 			 	//Масса отправления в граммах 
	Данные.Вставить("with-simple-notice",	Ложь);	//Отметка 'С простым уведомлением'
	ЗаписатьJSON(з_JSON,Данные);
	стр_JSON=з_JSON.Закрыть();
	
	Сервер = "otpravka-api.pochta.ru/1.0/tariff";
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
                Новый СертификатКлиентаWindows(),
                Новый СертификатыУдостоверяющихЦентровWindows());  
	с = Новый HTTPСоединение(Сервер,,,,,5,ssl);
	з = Новый HTTPЗапрос();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");

	Заголовки.Вставить("Authorization", "AccessToken "+уч_данные.Токен);
	Заголовки.Вставить("X-User-Authorization", "Basic "+уч_данные.Encoded);
	з.Заголовки = Заголовки;
	
	з.УстановитьТелоИзСтроки(стр_JSON,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	
	имяФайлаОтвета=ПолучитьИмяВременногоФайла("txt");
	Расчет=новый Структура;
	
	Попытка
		стрОтвета=новый Структура;
		HTОтвет=с.ОтправитьДляОбработки(з,имяФайлаОтвета);
		ч_JSON=новый ЧтениеJSON;
		ч_JSON.ОткрытьФайл(имяФайлаОтвета);
		Если HTОтвет.КодСостояния<>503 Тогда
			Расчет=ОбъектJSONВструктуру(ч_JSON);
			Расчет.Вставить("Успешно",Истина);
		Иначе
			Расчет.Вставить("Успешно",Ложь);
		КонецЕсли;
		Расчет.Вставить("ПолученныеДанные",СтоСПОбмен_Общий.ФайлВСтроку(имяФайлаОтвета));
	Исключение
	  Расчет.Вставить("Успешно",Ложь);
	  Расчет.Вставить("ПолученныеДанные",ОписаниеОшибки());
	  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
  КонецПопытки;
  Расчет.Вставить("ОтправленныеДанные",стр_JSON);
  Возврат Расчет;
КонецФункции


Функция ПолучитьИнформациюПоЗаказу(НЗаказа,ЭтоEMS=ложь) Экспорт
	уч_данные=ПолучитьУчетныеДанные(ЭтоEMS);
	
	Сервер = "otpravka-api.pochta.ru/1.0/backlog/"+НЗаказа;
	//Сервер = "otpravka.pochta.ru/document/downloadForms/1255371";
	
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());  
	с = Новый HTTPСоединение(Сервер,,,,,5,ssl);
	з = Новый HTTPЗапрос();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "AccessToken "+уч_данные.Токен);
	Заголовки.Вставить("X-User-Authorization", "Basic "+уч_данные.Encoded);
	
	з.Заголовки = Заголовки;
	имяФайлаОтвета=ПолучитьИмяВременногоФайла("txt");
	стрОтвета=новый Структура;
	
	Попытка
		ответ=с.Получить(з,имяФайлаОтвета);
		строка_Ответа=ответ.ПолучитьТелоКакСтроку();
		ч_JSON=новый ЧтениеJSON;
		ч_JSON.ОткрытьФайл(имяФайлаОтвета);
		стрОтвета=ОбъектJSONВструктуру(ч_JSON);
		стрОтвета.Вставить("КодСостояния",ответ.КодСостояния);
		стрОтвета.Вставить("имяФайлаОтвета",имяФайлаОтвета);
		
		
		Если ответ.КодСостояния=403 Тогда
			ПолученныеДанные="Нарушение доступа";
		ИначеЕсли ответ.КодСостояния=404 Тогда
			ПолученныеДанные="Заказ не найден";
		ИначеЕсли ответ.КодСостояния=500 Тогда
			ПолученныеДанные="Внутренняя ошибка сервиса";
		Конецесли;
		Двоичное=Новый ДвоичныеДанные(имяФайлаОтвета);
		Адрес=ПоместитьВоВременноеХранилище(Двоичное,Новый УникальныйИдентификатор);
		
		
		стрОтвета.Вставить("ПолученныеДанные",СтоСПОбмен_Общий.ФайлВСтроку(имяФайлаОтвета));
		стрОтвета.Вставить("Адрес",Адрес);
		стрОтвета.Вставить("Успешно",Истина);
		
	Исключение
		стрОтвета.Вставить("Успешно",Ложь);
		стрОтвета.Вставить("ПолученныеДанные",ОписаниеОшибки());
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки()+ ИнформацияОбОшибке());
	КонецПопытки;
	стрОтвета.Вставить("ОтправленныеДанные",НЗаказа);
	Возврат стрОтвета;
КонецФункции	




Функция ПолучитьКвитанцию_Ф7П(НомерЗаказа,ЭтоEMS=ложь) Экспорт
	уч_данные=ПолучитьУчетныеДанные(ЭтоEMS);
	
	Сервер = "otpravka-api.pochta.ru/1.0/forms/"+НомерЗаказа+"/f7pdf";
	//Сервер = "otpravka.pochta.ru/document/downloadForms/1255371";
	
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());  
	с = Новый HTTPСоединение(Сервер,,,,,5,ssl);
	з = Новый HTTPЗапрос();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "AccessToken "+уч_данные.Токен);
	Заголовки.Вставить("X-User-Authorization", "Basic "+уч_данные.Encoded);
	
	з.Заголовки = Заголовки;
	имяФайлаОтвета=ПолучитьИмяВременногоФайла("pdf");
	стрОтвета=новый Структура;
	
	Попытка
		ответ=с.Получить(з,имяФайлаОтвета);
		строка_Ответа=ответ.ПолучитьТелоКакСтроку();
		стрОтвета.Вставить("КодСостояния",ответ.КодСостояния);
		стрОтвета.Вставить("имяФайлаОтвета",имяФайлаОтвета);
		
		Если ответ.КодСостояния=403 Тогда
			ПолученныеДанные="Нарушение доступа";
		ИначеЕсли ответ.КодСостояния=404 Тогда
			ПолученныеДанные="Заказ не найден";
		ИначеЕсли ответ.КодСостояния=500 Тогда
			ПолученныеДанные="Внутренняя ошибка сервиса";
		Конецесли;
		Двоичное=Новый ДвоичныеДанные(имяФайлаОтвета);
		Адрес=ПоместитьВоВременноеХранилище(Двоичное,Новый УникальныйИдентификатор);
		
		
		стрОтвета.Вставить("ПолученныеДанные",ПолученныеДанные);
		стрОтвета.Вставить("Адрес",Адрес);
		стрОтвета.Вставить("Успешно",Истина);
		
	Исключение
		стрОтвета.Вставить("Успешно",Ложь);
		стрОтвета.Вставить("ПолученныеДанные",ОписаниеОшибки());
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки()+ ИнформацияОбОшибке());
	КонецПопытки;
	стрОтвета.Вставить("ОтправленныеДанные",НомерЗаказа);
	Возврат стрОтвета;
КонецФункции	




Функция ПодготовкаОтправкаФормы_Ф103(НомерПартии,ОтправлятьПисьмо=Истина,ЭтоEMS=ложь) Экспорт
	уч_данные=ПолучитьУчетныеДанные(ЭтоEMS);
	
	// Вставить содержимое обработчика.
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ", Истина); 
	з_JSON=новый ЗаписьJSON;
	з_JSON.УстановитьСтроку(ПараметрыJSON);
	
	Данные= Новый Соответствие;
	Данные.Вставить("name", 		НомерПартии); 		
	Данные.Вставить("sendEmail ", 	ОтправлятьПисьмо); 	
	
	ЗаписатьJSON(з_JSON,Данные);
	стр_JSON=з_JSON.Закрыть();
	
	Сервер = "otpravka-api.pochta.ru/1.0/batch/"+НомерПартии+"/checkin?sendEmail="+?(ОтправлятьПисьмо,"true","false");
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
                Новый СертификатКлиентаWindows(),
                Новый СертификатыУдостоверяющихЦентровWindows());  
	с = Новый HTTPСоединение(Сервер,,,,,,ssl);
	з = Новый HTTPЗапрос();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");

	Заголовки.Вставить("Authorization", "AccessToken "+уч_данные.Токен);
	Заголовки.Вставить("X-User-Authorization", "Basic "+уч_данные.Encoded);
	з.Заголовки = Заголовки;
	
	з.УстановитьТелоИзСтроки(стр_JSON,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	
	имяФайлаОтвета=ПолучитьИмяВременногоФайла("txt");
	Расчет=новый Структура;
	
	Попытка
		стрОтвета=новый Структура;
		с.ОтправитьДляОбработки(з,имяФайлаОтвета);
		ч_JSON=новый ЧтениеJSON;
		ч_JSON.ОткрытьФайл(имяФайлаОтвета);
		Расчет=ОбъектJSONВструктуру(ч_JSON);
		Расчет.Вставить("ПолученныеДанные",СтоСПОбмен_Общий.ФайлВСтроку(имяФайлаОтвета));
		Расчет.Вставить("Успешно",Истина);
	Исключение
	  Расчет.Вставить("Успешно",Ложь);
	  Расчет.Вставить("ПолученныеДанные",ОписаниеОшибки());
	  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
  КонецПопытки;
  Расчет.Вставить("ОтправленныеДанные",стр_JSON);
	Возврат Расчет;
КонецФункции


Функция ПолучитьКвитанцию_Ф103(НомерПартии,ЭтоEMS=ложь) Экспорт
	уч_данные=ПолучитьУчетныеДанные(ЭтоEMS);
	
	Сервер = "otpravka-api.pochta.ru/1.0/forms/"+НомерПартии+"/f103pdf";
	//Сервер = "otpravka.pochta.ru/document/downloadForms/1255371";
	
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());  
	с = Новый HTTPСоединение(Сервер,,,,,,ssl);
	з = Новый HTTPЗапрос();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "AccessToken "+уч_данные.Токен);
	Заголовки.Вставить("X-User-Authorization", "Basic "+уч_данные.Encoded);
	
	з.Заголовки = Заголовки;
	имяФайлаОтвета=ПолучитьИмяВременногоФайла("pdf");
	стрОтвета=новый Структура;
	
	Попытка
		ответ=с.Получить(з,имяФайлаОтвета);
		строка_Ответа=ответ.ПолучитьТелоКакСтроку();
		стрОтвета.Вставить("КодСостояния",ответ.КодСостояния);
		стрОтвета.Вставить("имяФайлаОтвета",имяФайлаОтвета);
		
		Если ответ.КодСостояния=403 Тогда
			ПолученныеДанные="Нарушение доступа";
		ИначеЕсли ответ.КодСостояния=404 Тогда
			ПолученныеДанные="Заказ не найден";
		ИначеЕсли ответ.КодСостояния=500 Тогда
			ПолученныеДанные="Внутренняя ошибка сервиса";
		Конецесли;
		Двоичное=Новый ДвоичныеДанные(имяФайлаОтвета);
		Адрес=ПоместитьВоВременноеХранилище(Двоичное,Новый УникальныйИдентификатор);
		
		
		стрОтвета.Вставить("ПолученныеДанные",ПолученныеДанные);
		стрОтвета.Вставить("Адрес",Адрес);
		стрОтвета.Вставить("Успешно",Истина);
		
	Исключение
		стрОтвета.Вставить("Успешно",Ложь);
		стрОтвета.Вставить("ПолученныеДанные",ОписаниеОшибки());
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки()+ ИнформацияОбОшибке());
	КонецПопытки;
	стрОтвета.Вставить("ОтправленныеДанные",НомерПартии);
	Возврат стрОтвета;
КонецФункции	



Функция ПолучитьПечатныеФормыДоПартии(НомерЗаказа,ЭтоEMS=ложь) Экспорт
	уч_данные=ПолучитьУчетныеДанные(ЭтоEMS);
	
	ДатаСдачиСтрокой=Формат(КонецДня(ТекущаяДата())+1,"ДФ=yyyy-MM-dd");
		
	Сервер = "otpravka-api.pochta.ru/1.0/forms/backlog/"+НомерЗаказа+"/forms"+"?sending-date="+ДатаСдачиСтрокой;;
	//Сервер = "otpravka-api.pochta.ru/1.0/forms/"+НомерЗаказа+"/forms"+"?sending-date="+ДатаСдачиСтрокой;;	
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());  
	с = Новый HTTPСоединение(Сервер,,,,,,ssl);
	з = Новый HTTPЗапрос();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "AccessToken "+уч_данные.Токен);
	Заголовки.Вставить("X-User-Authorization", "Basic "+уч_данные.Encoded);
	
	з.Заголовки = Заголовки;
	имяФайлаОтвета=ПолучитьИмяВременногоФайла("pdf");
	стрОтвета=новый Структура;
	
	Попытка
		ответ=с.Получить(з,имяФайлаОтвета);
		
		стрОтвета.Вставить("КодСостояния",ответ.КодСостояния);
		стрОтвета.Вставить("имяФайлаОтвета",имяФайлаОтвета);
		
		Если ответ.КодСостояния=403 Тогда
			ПолученныеДанные="Нарушение доступа";
		ИначеЕсли ответ.КодСостояния=404 Тогда
			ПолученныеДанные="Заказ не найден";
		ИначеЕсли ответ.КодСостояния=500 Тогда
			ПолученныеДанные="Внутренняя ошибка сервиса";
		Конецесли;
		Двоичное=Новый ДвоичныеДанные(имяФайлаОтвета);
		Адрес=ПоместитьВоВременноеХранилище(Двоичное,Новый УникальныйИдентификатор);
		
		стрОтвета.Вставить("ПолученныеДанные",ПолученныеДанные);
		стрОтвета.Вставить("Адрес",Адрес);
		стрОтвета.Вставить("Успешно",Истина);
		
		
	Исключение
		стрОтвета.Вставить("Успешно",Ложь);
		стрОтвета.Вставить("ПолученныеДанные",ОписаниеОшибки());
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки()+ ИнформацияОбОшибке());
	КонецПопытки;
	стрОтвета.Вставить("ОтправленныеДанные",НомерЗаказа);
	Возврат стрОтвета;
КонецФункции	





Функция СформироватьПартию(МассивЗаказов,ДатаСдачи,ЭтоEMS=ложь) Экспорт
	уч_данные=ПолучитьУчетныеДанные(ЭтоEMS);
	
	
	// Вставить содержимое обработчика.
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ", Истина); 
	з_JSON=новый ЗаписьJSON;
	з_JSON.УстановитьСтроку(ПараметрыJSON);	
	
	ЗаписатьJSON(з_JSON,МассивЗаказов);
	стр_JSON=з_JSON.Закрыть();
	
	ДатаСдачиСтрокой=Формат(ДатаСдачи,"ДФ=yyyy-MM-dd");
	Сервер = "otpravka-api.pochta.ru/1.0/user/shipment"+"?sending-date="+ДатаСдачиСтрокой;

	
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());  
	с = Новый HTTPСоединение(Сервер,,,,,5,ssl);
	з = Новый HTTPЗапрос();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "AccessToken "+уч_данные.Токен);
	Заголовки.Вставить("X-User-Authorization", "Basic "+уч_данные.Encoded);
	
	з.Заголовки = Заголовки;
	
	з.УстановитьТелоИзСтроки(стр_JSON,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	
	имяФайлаОтвета=ПолучитьИмяВременногоФайла("txt");
	стрОтвета=новый Структура;
	Попытка
		ответ=с.ОтправитьДляОбработки(з,имяФайлаОтвета);
		//имяФайлаОтвета="C:\2\Партии.txt";
		строка_Ответа=СтоСПОбмен_Общий.ФайлВСтроку(имяФайлаОтвета);
		ч_JSON=новый ЧтениеJSON;
		ч_JSON.УстановитьСтроку(строка_Ответа);
		
		стрОтвета=ОбъектJSONВструктуру(ч_JSON);
		//СформироватьДерево(ч_JSON, стрОтвета);

		стрОтвета.Вставить("ПолученныеДанные",строка_Ответа);
		стрОтвета.Вставить("Успешно",Истина);
		//Для каждого стр из стрОтвета.batches Цикл
		//	стрОтвета_ОтправкиФормыф103=ПодготовкаОтправкаФормы_Ф103(Формат(стр.batchname,"ЧГ=0"));
		//КонецЦикла
	Исключение
		стрОтвета.Вставить("Успешно",Ложь);
		стрОтвета.Вставить("ПолученныеДанные",ОписаниеОшибки());
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки()+ ИнформацияОбОшибке());
	КонецПопытки;
	стрОтвета.Вставить("ОтправленныеДанные",стр_JSON);
	Возврат стрОтвета;
	
	
	
КонецФункции	


Функция ПолучитьПакетДокументов(НомерПартии,ЭтоEMS=ложь) Экспорт
	уч_данные=ПолучитьУчетныеДанные(ЭтоEMS);
	
	Сервер = "otpravka-api.pochta.ru/1.0/forms/"+НомерПартии+"/zip-all";
	//Сервер = "otpravka.pochta.ru/document/downloadForms/1255371";
	
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());  
	с = Новый HTTPСоединение(Сервер,,,,,,ssl);
	з = Новый HTTPЗапрос();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "AccessToken "+уч_данные.Токен);
	Заголовки.Вставить("X-User-Authorization", "Basic "+уч_данные.Encoded);
	
	з.Заголовки = Заголовки;
	имяФайлаОтвета=ПолучитьИмяВременногоФайла("zip");
	стрОтвета=новый Структура;
	
	Попытка
		ответ=с.Получить(з,имяФайлаОтвета);
		
		стрОтвета.Вставить("КодСостояния",ответ.КодСостояния);
		стрОтвета.Вставить("имяФайлаОтвета",имяФайлаОтвета);
		
		Если ответ.КодСостояния=403 Тогда
			ПолученныеДанные="Нарушение доступа";
		ИначеЕсли ответ.КодСостояния=404 Тогда
			ПолученныеДанные="Заказ не найден";
		ИначеЕсли ответ.КодСостояния=500 Тогда
			ПолученныеДанные="Внутренняя ошибка сервиса";
		Конецесли;
		Двоичное=Новый ДвоичныеДанные(имяФайлаОтвета);
		Адрес=ПоместитьВоВременноеХранилище(Двоичное,Новый УникальныйИдентификатор);
		
		стрОтвета.Вставить("ПолученныеДанные",ПолученныеДанные);
		стрОтвета.Вставить("Адрес",Адрес);
		стрОтвета.Вставить("Успешно",Истина);
		
		
	Исключение
		стрОтвета.Вставить("Успешно",Ложь);
		стрОтвета.Вставить("ПолученныеДанные",ОписаниеОшибки());
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки()+ ИнформацияОбОшибке());
	КонецПопытки;
	стрОтвета.Вставить("ОтправленныеДанные",НомерПартии);
	Возврат стрОтвета;
КонецФункции	


Функция ПолучитьУчетныеДанные(ЭтоEMS)
	Если не ЭтоEMS Тогда 
		Логин	= Константы.ЛогинПР.Получить();
		Пароль	= Константы.ПарольПР.Получить();
		Токен	= Константы.ТокенПочтаРоссии.Получить()
    Иначе
		ЛогинEMS= Константы.ЛогинEMS.Получить();
		Если ЛогинEMS<>"" Тогда
			Логин	= ЛогинEMS;
			Пароль	= Константы.ПарольEMS.Получить();
			Токен	= Константы.ТокенEMS.Получить()
		Конецесли;
	Конецесли;
		
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	Запись 	= Новый ЗаписьТекста(ВременныйФайл, КодировкаТекста.UTF8,"",ложь,"");
	Запись.Записать(Логин+":"+Пароль);
	Запись.Закрыть();
	ДвДанные 	= Новый ДвоичныеДанные(ВременныйФайл);
	Encoded 	= Base64Строка(ДвДанные);
	Encoded 	= СтрЗаменить(Encoded,"77u/","");
	Возврат новый Структура("Логин, Пароль, Токен, Encoded",Логин, Пароль, Токен, Encoded);
КонецФункции	




#Область Вспомогательные


Функция ОбъектJSONВМассив(ч_JSON) Экспорт
	массОтвета=Новый  Массив();
	Пока ч_JSON.Прочитать()  Цикл
		Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта Тогда
				Продолжить;				
		КонецЕсли;		
		Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива Тогда
			Продолжить;
		КонецЕсли;
		Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта Тогда
			стрОтвета=Новый  Структура;
			массОтвета.Добавить(стрОтвета);			
			Продолжить;
		КонецЕсли;
		Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.КонецМассива Тогда
			Возврат массОтвета;							
		КонецЕсли;
		
		Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСв=СтрЗаменить(ч_JSON.ТекущееЗначение,"-","");
			ч_JSON.Прочитать();
			Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта Тогда
				ЗначСв=ОбъектJSONВструктуру(ч_JSON);
			Иначе
				Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива Тогда			
					ЗначСв=новый Массив ;
					ч_JSON.Прочитать();
					Пока ч_JSON.ТипТекущегоЗначения<>ТипЗначенияJSON.КонецМассива Цикл
						Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта Тогда //Массив объектов ()
							ЗначСв.Добавить(ОбъектJSONВструктуру(ч_JSON));
						Иначе			//Массив элементов
							ЗначСв.Добавить(ч_JSON.ТекущееЗначение);
						КонецЕсли;		
						ч_JSON.Прочитать();
					КОнецЦикла;	
					
				Иначе
					ЗначСв=ч_JSON.ТекущееЗначение;
				КонецЕсли;
			КонецЕсли;
			стрОтвета.Вставить(ИмяСв,ЗначСв);
		КонецЕсли;
	
	КОнецЦикла;
	Возврат массОтвета;
КонецФункции



Функция ОбъектJSONВструктуру(ч_JSON) Экспорт
	стрОтвета=Новый  Структура;	
	Пока ч_JSON.Прочитать()  Цикл
		Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта Тогда
			Возврат стрОтвета;			
		КонецЕсли;		
		Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива Тогда			
			ч_JSON.Прочитать();
		КонецЕсли;
		Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСв=СтрЗаменить(ч_JSON.ТекущееЗначение,"-","");
			ч_JSON.Прочитать();
			Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта Тогда
				ЗначСв=ОбъектJSONВструктуру(ч_JSON);
			Иначе
				Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива Тогда			
					ЗначСв=новый Массив ;
					ч_JSON.Прочитать();
					Пока ч_JSON.ТипТекущегоЗначения<>ТипЗначенияJSON.КонецМассива Цикл
						Если ч_JSON.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта Тогда //Массив объектов ()
							ЗначСв.Добавить(ОбъектJSONВструктуру(ч_JSON));
						Иначе			//Массив элементов
							ЗначСв.Добавить(ч_JSON.ТекущееЗначение);
						КонецЕсли;		
						ч_JSON.Прочитать();
					КОнецЦикла;	
					
				Иначе
					ЗначСв=ч_JSON.ТекущееЗначение;
				КонецЕсли;
			КонецЕсли;
			стрОтвета.Вставить(ИмяСв,ЗначСв);
		КонецЕсли;
	
	КОнецЦикла;
	Возврат стрОтвета;
КонецФункции



Функция ПолучитьЗначениеПеречисления(Переч)
	
	Если ТипЗнч(Переч) = Тип("Строка") Тогда возврат переч КонецЕсли;
	ИмяМенеджера=Метаданные.Перечисления[Переч.Метаданные().Имя].Имя;
	Менедж=Перечисления[ИмяМенеджера];
	
	Возврат Метаданные.Перечисления[Переч.Метаданные().Имя].ЗначенияПеречисления[Менедж.Индекс(Переч)].Имя;
	
КонецФункции	


Процедура СформироватьДерево(ЧтениеJSON, Дерево)
    
    ИмяСвойства = Неопределено;
    
    Пока ЧтениеJSON.Прочитать() Цикл
        TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
        
        Если TипJSON = ТипЗначенияJSON.НачалоОбъекта 
        ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
            НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
            
            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
                Дерево.Добавить(НовыйОбъект);
            ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") И ЗначениеЗаполнено(ИмяСвойства) Тогда
                Дерево.Вставить(ИмяСвойства, НовыйОбъект);
            КонецЕсли;
            
            СформироватьДерево(ЧтениеJSON, НовыйОбъект);
            
            Если Дерево = Неопределено Тогда
                Дерево = НовыйОбъект;
            КонецЕсли;
        ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
            ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
        ИначеЕсли TипJSON = ТипЗначенияJSON.Число 
        ИЛИ TипJSON = ТипЗначенияJSON.Строка 
        ИЛИ TипJSON = ТипЗначенияJSON.Булево 
        ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
                Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
            ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") Тогда
                Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
            КонецЕсли;
        Иначе
            Возврат;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

#КонецОбласти
