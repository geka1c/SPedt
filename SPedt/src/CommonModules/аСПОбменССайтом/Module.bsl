

#Если не ВебКлиент Тогда
//Названия колонок в тз должны совподать с названием свойств элемента списка в схеме XDTO

Функция СформироватьОбъектXDTO(НаименованиеСписка,НаименованиеЭлемента,тз) экспорт
	типСписок = ФабрикаXDTO.Тип("http://www.100sp.ru/XMLSchema-instance" , НаименованиеСписка);
	обСписок = ФабрикаXDTO.Создать(типСписок);
	
    типЭлемент = ФабрикаXDTO.Тип("http://www.100sp.ru/XMLSchema-instance", НаименованиеЭлемента);

	для каждого стр из тз  Цикл
		обЭлемент = ФабрикаXDTO.Создать(типЭлемент);
		Для каждого поле из типЭлемент.Свойства Цикл
			обЭлемент[поле.имя]=Строка(стр[поле.имя]);	
		КонецЦикла;	
		обСписок[НаименованиеЭлемента].Добавить(обЭлемент);
	КонецЦикла;
	Возврат обСписок;
КонецФункции

Функция СформироватьФайлВыгрузкиXDTOПриходы(Приходная,ФайлВыгрузки) Экспорт

	типСписок = ФабрикаXDTO.Тип("http://www.100sp.ru/XMLSchema-instance" , "distributors");
	обСписок = ФабрикаXDTO.Создать(типСписок);
	
	
	тзПриход=аСПОбменССайтомСервер.ВыбратьПриходXDTO(Приходная);
	обПриходы=СформироватьОбъектXDTO("incomes","income",тзПриход);
	обСписок["incomes"].Добавить(обПриходы);
		Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ФайлВыгрузки);
	//Запись.УстановитьСтроку(); // запись в строку

	ФабрикаXDTO.ЗаписатьXML(Запись, обСписок);

	ДанныеXML = Запись.Закрыть(); // документ готов!

	 Возврат ДанныеXML;

	
	
	
КонецФункции	



Функция СформироватьОбъектXDTOВозвраты(ВозвратСсылка) экспорт
	типВозвраты = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema-instance" , "returns");
	обВозвраты = ФабрикаXDTO.Создать(типВозвраты);
	тз=аСПОбменССайтомСервер.ВыбратьВозвраты(ВозвратСсылка);
	для каждого стр из тз  Цикл
		типПринятаяЗакупка = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema-instance", "return");
		обПринятаяЗакупка = ФабрикаXDTO.Создать(ВозвратСсылка);
		
		обПринятаяЗакупка.pid 			= стр.pid;
		обПринятаяЗакупка.paid 			= стр.paid;
		обПринятаяЗакупка.date 			= стр.date;
		обПринятаяЗакупка.uid 			= стр.uid;
		обПринятаяЗакупка.orgid 		= стр.orgid;
		обПринятаяЗакупка.sizedCategory = стр.sizedCategory;
		обПринятаяЗакупка.arrivalNumber = стр.arrivalNumber;
		обПринятаяЗакупка.sizeNumber 	= стр.sizeNumber;
		

		обВозвраты.income.Добавить(обПринятаяЗакупка);
		
	КонецЦикла;
	
	
	
	
	
	// А теперь, запись в поток XML
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); // запись в строку

	ФабрикаXDTO.ЗаписатьXML(Запись, обВозвраты);
	ДанныеXML = Запись.Закрыть(); // документ готов!
	
	
	
КонецФункции	




 &НаКлиенте
Процедура ДобавитьЭлементXML(ЗаписьXML,Название,Значение)
	ЗаписьXML.ЗаписатьНачалоЭлемента(Название);
	ЗаписьXML.ЗаписатьТекст(Строка(Значение));
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры // ДобавитьЭлементXML()

Функция СформироватьОбъектXDTOСписокСвойств(НаименованиеСписка,НаименованиеЭлемента,тз) экспорт
	типСписок = ФабрикаXDTO.Тип("http://www.100sp.ru/XMLSchema-instance" , НаименованиеСписка);
	обСписок = ФабрикаXDTO.Создать(типСписок);
	


	для каждого стр из тз  Цикл
		обСписок[НаименованиеЭлемента].Добавить(стр[НаименованиеЭлемента])
	КонецЦикла;
	Возврат обСписок;
КонецФункции



//Процедура АнализОтветаССайта(ДвигатьДатуВыгрузки=ложь) экспорт
//	мас_incomes=новый СписокЗначений;
//	мас_return =новый СписокЗначений;
//	мас_deliveries=новый СписокЗначений;
//	мас_card=новый СписокЗначений;

//	
//	ЧтениеXML = Новый ЧтениеXML;
//	ЧтениеXML.ОткрытьФайл(КаталогВременныхФайлов() + "ansv.txt");
//	
//    СЗ=новый СписокЗначений;
//	
//	
//	

//	Показывать=Ложь;
//	Попытка
//		Пока ЧтениеXML.Прочитать() Цикл
//			Если  ЧтениеXML.ЛокальноеИмя="auth"  и ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
//				стр_auth=новый структура("result,message");
//				Пока не (ЧтениеXML.ЛокальноеИмя="auth"  и ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента) Цикл	
//					ЧтениеXML.Прочитать();
//					Если ЧтениеXML.ЛокальноеИмя="#text" Тогда продолжить КонецЕсли;
//					Если стр_auth.Свойство(ЧтениеXML.ЛокальноеИмя)  и ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
//						элементСтруктуры=ЧтениеXML.ЛокальноеИмя;
//						ЧтениеXML.Прочитать();
//						Если ЧтениеXML.ТипУзла=ТипУзлаXML.Текст Тогда
//							стр_auth[элементСтруктуры]=ЧтениеXML.Значение;
//						Иначе
//							стр_auth[элементСтруктуры]=Неопределено;
//						КонецЕсли;
//						ЧтениеXML.Прочитать();
//					КонецЕсли;
//				Конеццикла;
//				Если стр_auth.result="error"  тогда
//					Предупреждение(стр_auth.message,,"Проблемы авторизации");
//					возврат;
//				КонецЕсли;
//			ИначеЕсли  ЧтениеXML.ЛокальноеИмя="income"  и ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
//				стр_income=новый структура("pid,date,orgid,uid,result,message");
//				стр_income["pid"]	=ЧтениеXML.ЗначениеАтрибута("pid");
//				стр_income["date"]	=ЧтениеXML.ЗначениеАтрибута("date");
//				стр_income["orgid"]	=ЧтениеXML.ЗначениеАтрибута("orgid");
//				стр_income["uid"]	=ЧтениеXML.ЗначениеАтрибута("uid");
//				Пока не (ЧтениеXML.ЛокальноеИмя="income"  и ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента) Цикл	
//					ЧтениеXML.Прочитать();
//					Если ЧтениеXML.ЛокальноеИмя="#text" Тогда продолжить КонецЕсли;
//					Если стр_income.Свойство(ЧтениеXML.ЛокальноеИмя)  и ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
//						элементСтруктуры=ЧтениеXML.ЛокальноеИмя;
//						ЧтениеXML.Прочитать();
//						Если ЧтениеXML.ТипУзла=ТипУзлаXML.Текст Тогда
//							стр_income[элементСтруктуры]=ЧтениеXML.Значение;
//						Иначе
//							стр_income[элементСтруктуры]=Неопределено;
//						КонецЕсли;
//						ЧтениеXML.Прочитать();
//					КонецЕсли;
//				Конеццикла;
//				мас_incomes.Добавить(стр_income);
//				
//			ИначеЕсли  ЧтениеXML.ЛокальноеИмя="return"  и ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
//				стр_return=новый структура("pid,date,orgid,uid,result,message");
//				стр_return["pid"]	=ЧтениеXML.ЗначениеАтрибута("pid");
//				стр_return["date"]	=ЧтениеXML.ЗначениеАтрибута("date");
//				стр_return["orgid"]	=ЧтениеXML.ЗначениеАтрибута("orgid");
//				стр_return["uid"]	=ЧтениеXML.ЗначениеАтрибута("uid");
//				
//				Пока не (ЧтениеXML.ЛокальноеИмя="return"  и ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента) Цикл	
//					ЧтениеXML.Прочитать();
//					Если ЧтениеXML.ЛокальноеИмя="#text" Тогда продолжить КонецЕсли;
//					Если стр_return.Свойство(ЧтениеXML.ЛокальноеИмя)  и ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
//						элементСтруктуры=ЧтениеXML.ЛокальноеИмя;
//						ЧтениеXML.Прочитать();
//						Если ЧтениеXML.ТипУзла=ТипУзлаXML.Текст Тогда
//							стр_return[элементСтруктуры]=ЧтениеXML.Значение;
//						Иначе
//							стр_return[элементСтруктуры]=Неопределено;
//						КонецЕсли;
//						ЧтениеXML.Прочитать();
//					КонецЕсли;
//				Конеццикла;
//				мас_return.Добавить(стр_return);
//				
//			ИначеЕсли  ЧтениеXML.ЛокальноеИмя="delivery"  и ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
//				стр_deliveries=новый структура("pid,date,orgid,uid,result,message");
//				стр_deliveries["pid"]	=ЧтениеXML.ЗначениеАтрибута("pid");
//				стр_deliveries["date"]	=ЧтениеXML.ЗначениеАтрибута("date");
//				стр_deliveries["orgid"]	=ЧтениеXML.ЗначениеАтрибута("orgid");
//				стр_deliveries["uid"]	=ЧтениеXML.ЗначениеАтрибута("uid");
//				
//				Пока не (ЧтениеXML.ЛокальноеИмя="delivery"  и ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента) Цикл	
//					ЧтениеXML.Прочитать();
//					Если ЧтениеXML.ЛокальноеИмя="#text" Тогда продолжить КонецЕсли;
//					Если стр_deliveries.Свойство(ЧтениеXML.ЛокальноеИмя)  и ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
//						элементСтруктуры=ЧтениеXML.ЛокальноеИмя;
//						ЧтениеXML.Прочитать();
//						Если ЧтениеXML.ТипУзла=ТипУзлаXML.Текст Тогда
//							стр_deliveries[элементСтруктуры]=ЧтениеXML.Значение;
//						Иначе
//							стр_deliveries[элементСтруктуры]=Неопределено;
//						КонецЕсли;
//						ЧтениеXML.Прочитать();
//					КонецЕсли;
//				Конеццикла;
//				мас_deliveries.Добавить(стр_deliveries);
//				
//			ИначеЕсли  ЧтениеXML.ЛокальноеИмя="card"  и ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
//				стр_card=новый структура("id,uid,status,modified,result,message");
//				стр_card["id"]	=ЧтениеXML.ЗначениеАтрибута("id");
//				стр_card["uid"]	=ЧтениеXML.ЗначениеАтрибута("uid");
//				
//				Пока не (ЧтениеXML.ЛокальноеИмя="card"  и ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента) Цикл	
//					ЧтениеXML.Прочитать();
//					Если ЧтениеXML.ЛокальноеИмя="#text" Тогда продолжить КонецЕсли;
//					Если стр_card.Свойство(ЧтениеXML.ЛокальноеИмя)  и ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
//						элементСтруктуры=ЧтениеXML.ЛокальноеИмя;
//						ЧтениеXML.Прочитать();
//						Если ЧтениеXML.ТипУзла=ТипУзлаXML.Текст Тогда
//							стр_card[элементСтруктуры]=ЧтениеXML.Значение;
//						Иначе
//							стр_card[элементСтруктуры]=Неопределено;
//						КонецЕсли;
//						ЧтениеXML.Прочитать();
//					КонецЕсли;
//				Конеццикла;
//				мас_card.Добавить(стр_card);
//				
//			КонецЕсли;	
//			
//			
//		КонецЦикла;
//		Если ДвигатьДатуВыгрузки Тогда
//			аСПОбменССайтомСервер.УстановитьДатуВыгрузки();
//		КонецЕсли;
//	Исключение
//	    Сообщение = Новый СообщениеПользователю();
//	    Текст = "Проблема при выгрузке на сайт! Проверьте интернет соединение.";
//	    Сообщение.Текст =Текст;
//	    Сообщение.Сообщить();
//	КонецПопытки;

//	 //   УдалитьФайлы(КаталогВременныхФайлов() + "ansv.txt");
// Если аСПНаСервере.ПоказыватьАнализОтвета() Тогда
//	 Форма= ПолучитьФорму("ОбщаяФорма.АнализОтвета");
//	 Форма.Заголовок="Анализ общей выгрузки";
//	 
//	 Форма.СЗ_Приходы=мас_incomes;
//	 Форма.СЗ_Возвраты =мас_return;
//	 Форма.СЗ_Расходы=мас_deliveries;
//	 Форма.СЗ_Карты=мас_card;
//	 Форма.Открыть();
// КонецЕсли
//КонецПроцедуры // ()

Функция СформироватьСтроку(Файл) экспорт
	//Получаю данные из файла     
	ТекстовыйФайл = Файл;
	//Создаю текстовый документ
	ПотокЧтенияСтрок = Новый ТекстовыйДокумент;
	//Читаю файл
	Попытка
		ПотокЧтенияСтрок.Прочитать(ТекстовыйФайл);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выбранный файл не прочитан!";
		Сообщение.Сообщить();
	КонецПопытки;
	
	//Получаю количество записей в файле
	КоличествоСтрок = ПотокЧтенияСтрок.КоличествоСтрок();
	
	ИтоговаяСтрока = "";
	
	//В каждой строке долбавляю номер в массив
	Для Строка = 1 По КоличествоСтрок Цикл
		СтрокаИзФайла = ПотокЧтенияСтрок.ПолучитьСтроку(Строка);
		ИтоговаяСтрока=ИтоговаяСтрока+СтрокаИзФайла ;
	КонецЦикла;
	
	Возврат ИтоговаяСтрока;
КонецФункции



 


/////////  ВЫГРУЗКА


Функция СформироватьФайлВыгрузкиXDTOold(ФайлВыгрузки) Экспорт
	
	типСписок = ФабрикаXDTO.Тип("http://www.100sp.ru/XMLSchema-instance" , "distributors");
	обСписок = ФабрикаXDTO.Создать(типСписок);
	
	
	тзПриход=аСПОбменССайтомСервер.ВыбратьПриходXDTO();
	обПриходы=СформироватьОбъектXDTO("incomes","income",тзПриход);
	обСписок["incomes"].Добавить(обПриходы);
	
	
	тзВозвраты=аСПОбменССайтомСервер.ВыбратьВозвратыXDTO();
	обВозвраты=СформироватьОбъектXDTO("returns","return",тзВозвраты);
	обСписок["returns"].Добавить(обВозвраты);


	тзРасходы=аСПОбменССайтомСервер.ВыбратьРасходXDTO();
	обРасходы=СформироватьОбъектXDTO("deliveries","delivery",тзРасходы);
	обСписок["deliveries"].Добавить(обРасходы);

	
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ФайлВыгрузки);
	//Запись.УстановитьСтроку(); // запись в строку

	ФабрикаXDTO.ЗаписатьXML(Запись, обСписок);

	ДанныеXML = Запись.Закрыть(); // документ готов!
	Возврат ДанныеXML;
КонецФункции




Функция СформироватьФайлВыгрузкиXDTO(ИмяФайлаВыгрузки,Приходная=неопределено,ВозвратСсылка=Неопределено,Расходная=Неопределено,Карта=Неопределено) Экспорт
    ФайлВыгрузки = Новый ЗаписьТекста(ИмяФайлаВыгрузки, КодировкаТекста.UTF8, Символы.ПС, ЛОЖЬ);
	СтрокаXML= аСПОбменССайтомСервер.СформироватьСтрокуXDTO(Приходная,ВозвратСсылка,Расходная,Карта);	
	ФайлВыгрузки.ЗаписатьСтроку(СтрокаXML);
	ФайлВыгрузки.Закрыть();
КонецФункции




	



/////////     ЗАГРУЗКА


//Функция СформироватьФайлЗагрузкиXDTO(ФайлВыгрузки,ДатаУчастники,ДатаПокупки,ДатаКарты) Экспорт
//	ЗаписьXML=новый ЗаписьXML;
//	ЗаписьXML.ОткрытьФайл(ФайлВыгрузки);
//	
//	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
//	
//	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
//	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd","http://www.w3.org/2001/XMLSchema");
//	
//	
//	
//	
//	ЗаписьXML.ЗаписатьНачалоЭлемента("dataByDates");
//	
//	ДобавитьЭлементXML(ЗаписьXML,"users",ДатаУчастники);         
//	ДобавитьЭлементXML(ЗаписьXML,"purchases",ДатаПокупки);     	
//	ДобавитьЭлементXML(ЗаписьXML,"cards",ДатаКарты);
//	
//	ЗаписьXML.ЗаписатьКонецЭлемента();
//	
//	
//	
//	
//	ЗаписьXML.ЗаписатьКонецЭлемента();
//	
//	ЗаписьXML.Закрыть();
//КонецФункции


Функция СформироватьФайлЗагрузкиПоЗапросуXDTO(ФайлВыгрузки,знач колПокупки,знач колУчастники,знач колКарты) Экспорт
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ФайлВыгрузки);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	
	
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd","http://www.w3.org/2001/XMLSchema");
	
	Если ЗначениеЗаполнено(колУчастники) и колУчастники.Количество()>0 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("users");
		Для каждого стрУчастник из колУчастники Цикл
			ДобавитьЭлементXML(ЗаписьXML,"user",СтрЗаменить(стрУчастник.user," ",""));         
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(колПокупки) и колПокупки.Количество()>0 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("purchases");
		Для каждого стрПокупка из колПокупки Цикл
			ДобавитьЭлементXML(ЗаписьXML,"purchase",СтрЗаменить(стрПокупка.purchase," ",""));         
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(колКарты) и колКарты.Количество()>0 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("cards");
		Для каждого стрКарта из колКарты Цикл
			ДобавитьЭлементXML(ЗаписьXML,"card",СтрЗаменить(стрКарта.card," ",""));         
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();	
	
	
	//типСписок = ФабрикаXDTO.Тип("http://www.100sp.ru/XMLSchema-instance" , "distributors");
	//обСписок = ФабрикаXDTO.Создать(типСписок);
	//
	//
	//табзУчастники=аСПОбменССайтомСервер.ИзКолекцииВтз(колУчастники);

	//обСписок.users=СформироватьОбъектXDTOСписокСвойств("users","user",табзУчастники);
	//
	//табзПокупки=аСПОбменССайтомСервер.ИзКолекцииВтз(колПокупки);
	//
	//обСписок.purchases=СформироватьОбъектXDTOСписокСвойств("purchases","purchase",табзПокупки);


	//Запись = Новый ЗаписьXML;
	//Запись.ОткрытьФайл(ФайлВыгрузки);
	//												 
	//ФабрикаXDTO.ЗаписатьXML(Запись, обСписок);

	//ДанныеXML = Запись.Закрыть(); // документ готов!
	//Возврат ДанныеXML;
КонецФункции
#КонецЕсли


