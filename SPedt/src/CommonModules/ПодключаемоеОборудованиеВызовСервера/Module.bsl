
#Область ПроцедурыИФункцииРаботыСШтрихкодами

// Определить тип штрихкода по значению.
//
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкода = ПланыВидовХарактеристик._ДемоТипыШтрихкодов.ПустаяСсылка();
	ТипШтрихкодаВрем = МенеджерОборудованияВызовСервера.ОпределитьТипШтрихкода(Штрихкод);
	
	Если ТипШтрихкодаВрем = "EAN8" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик._ДемоТипыШтрихкодов.EAN8;
	ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик._ДемоТипыШтрихкодов.EAN13;
	ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик._ДемоТипыШтрихкодов.EAN128;
	ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик._ДемоТипыШтрихкодов.CODE39;
	ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
		ТипШтрихкода = ПланыВидовХарактеристик._ДемоТипыШтрихкодов.CODE128;
	КонецЕсли;
	
	Возврат ТипШтрихкода;
	
КонецФункции

// Функция возвращает результат поиска по штрихкоду в справочнике Номенклатура.
//
// Параметры:
// ШКод - Строка - проверяемый штрихкод.
// ТольКод - Булево - признак изменения текста запроса.
//
// Возвращаемое значение зависит от входного параметра ТолькоКод:
//
//   ТолькоКод = Ложь:
//    ТаблицаЗначений - колонки: Номенклатура, Цена, ЕдиницаИзмерения, Весовой.
//
//   ТолькоКод = Истина
//    ТаблицаЗначений - колонки: Код.
//
Функция ПоискПоШтрихкоду(ШКод, ТолькоКод = Ложь) Экспорт
	
	ТипШК = ОпределитьТипШтрихкода(ШКод);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_ДемоШтрихкоды.Владелец КАК _ДемоНоменклатура,
	|	СпрНоменклатура.Цена,
	|	СпрНоменклатура.ЕдиницаИзмерения,
	|	СпрНоменклатура.Весовой,
	|	СпрНоменклатура.Характеристика,
	|	СпрНоменклатура.СтавкаНДС
	|ИЗ
	|	Справочник._ДемоНоменклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений._ДемоШтрихкоды КАК _ДемоШтрихкоды
	|		ПО (_ДемоШтрихкоды.Владелец.Ссылка = СпрНоменклатура.Ссылка)
	|ГДЕ
	|	_ДемоШтрихкоды.ТипШтрихкода = &ТипШК
	|	И _ДемоШтрихкоды.Штрихкод = &ШКод";
	
	Если ТолькоКод Тогда
		ЗаменяемыйТекст = "
		|	_ДемоШтрихкоды.Владелец КАК _ДемоНоменклатура,
		|	СпрНоменклатура.Цена,
		|	СпрНоменклатура.ЕдиницаИзмерения,
		|	СпрНоменклатура.Весовой,
		|	СпрНоменклатура.Характеристика,
		|	СпрНоменклатура.СтавкаНДС";
		ТекстЗамены = "
		|	СпрНоменклатура.Код";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипШК", ТипШК);
	Запрос.УстановитьПараметр("ШКод", ШКод);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции

// Функция возвращает результат проверки полученного штрихкода на предмет уникальности в информационной базе.
//
// Параметры:
// ШКод - Строка - проверяемый штрихкод.
// ТипШК - ПланВидовХарактеристикСсылка.ТипыШтрихкодов - тип штрихкода.
//
// ВозвращаемоеЗначение:
// Булево - результат проверки.
//
Функция ПроверитьУникальностьШтрихкода(ШКод, ТипШК = Неопределено) Экспорт
	
	Уникальность = Истина;
	Если ТипШК = Неопределено Тогда
		ТипШК = ОпределитьТипШтрихкода(ШКод);
	КонецЕсли;
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	| _ДемоШтрихкоды.Штрихкод КАК Штрихкод
	|ИЗ РегистрСведений._ДемоШтрихкоды КАК _ДемоШтрихкоды
	|ГДЕ _ДемоШтрихкоды.Штрихкод = &ШКод
	|И _ДемоШтрихкоды.ТипШтрихкода = &ТипШК";
	
	Запрос.УстановитьПараметр("ШКод", ШКод);
	Запрос.УстановитьПараметр("ТипШК", ТипШК);
	
	Если Запрос.Выполнить().Выгрузить().Количество() Тогда
		Уникальность = Ложь;
	КонецЕсли;
	
	Возврат Уникальность;
	
КонецФункции

// Функция возвращает результат поиска по регистру сведений Штрихкоды.
//
// Параметры:
// ТекКод - Строка - штрихкод,по которуму производится поиск.
//
// Возвращаемое значение зависит от результат запроса:
//
//   Штрихкод найден:
//    Структура - ключи структуры: Владелец, Штрихкод, ТипШтрихкода.
//
//   Штрихкод НЕ найден:
//    Структура - ключи структуры: Штрихкод, ТипШтрихкода.
//
Функция ПоискПоРегиструСведенийШтрихкоды(ТекКод) Экспорт
	
	ТипШтрихкода = ОпределитьТипШтрихкода(ТекКод);
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_ДемоШтрихкоды.Владелец КАК Владелец
	|ИЗ
	|	РегистрСведений._ДемоШтрихкоды КАК _ДемоШтрихкоды
	|ГДЕ
	|	_ДемоШтрихкоды.Штрихкод = &Штрихкод
	|	И _ДемоШтрихкоды.ТипШтрихкода = &ТипШтрихкода";
	
	Запрос.УстановитьПараметр("Штрихкод", ТекКод);
	Запрос.УстановитьПараметр("ТипШтрихкода", ТипШтрихкода);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ТипШтрихкода", ТипШтрихкода);
	Выборка = Запрос.Выполнить();
	Если Не Выборка.Пустой() Тогда
		ТекСтрока = Выборка.Выгрузить()[0];
		СтруктураРезультата.Вставить("Владелец", ТекСтрока.Владелец);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

//Демо процедура заполнения структуры прайс-листа при выгрузке методом GetPriceList web-сервиса EquipmentService
//так же используется при выгрузке на ККМ Offline при использовании драйвера 1С:ККМ Offline
//Для заполнения используются подготовленные пустые структуры получаемые функциями из модуля МенеджерОборудованияСервисыКлиентСервер
//
Процедура ЗаполнитьПрайсЛист(ИДУстройства, СтруктураПрайсЛиста) Экспорт
	
	
КонецПроцедуры

//Демо процедура заполнения структуры товара при выгрузке методом GetGood web-сервиса EquipmentService
Процедура ЗаполнитьТовар(ИДУстройства, СтруктураТовара, Штрихкод) Экспорт
	
	Номенклатура1 = МенеджерОфлайнОборудования.ПолучитьСтруктуруЗаписиМассиваТовары();
	Номенклатура1.Наименование = "МИНСК-АТЛАНТ 126";
	Номенклатура1.Артикул = "МИНСК126";
	Номенклатура1.Весовой = Ложь;
	Номенклатура1.ЕдиницаИзмерения = "шт";
	Номенклатура1.ИмеетУпаковки = Ложь;
	Номенклатура1.ИмеетХарактеристики = Ложь;
	Номенклатура1.Код = "11001";
	Номенклатура1.КодГруппы = "10002";
	Номенклатура1.СтавкаНДС = "18";
	Номенклатура1.Услуга = Ложь;
	Номенклатура1.Цена = "18001.89";
	Номенклатура1.Штрихкод = "2900001575768";
	Номенклатура1.Остаток = "13";
	Номенклатура1.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	
	СтруктураТовара.Товары.Добавить(Номенклатура1);
	
КонецПроцедуры

//Демо процедура заполнения ответа web-сервиса EquipmentService на вызов метода PostDocs
//В процедуру, через параметр "Документы", передается структура принимаемых документов
Процедура ЗагрузитьДокумент(ИДУстройства, СтруктураОтвета, Документы) Экспорт
	
	СтруктураОтвета.Успешно = Истина;
	СтруктураОтвета.Описание = "Документы успешно загружены";
	
	СтруктураОтвета.Успешно = Ложь;
	СтруктураОтвета.Описание = "Документы не загружены!";
	
КонецПроцедуры

//Демо процедура заполнения массива типов документов, поддерживаемых конфигурацией
//Вызывается методом GetDocTypes web-сервиса EquipmentService
Процедура ЗаполнитьТипыДокументов(МассивТипов) Экспорт
	
	
КонецПроцедуры

//Демо процедура заполнения структуры настроек при выгрузке методом GetSettings web-сервиса EquipmentService
//так же используется при выгрузке на ККМ Offline при использовании драйвера 1С:ККМ Offline
//Для заполнения используются подготовленные пустые структуры получаемые функциями из модуля МенеджерОборудованияСервисыКлиентСервер
//
Процедура ЗаполнитьНастройкиУстройства(ИДУстройства, Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСКодамиМагнитыхКарт

// Функция возвращает результат поиска клиента в справочнике по коду магнитной карты.
//
// Параметры:
// МКод - Строка - магнитный код.
//
// Возвращаемое значение:
// СправочникСсылкаКлиенты / Неопределено
//
Функция НайтиКлиентаПоМК(МКод) Экспорт
	
	Клиент = Справочники._ДемоКлиенты.НайтиПоРеквизиту("НомерКарты", МКод);
	Если Клиент.Пустая() Тогда
		Клиент = Неопределено;
	КонецЕсли;
	Возврат Клиент;
	
КонецФункции

// Функция возвращает результат проверки кода магнитной карты на предмет уникальности в информационной базе.
//
// Если объект уже записан и редактируется, тогда для исключения этого объекта из результат запроса
// добавляется дополнительное условие и устанавливается параметр.
//
// Параметры:
// СпрОбъект - СправочникОбъект.Клиенты - элемент справочника Клиенты.
//
// Возвращаемое значение:
// Булево - результат проверки.
//
Функция ПроверитьУникальностьМагнитногоКода(СпрОбъект) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	| _ДемоКлиенты.НомерКарты
	|ИЗ
	| Справочник._ДемоКлиенты КАК _ДемоКлиенты
	|ГДЕ
	|	_ДемоКлиенты.НомерКарты = &МКод";
	МКод = СпрОбъект.НомерКарты;
	Запрос.УстановитьПараметр("МКод", МКод);
	Если НЕ СпрОбъект.ЭтоНовый() Тогда
		ЭлементСсылка = СпрОбъект.Ссылка;
		Запрос.Текст = Запрос.Текст + " И _ДемоКлиенты.Ссылка <> &ЭлементСсылка";
		Запрос.УстановитьПараметр("ЭлементСсылка", ЭлементСсылка);
	КонецЕсли;
	Результат = Запрос.Выполнить().Пустой();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСФискальнымРегистратором

// Функция возвращает подключенное устройство печати.
//
// Возвращаемое значение:
// Результат - СправочникСсылкаПодключаемоеОборудование
//
Функция ВернутьИдентификаторУстройстваДляПечатиДокументов() Экспорт
	
	Результат = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	(ПодключаемоеОборудование.ТипОборудования = &ФР Или ПодключаемоеОборудование.ТипОборудования = &ПЧ  Или ПодключаемоеОборудование.ТипОборудования = &ККТ)
	|	И ПодключаемоеОборудование.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ФР" , Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
	Запрос.УстановитьПараметр("ПЧ" , Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков);
	Запрос.УстановитьПараметр("ККТ", Перечисления.ТипыПодключаемогоОборудования.ККТ);
	
	Оборудование = Запрос.Выполнить().Выгрузить();
	
	Если Оборудование.Количество() = 1 Тогда
		Результат = Оборудование[0].Ссылка;
	Иначе	
		Результат = Константы.ФР.Получить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Функция выбирает чеки, пробитые в текущую смену и присваивает им статус Архивный.
//
// Возвращаеомое значение:
// Результат - Булево - результат записи документов.
//
Функция ЗаархивироватьДокументыПередЗакрытиемСмены() Экспорт
	Возврат Истина;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расходная.Ссылка
	|ИЗ
	|	Документ.Расходная КАК Расходная";
	
	ВыборкаДокументов = Запрос.Выполнить().Выгрузить();
	
	Результат = Истина;
	НачатьТранзакцию();
	Для Каждого Документ Из ВыборкаДокументов Цикл
		
		ДокОбъект = Документ.Ссылка.ПолучитьОбъект();
		ДокОбъект.Архивный = Истина;
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			Результат = Ложь;
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
	Если НЕ Результат Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает распределение выручки по секциям фискального регистратора.
//
Функция ПолучитьРаспределениеВыручкиПоСекциям(НастройкаРаспределения) Экспорт

	Результат = Новый Структура;   

	СоответствиеВидовНоменклатурыСекциям = Новый Соответствие();
	Результат.Вставить("СекцияПоУмолчанию", 1);
	Результат.Вставить("СоответствиеВидовНоменклатурыСекциям", СоответствиеВидовНоменклатурыСекциям);

	Распределение = НастройкаРаспределения;

	Если (Распределение = Неопределено) Или (Распределение = Справочники._ДемоНастройкиРаспределенияВыручкиПоСекциямФР.ПустаяСсылка()) Тогда
		// Получаем распределение по умолчанию.
		Распределение = Справочники._ДемоНастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию;
	КонецЕсли;

	Результат.СекцияПоУмолчанию = Распределение.СекцияПоУмолчанию;  
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	РаспределениеВыручкиПоСекциямФР.НомерСекции,
	|	РаспределениеВыручкиПоСекциямФР.ВидНоменклатуры
	|ИЗ
	|	Справочник._ДемоНастройкиРаспределенияВыручкиПоСекциямФР.СоответствиеВидовНоменклатурыСекциям КАК РаспределениеВыручкиПоСекциямФР
	|ГДЕ РаспределениеВыручкиПоСекциямФР.Ссылка = &Идентификатор";

	Запрос.УстановитьПараметр("Идентификатор", Распределение.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.СоответствиеВидовНоменклатурыСекциям.Вставить(ВыборкаДетальныеЗаписи.ВидНоменклатуры, ВыборкаДетальныеЗаписи.НомерСекции);
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Заполнить cоответствие cекций фискального регистратора для табличной части.
// 
Процедура ЗаполнитьСоответствиеСекцийДляТабличнойЧасти(НастройкаРаспределения, Знач Товары, ТаблицаТоваровСоответствияCекциям) Экспорт
	
	РаспределениеВидовНоменклатурыПоСекциям = ПолучитьРаспределениеВыручкиПоСекциям(НастройкаРаспределения);
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		ВидНоменклатуры = СтрокаТЧ.Номенклатура.ВидНоменклатуры;
		Секция = РаспределениеВидовНоменклатурыПоСекциям.СоответствиеВидовНоменклатурыСекциям.Получить(ВидНоменклатуры);
		Если Секция = Неопределено Тогда
			ТаблицаТоваровСоответствияCекциям.Вставить(СтрокаТЧ.НомерСтроки, РаспределениеВидовНоменклатурыПоСекциям.СекцияПоУмолчанию);
		Иначе
			ТаблицаТоваровСоответствияCекциям.Вставить(СтрокаТЧ.НомерСтроки, Секция);
		КонецЕсли
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Функция возвращает результат проверки общей структуры адресов электронной почты клиента
// на корректность записи.
//
// Параметры:
// АдресЭП - Строка - адрес или несколько адресов электронной почты.
//
// Возвращаемое значение:
// Результат - Булево - результат проверки.
//
Функция ПроверитьКорректностьЗаписиАдресаЭлектроннойПочты(АдресЭП) Экспорт
	
	Результат = Истина;
	Если НЕ ПустаяСтрока(АдресЭП) Тогда
		
		ЧислоАдресов = СтрЧислоВхождений(АдресЭП,"@");
		Если ЧислоАдресов = 0 Тогда
			
			Результат = Ложь;
			
		Иначе
			
			Для к = 1 По ЧислоАдресов Цикл
				
				АТ = Найти(АдресЭП, "@");
				
				ИмяПользователя = Лев(АдресЭП,АТ-1);
				
				Если (ПустаяСтрока(ИмяПользователя) ИЛИ Найти(ИмяПользователя," ") <> 0) Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
				АдресЭП = Сред(АдресЭП, АТ+1);
				Разделитель = НайтиРазделительАдресов(АдресЭП);
				Если Разделитель = СтрДлина(АдресЭП) Тогда
					Домен = Лев(АдресЭП,Разделитель);
				Иначе
					Домен = Лев(АдресЭП,Разделитель-1);
				КонецЕсли;
				
				Если (ПустаяСтрока(Домен) ИЛИ Найти(Домен," ") <> 0) Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
				ЧислоТочек = СтрЧислоВхождений(Домен,".");
				
				Если НЕ (ЧислоТочек > 0 И ЧислоТочек <=2) Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
				АдресЭП = СокрЛ(Сред(АдресЭП,Разделитель+1));
				
			КонецЦикла
			
		КонецЕсли;
		
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Функция возвращает позицию символа, разделяющего два соседних адреса электронной почты,
// записанных в одной строке.
//
// Параметры:
// Стр - Строка - строка с адресам электронной почты.
//
// Возвращаемое значение:
// Результат - Число - позиция разделителя.
//
Функция НайтиРазделительАдресов(Стр)
	
	Результат = Найти(Стр," ");
	Если Результат = 0 Тогда
		Результат = Найти(Стр,",");
	КонецЕсли;
	Если Результат = 0 Тогда
		Результат = Найти(Стр,";");
	КонецЕсли;
	Если Результат = 0 Тогда
		Результат = СтрДлина(Стр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает ф.о "Использовать подключаемое оборудование".
//
Функция ИспользоватьПодключаемоеОборудование() Экспорт
	
	Возврат Истина;//ПолучитьФункциональнуюОпцию("_ДемоИспользованиеПодключаемогоОборудования");
	
КонецФункции

// Получить максимальный код SKU.
//
Функция ПолучитьМаксимальныйКодSKU() Экспорт
	
	Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(_ДемоНоменклатура.SKU) КАК SKU
	|ИЗ
	|	Справочник._ДемоНоменклатура КАК _ДемоНоменклатура";
	
	Запрос = Новый Запрос(Текст);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.SKU) Тогда
			Результат = Выборка.SKU + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает первые 50 элементов из справочника Номенклатура.
//
// Возвращаемое значение:
// Результат - ТаблицаЗначений - таблица товаров.
//
Функция ВыбратьДемоДанные() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 50
	|	_ДемоНоменклатура.Ссылка КАК Номенклатура,
	|	_ДемоНоменклатура.Характеристика,
	|	_ДемоНоменклатура.ЕдиницаИзмерения,
	|	_ДемоНоменклатура.Цена,
	|	_ДемоНоменклатура.СтавкаНДС,
	|	_ДемоНоменклатура.Цена КАК Сумма
	|ИЗ
	|	Справочник._ДемоНоменклатура КАК _ДемоНоменклатура
	|ГДЕ
	|	_ДемоНоменклатура.ЭтоГруппа = ЛОЖЬ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Вставить(6,"Количество");
	Результат.Колонки.Вставить(7,"СуммаНДС");
	
	Для Каждого СтрокаТЗ Из Результат Цикл
		СтрокаТЗ.Количество = 1;
		Ставка = ВернутьСтавкуНДС(СтрокаТЗ.СтавкаНДС);
		Если Ставка <> 0 Тогда
			Сумма = СтрокаТЗ.Сумма;
			СтрокаТЗ.СуммаНДС = Окр(Сумма - Сумма/( 1 + Ставка /100),2);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает значение ставки НДС с типом Число для рассчета Суммы НДС.
//
Функция ВернутьСтавкуНДС(СтавкаНДС)
	
	Если СтавкаНДС = Перечисления._ДемоСтавкиНДС.НДС10 Тогда
		Ставка = 10;
	ИначеЕсли СтавкаНДС = Перечисления._ДемоСтавкиНДС.НДС18 Тогда
		Ставка = 18;
	Иначе
		Ставка = 0;
	КонецЕсли;
	
	Возврат Ставка;
	
КонецФункции

#КонецОбласти
